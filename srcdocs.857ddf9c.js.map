{"version":3,"sources":["../src/tween.js","../src/constants.js","../src/tools.js","../src/drawPointerImage.js","../src/drawRadialFrameImage.js","../src/carbonBuffer.js","../src/punchedSheetBuffer.js","../src/brushedMetalTexture.js","../src/drawRadialBackgroundImage.js","../src/drawRadialCustomImage.js","../src/createKnobImage.js","../src/definitions.js","../src/drawRadialForegroundImage.js","../src/createLedImage.js","../src/createLcdBackgroundImage.js","../src/createMeasuredValueImage.js","../src/createTrendIndicator.js","../src/drawTitleImage.js","../src/odometer.js","../src/radial.js","../src/radialBargraph.js","../src/radialVertical.js","../src/drawLinearBackgroundImage.js","../src/drawLinearForegroundImage.js","../src/drawLinearFrameImage.js","../src/linear.js","../src/linearBargraph.js","../src/displaySingle.js","../src/displayMulti.js","../src/level.js","../src/drawRoseImage.js","../src/compass.js","../src/windDirection.js","../src/horizon.js","../src/led.js","../src/clock.js","../src/battery.js","../src/stopwatch.js","../src/altimeter.js","../src/trafficlight.js","../src/lightbulb.js","../src/steelseries.js","index.js"],"names":["Tween","Delegate","create","o","f","a","i","l","arguments","length","aP","concat","apply","obj","prop","func","begin","finish","duration","suffixe","init","t","prototype","b","c","d","change","prevTime","prevPos","looping","_duration","_time","_pos","_position","_startTime","_finish","name","_listeners","setTime","getDuration","rewind","update","broadcastMessage","target","type","stop","getTime","setDuration","setPosition","p","Math","round","getPosition","undefined","setFinish","getFinish","addListener","start","startEnterFrame","fixTime","fforward","stopEnterFrame","isPlaying","onEnterFrame","nextFrame","setTimeout","getTimer","playing","continueTo","resume","yoyo","removeListener","push","splice","arr","e","shift","Date","backEaseIn","s","backEaseOut","backEaseInOut","elasticEaseIn","abs","PI","asin","pow","sin","elasticEaseOut","elasticEaseInOut","bounceEaseOut","bounceEaseIn","bounceEaseInOut","strongEaseInOut","regularEaseIn","regularEaseOut","regularEaseInOut","strongEaseIn","strongEaseOut","BackgroundColorDef","LcdColorDef","ColorDef","LedColorDef","GaugeTypeDef","OrientationDef","KnobTypeDef","KnobStyleDef","FrameDesignDef","PointerTypeDef","ForegroundTypeDef","LabelNumberFormatDef","TickLabelOrientationDef","TrendStateDef","gradientStart","gradientFraction","gradientStop","labelColor","symbolColor","gradientStartColor","gradientFraction1Color","gradientFraction2Color","gradientFraction3Color","gradientStopColor","textColor","veryDark","dark","medium","light","lighter","veryLight","innerColor1_ON","innerColor2_ON","outerColor_ON","coronaColor","innerColor1_OFF","innerColor2_OFF","outerColor_OFF","style","design","format","state","HALF_PI","TWO_PI","RAD_FACTOR","DEG_FACTOR","doc","document","lcdFontName","stdFontName","RgbaColor","r","g","red","green","blue","alpha","parseInt","substr","range","getRed","setRed","getGreen","setGreen","getBlue","setBlue","getAlpha","setAlpha","getRgbaColor","getRgbColor","getHexColor","toString","ConicalGradient","fractions","colors","limit","fillCircle","ctx","centerX","centerY","innerX","outerX","angle","pixels","x","y","dx","dy","dy2","distance","indx","pixColor","buffer","radius","ceil","diameter","createImageData","sqrt","atan2","getColorFromFraction","data","createBuffer","getContext","putImageData","drawImage","fillRect","width","height","thicknessX","thicknessY","width2","height2","GradientWrapper","end","getColorAt","fraction","lowerLimit","interpolationFraction","lowerIndex","upperLimit","upperIndex","getStart","getEnd","hex","hexColor","charAt","substring","color","sourceColor","destinationColor","returnRawData","INT_TO_FLOAT","sourceRed","sourceGreen","sourceBlue","sourceAlpha","fractionRed","fractionGreen","fractionBlue","fractionAlpha","toFixed","section","calcNiceNumber","exponent","floor","log10","niceFraction","roundedRectangle","w","h","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","createElement","drawToBuffer","drawFunction","getColorValues","colorData","fillStyle","rect","fill","getImageData","customColorDef","VERY_DARK","DARK","LIGHT","LIGHTER","VERY_LIGHT","values","rgbaCol","darker","rgbToHsl","min","max","hue","saturation","lightness","delta","hsbToRgb","brightness","q","rgbToHsb","value","wrap","lower","upper","getShortestAngle","from","to","log","LN10","requestAnimFrame","window","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","callback","getCanvasContext","elementOrId","element","String","getElementById","drawPointerImage","size","ptrType","ptrColor","lblColor","ptrBuffer","ptrCtx","grad","cacheKey","cache","createLinearGradient","addColorStop","lineWidth","lineCap","lineJoin","strokeStyle","stroke","bezierCurveTo","arc","createRadialGradient","drawRadialFrameImage","frameDesign","imageWidth","imageHeight","radFBuffer","radFCtx","save","clip","restore","globalCompositeOperation","carbonBuffer","canvas","offsetY","punchedSheetBuffer","brushedMetalTexture","amount","monochrome","shine","random","vari","clamp","C","startX","startY","endX","endY","sinArr","outCanvas","outCanvasContext","inPixels","outPixels","tr","tg","tb","n","variation","horizontalBlur","inPix","outPix","mul","totR","totG","totB","drawRadialBackgroundImage","backgroundColor","radBBuffer","radBCtx","mono","textureColor","texture","turnRadius","stepSize","backgroundOffsetX","createPattern","translate","rotate","drawRadialCustomImage","img","drawWidth","drawHeight","createKnobImage","knob","knobBuffer","knobCtx","maxPostCenterX","maxPostCenterY","DARK_GRAY","SATIN_GRAY","LIGHT_GRAY","WHITE","BLACK","BEIGE","BROWN","RED","GREEN","BLUE","ANTHRACITE","MUD","PUNCHED_SHEET","CARBON","STAINLESS","BRUSHED_METAL","BRUSHED_STAINLESS","TURNED","lcdColor","ORANGE","YELLOW","GRAY","BLUE2","BLUE_BLACK","BLUE_DARKBLUE","BLUE_GRAY","STANDARD","STANDARD_GREEN","BLUE_BLUE","RED_DARKRED","DARKBLUE","LILA","BLACKRED","DARKGREEN","AMBER","LIGHTBLUE","SECTIONS","CYAN","MAGENTA","RAITH","GREEN_LCD","JUG_GREEN","ledColor","RED_LED","GREEN_LED","BLUE_LED","ORANGE_LED","YELLOW_LED","CYAN_LED","MAGENTA_LED","gaugeType","TYPE1","TYPE2","TYPE3","TYPE4","TYPE5","orientation","NORTH","SOUTH","EAST","WEST","knobType","STANDARD_KNOB","METAL_KNOB","knobStyle","BRASS","SILVER","BLACK_METAL","METAL","SHINY_METAL","STEEL","CHROME","GOLD","TILTED_GRAY","TILTED_BLACK","GLOSSY_METAL","pointerType","TYPE6","TYPE7","TYPE8","TYPE9","TYPE10","TYPE11","TYPE12","TYPE13","TYPE14","TYPE15","TYPE16","foregroundType","labelNumberFormat","FRACTIONAL","SCIENTIFIC","tickLabelOrientation","NORMAL","HORIZONTAL","TANGENT","trendState","UP","STEADY","DOWN","OFF","drawRadialForegroundImage","withCenterKnob","radFgBuffer","radFgCtx","gradHighlight","gradHighlight2","knobSize","knobX","knobY","shadowOffset","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","GaugeType","Orientation","createLedImage","ledBuffer","ledCtx","ledCenterX","ledCenterY","createLcdBackgroundImage","lcdBuffer","lcdCtx","wB","hB","rB","wF","hF","rF","JSON","stringify","createMeasuredValueImage","indicatorColor","radial","vertical","indicatorBuffer","indicatorCtx","createTrendIndicator","onSection","trendBuffer","trendCtx","drawUpArrow","drawEquals","drawDownArrow","drawTitleImage","titleString","unitString","altPos","textAlign","textBaseline","font","fillText","odometer","parameters","_context","tween","digitHeight","digitWidth","stdFont","columnHeight","verticalSpace","zeroOffset","backgroundBuffer","backgroundContext","foregroundBuffer","foregroundContext","digitBuffer","digitContext","decimalBuffer","decimalContext","digits","decimals","decimalBackColor","decimalForeColor","valueBackColor","valueForeColor","wobbleFactor","initialized","repainting","wobble","setValueAnimated","newVal","gauge","parseFloat","onMotionChanged","event","repaint","onMotionFinished","setValue","getValue","drawDigits","pos","num","numb","frac","prevNum","val","audioElement","minValue","maxValue","niceScale","threshold","thresholdRising","area","FrameDesign","frameVisible","BackgroundColor","backgroundVisible","PointerType","pointerColor","KnobType","KnobStyle","LcdColor","lcdVisible","lcdDecimals","digitalFont","fractionalScaleDecimals","LedColor","ledVisible","userLedColor","userLedVisible","thresholdVisible","minMeasuredValueVisible","maxMeasuredValueVisible","ForegroundType","foregroundVisible","LabelNumberFormat","playAlarm","alarmSound","customLayer","TickLabelOrientation","trendVisible","trendColors","useOdometer","odometerParams","odometerUseValue","fullScaleDeflectionTime","mainCtx","setAttribute","freeAreaAngle","rotationOffset","angleRange","angleStep","odoPosX","trendUpBuffer","trendSteadyBuffer","trendDownBuffer","trendOffBuffer","odoGauge","odoBuffer","odoContext","odoValue","self","minMeasuredValue","maxMeasuredValue","ledBlinking","userLedBlinking","ledTimerId","userLedTimerId","trendIndicator","TrendState","trendSize","trendPosX","trendPosY","ledSize","ledPosX","ledPosY","userLedPosX","userLedPosY","lcdFontHeight","lcdFont","lcdHeight","lcdWidth","lcdPosX","lcdPosY","odoPosY","niceMinValue","niceMaxValue","niceRange","minorTickSpacing","majorTickSpacing","frameBuffer","frameContext","ledBufferOn","ledContextOn","ledBufferOff","ledContextOff","userLedBufferOn","userLedContextOn","userLedBufferOff","userLedContextOff","userLedBuffer","minMeasuredValueBuffer","minMeasuredValueCtx","maxMeasuredValueBuffer","maxMeasuredValueCtx","pointerBuffer","pointerContext","drawLcdText","drawAreaSectionImage","filled","startAngle","stopAngle","drawFrame","frame","drawBackground","background","drawLed","led","drawUserLed","userLed","drawPointer","pointer","drawForeground","foreground","drawTrend","trend","drawOdo","odo","maxNoOfMajorTicks","maxNoOfMinorTicks","calculate","sectionIndex","areaIndex","fontSize","textRotationAngle","rotationStep","valueCounter","majorTickCounter","OUTER_POINT","MAJOR_INNER_POINT","MED_INNER_POINT","MINOR_INNER_POINT","TEXT_TRANSLATE_X","TEXT_WIDTH","MAX_VALUE_ROUNDED","toPrecision","drawTickmarksImage","thresholdBuffer","thresholdCtx","gradThreshold","createThresholdImage","Odometer","knobVisible","resetBuffers","buffers","resetFrame","resetBackground","resetLed","resetUserLed","resetPointer","resetForeground","toggleAndRepaintLed","toggleAndRepaintUserLed","blink","blinking","setInterval","clearInterval","newValue","targetValue","play","pause","setOdoValue","getOdoValue","time","resetMinMeasuredValue","resetMaxMeasuredValue","setMinMeasuredValueVisible","visible","setMaxMeasuredValueVisible","setMaxMeasuredValue","setMinMeasuredValue","setTitleString","title","setUnitString","unit","setMinValue","getMinValue","setMaxValue","getMaxValue","setThreshold","setArea","areaVal","setSection","areaSec","setThresholdVisible","setThresholdRising","rising","setLcdDecimals","setFrameDesign","newFrameDesign","setBackgroundColor","newBackgroundColor","setForegroundType","newForegroundType","setPointerType","newPointerType","setPointerColor","newPointerColor","setLedColor","newLedColor","setUserLedColor","toggleUserLed","setUserLedOnOff","on","blinkUserLed","setLedVisible","setUserLedVisible","setLcdColor","newLcdColor","setTrend","setTrendVisible","setFractionalScaleDecimals","setLabelNumberFormat","clearRect","radialBargraph","useSectionColors","valueColor","valueGradient","useValueGradient","bargraphOffset","degAngleRange","sectionAngles","isSectionsVisible","isGradientVisible","ACTIVE_LED_POS_X","ACTIVE_LED_POS_Y","LED_SIZE","LED_POS_X","LED_POS_Y","USER_LED_POS_X","USER_LED_POS_Y","activeLedBuffer","activeLedContext","drawValue","drawBargraphTrackImage","drawActiveLed","resetValue","ledTrackFrameGradient","ledTrackMainGradient","ledOffGradient","ledGradient","setValueColor","newValueColor","setSectionActive","setGradient","setGradientActive","activeLedAngle","activeLedColor","currentValue","gradRange","lastActiveLedColor","radialVertical","pointerOffset","titleWidth","unitWidth","measureText","drawLinearBackgroundImage","frameWidth","linBBuffer","linBCtx","CORNER_RADIUS","drawLinearForegroundImage","linFgBuffer","linFgCtx","foregroundGradient","fgOffset","fgOffset2","drawLinearFrameImage","linFBuffer","linFCtx","OUTER_FRAME_CORNER_RADIUS","FRAME_MAIN_CORNER_RADIUS","SUBTRACT_CORNER_RADIUS","linear","minMaxIndSize","drawLinearTicks","tickStart","tickStop","currentPos","yOffset","yRange","valuePos","drawBackgroundImage","tickCounter","scaleBoundsX","scaleBoundsY","scaleBoundsH","minorTickStart","minorTickStop","mediumTickStart","mediumTickStop","majorTickStart","majorTickStop","labelCounter","tickSpaceScaling","drawForegroundImage","foreSize","backSize","threshVal","minMaxX","minMaxY","lcdTextX","lcdTextY","lcdTextWidth","top","bottom","fullSize","valueSize","valueTop","valueStartX","valueStartY","valueStopX","valueStopY","valueBackgroundStartX","valueBackgroundStartY","valueBackgroundStopX","valueBackgroundStopY","valueBorderStartX","valueBorderStartY","valueBorderStopX","valueBorderStopY","valueForegroundStartX","valueForegroundStartY","valueForegroundStopX","valueForegroundStopY","valueBackgroundTrackGradient","valueBorderGradient","valueBackgroundGradient","thermoTweak","valueForegroundGradient","linearBargraph","sectionPixels","inActiveLedBuffer","inActiveLedContext","drawBargraphLed","bargraphled","drawInActiveLed","ledWidth2","resetBargraphLed","outerRadius","ledX","ledY","ledW","ledH","activeLeds","inactiveLeds","translateX","translateY","displaySingle","scrollTimer","unitStringVisible","headerString","headerStringVisible","valuesNumeric","alwaysScroll","autoScroll","scrolling","scrollX","textWidth","fontHeight","sectionBuffer","sectionForegroundColor","createLcdSectionImage","lcdSectionBuffer","xB","lcdBackground","rgb","hsb","rgbStart","hsbStart","rgbFraction1","hsbFraction1","rgbFraction2","hsbFraction2","rgbFraction3","hsbFraction3","rgbStop","hsbStop","startColor","fraction1Color","fraction2Color","fraction3Color","stopColor","lcdForeground","animate","sectionColor","rgbSection","hsbSection","sectionForegroundRgb","newSection","setScrolling","scroll","lcdBackgroundBuffer","lcdTextColor","lcdText","vPos","clearTimeout","displayMulti","detailString","detailStringVisible","linkAltValue","altValue","stdAltFont","lcdAltFont","setAltValue","altValueNew","valueText","altValueText","level","decimalsVisible","textOrientationFixed","rotateFace","stepValue","visibleValue","stepPointerBuffer","stepPointerContext","smlFont","POINTER_LEVEL_GRADIENT","tmpDarkColor","tmpLightColor","strokeColor_POINTER_LEVEL","POINTER_LEVEL_LEFT_GRADIENT","strokeColor_POINTER_LEVEL_LEFT","POINTER_LEVEL_RIGHT_GRADIENT","strokeColor_POINTER_LEVEL_RIGHT","drawStepPointerImage","drawRoseImage","compass","pointSymbols","pointSymbolsVisible","degreeScale","roseVisible","roseBuffer","roseContext","NORTHPOINTER2_GRADIENT","SOUTHPOINTER2_GRADIENT","NORTHPOINTER3_GRADIENT","NORTHPOINTER1_GRADIENT","SOUTHPOINTER1_GRADIENT","diff","setPointSymbols","newPointSymbols","windDirection","tweenLatest","tweenAverage","pointerTypeLatest","pointerTypeAverage","pointerColorAverage","degreeScaleHalf","lcdTitleStrings","useColorLabels","valueLatest","valueAverage","angleLatest","angleAverage","lcdPosY1","lcdPosY2","pointerBufferLatest","pointerContextLatest","pointerBufferAverage","pointerContextAverage","bLatest","CARDINAL_TRANSLATE_X","setValueLatest","getValueLatest","setValueAverage","getValueAverage","setValueAnimatedLatest","setValueAnimatedAverage","setPointerColorAverage","setPointerTypeAverage","setLcdTitleStrings","titles","horizon","tweenRoll","tweenPitch","roll","pitch","pitchPixel","pitchOffset","upsidedown","valueBuffer","valueContext","indicatorContext","imgWidth","imgHeight","HORIZON_GRADIENT","stepSizeY","stepTen","step","drawHorizonBackgroundImage","drawIndicatorImage","stepRad","drawHorizonForegroundImage","setRoll","newRoll","getRoll","setRollAnimated","setPitch","newPitch","getPitch","setPitchAnimated","setPitchOffset","newPitchOffset","toggleLed","newColor","setLedOnOff","clock","minutePointerAngle","hourPointerAngle","secondPointerAngle","tickTimer","isAutomatic","hour","minute","second","secondMovesContinuous","timeZoneOffsetHour","timeZoneOffsetMinute","secondPointerVisible","objDate","tickInterval","hourBuffer","hourContext","minuteBuffer","minuteContext","secondBuffer","secondContext","calculateAngles","tickTock","setHours","setMinutes","setSeconds","getSeconds","getMilliseconds","getUTCHours","getHours","getUTCMinutes","getMinutes","drawPointers","pointers","tickAngle","INNER_POINT","drawHourPointer","drawMinutePointer","drawSecondPointer","drawTopKnob","resetPointers","getAutomatic","setAutomatic","getHour","setHour","getMinute","setMinute","getSecond","setSecond","getTimeZoneOffsetHour","setTimeZoneOffsetHour","getTimeZoneOffsetMinute","setTimeZoneOffsetMinute","getSecondPointerVisible","setSecondPointerVisible","getSecondMovesContinuous","setSecondMovesContinuous","battery","BORDER_FRACTIONS","BORDER_COLORS","border","LIQUID_COLORS_DARK","LIQUID_COLORS_LIGHT","LIQUID_GRADIENT_FRACTIONS","liquidDark","liquidLight","createBatteryImage","stopwatch","smallPointerSize","smallPointerX_Offset","smallPointerY_Offset","smallPointerBuffer","smallPointerContext","largePointerBuffer","largePointerContext","currentMilliSeconds","minutes","seconds","milliSeconds","running","lap","text_scale","text_dist_factor","x_offset","y_offset","STD_FONT_SIZE","innerPoint","outerPoint","textPoint","STD_FONT","TEXT_DISTANCE","MIN_LENGTH","MED_LENGTH","MAX_LENGTH","TEXT_COLOR","TICK_COLOR","CENTER","RADIUS","counter","numberCounter","sinValue","cosValue","ALPHA_START","ANGLE_STEPSIZE","cos","drawSmallPointer","isRunning","reset","getMeasuredTime","rotationAngle","secRotationAngle","altimeter","angleStep100ft","angleStep1000ft","angleStep10000ft","unitAltPos","value100","value1000","value10000","TICKMARK_OFFSET","pointer10000Buffer","pointer10000Context","pointer1000Buffer","pointer1000Context","pointer100Buffer","pointer100Context","unitStringPosY","offset","minVal","maxVal","MEDIUM_STROKE","THIN_STROKE","draw1000ftPointer","draw10000ftPointer","trafficlight","prefHeight","redOn","yellowOn","greenOn","housingBuffer","housingCtx","lightGreenBuffer","lightGreenCtx","greenOnBuffer","greenOnCtx","greenOffBuffer","greenOffCtx","lightYellowBuffer","lightYellowCtx","yellowOnBuffer","yellowOnCtx","yellowOffBuffer","yellowOffCtx","lightRedBuffer","lightRedCtx","redOnBuffer","redOnCtx","redOffBuffer","redOffCtx","hatchBuffer","housingFill","housingFrontFill","lightGreenFrameFill","lightGreenInnerFill","lightGreenEffectFill","lightGreenInnerShadowFill","scale","drawLightGreen","greenOnFill","greenOnGlowFill","drawGreenOn","greenOffFill","greenOffInnerShadowFill","drawGreenOff","lightYellowFrameFill","lightYellowInnerFill","lightYellowEffectFill","lightYellowInnerShadowFill","drawLightYellow","yellowOnFill","yellowOnGlowFill","drawYellowOn","yellowOffFill","yellowOffInnerShadowFill","drawYellowOff","lightRedFrameFill","lightRedInnerFill","lightRedEffectFill","lightRedInnerShadowFill","drawLightRed","redOnFill","redOnGlowFill","drawRedOn","redOffFill","redOffInnerShadowFill","drawRedOff","setRedOn","isRedOn","setYellowOn","isYellowOn","setGreenOn","isGreenOn","lightbulb","glowColor","lightOn","offBuffer","offCtx","onBuffer","onCtx","bulbBuffer","bulbCtx","drawOff","glassOffFill","glassOnFill","hsl","drawOn","highlight","winding","winding1","contactPlate","drawBulb","setOn","isOn","setGlowColor","getGlowColor","setTransform","globalAlpha","steelseries"],"mappings":";AA8XeA,aA5Vf,SAASC,KA4VMD,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA3VfC,EAASC,OAAS,SAAUC,EAAGC,GAC1BC,IAAQC,EAARD,EAAI,GAAOE,EAAIC,UAAUC,OACxBH,IAAAA,EAAI,EAAGA,EAAIC,EAAGD,IAClBD,EAAEC,EAAI,GAAKE,UAAUF,GAEf,OAAA,WACFI,IAAAA,EAAK,GAAGC,OAAOH,UAAWH,GAC9BD,EAAEQ,MAAMT,EAAGO,KA4Bb,IAAIV,EAAQ,SAAUa,EAAKC,EAAMC,EAAMC,EAAOC,EAAQC,EAAUC,GAC1DC,KAAAA,KAAKP,EAAKC,EAAMC,EAAMC,EAAOC,EAAQC,EAAUC,IAEjDE,EAAIrB,EAAMsB,UAEdD,EAAER,IAAM,GACRQ,EAAEP,KAAO,GACTO,EAAEN,KAAO,SAAUM,EAAGE,EAAGC,EAAGC,GAAYD,OAAAA,EAAIH,EAAII,EAAIF,GACpDF,EAAEL,MAAQ,EACVK,EAAEK,OAAS,EACXL,EAAEM,SAAW,EACbN,EAAEO,QAAU,EACZP,EAAEQ,SAAU,EACZR,EAAES,UAAY,EACdT,EAAEU,MAAQ,EACVV,EAAEW,KAAO,EACTX,EAAEY,UAAY,EACdZ,EAAEa,WAAa,EACfb,EAAEc,QAAU,EACZd,EAAEe,KAAO,GACTf,EAAEF,QAAU,GACZE,EAAEgB,WAAa,GACfhB,EAAEiB,QAAU,SAAUjB,GAChBM,KAAAA,SAAW,KAAKI,MACjBV,EAAI,KAAKkB,cACR,KAAKV,SACHW,KAAAA,OAAOnB,EAAI,KAAKS,WAChBW,KAAAA,SACAC,KAAAA,iBAAiB,iBAAkB,CAACC,OAAQ,KAAMC,KAAM,qBAExDb,KAAAA,MAAQ,KAAKD,UACbW,KAAAA,SACAI,KAAAA,OACAH,KAAAA,iBAAiB,mBAAoB,CAACC,OAAQ,KAAMC,KAAM,sBAEtDvB,EAAI,GACTmB,KAAAA,SACAC,KAAAA,WAEAV,KAAAA,MAAQV,EACRoB,KAAAA,WAGPpB,EAAEyB,QAAU,WACJ,OAAA,KAAKf,OAEbV,EAAE0B,YAAc,SAAUtB,GACpBK,KAAAA,UAAmB,OAANL,GAAcA,GAAK,EAAK,IAASA,GAEpDJ,EAAEkB,YAAc,WACR,OAAA,KAAKT,WAEbT,EAAE2B,YAAc,SAAUC,GACpBrB,KAAAA,QAAU,KAAKI,KAChB3B,IAAAA,EAAqB,KAAjB,KAAKc,QAAiB,KAAKA,QAAU,GACxCN,KAAAA,IAAI,KAAKC,MAAQoC,KAAKC,MAAMF,GAAK5C,EACjC2B,KAAAA,KAAOiB,EACPP,KAAAA,iBAAiB,kBAAmB,CAACC,OAAQ,KAAMC,KAAM,qBAE/DvB,EAAE+B,YAAc,SAAU/B,GAIlB,YAHGgC,IAANhC,IACHA,EAAI,KAAKU,OAEH,KAAKhB,KAAKM,EAAG,KAAKL,MAAO,KAAKU,OAAQ,KAAKI,YAEnDT,EAAEiC,UAAY,SAAUlD,GAClBsB,KAAAA,OAAStB,EAAI,KAAKY,OAExBK,EAAEkC,UAAY,WACN,OAAA,KAAKvC,MAAQ,KAAKU,QAE1BL,EAAED,KAAO,SAAUP,EAAKC,EAAMC,EAAMC,EAAOC,EAAQC,EAAUC,GACvDX,UAAUC,SAGV4B,KAAAA,WAAa,GACbmB,KAAAA,YAAY,MACbrC,IACEA,KAAAA,QAAUA,GAEXN,KAAAA,IAAMA,EACNC,KAAAA,KAAOA,EACPE,KAAAA,MAAQA,EACRgB,KAAAA,KAAOhB,EACP+B,KAAAA,YAAY7B,GACJ,OAATH,GAA0B,KAATA,IACfA,KAAAA,KAAOA,GAERuC,KAAAA,UAAUrC,KAEhBI,EAAEoC,MAAQ,WACJjB,KAAAA,SACAkB,KAAAA,kBACAhB,KAAAA,iBAAiB,kBAAmB,CAACC,OAAQ,KAAMC,KAAM,qBAG/DvB,EAAEmB,OAAS,SAAUnB,GACfwB,KAAAA,OACAd,KAAAA,WAAesB,IAANhC,EAAmB,EAAIA,EAChCsC,KAAAA,UACAlB,KAAAA,UAENpB,EAAEuC,SAAW,WACP7B,KAAAA,MAAQ,KAAKD,UACb6B,KAAAA,UACAlB,KAAAA,UAENpB,EAAEoB,OAAS,WACLO,KAAAA,YAAY,KAAKI,YAAY,KAAKrB,SAExCV,EAAEqC,gBAAkB,WACdG,KAAAA,iBACAC,KAAAA,WAAY,EACZC,KAAAA,gBAEN1C,EAAE0C,aAAe,WACZ,KAAKD,YACHE,KAAAA,YAELC,WAAWhE,EAASC,OAAO,KAAM,KAAK6D,cAAe,MAGvD1C,EAAE2C,UAAY,WACR1B,KAAAA,SAAS,KAAK4B,WAAa,KAAKhC,YAAc,MAEpDb,EAAEwB,KAAO,WACHgB,KAAAA,iBACAnB,KAAAA,iBAAiB,kBAAmB,CAACC,OAAQ,KAAMC,KAAM,qBAE/DvB,EAAEwC,eAAiB,WACbC,KAAAA,WAAY,GAElBzC,EAAE8C,QAAU,WACD,OAAA,KAAKL,WAEhBzC,EAAE+C,WAAa,SAAUnD,EAAQC,GAC3BF,KAAAA,MAAQ,KAAKgB,KACbsB,KAAAA,UAAUrC,QACQoC,IAAnB,KAAKvB,WACHiB,KAAAA,YAAY7B,GAEbuC,KAAAA,SAENpC,EAAEgD,OAAS,WACLV,KAAAA,UACAD,KAAAA,kBACAhB,KAAAA,iBAAiB,kBAAmB,CAACC,OAAQ,KAAMC,KAAM,qBAE/DvB,EAAEiD,KAAO,WACHF,KAAAA,WAAW,KAAKpD,MAAO,KAAKe,QAElCV,EAAEmC,YAAc,SAAUrD,GAElB,OADFoE,KAAAA,eAAepE,GACb,KAAKkC,WAAWmC,KAAKrE,IAE7BkB,EAAEkD,eAAiB,SAAUpE,GAGrBG,IAFHD,IAAAA,EAAI,KAAKgC,WACZ/B,EAAID,EAAEI,OACAH,KACFD,GAAAA,EAAEC,KAAOH,EAEL,OADPE,EAAEoE,OAAOnE,EAAG,IACL,EAGF,OAAA,GAERe,EAAEqB,iBAAmB,WAChBgC,IAAUpE,EAAGqE,EAAbD,EAAM,GAAUrE,EAAI,KAAKgC,WAC5B9B,EAAIF,EAAEI,OACFH,IAAAA,EAAI,EAAGA,EAAIE,UAAUC,OAAQH,IACjCoE,EAAIF,KAAKhE,UAAUF,IAIfA,IAFLqE,EAAID,EAAIE,QAEHtE,EAAI,EAAGA,EAAIC,EAAGD,IACdD,EAAEC,GAAGqE,IACRtE,EAAEC,GAAGqE,GAAG/D,MAAMP,EAAEC,GAAIoE,IAIvBrD,EAAEsC,QAAU,WACNzB,KAAAA,WAAa,KAAKgC,WAA0B,IAAb,KAAKnC,OAE1CV,EAAE6C,SAAW,WACL,OAAA,IAAIW,MAAO/B,UAAY,KAAKf,OAEpC/B,EAAM8E,WAAa,SAAUzD,EAAGE,EAAGC,EAAGC,EAAGpB,EAAG4C,GACvC8B,IAAAA,EAAI,QACDvD,OAAAA,GAAKH,GAAKI,GAAKJ,IAAM0D,EAAI,GAAK1D,EAAI0D,GAAKxD,GAE/CvB,EAAMgF,YAAc,SAAU3D,EAAGE,EAAGC,EAAGC,EAAGpB,EAAG4C,GACxC8B,IAAAA,EAAI,QACDvD,OAAAA,IAAMH,EAAIA,EAAII,EAAI,GAAKJ,IAAM0D,EAAI,GAAK1D,EAAI0D,GAAK,GAAKxD,GAE5DvB,EAAMiF,cAAgB,SAAU5D,EAAGE,EAAGC,EAAGC,EAAGpB,EAAG4C,GAC1C8B,IAAAA,EAAI,QACJ,OAAC1D,GAAKI,EAAI,GAAK,EACXD,EAAI,GAAKH,EAAIA,IAAuB,GAAhB0D,GAAM,QAAe1D,EAAI0D,IAAMxD,EAEpDC,EAAI,IAAMH,GAAK,GAAKA,IAAuB,GAAhB0D,GAAM,QAAe1D,EAAI0D,GAAK,GAAKxD,GAEtEvB,EAAMkF,cAAgB,SAAU7D,EAAGE,EAAGC,EAAGC,EAAGpB,EAAG4C,GAC1C8B,IAAAA,EACA1D,OAAM,IAANA,EACIE,EAES,IAAZF,GAAKI,GACFF,EAAIC,GAEPyB,IACJA,EAAQ,GAAJxB,IAEApB,GAAKA,EAAI6C,KAAKiC,IAAI3D,IACtBnB,EAAImB,EACJuD,EAAI9B,EAAI,GAER8B,EAAI9B,GAAK,EAAIC,KAAKkC,IAAMlC,KAAKmC,KAAK7D,EAAInB,IAG9BA,EAAI6C,KAAKoC,IAAI,EAAG,IAAMjE,GAAK,IAAM6B,KAAKqC,KAAKlE,EAAII,EAAIsD,IAAM,EAAI7B,KAAKkC,IAAMnC,GAAM1B,IAGxFvB,EAAMwF,eAAiB,SAAUnE,EAAGE,EAAGC,EAAGC,EAAGpB,EAAG4C,GAC3C8B,IAAAA,EACA1D,OAAM,IAANA,EACIE,EAES,IAAZF,GAAKI,GACFF,EAAIC,GAEPyB,IACJA,EAAQ,GAAJxB,IAEApB,GAAKA,EAAI6C,KAAKiC,IAAI3D,IACtBnB,EAAImB,EACJuD,EAAI9B,EAAI,GAER8B,EAAI9B,GAAK,EAAIC,KAAKkC,IAAMlC,KAAKmC,KAAK7D,EAAInB,GAE/BA,EAAI6C,KAAKoC,IAAI,GAAI,GAAKjE,GAAK6B,KAAKqC,KAAKlE,EAAII,EAAIsD,IAAM,EAAI7B,KAAKkC,IAAMnC,GAAKzB,EAAID,IAEpFvB,EAAMyF,iBAAmB,SAAUpE,EAAGE,EAAGC,EAAGC,EAAGpB,EAAG4C,GAC7C8B,IAAAA,EACA1D,OAAM,IAANA,EACIE,EAEa,IAAhBF,GAAKI,EAAI,GACNF,EAAIC,GAEPyB,IACJA,EAAIxB,GAAK,GAAM,OAEXpB,GAAKA,EAAI6C,KAAKiC,IAAI3D,IACtBnB,EAAImB,EACJuD,EAAI9B,EAAI,GAER8B,EAAI9B,GAAK,EAAIC,KAAKkC,IAAMlC,KAAKmC,KAAK7D,EAAInB,GAEnCgB,EAAI,EACQhB,EAAI6C,KAAKoC,IAAI,EAAG,IAAMjE,GAAK,IAAM6B,KAAKqC,KAAKlE,EAAII,EAAIsD,IAAM,EAAI7B,KAAKkC,IAAMnC,IAA/E,GAAqF1B,EAEvFlB,EAAI6C,KAAKoC,IAAI,GAAI,IAAMjE,GAAK,IAAM6B,KAAKqC,KAAKlE,EAAII,EAAIsD,IAAM,EAAI7B,KAAKkC,IAAMnC,GAAK,GAAMzB,EAAID,IAEhGvB,EAAM0F,cAAgB,SAAUrE,EAAGE,EAAGC,EAAGC,GACpC,OAACJ,GAAKI,GAAM,EAAI,KACZD,GAAK,OAASH,EAAIA,GAAKE,EACpBF,EAAK,EAAI,KACZG,GAAK,QAAUH,GAAM,IAAM,MAASA,EAAI,KAAQE,EAC7CF,EAAK,IAAM,KACdG,GAAK,QAAUH,GAAM,KAAO,MAASA,EAAI,OAAUE,EAEnDC,GAAK,QAAUH,GAAM,MAAQ,MAASA,EAAI,SAAYE,GAG/DvB,EAAM2F,aAAe,SAAUtE,EAAGE,EAAGC,EAAGC,GAChCD,OAAAA,EAAIxB,EAAM0F,cAAcjE,EAAIJ,EAAG,EAAGG,EAAGC,GAAKF,GAElDvB,EAAM4F,gBAAkB,SAAUvE,EAAGE,EAAGC,EAAGC,GACtCJ,OAAAA,EAAII,EAAI,EACiC,GAArCzB,EAAM2F,aAAiB,EAAJtE,EAAO,EAAGG,EAAGC,GAAWF,EAED,GAA1CvB,EAAM0F,cAAkB,EAAJrE,EAAQI,EAAG,EAAGD,EAAGC,GAAe,GAAJD,EAAUD,GAGnEvB,EAAM6F,gBAAkB,SAAUxE,EAAGE,EAAGC,EAAGC,GACnCD,OAAAA,GAAKH,GAAKI,GAAKJ,EAAIA,EAAIA,EAAIA,EAAIE,GAEvCvB,EAAM8F,cAAgB,SAAUzE,EAAGE,EAAGC,EAAGC,GACjCD,OAAAA,GAAKH,GAAKI,GAAKJ,EAAIE,GAE3BvB,EAAM+F,eAAiB,SAAU1E,EAAGE,EAAGC,EAAGC,GAClC,OAACD,GAAKH,GAAKI,IAAMJ,EAAI,GAAKE,GAElCvB,EAAMgG,iBAAmB,SAAU3E,EAAGE,EAAGC,EAAGC,GACvC,OAACJ,GAAKI,EAAI,GAAK,EACXD,EAAI,EAAIH,EAAIA,EAAIE,GAEhBC,EAAI,KAAQH,GAAMA,EAAI,GAAK,GAAKE,GAEzCvB,EAAMiG,aAAe,SAAU5E,EAAGE,EAAGC,EAAGC,GAChCD,OAAAA,GAAKH,GAAKI,GAAKJ,EAAIA,EAAIA,EAAIA,EAAIE,GAEvCvB,EAAMkG,cAAgB,SAAU7E,EAAGE,EAAGC,EAAGC,GACjCD,OAAAA,IAAMH,EAAIA,EAAII,EAAI,GAAKJ,EAAIA,EAAIA,EAAIA,EAAI,GAAKE,GAEpDvB,EAAM6F,gBAAkB,SAAUxE,EAAGE,EAAGC,EAAGC,GACtC,OAACJ,GAAKI,EAAI,GAAK,EACXD,EAAI,EAAIH,EAAIA,EAAIA,EAAIA,EAAIA,EAAIE,EAE7BC,EAAI,IAAMH,GAAK,GAAKA,EAAIA,EAAIA,EAAIA,EAAI,GAAKE,GAGlCvB,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;AC/Pf,aA9HA,IAAImG,EAaAC,EAaAC,EAaAC,EAcAC,EAQAC,EAQAC,EAQAC,EAQAC,EAQAC,EAQAC,EAQAC,EAQAC,EAQAC,EACJ,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,cAAA,QAAA,wBAAA,QAAA,qBAAA,QAAA,kBAAA,QAAA,eAAA,QAAA,eAAA,QAAA,aAAA,QAAA,YAAA,QAAA,eAAA,QAAA,aAAA,QAAA,YAAA,QAAA,SAAA,QAAA,YAAA,QAAA,wBAAA,EAAA,QAAA,mBAAA,EA5HEb,QAAAA,mBAAAA,EAAqB,SAASc,EAAeC,EAAkBC,EAAcC,EAAYC,EAAajF,GAC/F6E,KAAAA,cAAgBA,EAChBC,KAAAA,iBAAmBA,EACnBC,KAAAA,aAAeA,EACfC,KAAAA,WAAaA,EACbC,KAAAA,YAAcA,EACdjF,KAAAA,KAAOA,GAsHhB,QAAA,YAAA,EA/GEgE,QAAAA,YAAAA,EAAc,SAASkB,EAAoBC,EAAwBC,EAAwBC,EAAwBC,EAAmBC,GAC/HL,KAAAA,mBAAqBA,EACrBC,KAAAA,uBAAyBA,EACzBC,KAAAA,uBAAyBA,EACzBC,KAAAA,uBAAyBA,EACzBC,KAAAA,kBAAoBA,EACpBC,KAAAA,UAAYA,GAyGrB,QAAA,SAAA,EAlGEtB,QAAAA,SAAAA,EAAW,SAASuB,EAAUC,EAAMC,EAAQC,EAAOC,EAASC,GACrDL,KAAAA,SAAWA,EACXC,KAAAA,KAAOA,EACPC,KAAAA,OAASA,EACTC,KAAAA,MAAQA,EACRC,KAAAA,QAAUA,EACVC,KAAAA,UAAYA,GA4FrB,QAAA,YAAA,EArFE3B,QAAAA,YAAAA,EAAc,SAAS4B,EAAgBC,EAAgBC,EAAeC,EAAaC,EAAiBC,EAAiBC,GAC9GN,KAAAA,eAAiBA,EACjBC,KAAAA,eAAiBA,EACjBC,KAAAA,cAAgBA,EAChBC,KAAAA,YAAcA,EACdC,KAAAA,gBAAkBA,EAClBC,KAAAA,gBAAkBA,EAClBC,KAAAA,eAAiBA,GA8E1B,QAAA,aAAA,EAvEEjC,QAAAA,aAAAA,EAAe,SAAS3D,GACjBA,KAAAA,KAAOA,GAsEhB,QAAA,eAAA,EA/DE4D,QAAAA,eAAAA,EAAiB,SAAS5D,GACnBA,KAAAA,KAAOA,GA8DhB,QAAA,YAAA,EAvDE6D,QAAAA,YAAAA,EAAc,SAAS7D,GAChBA,KAAAA,KAAOA,GAsDhB,QAAA,aAAA,EA/CE8D,QAAAA,aAAAA,EAAe,SAAS+B,GACjBA,KAAAA,MAAQA,GA8CjB,QAAA,eAAA,EAvCE9B,QAAAA,eAAAA,EAAiB,SAAS+B,GACnBA,KAAAA,OAASA,GAsClB,QAAA,eAAA,EA/BE9B,QAAAA,eAAAA,EAAiB,SAAShE,GACnBA,KAAAA,KAAOA,GA8BhB,QAAA,kBAAA,EAvBEiE,QAAAA,kBAAAA,EAAoB,SAASjE,GACtBA,KAAAA,KAAOA,GAsBhB,QAAA,qBAAA,EAfEkE,QAAAA,qBAAAA,EAAuB,SAAS6B,GACzBA,KAAAA,OAASA,GAclB,QAAA,wBAAA,EAPE5B,QAAAA,wBAAAA,EAA0B,SAASnE,GAC5BA,KAAAA,KAAOA,GAMhB,QAAA,cAAA,EACEoE,QAAAA,cAAAA,EAAgB,SAAS4B,GAClBA,KAAAA,MAAQA;;ACifjB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,EAAA,QAAA,qBAAA,EAAA,QAAA,QAAA,EAAA,QAAA,eAAA,EAAA,QAAA,iBAAA,EAAA,QAAA,aAAA,EAAA,QAAA,aAAA,EAAA,QAAA,eAAA,EAAA,QAAA,eAAA,EAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,QAAA,MAAA,EAAA,QAAA,OAAA,EAAA,QAAA,QAAA,EAAA,QAAA,KAAA,EAAA,QAAA,iBAAA,EAAA,QAAA,iBAAA,EAAA,QAAA,iBAAA,QAAA,gBAAA,QAAA,gBAAA,QAAA,UAAA,QAAA,YAAA,QAAA,YAAA,QAAA,IAAA,QAAA,WAAA,QAAA,WAAA,QAAA,GAAA,QAAA,OAAA,QAAA,aAAA,EAhnBA,IAAA,EAAA,QAAA,eAIWC,EAAoB,GAAV3F,KAAKkC,GAC1B0D,EAAmB,EAAV5F,KAAKkC,GACdA,EAAKlC,KAAKkC,GACV2D,EAAa7F,KAAKkC,GAAK,IACvB4D,EAAa,IAAM9F,KAAKkC,GACxB6D,EAAMC,SACNC,EAAc,yCACdC,EAAc,2BAqmBd,QAAA,YAAA,EAAA,QAAA,YAAA,EAAA,QAAA,IAAA,EAAA,QAAA,WAAA,EAAA,QAAA,WAAA,EAAA,QAAA,GAAA,EAAA,QAAA,OAAA,EAAA,QAAA,QAAA,EAnmBO,IAAIC,EAAY,SAASC,EAAGC,EAAGhI,EAAGlB,GACnCmJ,IAAAA,EAAKC,EAAOC,EAAMC,EAEG,IAArBnJ,UAAUC,QAEZc,EAAIqI,SAASN,EAAEO,OAAO,EAAG,GAAI,IAC7BN,EAAIK,SAASN,EAAEO,OAAO,EAAG,GAAI,IAC7BP,EAAIM,SAASN,EAAEO,OAAO,EAAG,GAAI,IAC7BxJ,EAAI,GAC0B,IAArBG,UAAUC,SACnBJ,EAAI,GAIJmJ,EAAMM,EAAMR,EAAG,KACfG,EAAQK,EAAMP,EAAG,KACjBG,EAAOI,EAAMvI,EAAG,KAChBoI,EAAQG,EAAMzJ,EAAG,GAKd0J,KAAAA,OAAS,WACLP,OAAAA,GAGJQ,KAAAA,OAAS,SAASV,GACrBE,EAAMM,EAAMR,EAAG,MAGZW,KAAAA,SAAW,WACPR,OAAAA,GAGJS,KAAAA,SAAW,SAASX,GACvBE,EAAQK,EAAMP,EAAG,MAGdY,KAAAA,QAAU,WACNT,OAAAA,GAGJU,KAAAA,QAAU,SAAS7I,GACtBmI,EAAOI,EAAMvI,EAAG,MAGb8I,KAAAA,SAAW,WACPV,OAAAA,GAGJW,KAAAA,SAAW,SAASjK,GACvBsJ,EAAQG,EAAMzJ,EAAG,IAGdkK,KAAAA,aAAe,WACX,MAAA,QAAUf,EAAM,KAAOC,EAAQ,KAAOC,EAAO,KAAOC,EAAQ,KAGhEa,KAAAA,YAAc,WACV,MAAA,OAAShB,EAAM,KAAOC,EAAQ,KAAOC,EAAO,KAGhDe,KAAAA,YAAc,WACV,MAAA,IAAMjB,EAAIkB,SAAS,IAAMjB,EAAMiB,SAAS,IAAMhB,EAAKgB,SAAS,MAoiBvE,QAAA,UAAA,EAhiBO,IAAIC,EAAkB,SAASC,EAAWC,GAC3CC,IACFxK,EADEwK,EAAQF,EAAUnK,OAAS,EAI1BH,IAAAA,EAAI,EAAGA,GAAKwK,EAAOxK,IACtBsK,EAAUtK,GAAKwI,EAAS8B,EAAUtK,GAAK8E,EAGpC2F,KAAAA,WAAa,SAASC,EAAKC,EAASC,EAASC,EAAQC,GACpDC,IAAAA,EAGFC,EACAC,EAAGC,EAAGC,EAAIC,EAAIC,EAAKC,EACnBC,EAAMC,EACNC,EALAC,EAAS9I,KAAK+I,KAAKb,GACnBc,EAAoB,EAATF,EAwCRR,IAHLF,EAASN,EAAImB,gBAAgBD,EAAUA,GAC/B,IAEHV,EAAI,EAAGA,EAAIU,EAAUV,IAGnBD,IADLI,GADAD,EAAKM,EAASR,GACHE,EACNH,EAAI,EAAGA,EAAIW,EAAUX,IAGpBK,GAFJH,EAAKF,EAAIS,GACTJ,EAAW1I,KAAKkJ,KAAMX,EAAKA,EAAME,KACjBK,GAAUJ,GAAYT,EAAQ,CAEvC7K,IADL+K,EAAQnI,KAAKmJ,MAAMZ,EAAIC,GAClBpL,EAAI,EAAGA,EAAIwK,EAAOxK,IACjB+K,GAAST,EAAUtK,IAAM+K,EAAQT,EAAUtK,EAAI,KACjDwL,EAAWQ,EAAqBzB,EAAOvK,GAAIuK,EAAOvK,EAAI,GAAIsK,EAAUtK,EAAI,GAAKsK,EAAUtK,GAAI+K,EAAQT,EAAUtK,IAAI,IAIrHuL,GAASK,EAAWV,GAAKU,EAAW,EAAU,EAAJX,EAC1CD,EAAOiB,KAAKV,GAAQC,EAAS,GAC7BR,EAAOiB,KAAKV,EAAO,GAAKC,EAAS,GACjCR,EAAOiB,KAAKV,EAAO,GAAKC,EAAS,GACjCR,EAAOiB,KAAKV,EAAO,GApBjB,KA0BRE,EAASS,EAAaN,EAAUA,IACbO,WAAW,MACpBC,aAAapB,EAAQ,EAAG,GAElCN,EAAI2B,UAAUZ,EAAQd,EAAUe,EAAQd,EAAUc,IAG/CY,KAAAA,SAAW,SAAS5B,EAAKC,EAASC,EAAS2B,EAAOC,EAAQC,EAAYC,GACrE3B,IAAAA,EACF4B,EACAC,EACA5B,EACAC,EAAGC,EAAGC,EAAIC,EACVG,EACAC,EACAC,EAaGP,IATLyB,GAFAJ,EAAQ3J,KAAK+I,KAAKY,IAED,EACjBK,GAFAJ,EAAS5J,KAAK+I,KAAKa,IAEA,EACnBC,EAAa7J,KAAK+I,KAAKc,GACvBC,EAAa9J,KAAK+I,KAAKe,GAGvB1B,EAASN,EAAImB,gBAAgBU,EAAOC,GAC5B,IAEHtB,EAAI,EAAGA,EAAIsB,EAAQtB,IAEjBD,IADLG,EAAKwB,EAAU1B,EACVD,EAAI,EAAGA,EAAIsB,EAAOtB,IAAK,CAUrBjL,IATDkL,EAAIwB,GAAcxB,GAAKsB,EAASE,GAE9BzB,EAAIwB,GAAcxB,EAAIsB,EAAQE,IAEhCxB,EAAIsB,EAAQE,GAGhBtB,EAAKF,EAAI0B,EACT5B,EAAQnI,KAAKmJ,MAAMZ,EAAIC,GAClBpL,EAAI,EAAGA,EAAIwK,EAAOxK,IACjB+K,GAAST,EAAUtK,IAAM+K,EAAQT,EAAUtK,EAAI,KACjDwL,EAAWQ,EAAqBzB,EAAOvK,GAAIuK,EAAOvK,EAAI,GAAIsK,EAAUtK,EAAI,GAAKsK,EAAUtK,GAAI+K,EAAQT,EAAUtK,IAAI,IAIrHuL,GAASiB,EAAStB,GAAKqB,EAAQ,EAAU,EAAJtB,EACrCD,EAAOiB,KAAKV,GAAQC,EAAS,GAC7BR,EAAOiB,KAAKV,EAAO,GAAKC,EAAS,GACjCR,EAAOiB,KAAKV,EAAO,GAAKC,EAAS,GACjCR,EAAOiB,KAAKV,EAAO,GAxBf,KA4BRE,EAASS,EAAaK,EAAOC,IACVL,WAAW,MACpBC,aAAapB,EAAQ,EAAG,GAGlCN,EAAI2B,UAAUZ,EAAQd,EAAUgC,EAAQ/B,EAAUgC,KAyZtD,QAAA,gBAAA,EApZO,IAAIC,EAAkB,SAAS1J,EAAO2J,EAAKxC,EAAWC,GAEtDwC,KAAAA,WAAa,SAASC,GACrBC,IAIFjN,EACAkN,EALED,EAAa,EACfE,EAAa,EACbC,EAAa,EACbC,EAAa,EAMVrN,IAFLgN,EAAYA,EAAW,EAAI,EAAKA,EAAW,EAAI,EAAIA,EAE9ChN,EAAI,EAAGA,EAAIsK,EAAUnK,OAAQH,IAAK,CAKjCsK,GAJAA,EAAUtK,GAAKgN,GAAYC,EAAa3C,EAAUtK,KACpDiN,EAAa3C,EAAUtK,GACvBmN,EAAanN,GAEXsK,EAAUtK,KAAOgN,EACZzC,OAAAA,EAAOvK,GAEZsK,EAAUtK,GAAKgN,GAAYI,GAAc9C,EAAUtK,KACrDoN,EAAa9C,EAAUtK,GACvBqN,EAAarN,GAIVgM,OADPkB,GAAyBF,EAAWC,IAAeG,EAAaH,GACzDjB,EAAqBzB,EAAO4C,GAAa5C,EAAO8C,GAAa,EAAGH,IAGpEI,KAAAA,SAAW,WACPnK,OAAAA,GAGJoK,KAAAA,OAAS,WACLT,OAAAA,IAIJ,SAAS9C,EAASwD,EAAKnE,GACxBoE,IAAAA,EAAY,MAAQD,EAAIE,OAAO,GAAMF,EAAIG,UAAU,EAAG,GAAKH,EAMxDI,MAFG,QAHFtE,SAAUmE,EAAUE,UAAU,EAAG,GAAI,IAGnB,IAFhBrE,SAAUmE,EAAUE,UAAU,EAAG,GAAI,IAEP,IAD/BrE,SAAUmE,EAAUE,UAAU,EAAG,GAAI,IACO,IAAMtE,EAAQ,IAK9D,SAAS2C,EAAqB6B,EAAaC,EAAkBtE,EAAOwD,EAAUe,GAC/EC,IACFC,EAAYJ,EAAYpE,SACxByE,EAAcL,EAAYlE,WAC1BwE,EAAaN,EAAYhE,UACzBuE,EAAcP,EAAY9D,WAO1BsE,GALWP,EAAiBrE,SAAWwE,GAKdzE,EAAQwD,EACjCsB,GALaR,EAAiBnE,WAAauE,GAKd1E,EAAQwD,EACrCuB,GALYT,EAAiBjE,UAAYsE,GAKd3E,EAAQwD,EACnCwB,GALaV,EAAiB/D,YATb,EAAI,KASqCqE,GATzC,EAAI,MAcQ5E,EAAQwD,EAGnCe,OADJA,EAAgBA,IAAiB,GAExB,EAAEE,EAAYI,GAAaI,QAAQ,IAAKP,EAAcI,GAAeG,QAAQ,IAAKN,EAAaI,GAAcE,QAAQ,GAAIL,EAAcI,GAEvI,IAAIzF,GAAWkF,EAAYI,GAAaI,QAAQ,IAAKP,EAAcI,GAAeG,QAAQ,IAAKN,EAAaI,GAAcE,QAAQ,GAAIL,EAAcI,GAIxJ,SAASE,EAAQvL,EAAOZ,EAAMqL,GAC5B,MAAA,CACLzK,MAAOA,EACPZ,KAAMA,EACNqL,MAAOA,GAQJ,SAASe,EAAenF,EAAO3G,GAChC+L,IAAAA,EAAWhM,KAAKiM,MAAMjM,KAAKkM,MAAMtF,IACnCwD,EAAWxD,EAAQ5G,KAAKoC,IAAI,GAAI4J,GAwB3BG,OArBHlM,EACE,IAAMmK,EACO,EACN,EAAIA,EACE,EACN,EAAIA,EACE,EAEA,GAGb,GAAKA,EACQ,EACN,GAAKA,EACC,EACN,GAAKA,EACC,EAEA,IAGGpK,KAAKoC,IAAI,GAAI4J,GAG9B,SAASI,EAAiBtE,EAAKO,EAAGC,EAAG+D,EAAGC,EAAGxD,GAC5C1C,IAAAA,EAAIiC,EAAIgE,EACVhO,EAAIiK,EAAIgE,EACVxE,EAAIyE,YACJzE,EAAI0E,OAAOnE,EAAIS,EAAQR,GACvBR,EAAI2E,OAAOrG,EAAI0C,EAAQR,GACvBR,EAAI4E,iBAAiBtG,EAAGkC,EAAGlC,EAAGkC,EAAIQ,GAClChB,EAAI2E,OAAOrG,EAAGkC,EAAIgE,EAAIxD,GACtBhB,EAAI4E,iBAAiBtG,EAAG/H,EAAG+H,EAAI0C,EAAQzK,GACvCyJ,EAAI2E,OAAOpE,EAAIS,EAAQzK,GACvByJ,EAAI4E,iBAAiBrE,EAAGhK,EAAGgK,EAAGhK,EAAIyK,GAClChB,EAAI2E,OAAOpE,EAAGC,EAAIQ,GAClBhB,EAAI4E,iBAAiBrE,EAAGC,EAAGD,EAAIS,EAAQR,GACvCR,EAAI6E,YAIC,SAASrD,EAAaK,EAAOC,GAC9Bf,IAAAA,EAAS9C,EAAI6G,cAAc,UAGxB/D,OAFPA,EAAOc,MAAQA,EACfd,EAAOe,OAASA,EACTf,EAGF,SAASgE,EAAalD,EAAOC,EAAQkD,GACtCjE,IAAAA,EAAS9C,EAAI6G,cAAc,UAIxB/D,OAHPA,EAAOc,MAAQA,EACfd,EAAOe,OAASA,EAChBkD,EAAajE,EAAOU,WAAW,OACxBV,EAGF,SAASkE,EAAe/B,GACzBgC,IAAAA,EAmBG,MAAA,EAZPA,EANiBH,EAAa,EAAG,EAAG,SAAS/E,GACzCA,EAAImF,UAAYjC,EAChBlD,EAAIyE,YACJzE,EAAIoF,KAAK,EAAG,EAAG,EAAG,GAClBpF,EAAIqF,SAEiB5D,WAAW,MAAM6D,aAAa,EAAG,EAAG,EAAG,GAAG/D,MAYjD,GAAI2D,EAAU,GAAIA,EAAU,GAAIA,EAAU,IAGvD,SAASK,EAAerC,GACzBsC,IAAAA,EACFC,EACAC,EACAC,EACAC,EACAC,EAASZ,EAAe/B,GACxB4C,EAAU,IAAIzH,EAAUwH,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIA,EAAO,IAQ3D,OANPL,EAAYO,EAAOD,EAAS,KAC5BL,EAAOM,EAAOD,EAAS,KACvBJ,EAAQ1I,EAAQ8I,EAAS,KACzBH,EAAU3I,EAAQ8I,EAAS,KAC3BF,EAAa5I,EAAQ8I,EAAS,GAEvB,IAAIzK,EAAJ,SAAamK,EAAWC,EAAMK,EAASJ,EAAOC,EAASC,GAGzD,SAASI,EAASxH,EAAKC,EAAOC,GAC/BuH,IAAAA,EAAKC,EAAKC,EAAKC,EAAYC,EAAWC,EAUtCJ,GARJ1H,GAAO,IACPC,GAAS,IACTC,GAAQ,IAIR2H,IAFAH,EAAMhO,KAAKgO,IAAI1H,EAAKC,EAAOC,KAC3BuH,EAAM/N,KAAK+N,IAAIzH,EAAKC,EAAOC,KACD,EAEtBwH,IAAQD,EACVE,EAAMC,EAAa,MACd,CAGGF,OAFRI,EAAQJ,EAAMD,EACdG,EAAaC,EAAY,GAAMC,GAAS,EAAIJ,EAAMD,GAAOK,GAASJ,EAAMD,GAChEC,GACD1H,KAAAA,EACH2H,GAAO1H,EAAQC,GAAQ4H,GAAS7H,EAAQC,EAAO,EAAI,GACnD,MACGD,KAAAA,EACH0H,GAAOzH,EAAOF,GAAO8H,EAAQ,EAC7B,MACG5H,KAAAA,EACHyH,GAAO3H,EAAMC,GAAS6H,EAAQ,EAGlCH,GAAO,EAEF,MAAA,CAACA,EAAKC,EAAYC,GAmDpB,SAASE,EAASJ,EAAKC,EAAYI,GACpClI,IAAAA,EAAGC,EAAGhI,EACRjB,EAAI4C,KAAKiM,MAAY,EAANgC,GACf/Q,EAAU,EAAN+Q,EAAU7Q,EACd2C,EAAIuO,GAAc,EAAIJ,GACtBK,EAAID,GAAc,EAAIpR,EAAIgR,GAC1B/P,EAAImQ,GAAc,GAAK,EAAIpR,GAAKgR,GAE1B9Q,OAAAA,EAAI,GACL,KAAA,EACHgJ,EAAIkI,EACJjI,EAAIlI,EACJE,EAAI0B,EACJ,MACG,KAAA,EACHqG,EAAImI,EACJlI,EAAIiI,EACJjQ,EAAI0B,EACJ,MACG,KAAA,EACHqG,EAAIrG,EACJsG,EAAIiI,EACJjQ,EAAIF,EACJ,MACG,KAAA,EACHiI,EAAIrG,EACJsG,EAAIkI,EACJlQ,EAAIiQ,EACJ,MACG,KAAA,EACHlI,EAAIjI,EACJkI,EAAItG,EACJ1B,EAAIiQ,EACJ,MACG,KAAA,EACHlI,EAAIkI,EACJjI,EAAItG,EACJ1B,EAAIkQ,EAID,MAAA,CAACvO,KAAKiM,MAAU,IAAJ7F,GAAUpG,KAAKiM,MAAU,IAAJ5F,GAAUrG,KAAKiM,MAAU,IAAJ5N,IAGxD,SAASmQ,EAASpI,EAAGC,EAAGhI,GACzB0P,IAAAA,EAAKC,EAAKC,EAAKC,EAAYI,EAAYF,EAWvCJ,GATJ5H,GAAQ,IACRC,GAAQ,IACRhI,GAAQ,IAGRiQ,EAFAN,EAAMhO,KAAKgO,IAAI5H,EAAGC,EAAGhI,GAGrB+P,EAAQJ,GAFRD,EAAM/N,KAAK+N,IAAI3H,EAAGC,EAAGhI,IAGrB6P,EAAqB,IAARF,EAAY,EAAII,EAAQJ,EAEjCA,IAAQD,EACVE,EAAM,MACD,CACGD,OAAAA,GACD5H,KAAAA,EACH6H,GAAO5H,EAAIhI,GAAK+P,GAAS/H,EAAIhI,EAAI,EAAI,GACrC,MACGgI,KAAAA,EACH4H,GAAO5P,EAAI+H,GAAKgI,EAAQ,EACxB,MACG/P,KAAAA,EACH4P,GAAO7H,EAAIC,GAAK+H,EAAQ,EAG5BH,GAAO,EAEF,MAAA,CAACA,EAAKC,EAAYI,GAGpB,SAAS1H,EAAM6H,EAAO7G,GACnB6G,OAAAA,EAAQ,EAAI,EAAKA,EAAQ7G,EAAQA,EAAQ6G,EAG5C,SAASZ,EAAO7C,EAAOZ,GACxB9D,IAAAA,EAAMtG,KAAKiM,MAAMjB,EAAMnE,UAAY,EAAIuD,IACzC7D,EAAQvG,KAAKiM,MAAMjB,EAAMjE,YAAc,EAAIqD,IAC3C5D,EAAOxG,KAAKiM,MAAMjB,EAAM/D,WAAa,EAAImD,IAMpC,OAJP9D,EAAMM,EAAMN,EAAK,KACjBC,EAAQK,EAAML,EAAO,KACrBC,EAAOI,EAAMJ,EAAM,KAEZ,IAAIL,EAAUG,EAAKC,EAAOC,EAAMwE,EAAM7D,YAGxC,SAASrC,EAAQkG,EAAOZ,GACzB9D,IAAAA,EAAMtG,KAAKC,MAAM+K,EAAMnE,UAAY,EAAIuD,IACzC7D,EAAQvG,KAAKC,MAAM+K,EAAMjE,YAAc,EAAIqD,IAC3C5D,EAAOxG,KAAKC,MAAM+K,EAAM/D,WAAa,EAAImD,IAMpC,OAJP9D,EAAMM,EAAMN,EAAK,KACjBC,EAAQK,EAAML,EAAO,KACrBC,EAAOI,EAAMJ,EAAM,KAEZ,IAAIL,EAAUG,EAAKC,EAAOC,EAAMwE,EAAM7D,YAGxC,SAASuH,EAAKD,EAAOE,EAAOC,GAC7BlG,IAAAA,EACAkG,GAAAA,GAASD,EACL,KAAA,6CAMDF,OAHP/F,EAAWkG,EAAQD,EAGZF,EAFCzO,KAAKiM,OAAOwC,EAAQE,GAASjG,GAEbA,EAGnB,SAASmG,EAAiBC,EAAMC,GAC9BL,OAAAA,EAAMK,EAAKD,GAAQ,IAAK,KAqBjC,QAAA,gBAAA,EAnUA9O,KAAKkM,MAAQ,SAASuC,GACZzO,OAAAA,KAAKgP,IAAIP,GAASzO,KAAKiP,MAiT1B,IAAIC,EACFC,OAAOC,uBACZD,OAAOE,6BACPF,OAAOG,0BACPH,OAAOI,wBACPJ,OAAOK,yBACP,SAASC,GACPN,OAAOpO,WAAW0O,EAAU,OAI3B,SAASC,EAAiBC,GAGxBC,OAF+B,iBAAhBD,GAA4BA,aAAuBE,OACvE9J,EAAI+J,eAAeH,GAAeA,GACrBpG,WAAW,MAG5B,QAAA,iBAAA;;AC1PewG,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAvXf,IAAA,EAAA,QAAA,WAMIA,EAAmB,SAAnBA,EAA4BjI,EAAKkI,EAAMC,EAASC,EAAUC,GACxDC,IAAAA,EAAWC,EACbC,EAAMxH,EACNyH,EAAWP,EAAKxI,WAAayI,EAAQvQ,KAAOwQ,EAASrL,MAAM0C,cAAgB2I,EAAStL,OAAO2C,cAGzF,IAACwI,EAAiBS,MAAMD,GAAW,CAK7BN,OAFRI,GADAD,GAAY,EAAaJ,EAAAA,cAAAA,EAAMA,IACZzG,WAAW,MAEtB0G,EAAQvQ,MACT,IAAA,SACH4Q,EAAOD,EAAOI,qBAAqB,EAAU,QAAPT,EAAiB,EAAU,QAAPA,IACrDU,aAAa,EAAGP,EAAS9I,gBAC9BiJ,EAAKI,aAAa,IAAMP,EAAS9I,gBACjCiJ,EAAKI,aAAa,KAAOR,EAASrL,MAAMwC,gBACxCiJ,EAAKI,aAAa,EAAGR,EAASrL,MAAMwC,gBACpCgJ,EAAOpD,UAAYqD,EACnBD,EAAO9D,YACP8D,EAAO7D,OAAc,QAAPwD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO1D,YACP0D,EAAOlD,OACP,MAEG,IAAA,QACHkD,EAAO9D,YACP8D,EAAOnD,KAAY,QAAP8C,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,GAC/DK,EAAO1D,YACP0D,EAAOpD,UAAYiD,EAASrL,MAAMwC,eAClCgJ,EAAOlD,OACP,MAEG,IAAA,SACHmD,EAAOD,EAAOI,qBAAqB,QAAWT,EAAM,EAAG,QAAWA,EAAM,IACnEU,aAAa,EAAGR,EAASvL,KAAK0C,gBACnCiJ,EAAKI,aAAa,IAAMR,EAASvL,KAAK0C,gBACtCiJ,EAAKI,aAAa,IAAMR,EAASrL,MAAMwC,gBACvCiJ,EAAKI,aAAa,EAAGR,EAASrL,MAAMwC,gBACpCgJ,EAAOpD,UAAYqD,EACnBD,EAAO9D,YACP8D,EAAO7D,OAAc,GAAPwD,EAAmB,QAAPA,GAC1BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,OAAPuD,EAAwB,GAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,GAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,GAAPuD,EAAmB,QAAPA,GAC1BK,EAAO1D,YACP0D,EAAOlD,OACP,MAEG,IAAA,SACHmD,EAAOD,EAAOI,qBAAqB,QAAWT,EAAM,EAAG,QAAWA,EAAM,IACnEU,aAAa,EAAGR,EAASrL,MAAMwC,gBACpCiJ,EAAKI,aAAa,GAAKR,EAASrL,MAAMwC,gBACtCiJ,EAAKI,aAAa,GAAKR,EAAStL,OAAOyC,gBACvCiJ,EAAKI,aAAa,EAAGR,EAAStL,OAAOyC,gBACrCgJ,EAAOpD,UAAYqD,EACnBD,EAAO9D,YACP8D,EAAO7D,OAAc,GAAPwD,EAAmB,QAAPA,GAC1BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,GAAPuD,EAAmB,QAAPA,GAC1BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,GAAPuD,EAAmB,QAAPA,GAC1BK,EAAO1D,YACP0D,EAAOlD,OAEPkD,EAAOM,UAAY,EACnBN,EAAOO,QAAU,SACjBP,EAAOQ,SAAW,QAClBR,EAAOS,YAAcZ,EAASvL,KAAK0C,eACnCgJ,EAAOU,SACP,MAEG,IAAA,QACHV,EAAOpD,UAAYiD,EAAStL,OAAOyC,eACnCgJ,EAAO9D,YACP8D,EAAO7D,OAAc,QAAPwD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,OAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,OAAPA,GAC/BK,EAAO5D,OAAc,GAAPuD,EAAmB,QAAPA,GAC1BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO1D,YACP0D,EAAOlD,OACP,MAEG,IAAA,SACHmD,EAAOD,EAAOI,qBAAqB,QAAWT,EAAM,EAAG,QAAWA,EAAM,IACnEU,aAAa,EAAGR,EAASvL,KAAK0C,gBACnCiJ,EAAKI,aAAa,EAAGR,EAAStL,OAAOyC,gBACrCgJ,EAAOpD,UAAYqD,EACnBD,EAAO9D,YACP8D,EAAO7D,OAAc,QAAPwD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,GAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,GAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO1D,YACP0D,EAAOlD,OACP,MAEG,IAAA,SACHmD,EAAOD,EAAOI,qBAAqB,QAAWT,EAAM,EAAG,QAAWA,EAAM,IACnEU,aAAa,EAAGR,EAASrL,MAAMwC,gBACpCiJ,EAAKI,aAAa,GAAKR,EAASrL,MAAMwC,gBACtCiJ,EAAKI,aAAa,GAAKR,EAAStL,OAAOyC,gBACvCiJ,EAAKI,aAAa,EAAGR,EAAStL,OAAOyC,gBACrCgJ,EAAOpD,UAAYqD,EACnBD,EAAOS,YAAcZ,EAASvL,KAAK0C,eACnCgJ,EAAO9D,YACP8D,EAAO7D,OAAc,GAAPwD,EAAmB,OAAPA,GAC1BK,EAAO5D,OAAc,OAAPuD,EAAwB,GAAPA,GAC/BK,EAAOW,cAAqB,OAAPhB,EAAwB,GAAPA,EAAmB,QAAPA,EAAwB,QAAPA,EAAwB,GAAPA,EAAmB,QAAPA,GAChGK,EAAOW,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,GAAPA,EAAmB,QAAPA,EAAwB,GAAPA,GACrGK,EAAO5D,OAAc,GAAPuD,EAAmB,OAAPA,GAC1BK,EAAO1D,YACP0D,EAAOlD,OACPkD,EAAOU,SACP,MAEG,IAAA,SACHT,EAAOD,EAAOI,qBAAqB,QAAWT,EAAM,EAAG,QAAWA,EAAM,IACnEU,aAAa,EAAG,mBACrBJ,EAAKI,aAAa,GAAK,WACvBJ,EAAKI,aAAa,EAAG,mBACrBL,EAAOpD,UAAYqD,EACnBD,EAAOS,YAAc,UACrBT,EAAO9D,YACP8D,EAAO7D,OAAc,QAAPwD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO1D,YACP0D,EAAO7D,OAAc,QAAPwD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAOW,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,GAC1GK,EAAOW,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,GAAPA,EAAmB,QAAPA,GACrGK,EAAOW,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,GAC1GK,EAAOW,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,GAC1GK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO1D,YACP0D,EAAOlD,OAEPkD,EAAO9D,YACP8D,EAAO7D,OAAc,QAAPwD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO1D,YAEP0D,EAAOpD,UAAYiD,EAAStL,OAAOyC,eACnCgJ,EAAOlD,OACP,MAEG,IAAA,SAEHkD,EAAO9D,YACP8D,EAAO7D,OAAc,GAAPwD,EAAmB,QAAPA,GAC1BK,EAAOW,cAAqB,GAAPhB,EAAmB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,GAAPA,GACrGK,EAAOW,cAAqB,QAAPhB,EAAwB,OAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,GAAPA,EAAmB,QAAPA,GACrGK,EAAOW,cAAqB,OAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,OAAPA,EAAwB,QAAPA,EAAwB,GAAPA,GAC1GK,EAAOW,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,GAAPA,EAAmB,QAAPA,EAAwB,GAAPA,EAAmB,QAAPA,GAChGK,EAAO1D,aACP2D,EAAOD,EAAOI,qBAAqB,QAAWT,EAAM,EAAG,QAAWA,EAAM,IACnEU,aAAa,EAAGR,EAASrL,MAAMwC,gBACpCiJ,EAAKI,aAAa,GAAKR,EAASrL,MAAMwC,gBACtCiJ,EAAKI,aAAa,GAAKR,EAAStL,OAAOyC,gBACvCiJ,EAAKI,aAAa,EAAGR,EAAStL,OAAOyC,gBACrCgJ,EAAOpD,UAAYqD,EACnBD,EAAOS,YAAcZ,EAAStL,OAAOyC,eACrCgJ,EAAOM,UAAY,EACnBN,EAAOO,QAAU,SACjBP,EAAOQ,SAAW,QAClBR,EAAOlD,OACPkD,EAAOU,SACP,MAEG,IAAA,SAEHV,EAAO9D,YACP8D,EAAO7D,OAAO,GAAMwD,EAAM,QAAWA,GACrCK,EAAO5D,OAAO,QAAWuD,EAAM,GAAMA,GACrCK,EAAOW,cAAc,QAAWhB,EAAM,GAAMA,EAAM,QAAWA,EAAM,QAAWA,EAAM,GAAMA,EAAM,QAAWA,GAC3GK,EAAOW,cAAc,QAAWhB,EAAM,QAAWA,EAAM,QAAWA,EAAM,GAAMA,EAAM,QAAWA,EAAM,GAAMA,GAC3GK,EAAO5D,OAAO,GAAMuD,EAAM,QAAWA,GACrCK,EAAO1D,aACP2D,EAAOD,EAAOI,qBAAqB,EAAG,QAAWT,EAAM,EAAG,QAAWA,IAChEU,aAAa,EAAGR,EAAStL,OAAOyC,gBACrCiJ,EAAKI,aAAa,EAAGR,EAASvL,KAAK0C,gBACnCgJ,EAAOpD,UAAYqD,EACnBD,EAAOS,YAAcZ,EAASvL,KAAK0C,eACnCgJ,EAAOlD,OACPkD,EAAOU,SACP,MAEG,IAAA,SAEHV,EAAO9D,YACP8D,EAAO7D,OAAO,GAAMwD,EAAM,QAAWA,GACrCK,EAAO5D,OAAO,QAAWuD,EAAM,GAAMA,GACrCK,EAAO5D,OAAO,GAAMuD,EAAM,QAAWA,GACrCK,EAAO5D,OAAO,QAAWuD,EAAM,GAAMA,GACrCK,EAAO5D,OAAO,GAAMuD,EAAM,QAAWA,GACrCK,EAAO1D,aACP2D,EAAOD,EAAOI,qBAAqB,EAAG,QAAWT,EAAM,EAAG,QAAWA,IAChEU,aAAa,EAAGR,EAAStL,OAAOyC,gBACrCiJ,EAAKI,aAAa,EAAGR,EAASvL,KAAK0C,gBACnCgJ,EAAOpD,UAAYqD,EACnBD,EAAOS,YAAcZ,EAASvL,KAAK0C,eACnCgJ,EAAOlD,OACPkD,EAAOU,SACP,MAEG,IAAA,SAEA,IAAA,SAEHV,EAAO9D,YACP8D,EAAO7D,OAAO,QAAWwD,EAAM,QAAWA,GAC1CK,EAAO5D,OAAO,GAAMuD,EAAM,QAAWA,GACrCK,EAAO5D,OAAO,QAAWuD,EAAM,QAAWA,GAC1CK,EAAO5D,OAAO,QAAWuD,EAAM,QAAWA,GAC1CK,EAAO5D,OAAO,QAAWuD,EAAM,QAAWA,GAC1CK,EAAO5D,OAAO,QAAWuD,EAAM,QAAWA,GAC1CK,EAAO1D,YACc,WAAjBsD,EAAQvQ,OAEV4Q,EAAOD,EAAOI,qBAAqB,EAAG,GAAMT,EAAM,EAAG,QAAWA,IAC3DU,aAAa,EAAGP,EAAS9I,gBAC9BiJ,EAAKI,aAAa,IAAMP,EAAS9I,gBACjCiJ,EAAKI,aAAa,IAAMR,EAAStL,OAAOyC,gBACxCiJ,EAAKI,aAAa,EAAGR,EAAStL,OAAOyC,gBACrCgJ,EAAOpD,UAAYqD,KAGnBA,EAAOD,EAAOI,qBAAqB,QAAWT,EAAM,EAAG,QAAWA,EAAM,IACnEU,aAAa,EAAGR,EAASxL,SAAS2C,gBACvCiJ,EAAKI,aAAa,GAAKR,EAASrL,MAAMwC,gBACtCiJ,EAAKI,aAAa,EAAGR,EAASxL,SAAS2C,gBACvCgJ,EAAOpD,UAAYqD,GAErBD,EAAOlD,OACP,MAEG,IAAA,SAEA,IAAA,SAEHkD,EAAO9D,YACP8D,EAAO7D,OAAc,QAAPwD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,MAAPuD,EAAsB,IAAPA,GAC7BK,EAAO5D,OAAc,MAAPuD,EAAsB,IAAPA,GAC7BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAOW,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,GAC1GK,EAAOW,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,GAAPA,GAC1GK,EAAOW,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,GAC1GK,EAAOW,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,GACrF,WAAjBC,EAAQvQ,MACV2Q,EAAO5D,OAAc,QAAPuD,EAAwB,IAAPA,GAC/BK,EAAOW,cAAqB,IAAPhB,EAAoB,IAAPA,EAAoB,IAAPA,EAAoB,IAAPA,EAAoB,QAAPA,EAAwB,IAAPA,GAC1FK,EAAOW,cAAqB,IAAPhB,EAAoB,IAAPA,EAAoB,IAAPA,EAAoB,IAAPA,EAAoB,GAAPA,EAAmB,IAAPA,GACrFK,EAAOW,cAAqB,IAAPhB,EAAoB,IAAPA,EAAoB,IAAPA,EAAoB,IAAPA,EAAoB,QAAPA,EAAwB,IAAPA,GAC1FK,EAAOW,cAAqB,IAAPhB,EAAoB,IAAPA,EAAoB,IAAPA,EAAoB,IAAPA,EAAoB,QAAPA,EAAwB,IAAPA,GAC1FK,EAAO5D,OAAc,QAAPuD,EAAwB,IAAPA,KAE/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,IAEjCK,EAAO5D,OAAc,QAAPuD,EAAwB,QAAPA,GAC/BK,EAAOW,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,GAC1GK,EAAOW,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,GAAPA,GAC1GK,EAAOW,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,GAC1GK,EAAOW,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,GAC1GK,EAAO1D,aAEL2D,EADmB,WAAjBL,EAAQvQ,KACH2Q,EAAOI,qBAAqB,EAAG,EAAG,EAAU,IAAPT,GAErCK,EAAOI,qBAAqB,EAAG,EAAG,EAAU,QAAPT,IAEzCU,aAAa,EAAGR,EAAStL,OAAOyC,gBACrCiJ,EAAKI,aAAa,QAAUR,EAAStL,OAAOyC,gBAC5CiJ,EAAKI,aAAa,GAAKR,EAASrL,MAAMwC,gBACtCiJ,EAAKI,aAAa,QAAUR,EAAStL,OAAOyC,gBAC5CiJ,EAAKI,aAAa,EAAGR,EAAStL,OAAOyC,gBACrCgJ,EAAOpD,UAAYqD,EACnBD,EAAOS,YAAcZ,EAASvL,KAAK0C,eACnCgJ,EAAOlD,OACPkD,EAAOU,SAEPV,EAAO9D,YACPzD,EAAgB,OAAPkH,EAAkB,EAC3BK,EAAOY,IAAW,GAAPjB,EAAmB,GAAPA,EAAYlH,EAAQ,EAAGlD,EAA9C,SACA0K,EAAOD,EAAOI,qBAA4B,GAAPT,EAAalH,EAAe,GAAPkH,EAAalH,EAAQ,EAAU,GAAPkH,EAAalH,IACxF4H,aAAa,EAAG,WACrBJ,EAAKI,aAAa,IAAM,WACxBJ,EAAKI,aAAa,IAAM,WACxBJ,EAAKI,aAAa,EAAG,WACrBL,EAAOpD,UAAYqD,EACnBD,EAAO1D,YACP0D,EAAOlD,OACPkD,EAAO9D,YACPzD,EAAgB,QAAPkH,EAAkB,EAC3BK,EAAOY,IAAW,GAAPjB,EAAmB,GAAPA,EAAYlH,EAAQ,EAAGlD,EAA9C,SACA0K,EAAOD,EAAOa,qBAA4B,GAAPlB,EAAmB,GAAPA,EAAY,EAAU,GAAPA,EAAmB,GAAPA,EAAYlH,IACjF4H,aAAa,EAAG,WACrBJ,EAAKI,aAAa,IAAM,WACxBJ,EAAKI,aAAa,IAAM,WACxBJ,EAAKI,aAAa,GAAK,WACvBJ,EAAKI,aAAa,IAAM,WACxBJ,EAAKI,aAAa,EAAG,WACrBL,EAAOpD,UAAYqD,EACnBD,EAAO1D,YACP0D,EAAOlD,OACP,MAEG,IAAA,QAEL,SACEmD,EAAOD,EAAOI,qBAAqB,EAAU,QAAPT,EAAiB,EAAU,QAAPA,IACrDU,aAAa,EAAGR,EAASxL,SAAS2C,gBACvCiJ,EAAKI,aAAa,GAAKR,EAAStL,OAAOyC,gBACvCiJ,EAAKI,aAAa,IAAMR,EAAStL,OAAOyC,gBACxCiJ,EAAKI,aAAa,EAAGR,EAASxL,SAAS2C,gBACvCgJ,EAAOpD,UAAYqD,EACnBD,EAAO9D,YACP8D,EAAO7D,OAAc,QAAPwD,EAAwB,QAAPA,GAC/BK,EAAOW,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,GAC1GK,EAAOW,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,GAAPA,EAAmB,QAAPA,EAAwB,GAAPA,EAAmB,QAAPA,GAChGK,EAAOW,cAAqB,GAAPhB,EAAmB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,GACrGK,EAAOW,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,GAC1GK,EAAOW,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,GAAPA,GAC1GK,EAAOW,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,OAAPA,EAAwB,GAAPA,EAAmB,OAAPA,GACrGK,EAAOW,cAAqB,QAAPhB,EAAwB,OAAPA,EAAwB,OAAPA,EAAwB,QAAPA,EAAwB,OAAPA,EAAwB,GAAPA,GAC1GK,EAAOW,cAAqB,OAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,GAC1GK,EAAO1D,YACP0D,EAAOlD,OAIX4C,EAAiBS,MAAMD,GAAYH,EAG9B,OADPtI,EAAI2B,UAAUsG,EAAiBS,MAAMD,GAAW,EAAG,GAC5C,MAETR,EAAiBS,MAAQ,GAEVT,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;AC9DAoB,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAzTf,IAAA,EAAA,QAAA,WAOIA,EAAuB,SAAvBA,EAAgCrJ,EAAKsJ,EAAarJ,EAASC,EAASqJ,EAAYC,GAC9EC,IAAAA,EAAYC,EACdlB,EAAMpI,EAAQD,EAAQP,EAAWC,EACjC4I,EAAWc,EAAW7J,WAAa8J,EAAcF,EAAY5L,OAG3D,IAAC2L,EAAqBX,MAAMD,GAAW,CAmBjCa,QAhBRI,GADAD,GAAa,EAAaF,EAAAA,cAAAA,EAAYC,IACjB/H,WAAW,OAGxB0D,UAAY,UACpBuE,EAAQV,YAAc,2BACtBU,EAAQjF,YACRiF,EAAQP,IAAIlJ,EAASC,EAASqJ,EAAa,EAAG,EAAGzL,EAAjD,QAAyD,GACzD4L,EAAQ7E,YACR6E,EAAQrE,OACRqE,EAAQT,SAERS,EAAQjF,YACRiF,EAAQP,IAAIlJ,EAASC,EAAsB,QAAbqJ,EAAwB,EAAG,EAAGzL,EAA5D,QAAoE,GACpE4L,EAAQ7E,YAGAyE,EAAY5L,QACb,IAAA,SACH8K,EAAOkB,EAAQf,qBAAqB,EAAgB,QAAbY,EAAuB,EAAiB,QAAdC,IAC5DZ,aAAa,EAAG,WACrBJ,EAAKI,aAAa,IAAM,sBACxBJ,EAAKI,aAAa,IAAM,sBACxBJ,EAAKI,aAAa,EAAG,sBACrBc,EAAQvE,UAAYqD,EACpBkB,EAAQrE,OACR,MAEG,IAAA,SACHmD,EAAOkB,EAAQf,qBAAqB,EAAgB,QAAbY,EAAuB,EAAiB,QAAdC,IAC5DZ,aAAa,EAAG,sBACrBJ,EAAKI,aAAa,IAAM,sBACxBJ,EAAKI,aAAa,GAAM,sBACxBJ,EAAKI,aAAa,GAAM,mBACxBJ,EAAKI,aAAa,GAAM,sBACxBJ,EAAKI,aAAa,IAAM,sBACxBJ,EAAKI,aAAa,EAAG,sBACrBc,EAAQvE,UAAYqD,EACpBkB,EAAQrE,OACR,MAEG,IAAA,SACHmD,EAAOkB,EAAQf,qBAAqB,EAAgB,QAAbY,EAAuB,EAAiB,QAAdC,IAC5DZ,aAAa,EAAG,sBACrBJ,EAAKI,aAAa,IAAM,sBACxBJ,EAAKI,aAAa,GAAM,sBACxBJ,EAAKI,aAAa,GAAM,mBACxBJ,EAAKI,aAAa,GAAM,sBACxBJ,EAAKI,aAAa,IAAM,sBACxBJ,EAAKI,aAAa,EAAG,sBACrBc,EAAQvE,UAAYqD,EACpBkB,EAAQrE,OACR,MAEG,IAAA,QACHmD,EAAOkB,EAAQf,qBAAqB,EAAgB,QAAbY,EAAuB,EAAiB,QAAdC,IAC5DZ,aAAa,EAAG,sBACrBJ,EAAKI,aAAa,IAAM,qBACxBJ,EAAKI,aAAa,IAAM,qBACxBJ,EAAKI,aAAa,GAAK,sBACvBJ,EAAKI,aAAa,IAAM,qBACxBJ,EAAKI,aAAa,IAAM,qBACxBJ,EAAKI,aAAa,IAAM,qBACxBJ,EAAKI,aAAa,GAAK,qBACvBJ,EAAKI,aAAa,IAAM,qBACxBJ,EAAKI,aAAa,IAAM,qBACxBJ,EAAKI,aAAa,EAAG,sBACrBc,EAAQvE,UAAYqD,EACpBkB,EAAQrE,OACR,MAEG,IAAA,cACHmD,EAAOkB,EAAQf,qBAAqB,EAAG,QAAWa,EAAa,EAAG,QAAWA,IACxEZ,aAAa,EAAG,sBACrBJ,EAAKI,aAAa,IAAM,mBACxBJ,EAAKI,aAAa,IAAM,mBACxBJ,EAAKI,aAAa,EAAG,mBACrBc,EAAQvE,UAAYqD,EACpBkB,EAAQrE,OACR,MAEG,IAAA,cACHmD,EAAOkB,EAAQf,qBAAqB,QAAWY,EAAY,QAAWC,EAAa,OAAUD,EAAY,QAAWC,IAC/GZ,aAAa,EAAG,WACrBJ,EAAKI,aAAa,IAAM,sBACxBJ,EAAKI,aAAa,IAAM,sBACxBJ,EAAKI,aAAa,IAAM,WACxBJ,EAAKI,aAAa,IAAM,WACxBJ,EAAKI,aAAa,IAAM,WACxBJ,EAAKI,aAAa,EAAG,WACrBc,EAAQvE,UAAYqD,EACpBkB,EAAQrE,OACR,MAEG,IAAA,eACHmD,EAAOkB,EAAQf,qBAAqB,QAAWY,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,IAChHZ,aAAa,EAAG,WACrBJ,EAAKI,aAAa,IAAM,WACxBJ,EAAKI,aAAa,IAAM,WACxBJ,EAAKI,aAAa,IAAM,WACxBJ,EAAKI,aAAa,EAAG,WACrBc,EAAQvE,UAAYqD,EACpBkB,EAAQrE,OACR,MAEG,IAAA,eACHmD,EAAOkB,EAAQN,qBAAqB,GAAMG,EAAY,GAAMC,EAAa,EAAG,GAAMD,EAAY,GAAMA,EAAY,GAAMA,IACjHX,aAAa,EAAG,sBACrBJ,EAAKI,aAAa,IAAM,sBACxBJ,EAAKI,aAAa,EAAG,sBACrBc,EAAQvE,UAAYqD,EACpBkB,EAAQrE,OACRqE,EAAQjF,YACRiF,EAAQP,IAAI,GAAMI,EAAY,GAAMC,EAAa,QAAWD,EAAa,EAAG,EAAGzL,EAA/E,QACA4L,EAAQ7E,aACR2D,EAAOkB,EAAQf,qBAAqB,EAAGa,EAAc,QAAWA,EAAa,EAAG,QAAWA,IACtFZ,aAAa,EAAG,sBACrBJ,EAAKI,aAAa,IAAM,sBACxBJ,EAAKI,aAAa,IAAM,WACxBJ,EAAKI,aAAa,IAAM,mBACxBJ,EAAKI,aAAa,IAAM,sBACxBJ,EAAKI,aAAa,EAAG,sBACrBc,EAAQvE,UAAYqD,EACpBkB,EAAQrE,OAERqE,EAAQjF,YACRiF,EAAQP,IAAI,GAAMI,EAAY,GAAMC,EAAa,QAAWD,EAAa,EAAG,EAAGzL,EAA/E,QACA4L,EAAQ7E,YACR6E,EAAQvE,UAAY,UACpBuE,EAAQrE,OAERqE,EAAQjF,YACRiF,EAAQP,IAAI,GAAMI,EAAY,GAAMC,EAAa,IAAOD,EAAa,EAAG,EAAGzL,EAA3E,QACA4L,EAAQ7E,YACR6E,EAAQvE,UAAY,UACpBuE,EAAQrE,OACR,MAEG,IAAA,aACHzF,EAAY,CAAC,EACX,KACA,QACA,GACA,QACA,KACA,GAGFC,EAAS,CAAC,IAAIxB,EAAJ,UAAc,IAAK,IAAK,IAAK,GACrC,IAAIA,EAAJ,UAAc,EAAG,EAAG,EAAG,GACvB,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAC7B,IAAIA,EAAJ,UAAc,EAAG,EAAG,EAAG,GACvB,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAC7B,IAAIA,EAAJ,UAAc,EAAG,EAAG,EAAG,GACvB,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,IAG/BqL,EAAQC,OACRD,EAAQP,IAAIlJ,EAASC,EAAsB,QAAbqJ,EAAwB,EAAG,EAAGzL,EAA5D,QAAoE,GACpE4L,EAAQE,OACRxJ,EAAsB,QAAbmJ,EACTpJ,EAAsB,OAAboJ,GACTf,EAAO,IAAI7I,EAAJ,gBAAoBC,EAAWC,IACjCE,WAAW2J,EAASzJ,EAASC,EAASC,EAAQC,GAEnDsJ,EAAQV,YAAc,UACtBU,EAAQV,YAAc,2BACtBU,EAAQjF,YACRiF,EAAQb,UAAYU,EAAa,GACjCG,EAAQP,IAAIlJ,EAASC,EAASqJ,EAAa,EAAG,EAAGzL,EAAjD,QAAyD,GACzD4L,EAAQ7E,YACR6E,EAAQT,SACRS,EAAQG,UACR,MAEG,IAAA,aACHjK,EAAY,CAAC,EACX,KACA,IACA,QACA,GACA,QACA,IACA,KACA,GAGFC,EAAS,CAAC,IAAIxB,EAAJ,UAAc,IAAK,IAAK,IAAK,GACrC,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAC7B,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAC7B,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAC7B,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAC7B,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAC7B,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAC7B,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAC7B,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,IAG/BqL,EAAQC,OACRD,EAAQP,IAAIlJ,EAASC,EAAsB,QAAbqJ,EAAwB,EAAG,EAAGzL,EAA5D,QAAoE,GACpE4L,EAAQE,OACRxJ,EAAsB,QAAbmJ,EACTpJ,EAAsB,OAAboJ,GACTf,EAAO,IAAI7I,EAAJ,gBAAoBC,EAAWC,IACjCE,WAAW2J,EAASzJ,EAASC,EAASC,EAAQC,GAEnDsJ,EAAQV,YAAc,UACtBU,EAAQV,YAAc,2BACtBU,EAAQjF,YACRiF,EAAQb,UAAYU,EAAa,GACjCG,EAAQP,IAAIlJ,EAASC,EAASqJ,EAAa,EAAG,EAAGzL,EAAjD,QAAyD,GACzD4L,EAAQ7E,YACR6E,EAAQT,SACRS,EAAQG,UACR,MAEG,IAAA,SACHjK,EAAY,CAAC,EACX,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACA,IACA,IACA,IACA,GAGFC,EAAS,CAAC,IAAIxB,EAAJ,UAAc,IAAK,IAAK,IAAK,GACrC,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAC7B,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAC7B,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAC7B,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAC7B,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAC7B,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAC7B,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAC7B,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAC7B,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAC7B,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAC7B,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAC7B,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAC7B,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAC7B,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAC7B,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAC7B,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,IAG/BqL,EAAQC,OACRD,EAAQP,IAAIlJ,EAASC,EAAsB,QAAbqJ,EAAwB,EAAG,EAAGzL,EAA5D,QAAoE,GACpE4L,EAAQE,OACRxJ,EAAsB,QAAbmJ,EACTpJ,EAAsB,OAAboJ,GACTf,EAAO,IAAI7I,EAAJ,gBAAoBC,EAAWC,IACjCE,WAAW2J,EAASzJ,EAASC,EAASC,EAAQC,GAEnDsJ,EAAQV,YAAc,UACtBU,EAAQV,YAAc,2BACtBU,EAAQjF,YACRiF,EAAQb,UAAYU,EAAa,GACjCG,EAAQP,IAAIlJ,EAASC,EAASqJ,EAAa,EAAG,EAAGzL,EAAjD,QAAyD,GACzD4L,EAAQ7E,YACR6E,EAAQT,SACRS,EAAQG,UAMZH,EAAQvE,UAAY,qBACpBuE,EAAQjF,YACRiF,EAAQP,IAAIlJ,EAASC,EAAsB,QAAbqJ,EAAwB,EAAG,EAAGzL,EAA5D,QAAoE,GACpE4L,EAAQ7E,YACR6E,EAAQrE,OAGRqE,EAAQI,yBAA2B,kBAEnCJ,EAAQjF,YACRiF,EAAQP,IAAIlJ,EAASC,EAAsB,IAAbqJ,EAAoB,EAAG,EAAGzL,EAAxD,QAAgE,GAChE4L,EAAQ7E,YACR6E,EAAQrE,OAGRgE,EAAqBX,MAAMD,GAAYgB,EAGlC,OADPzJ,EAAI2B,UAAU0H,EAAqBX,MAAMD,GAAW,EAAG,GAChD,MAETY,EAAqBX,MAAQ,GAEdW,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;AC1LAU,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA/Hf,IAAA,EAAA,QAAA,WAIIA,GAAe,EAAa,EAAA,cAAA,GAAI,GAAI,SAAS/J,GAC3CuJ,IAIFf,EAJEe,EAAavJ,EAAIgK,OAAOnI,MAC1B2H,EAAcxJ,EAAIgK,OAAOlI,OAEzBmI,EAAU,EAGZjK,EAAI2J,OAGJ3J,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAIoF,KAAK,EAAG,EAAgB,GAAbmE,EAAgC,GAAdC,GACjCxJ,EAAI6E,YACJ7E,EAAI6J,WAEJrB,EAAOxI,EAAI2I,qBAAqB,EAAGsB,EAAUT,EAAa,EAAG,GAAMA,EAAcS,EAAUT,IACtFZ,aAAa,EAAG,mBACrBJ,EAAKI,aAAa,EAAG,mBACrB5I,EAAImF,UAAYqD,EAChBxI,EAAIqF,OAGJrF,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAIoF,KAAkB,QAAbmE,EAAuB,EAAgB,QAAbA,EAAqC,QAAdC,GAC1DxJ,EAAI6E,YACJ7E,EAAI6J,UAEJI,EAAU,GACVzB,EAAOxI,EAAI2I,qBAAqB,EAAGsB,EAAUT,EAAa,EAAG,QAAWA,EAAcS,EAAUT,IAC3FZ,aAAa,EAAG,mBACrBJ,EAAKI,aAAa,EAAG,mBACrB5I,EAAImF,UAAYqD,EAChBxI,EAAIqF,OAGJrF,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAIoF,KAAkB,GAAbmE,EAAgC,GAAdC,EAAgC,GAAbD,EAAgC,GAAdC,GAChExJ,EAAI6E,YACJ7E,EAAI6J,UAEJI,EAAU,IACVzB,EAAOxI,EAAI2I,qBAAqB,EAAGsB,EAAUT,EAAa,EAAG,GAAMA,EAAcS,EAAUT,IACtFZ,aAAa,EAAG,mBACrBJ,EAAKI,aAAa,EAAG,mBACrB5I,EAAImF,UAAYqD,EAChBxI,EAAIqF,OAGJrF,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAIoF,KAAkB,QAAbmE,EAAqC,GAAdC,EAAgC,QAAbD,EAAqC,QAAdC,GAC1ExJ,EAAI6E,YACJ7E,EAAI6J,UAEJI,EAAU,IACVzB,EAAOxI,EAAI2I,qBAAqB,EAAGsB,EAAUT,EAAa,EAAG,QAAWA,EAAcS,EAAUT,IAC3FZ,aAAa,EAAG,mBACrBJ,EAAKI,aAAa,EAAG,mBACrB5I,EAAImF,UAAYqD,EAChBxI,EAAIqF,OAGJrF,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAIoF,KAAkB,GAAbmE,EAAkB,EAAgB,GAAbA,EAAgC,GAAdC,GAChDxJ,EAAI6E,YACJ7E,EAAI6J,UAEJI,EAAU,GACVzB,EAAOxI,EAAI2I,qBAAqB,EAAGsB,EAAUT,EAAa,EAAG,GAAMA,EAAcS,EAAUT,IACtFZ,aAAa,EAAG,WACrBJ,EAAKI,aAAa,EAAG,mBACrB5I,EAAImF,UAAYqD,EAChBxI,EAAIqF,OAGJrF,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAIoF,KAAkB,QAAbmE,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GAC/ExJ,EAAI6E,YACJ7E,EAAI6J,UAEJI,EAAU,SACVzB,EAAOxI,EAAI2I,qBAAqB,EAAGsB,EAAUT,EAAa,EAAG,QAAWA,EAAcS,EAAUT,IAC3FZ,aAAa,EAAG,mBACrBJ,EAAKI,aAAa,EAAG,mBACrB5I,EAAImF,UAAYqD,EAChBxI,EAAIqF,OAGJrF,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAIoF,KAAK,EAAiB,GAAdoE,EAAgC,GAAbD,EAAgC,GAAdC,GACjDxJ,EAAI6E,YACJ7E,EAAI6J,UAEJI,EAAU,IACVzB,EAAOxI,EAAI2I,qBAAqB,EAAGsB,EAAUT,EAAa,EAAG,GAAMA,EAAcS,EAAUT,IACtFZ,aAAa,EAAG,WACrBJ,EAAKI,aAAa,EAAG,WACrB5I,EAAImF,UAAYqD,EAChBxI,EAAIqF,OAGJrF,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAIoF,KAAkB,QAAbmE,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GAC/ExJ,EAAI6E,YACJ7E,EAAI6J,UAEJI,EAAU,SACVzB,EAAOxI,EAAI2I,qBAAqB,EAAGsB,EAAUT,EAAa,EAAG,QAAWA,EAAcS,EAAUT,IAC3FZ,aAAa,EAAG,WACrBJ,EAAKI,aAAa,EAAG,WACrB5I,EAAImF,UAAYqD,EAChBxI,EAAIqF,OAEJrF,EAAI6J,YAGSE,EAAAA,EAAAA,QAAAA,QAAAA;;AClDAG,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA7Ef,IAAA,EAAA,QAAA,WAIIA,GAAqB,EAAa,EAAA,cAAA,GAAI,GAAI,SAASlK,GACjDuJ,IAEFf,EAFEe,EAAavJ,EAAIgK,OAAOnI,MAC1B2H,EAAcxJ,EAAIgK,OAAOlI,OAG3B9B,EAAI2J,OAGJ3J,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAIoF,KAAK,EAAG,EAAGmE,EAAYC,GAC3BxJ,EAAI6E,YACJ7E,EAAI6J,UACJ7J,EAAImF,UAAY,UAChBnF,EAAIqF,OAGJrF,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAI0E,OAAO,EAAiB,QAAd8E,GACdxJ,EAAIkJ,cAAc,EAAiB,GAAdM,EAAgC,QAAbD,EAAqC,QAAdC,EAAqC,GAAbD,EAAgC,QAAdC,GACzGxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,GAAbD,EAAgC,GAAdC,EAAgC,GAAbD,EAAgC,QAAdC,GACxHxJ,EAAIkJ,cAA2B,GAAbK,EAAgC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,GAAbD,EAAgC,QAAdC,GAC7HxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAwB,EAAiB,QAAdA,EAAwB,EAAiB,QAAdA,GAC/FxJ,EAAI6E,aACJ2D,EAAOxI,EAAI2I,qBAAqB,EAAG,QAAWa,EAAa,EAAG,QAAWA,IACpEZ,aAAa,EAAG,WACrBJ,EAAKI,aAAa,EAAG,WACrB5I,EAAImF,UAAYqD,EAChBxI,EAAIqF,OAGJrF,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAI0E,OAAO,EAAiB,GAAd8E,GACdxJ,EAAIkJ,cAAc,EAAiB,QAAdM,EAAqC,QAAbD,EAAqC,GAAdC,EAAgC,GAAbD,EAAgC,GAAdC,GACzGxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,GAAdC,EAAgC,GAAbD,EAAgC,QAAdC,EAAqC,GAAbD,EAAgC,GAAdC,GACxHxJ,EAAIkJ,cAA2B,GAAbK,EAAgC,QAAdC,EAAqC,QAAbD,EAAuB,EAAgB,GAAbA,EAAkB,GACxGvJ,EAAIkJ,cAA2B,QAAbK,EAAuB,EAAG,EAAiB,QAAdC,EAAwB,EAAiB,GAAdA,GAC1ExJ,EAAI6E,YACJ7E,EAAImF,UAAY,UAChBnF,EAAIqF,OAGJrF,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAI0E,OAAoB,QAAb6E,EAAqC,QAAdC,GAClCxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GACvIxJ,EAAIkJ,cAA2B,GAAbK,EAAgC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GAClIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,GAAdC,EAAgC,GAAbD,EAAgC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GAC7HxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,GAAdC,EAAgC,QAAbD,EAAqC,QAAdC,GAClIxJ,EAAI6E,aACJ2D,EAAOxI,EAAI2I,qBAAqB,EAAG,QAAWa,EAAa,EAAG,QAAWA,IACpEZ,aAAa,EAAG,WACrBJ,EAAKI,aAAa,EAAG,WACrB5I,EAAImF,UAAYqD,EAChBxI,EAAIqF,OAGJrF,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAI0E,OAAoB,QAAb6E,EAAqC,QAAdC,GAClCxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,GAAdC,EAAgC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GAClIxJ,EAAIkJ,cAA2B,GAAbK,EAAgC,QAAdC,EAAqC,QAAbD,EAAqC,GAAdC,EAAgC,QAAbD,EAAqC,QAAdC,GAC7HxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,GAAbD,EAAgC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GAClIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GACvIxJ,EAAI6E,YACJ7E,EAAImF,UAAY,UAChBnF,EAAIqF,OAEJrF,EAAI6J,YAGSK,EAAAA,EAAAA,QAAAA,QAAAA;;ACgEAC,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA7If,IAAA,EAAA,QAAA,WAKIA,EAAsB,SAASjH,EAAOlC,EAAQoJ,EAAQC,EAAYC,GAmF3DC,SAAAA,EAAOhK,EAAGiK,GAETjK,OADRA,IAAO,EAAIrI,KAAKqS,SAAW,GAAKC,EAAQ,GAC5B,EAAI,EAAKjK,EAAI,IAAM,IAAMA,EAG9BkK,SAAAA,EAAMC,GACLA,OAAAA,EAAI,EAAI,EAAKA,EAAI,IAAM,IAAMA,EA4ChC,OAnIFrF,KAAAA,KAAO,SAASsF,EAAQC,EAAQC,EAAMC,GACrCxV,IAAAA,EAAGiL,EAAGC,EACRuK,EACAlJ,EAAOC,EACPkJ,EAAWC,EACXC,EAAUC,EASVtK,EAAMuK,EAAIC,EAAIC,EAAIlW,EANlBoJ,EAAO0E,GAAS,GAAM,IACtBzE,EAASyE,GAAS,EAAK,IACvBxE,EAAe,IAARwE,EACPqI,EAAI,EACJC,EAAY,IAAMpB,EAqBhBE,GAjBJK,EAASzS,KAAKiM,MAAMwG,GACpBC,EAAS1S,KAAKiM,MAAMyG,GAIpB/I,GAHAgJ,EAAO3S,KAAK+I,KAAK4J,IAGFF,EACf7I,GAHAgJ,EAAO5S,KAAK+I,KAAK6J,IAGDF,EAOhBM,GAHAD,GADAD,GAAY,EAAanJ,EAAAA,cAAAA,EAAOC,IACHL,WAAW,OAGZN,gBAAgBU,EAAOC,GACnDqJ,EAAYF,EAAiB9J,gBAAgBU,EAAOC,GAGtC,IAAVwI,EAEGhV,IADLyV,EAAS,GACJzV,EAAI,EAAGA,EAAIuM,EAAOvM,IACrByV,EAAOzV,GAAM,IAAMgV,EAAQpS,KAAKqC,IAAIjF,EAAIuM,EAAQzH,EAArB,IAA4B,EAItDoG,IAAAA,EAAI,EAAGA,EAAIsB,EAAQtB,IAKjBD,IAHU,IAAXS,GACmB,EAElBT,EAAI,EAAGA,EAAIsB,EAAOtB,IACrBM,EAAQL,EAAIqB,EAAQ,EAAU,EAAJtB,EAC1B6K,EAAK5M,EACL6M,EAAK5M,EACL6M,EAAK5M,EACS,IAAV4L,IAEFc,GADAhW,EAAI2V,EAAOxK,GAEX8K,GAAMjW,EACNkW,GAAMlW,GAGJiV,GACFkB,GAAM,EAAIrT,KAAKqS,SAAW,GAAKiB,EAAa,EAC5CN,EAAS3J,KAAKV,GAAQ4J,EAAMW,EAAKG,GACjCL,EAAS3J,KAAKV,EAAO,GAAK4J,EAAMY,EAAKE,GACrCL,EAAS3J,KAAKV,EAAO,GAAK4J,EAAMa,EAAKC,GACrCL,EAAS3J,KAAKV,EAAO,GAvDjB,MAyDJqK,EAAS3J,KAAKV,GAAQ0J,EAAOa,EAAII,GACjCN,EAAS3J,KAAKV,EAAO,GAAK0J,EAAOc,EAAIG,GACrCN,EAAS3J,KAAKV,EAAO,GAAK0J,EAAOe,EAAIE,GACrCN,EAAS3J,KAAKV,EAAO,GA5DjB,KAuEHmK,OANHhK,EAAS,IAkBNyK,SAAeC,EAAOC,EAAQ9J,EAAOC,EAAQd,EAAQrC,GACxD4B,IAAAA,EAAGC,EACLlL,EAAGsW,EAAK/K,EACRgL,EAAMC,EAAMC,EAEV/K,GAAUa,IACZb,EAASa,EAAQ,GAIdrB,IAFLoL,EAAM,GAAc,EAAT5K,EAAa,GACxBH,EAAO,EACFL,EAAI,EAAGA,EAAIsB,EAAQtB,IAAK,CAEtBD,IADLsL,EAAOC,EAAOC,EAAO,EAChBxL,EAAI,EAAGA,EAAIS,EAAQT,IACtBjL,EAAiB,GAAZuL,EAAON,GACZsL,GAAQH,EAAMnK,KAAKjM,GACnBwW,GAAQJ,EAAMnK,KAAKjM,EAAI,GACvByW,GAAQL,EAAMnK,KAAKjM,EAAI,GAEpBiL,IAAAA,EAAI,EAAGA,EAAIsB,EAAOtB,IACjBA,EAAIS,IACN1L,EAA0B,GAArBuL,EAAOG,EAAS,GACrB6K,GAAQH,EAAMnK,KAAKjM,GACnBwW,GAAQJ,EAAMnK,KAAKjM,EAAI,GACvByW,GAAQL,EAAMnK,KAAKjM,EAAI,IAErBiL,EAAIS,EAASa,IACfvM,EAAsB,GAAjBuL,EAAOG,GACZ6K,GAAQH,EAAMnK,KAAKjM,GACnBwW,GAAQJ,EAAMnK,KAAKjM,EAAI,GACvByW,GAAQL,EAAMnK,KAAKjM,EAAI,IAEzBA,EAAW,EAAPuL,EACJ8K,EAAOpK,KAAKjM,GAAMuW,EAAOD,EAAO,EAChCD,EAAOpK,KAAKjM,EAAI,GAAMwW,EAAOF,EAAO,EACpCD,EAAOpK,KAAKjM,EAAI,GAAMyW,EAAOH,EAAO,EACpCD,EAAOpK,KAAKjM,EAAI,GAAKqJ,EACrBkC,KArDF4K,CAAeP,EAAUC,EAAWtJ,EAAOC,EAAQd,EAlE3C,KAmERiK,EAAiBvJ,aAAayJ,EAAWR,EAAQC,IAEjDK,EAAiBvJ,aAAawJ,EAAUP,EAAQC,GAE3CI,GAqDF,MAGMb,EAAAA,EAAAA,QAAAA,QAAAA;;ACkCA6B,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA/Kf,IAAA,EAAA,EAAA,QAAA,mBACA,EAAA,EAAA,QAAA,yBACA,EAAA,EAAA,QAAA,0BACA,EAAA,QAAA,WA4KeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GApKf,IAAIA,EAA4B,SAA5BA,EAAqChM,EAAKiM,EAAiBhM,EAASC,EAASqJ,EAAYC,GACvF0C,IAAAA,EAAYC,EACd3D,EAAM5I,EAAWC,EAEjBuM,EAAMC,EAAcC,EACpBtL,EAAQuL,EAAYC,EACpBpK,EAAK9M,EAHLmX,EAAiC,QAAblD,EAAwB,EAI5Cd,EAAWc,EAAW7J,WAAa8J,EAAcyC,EAAgB7U,KAG/D,IAAC4U,EAA0BtD,MAAMD,GAAW,CAW1CwD,IARJE,GADAD,GAAa,EAAa3C,EAAAA,cAAAA,EAAYC,IACjB/H,WAAW,OAGxBgD,YACR0H,EAAQhD,IAAIlJ,EAASC,EAASuM,EAAmB,EAAG3O,EAApD,QAA4D,GAC5DqO,EAAQtH,YAGqB,WAAzBoH,EAAgB7U,MAA8C,kBAAzB6U,EAAgB7U,MAC9B,kBAAzB6U,EAAgB7U,MAAqD,sBAAzB6U,EAAgB7U,KAE/B,WAAzB6U,EAAgB7U,OAClB+U,EAAQhH,UAAYgH,EAAQO,cAAc3C,EAAtB,QAAoC,UACxDoC,EAAQ9G,QAGmB,kBAAzB4G,EAAgB7U,OAClB+U,EAAQhH,UAAYgH,EAAQO,cAAcxC,EAAtB,QAA0C,UAC9DiC,EAAQ9G,SAIVmD,EAAO2D,EAAQxD,qBAAqB8D,EAAmB,EAAGlD,EAAakD,EAAmB,IACrF7D,aAAa,EAAG,uBACrBJ,EAAKI,aAAa,GAAK,oBACvBJ,EAAKI,aAAa,EAAG,uBACrBuD,EAAQhH,UAAYqD,EACpB2D,EAAQ1H,YACR0H,EAAQhD,IAAIlJ,EAASC,EAASuM,EAAmB,EAAG3O,EAApD,QAA4D,GAC5DqO,EAAQtH,YACRsH,EAAQ9G,OAEqB,kBAAzB4G,EAAgB7U,MAAqD,sBAAzB6U,EAAgB7U,OAC9DgV,EAAiC,kBAAzBH,EAAgB7U,KACxBiV,EAAezN,SAASqN,EAAgB9P,aAAasD,cAAcZ,QAAQ,GAAI,IAC/EyN,GAAU,EAAoBD,EAAAA,SAAAA,EAAc,EAAG,GAAKD,EAAM,IAC1DD,EAAQhH,UAAYgH,EAAQO,cAAcJ,EAAQjH,KAAK,EAAG,EAAGkE,EAAYC,GAAc,aACvF2C,EAAQ9G,aAEL,GAA6B,cAAzB4G,EAAgB7U,MAAiD,WAAzB6U,EAAgB7U,MAwC7D6U,GAtCJrM,EAAY,CAAC,EACX,IACA,GACA,IACA,IACA,IACA,IACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,GAIFC,EAAS,CAAC,IAAIxB,EAAJ,UAAc,WACtB,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,aAGhBmK,EAAO,IAAI7I,EAAJ,gBAAoBC,EAAWC,IACjCE,WAAWoM,EAASlM,EAASC,EAAS,EAAGuM,GAEjB,WAAzBR,EAAgB7U,KAAmB,CAiBhC9B,IAdLiX,EAAsB,KADtBvL,EAASyL,GAGTD,EAAWzO,EAAc,YAAA,IAAMiD,GAE/BmL,EAAQxC,OAERwC,EAAQ1H,YACR0H,EAAQhD,IAAIlJ,EAASC,EAASc,EAAQ,EAAGlD,EAAzC,QACAqO,EAAQtH,YACRsH,EAAQvC,OAERuC,EAAQtD,UAAY,GACpBzG,EAAMtE,EAAS0O,OAAW,GAAXA,EAEVlX,EAAI,EAAGA,EAAI8M,EAAK9M,GAAKkX,EAExBL,EAAQnD,YAAc,4BACtBmD,EAAQ1H,YACR0H,EAAQhD,IAAIlJ,EAAUsM,EAAYrM,EAASqM,EAAY,EAAGzO,EAA1D,QACAqO,EAAQlD,SAERkD,EAAQQ,UAAU1M,EAASC,GAC3BiM,EAAQS,OAAkB,GAAXJ,GACfL,EAAQQ,WAAW1M,GAAUC,GAE7BiM,EAAQnD,YAAc,wBACtBmD,EAAQ1H,YACR0H,EAAQhD,IAAIlJ,EAAUsM,EAAYrM,EAASqM,EAAY,EAAGzO,EAA1D,QACAqO,EAAQlD,SAERkD,EAAQQ,UAAU1M,EAASC,GAC3BiM,EAAQS,OAAOJ,EAAsB,GAAXA,GAC1BL,EAAQQ,WAAW1M,GAAUC,GAG/BiM,EAAQtC,gBAGVrB,EAAO2D,EAAQxD,qBAAqB,EAAgB,QAAbY,EAAuB,EAAuB,EAApBkD,IAC5D7D,aAAa,EAAGqD,EAAgBhQ,cAAcsD,gBACnDiJ,EAAKI,aAAa,GAAKqD,EAAgB/P,iBAAiBqD,gBACxDiJ,EAAKI,aAAa,EAAGqD,EAAgB9P,aAAaoD,gBAClD4M,EAAQhH,UAAYqD,EACpB2D,EAAQ9G,QAGVmD,EAAO2D,EAAQ/C,qBAAqBnJ,EAASC,EAAS,EAAGD,EAASC,EAASuM,IACtE7D,aAAa,EAAG,oBACrBJ,EAAKI,aAAa,GAAK,oBACvBJ,EAAKI,aAAa,IAAM,oBACxBJ,EAAKI,aAAa,IAAM,uBACxBJ,EAAKI,aAAa,IAAM,uBACxBJ,EAAKI,aAAa,IAAM,uBACxBJ,EAAKI,aAAa,EAAG,sBACrBuD,EAAQhH,UAAYqD,EAEpB2D,EAAQ1H,YACR0H,EAAQhD,IAAIlJ,EAASC,EAASuM,EAAmB,EAAG3O,EAApD,QAA4D,GAC5DqO,EAAQtH,YACRsH,EAAQ9G,OAGR2G,EAA0BtD,MAAMD,GAAYyD,EAGvC,OADPlM,EAAI2B,UAAUqK,EAA0BtD,MAAMD,GAAW,EAAG,GACrD,MAETuD,EAA0BtD,MAAQ,GAEnBsD,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACxJAa,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAvBf,IAAA,EAAA,QAAA,WAIIA,EAAwB,SAAS7M,EAAK8M,EAAK7M,EAASC,EAASqJ,EAAYC,GACvEuD,IAAAA,EAAyB,QAAbxD,EACdyD,EAA2B,QAAdxD,EACbjJ,GAAKgJ,EAAawD,GAAa,EAC/BvM,GAAKgJ,EAAcwD,GAAc,EAY5B,OAVK,OAARF,GAAgBA,EAAIhL,OAAS,GAAKgL,EAAIjL,MAAQ,IAChD7B,EAAI2J,OAEJ3J,EAAIyE,YACJzE,EAAImJ,IAAIlJ,EAASC,EAAsB,QAAbqJ,EAAwB,EAAG,EAAGzL,EAAxD,QAAgE,GAChEkC,EAAI4J,OAEJ5J,EAAI2B,UAAUmL,EAAKvM,EAAGC,EAAGuM,EAAWC,GACpChN,EAAI6J,WAEC,MAGMgD,EAAAA,EAAAA,QAAAA,QAAAA;;AC4JAI,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAnLf,IAAA,EAAA,QAAA,WAKIA,EAAkB,SAAlBA,EAA2B/E,EAAMgF,EAAMzP,GACrC0P,IAAAA,EAAYC,EAGd5E,EAFA6E,EAAiBnF,EAAO,EACxBoF,EAAiBpF,EAAO,EAExBO,EAAWP,EAAKxI,WAAawN,EAAKtV,KAAO6F,EAAMA,MAG7C,IAACwP,EAAgBvE,MAAMD,GAAW,CAI5ByE,OAFRE,GADAD,GAAa,EAAajF,EAAAA,cAAO,QAAPA,EAAuB,QAAPA,IACrBzG,WAAW,MAExByL,EAAKtV,MACN,IAAA,YAyBK6F,OAvBR2P,EAAQ3I,YACR2I,EAAQ1I,OAAO,EAAU,GAAPwD,GAClBkF,EAAQlE,cAAc,EAAU,QAAPhB,EAAwB,QAAPA,EAAiB,EAAU,GAAPA,EAAY,GAC1EkF,EAAQlE,cAAqB,QAAPhB,EAAiB,EAAGA,EAAa,QAAPA,EAAiBA,EAAa,GAAPA,GACvEkF,EAAQlE,cAAchB,EAAa,QAAPA,EAAwB,QAAPA,EAAiBA,EAAa,GAAPA,EAAYA,GAChFkF,EAAQlE,cAAqB,QAAPhB,EAAiBA,EAAM,EAAU,QAAPA,EAAiB,EAAU,GAAPA,GACpEkF,EAAQvI,aACR2D,EAAO4E,EAAQzE,qBAAqB,EAAG,EAAG,EAAGT,IACxCU,aAAa,EAAG,oBACrBJ,EAAKI,aAAa,IAAM,mBACxBJ,EAAKI,aAAa,EAAG,mBACrBwE,EAAQjI,UAAYqD,EACpB4E,EAAQ/H,OAGR+H,EAAQ3I,YACR2I,EAAQ1I,OAAc,QAAPwD,EAAwB,GAAPA,GAChCkF,EAAQlE,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,GAAPA,EAAmB,QAAPA,GACtGkF,EAAQlE,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,GAAPA,GAC3GkF,EAAQlE,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,GAAPA,EAAmB,QAAPA,GACtGkF,EAAQlE,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,GAAPA,GAC3GkF,EAAQvI,YACR2D,EAAO4E,EAAQzE,qBAAqB,EAAG,QAAWT,EAAM,EAAG,QAAWA,GAC9DzK,EAAMA,OACP,IAAA,QACH+K,EAAKI,aAAa,EAAG,mBACrBJ,EAAKI,aAAa,EAAG,mBACrB,MAEG,IAAA,QACHJ,EAAKI,aAAa,EAAG,qBACrBJ,EAAKI,aAAa,EAAG,oBACrB,MAEG,IAAA,SAEL,QACEJ,EAAKI,aAAa,EAAG,sBACrBJ,EAAKI,aAAa,EAAG,mBAGzBwE,EAAQjI,UAAYqD,EACpB4E,EAAQ/H,OAGR+H,EAAQ3I,YACR2I,EAAQ1I,OAAc,QAAPwD,EAAwB,QAAPA,GAChCkF,EAAQlE,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,GAAPA,EAAmB,QAAPA,GACtGkF,EAAQlE,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,GAC3GkF,EAAQlE,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,GAAPA,EAAmB,QAAPA,GACtGkF,EAAQlE,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,GAC3GkF,EAAQvI,aACR2D,EAAO4E,EAAQhE,qBAAsB,QAAYlB,EAAQ,QAAYA,EAAO,EAAK,QAAYA,EAAS,QAAYA,EAAO,QAAWA,IAC/HU,aAAa,EAAG,4BACrBJ,EAAKI,aAAa,EAAG,0BACrBwE,EAAQjI,UAAYqD,EACpB4E,EAAQ/H,OAGR+H,EAAQ3I,YACR2I,EAAQ1I,OAAc,QAAPwD,EAAwB,QAAPA,GAChCkF,EAAQlE,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAiB,EAAU,GAAPA,EAAY,GACxFkF,EAAQlE,cAAqB,QAAPhB,EAAiB,EAAU,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,GAC7FkF,EAAQlE,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,GAAPA,EAAmB,QAAPA,GACtGkF,EAAQlE,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,GAC3GkF,EAAQvI,aACR2D,EAAO4E,EAAQhE,qBAAqB,GAAMlB,EAAM,EAAG,EAAK,GAAOA,EAAO,EAAG,QAAWA,IAC/EU,aAAa,EAAG,iCACrBJ,EAAKI,aAAa,EAAG,0BACrBwE,EAAQjI,UAAYqD,EACpB4E,EAAQ/H,OAGR+H,EAAQ3I,YACR2I,EAAQ1I,OAAc,QAAPwD,EAAwB,QAAPA,GAChCkF,EAAQlE,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,GAAPA,EAAmB,QAAPA,GACtGkF,EAAQlE,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,GAC3GkF,EAAQlE,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,GAAPA,EAAmB,QAAPA,GACtGkF,EAAQlE,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,GAC3GkF,EAAQvI,aACR2D,EAAO4E,EAAQzE,qBAAqB,EAAG,QAAWT,EAAM,EAAG,QAAWA,IACjEU,aAAa,EAAG,WACrBJ,EAAKI,aAAa,EAAG,sBACrBwE,EAAQjI,UAAYqD,EACpB4E,EAAQ/H,OAGR+H,EAAQ3I,YACR2I,EAAQ1I,OAAc,QAAPwD,EAAwB,QAAPA,GAChCkF,EAAQlE,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,GAAPA,EAAmB,QAAPA,GACtGkF,EAAQlE,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,GAC3GkF,EAAQlE,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,GAAPA,EAAmB,QAAPA,GACtGkF,EAAQlE,cAAqB,QAAPhB,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,EAAwB,QAAPA,GAC3GkF,EAAQvI,aACR2D,EAAO4E,EAAQzE,qBAAqB,EAAG,QAAWT,EAAM,EAAG,QAAWA,IACjEU,aAAa,EAAG,iBACrBJ,EAAKI,aAAa,EAAG,mBACrBwE,EAAQjI,UAAYqD,EACpB4E,EAAQ/H,OACR,MAEG,IAAA,eAWK5H,QAVR+K,EAAO4E,EAAQzE,qBAAqB,EAAG,EAAG,EAAGT,IACxCU,aAAa,EAAG,sBACrBJ,EAAKI,aAAa,IAAM,mBACxBJ,EAAKI,aAAa,EAAG,mBACrBwE,EAAQjI,UAAYqD,EACpB4E,EAAQ3I,YACR2I,EAAQjE,IAAIkE,EAAgBC,EAAgBpF,EAAO,EAAG,EAAGpK,EAAzD,QAAiE,GACjEsP,EAAQvI,YACRuI,EAAQ/H,OACRmD,EAAO4E,EAAQzE,qBAAqB,EAAGT,EAAc,IAAPA,EAAa,EAAGA,EAAc,IAAPA,EAAqB,IAAPA,GAC3EzK,EAAMA,OACP,IAAA,QACH+K,EAAKI,aAAa,EAAG,sBACrBJ,EAAKI,aAAa,GAAK,mBACvBJ,EAAKI,aAAa,EAAG,sBACrB,MAEG,IAAA,QACHJ,EAAKI,aAAa,EAAG,sBACrBJ,EAAKI,aAAa,GAAK,oBACvBJ,EAAKI,aAAa,EAAG,sBACrB,MAEG,IAAA,SAEL,QACEJ,EAAKI,aAAa,EAAG,sBACrBJ,EAAKI,aAAa,GAAK,sBACvBJ,EAAKI,aAAa,EAAG,sBAGzBwE,EAAQjI,UAAYqD,EACpB4E,EAAQ3I,YACR2I,EAAQjE,IAAIkE,EAAgBC,EAAuB,IAAPpF,EAAc,EAAG,EAAGpK,EAAhE,QAAwE,GACxEsP,EAAQvI,YACRuI,EAAQ/H,QAERmD,EAAO4E,EAAQhE,qBAAqBiE,EAAgBC,EAAgB,EAAGD,EAAgBC,EAAuB,IAAPpF,EAAc,IAChHU,aAAa,EAAG,oBACrBJ,EAAKI,aAAa,IAAM,oBACxBJ,EAAKI,aAAa,IAAM,uBACxBJ,EAAKI,aAAa,EAAG,sBACrBwE,EAAQjI,UAAYqD,EACpB4E,EAAQ3I,YACR2I,EAAQjE,IAAIkE,EAAgBC,EAAuB,IAAPpF,EAAc,EAAG,EAAGpK,EAAhE,QAAwE,GACxEsP,EAAQvI,YACRuI,EAAQ/H,OAKZ4H,EAAgBvE,MAAMD,GAAY0E,EAE7BF,OAAAA,EAAgBvE,MAAMD,IAE/BwE,EAAgBvE,MAAQ,GAETuE,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACLR,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,QAAA,qBAAA,QAAA,kBAAA,QAAA,eAAA,QAAA,YAAA,QAAA,YAAA,QAAA,UAAA,QAAA,SAAA,QAAA,YAAA,QAAA,UAAA,QAAA,SAAA,QAAA,MAAA,QAAA,SAAA,QAAA,qBAAA,EA9KP,IAAA,EAAA,QAAA,WAIA,EAAA,QAAA,eAiBWhB,EAAkB,CAC3BsB,UAAW,IAAIpS,EAAJ,mBAAuB,IAAIkD,EAAJ,UAAc,EAAG,EAAG,EAAG,GAAI,IAAIA,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,aAC9LmP,WAAY,IAAIrS,EAAJ,mBAAuB,IAAIkD,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,cAC/LoP,WAAY,IAAItS,EAAJ,mBAAuB,IAAIkD,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,EAAG,EAAG,EAAG,GAAI,IAAIA,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,cAC/LqP,MAAO,IAAIvS,EAAJ,mBAAuB,IAAIkD,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,EAAG,EAAG,EAAG,GAAI,IAAIA,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,SAC1LsP,MAAO,IAAIxS,EAAJ,mBAAuB,IAAIkD,EAAJ,UAAc,EAAG,EAAG,EAAG,GAAI,IAAIA,EAAJ,UAAc,EAAG,EAAG,EAAG,GAAI,IAAIA,EAAJ,UAAc,EAAG,EAAG,EAAG,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,SACjLuP,MAAO,IAAIzS,EAAJ,mBAAuB,IAAIkD,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,EAAG,EAAG,EAAG,GAAI,IAAIA,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,SAC1LwP,MAAO,IAAI1S,EAAJ,mBAAuB,IAAIkD,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,SAC9LyP,IAAK,IAAI3S,EAAJ,mBAAuB,IAAIkD,EAAJ,UAAc,IAAK,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,EAAG,EAAG,EAAG,GAAI,IAAIA,EAAJ,UAAc,GAAI,EAAG,EAAG,GAAI,OACpL0P,MAAO,IAAI5S,EAAJ,mBAAuB,IAAIkD,EAAJ,UAAc,GAAI,IAAK,GAAI,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,GAAI,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,EAAG,EAAG,EAAG,GAAI,IAAIA,EAAJ,UAAc,EAAG,GAAI,EAAG,GAAI,SACrL2P,KAAM,IAAI7S,EAAJ,mBAAuB,IAAIkD,EAAJ,UAAc,GAAI,GAAI,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,EAAG,EAAG,EAAG,GAAI,IAAIA,EAAJ,UAAc,EAAG,EAAG,GAAI,GAAI,QACrL4P,WAAY,IAAI9S,EAAJ,mBAAuB,IAAIkD,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,cAC/L6P,IAAK,IAAI/S,EAAJ,mBAAuB,IAAIkD,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,OACxL8P,cAAe,IAAIhT,EAAJ,mBAAuB,IAAIkD,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,iBAClM+P,OAAQ,IAAIjT,EAAJ,mBAAuB,IAAIkD,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,UAC3LgQ,UAAW,IAAIlT,EAAJ,mBAAuB,IAAIkD,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,EAAG,EAAG,EAAG,GAAI,IAAIA,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,aAC9LiQ,cAAe,IAAInT,EAAJ,mBAAuB,IAAIkD,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,EAAG,EAAG,EAAG,GAAI,IAAIA,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,iBACzLkQ,kBAAmB,IAAIpT,EAAJ,mBAAuB,IAAIkD,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,EAAG,EAAG,EAAG,GAAI,IAAIA,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,qBAChMmQ,OAAQ,IAAIrT,EAAJ,mBAAuB,IAAIkD,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,EAAG,EAAG,EAAG,GAAI,IAAIA,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,WAuItL,QAAA,gBAAA,EApIA,IAAIoQ,EAAW,CACpBb,MAAO,IAAIxS,EAAJ,YAAgB,UAAW,qBAAsB,qBAAsB,qBAAsB,qBAAsB,WAC1H4S,KAAM,IAAI5S,EAAJ,YAAgB,UAAW,qBAAsB,qBAAsB,qBAAsB,qBAAsB,WACzHsT,OAAQ,IAAItT,EAAJ,YAAgB,UAAW,qBAAsB,qBAAsB,qBAAsB,qBAAsB,WAC3H0S,IAAK,IAAI1S,EAAJ,YAAgB,UAAW,qBAAsB,qBAAsB,qBAAsB,qBAAsB,WACxHuT,OAAQ,IAAIvT,EAAJ,YAAgB,UAAW,qBAAsB,mBAAoB,mBAAoB,mBAAoB,WACrHsS,MAAO,IAAItS,EAAJ,YAAgB,UAAW,UAAW,qBAAsB,qBAAsB,UAAW,WACpGwT,KAAM,IAAIxT,EAAJ,YAAgB,UAAW,qBAAsB,kBAAmB,UAAW,kBAAmB,WACxGuS,MAAO,IAAIvS,EAAJ,YAAgB,UAAW,UAAW,UAAW,UAAW,UAAW,WAC9E2S,MAAO,IAAI3S,EAAJ,YAAgB,kBAAmB,kBAAmB,kBAAmB,kBAAmB,kBAAmB,0BACtHyT,MAAO,IAAIzT,EAAJ,YAAgB,kBAAmB,mBAAoB,kBAAmB,kBAAmB,kBAAmB,sBACvH0T,WAAY,IAAI1T,EAAJ,YAAgB,oBAAqB,mBAAoB,mBAAoB,mBAAoB,oBAAqB,WAClI2T,cAAe,IAAI3T,EAAJ,YAAgB,kBAAmB,kBAAmB,kBAAmB,kBAAmB,kBAAmB,oBAC9H4T,UAAW,IAAI5T,EAAJ,YAAgB,qBAAsB,qBAAsB,mBAAoB,mBAAoB,mBAAoB,WACnI6T,SAAU,IAAI7T,EAAJ,YAAgB,qBAAsB,qBAAsB,qBAAsB,qBAAsB,qBAAsB,mBACxI8T,eAAgB,IAAI9T,EAAJ,YAAgB,UAAW,qBAAsB,qBAAsB,qBAAsB,qBAAsB,WACnI+T,UAAW,IAAI/T,EAAJ,YAAgB,qBAAsB,qBAAsB,oBAAqB,oBAAqB,oBAAqB,WACtIgU,YAAa,IAAIhU,EAAJ,YAAgB,kBAAmB,qBAAsB,mBAAoB,kBAAmB,gBAAiB,WAC9HiU,SAAU,IAAIjU,EAAJ,YAAgB,kBAAmB,oBAAqB,kBAAmB,iBAAkB,gBAAiB,WACxHkU,KAAM,IAAIlU,EAAJ,YAAgB,qBAAsB,qBAAsB,qBAAsB,qBAAsB,qBAAsB,WACpImU,SAAU,IAAInU,EAAJ,YAAgB,iBAAkB,kBAAmB,kBAAmB,gBAAiB,iBAAkB,WACrHoU,UAAW,IAAIpU,EAAJ,YAAgB,iBAAkB,kBAAmB,kBAAmB,kBAAmB,iBAAkB,WACxHqU,MAAO,IAAIrU,EAAJ,YAAgB,kBAAmB,oBAAqB,kBAAmB,kBAAmB,kBAAmB,WACxHsU,UAAW,IAAItU,EAAJ,YAAgB,qBAAsB,qBAAsB,qBAAsB,qBAAsB,qBAAsB,WACzIuU,SAAU,IAAIvU,EAAJ,YAAgB,UAAW,UAAW,UAAW,UAAW,UAAW,YA4G5E,QAAA,SAAA,EAzGA,IAAI8H,EAAQ,CACjB4K,IAAK,IAAIzS,EAAJ,SAAa,IAAIgD,EAAJ,UAAc,GAAI,EAAG,EAAG,GAAI,IAAIA,EAAJ,UAAc,IAAK,EAAG,GAAI,GAAI,IAAIA,EAAJ,UAAc,IAAK,EAAG,GAAI,GAAI,IAAIA,EAAJ,UAAc,IAAK,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,IACvM0P,MAAO,IAAI1S,EAAJ,SAAa,IAAIgD,EAAJ,UAAc,EAAG,GAAI,EAAG,GAAI,IAAIA,EAAJ,UAAc,EAAG,IAAK,GAAI,GAAI,IAAIA,EAAJ,UAAc,GAAI,IAAK,EAAG,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,GAAI,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,IAC1M2P,KAAM,IAAI3S,EAAJ,SAAa,IAAIgD,EAAJ,UAAc,EAAG,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,EAAG,GAAI,IAAK,GAAI,IAAIA,EAAJ,UAAc,EAAG,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,EAAG,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,IAC1MqQ,OAAQ,IAAIrT,EAAJ,SAAa,IAAIgD,EAAJ,UAAc,IAAK,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,IAAK,GAAI,EAAG,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,EAAG,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,EAAG,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,IAC9MsQ,OAAQ,IAAItT,EAAJ,SAAa,IAAIgD,EAAJ,UAAc,GAAI,GAAI,EAAG,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,EAAG,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,EAAG,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,EAAG,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,IAC7MuR,KAAM,IAAIvU,EAAJ,SAAa,IAAIgD,EAAJ,UAAc,GAAI,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,EAAG,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,EAAG,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,EAAG,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,IAC9MwR,QAAS,IAAIxU,EAAJ,SAAa,IAAIgD,EAAJ,UAAc,GAAI,EAAG,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,IAAK,GAAI,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,GAAI,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,GAAI,IAChNqP,MAAO,IAAIrS,EAAJ,SAAa,IAAIgD,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,IACtNuQ,KAAM,IAAIvT,EAAJ,SAAa,IAAIgD,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,IAC5MsP,MAAO,IAAItS,EAAJ,SAAa,IAAIgD,EAAJ,UAAc,EAAG,EAAG,EAAG,GAAI,IAAIA,EAAJ,UAAc,EAAG,EAAG,EAAG,GAAI,IAAIA,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,GAAI,GAAI,GAAI,IAC9LyR,MAAO,IAAIzU,EAAJ,SAAa,IAAIgD,EAAJ,UAAc,EAAG,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,EAAG,GAAI,IAAK,GAAI,IAAIA,EAAJ,UAAc,EAAG,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,IAC7M0R,UAAW,IAAI1U,EAAJ,SAAa,IAAIgD,EAAJ,UAAc,EAAG,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,GAAI,IAAK,GAAI,GAAI,IAAIA,EAAJ,UAAc,EAAG,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,GAAI,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,IACjN2R,UAAW,IAAI3U,EAAJ,SAAa,IAAIgD,EAAJ,UAAc,EAAG,GAAI,EAAG,GAAI,IAAIA,EAAJ,UAAc,GAAI,GAAI,GAAI,GAAI,IAAIA,EAAJ,UAAc,GAAI,IAAK,EAAG,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,EAAG,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,GAAI,IAAIA,EAAJ,UAAc,IAAK,IAAK,IAAK,KA4FxM,QAAA,MAAA,EAzFA,IAAI4R,EAAW,CACpBC,QAAS,IAAI5U,EAAJ,YAAgB,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAC3F6U,UAAW,IAAI7U,EAAJ,YAAgB,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAC7F8U,SAAU,IAAI9U,EAAJ,YAAgB,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAC5F+U,WAAY,IAAI/U,EAAJ,YAAgB,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAC9FgV,WAAY,IAAIhV,EAAJ,YAAgB,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAC9FiV,SAAU,IAAIjV,EAAJ,YAAgB,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAC5FkV,YAAa,IAAIlV,EAAJ,YAAgB,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,YAkF1F,QAAA,SAAA,EA/EA,IAAImV,EAAY,CACrBC,MAAO,IAAInV,EAAJ,aAAiB,SACxBoV,MAAO,IAAIpV,EAAJ,aAAiB,SACxBqV,MAAO,IAAIrV,EAAJ,aAAiB,SACxBsV,MAAO,IAAItV,EAAJ,aAAiB,SACxBuV,MAAO,IAAIvV,EAAJ,aAAiB,UA0EnB,QAAA,UAAA,EAvEA,IAAIwV,EAAc,CACvBC,MAAO,IAAIxV,EAAJ,eAAmB,SAC1ByV,MAAO,IAAIzV,EAAJ,eAAmB,SAC1B0V,KAAM,IAAI1V,EAAJ,eAAmB,QACzB2V,KAAM,IAAI3V,EAAJ,eAAmB,SAmEpB,QAAA,YAAA,EAhEA,IAAI4V,EAAW,CACpBC,cAAe,IAAI5V,EAAJ,YAAgB,gBAC/B6V,WAAY,IAAI7V,EAAJ,YAAgB,cA8DvB,QAAA,SAAA,EA3DA,IAAI8V,EAAY,CACrB5D,MAAO,IAAIjS,EAAJ,aAAiB,SACxB8V,MAAO,IAAI9V,EAAJ,aAAiB,SACxB+V,OAAQ,IAAI/V,EAAJ,aAAiB,WAwDpB,QAAA,UAAA,EArDA,IAAI4N,EAAc,CACvBoI,YAAa,IAAI/V,EAAJ,eAAmB,cAChCgW,MAAO,IAAIhW,EAAJ,eAAmB,SAC1BiW,YAAa,IAAIjW,EAAJ,eAAmB,cAChC6V,MAAO,IAAI7V,EAAJ,eAAmB,SAC1BkW,MAAO,IAAIlW,EAAJ,eAAmB,SAC1BmW,OAAQ,IAAInW,EAAJ,eAAmB,UAC3BoW,KAAM,IAAIpW,EAAJ,eAAmB,QACzBsS,WAAY,IAAItS,EAAJ,eAAmB,cAC/BqW,YAAa,IAAIrW,EAAJ,eAAmB,cAChCsW,aAAc,IAAItW,EAAJ,eAAmB,eACjCuW,aAAc,IAAIvW,EAAJ,eAAmB,gBA0C5B,QAAA,YAAA,EAvCA,IAAIwW,EAAc,CACvBzB,MAAO,IAAI9U,EAAJ,eAAmB,SAC1B+U,MAAO,IAAI/U,EAAJ,eAAmB,SAC1BgV,MAAO,IAAIhV,EAAJ,eAAmB,SAC1BiV,MAAO,IAAIjV,EAAJ,eAAmB,SAC1BkV,MAAO,IAAIlV,EAAJ,eAAmB,SAC1BwW,MAAO,IAAIxW,EAAJ,eAAmB,SAC1ByW,MAAO,IAAIzW,EAAJ,eAAmB,SAC1B0W,MAAO,IAAI1W,EAAJ,eAAmB,SAC1B2W,MAAO,IAAI3W,EAAJ,eAAmB,SAC1B4W,OAAQ,IAAI5W,EAAJ,eAAmB,UAC3B6W,OAAQ,IAAI7W,EAAJ,eAAmB,UAC3B8W,OAAQ,IAAI9W,EAAJ,eAAmB,UAC3B+W,OAAQ,IAAI/W,EAAJ,eAAmB,UAC3BgX,OAAQ,IAAIhX,EAAJ,eAAmB,UAC3BiX,OAAQ,IAAIjX,EAAJ,eAAmB,UAC3BkX,OAAQ,IAAIlX,EAAJ,eAAmB,WAuBtB,QAAA,YAAA,EApBA,IAAImX,EAAiB,CAC1BrC,MAAO,IAAI7U,EAAJ,kBAAsB,SAC7B8U,MAAO,IAAI9U,EAAJ,kBAAsB,SAC7B+U,MAAO,IAAI/U,EAAJ,kBAAsB,SAC7BgV,MAAO,IAAIhV,EAAJ,kBAAsB,SAC7BiV,MAAO,IAAIjV,EAAJ,kBAAsB,UAexB,QAAA,eAAA,EAZA,IAAImX,EAAoB,CAC7B/D,SAAU,IAAInT,EAAJ,qBAAyB,YACnCmX,WAAY,IAAInX,EAAJ,qBAAyB,cACrCoX,WAAY,IAAIpX,EAAJ,qBAAyB,eAShC,QAAA,kBAAA,EANA,IAAIqX,EAAuB,CAChCC,OAAQ,IAAIrX,EAAJ,wBAA4B,UACpCsX,WAAY,IAAItX,EAAJ,wBAA4B,cACxCuX,QAAS,IAAIvX,EAAJ,wBAA4B,YAGhC,QAAA,qBAAA,EAAA,IAAIwX,EAAa,CACtBC,GAAI,IAAIxX,EAAJ,cAAkB,MACtByX,OAAQ,IAAIzX,EAAJ,cAAkB,UAC1B0X,KAAM,IAAI1X,EAAJ,cAAkB,QACxB2X,IAAK,IAAI3X,EAAJ,cAAkB,QAJlB,QAAA,WAAA;;ACLQ4X,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAzKf,IAAA,EAAA,EAAA,QAAA,sBACA,EAAA,QAAA,WAIA,EAAA,QAAA,iBAoKeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAnJf,IAAIA,EAA4B,SAA5BA,EAAqC5T,EAAK+S,EAAgBxJ,EAAYC,EAAaqK,EAAgB3G,EAAMzP,EAAOgT,EAAWM,GACzH+C,IAAAA,EAAaC,EAKfC,EAAeC,EAJfC,EAAWhc,KAAK+I,KAAmB,QAAduI,GACrB2K,EAAqB,GAAb5K,EAAmB2K,EAAW,EACtCE,EAAsB,GAAd5K,EAAoB0K,EAAW,EACvCG,EAA4B,KAAb9K,EAEfd,EAAWsK,EAAenb,KAAO2R,EAAaC,EAAcqK,QAA2Bxb,IAAT6U,EAAqBA,EAAKtV,KAAO,WACpGS,IAAVoF,EAAsBA,EAAMA,MAAQ,WAAwBpF,IAAhB0Y,EAA4BA,EAAYnZ,KAAO,KAG1F,IAACgc,EAA0BlL,MAAMD,GAAW,CAgCtCsK,OA7BRgB,GADAD,GAAc,EAAavK,EAAAA,cAAAA,EAAYC,IAChB/H,WAAW,MAG9BoS,IAEFE,EAASO,YAAc,qBACvBP,EAASQ,cAAgBR,EAASS,cAAgBH,EAClDN,EAASU,WAA4B,EAAfJ,EAElB5D,IAAciE,EAAU5D,UAAAA,MACtB6D,EAAYxD,YAAAA,OAASJ,GACvBoD,EAAqB,QAAb5K,EAAwB2K,EAAW,EAC3CH,EAASpS,WAAU,EAAgBuS,EAAAA,SAAAA,EAAUhH,EAAMzP,GAAQ0W,EAAOC,IACzDO,EAAYzD,YAAAA,OAASH,GAC9BoD,EAAQ5K,GAAc,EAAI,SAAY2K,EAAW,EACjDH,EAASpS,WAAU,EAAgBuS,EAAAA,SAAAA,EAAUhH,EAAMzP,GAAQ0W,EAAOC,KAElEA,EAAsB,QAAd5K,EAAyB0K,EAAW,EAC5CH,EAASpS,WAAU,EAAgBuS,EAAAA,SAAAA,EAAUhH,EAAMzP,GAAQ0W,EAAqB,MAAd3K,IAGpEuK,EAASpS,WAAU,EAAgBuS,EAAAA,SAAAA,EAAUhH,EAAMzP,GAAQ0W,EAAOC,GAGpEL,EAASQ,cAAgBR,EAASS,cAAgB,EAClDT,EAASU,WAAa,GAIhB1B,EAAenb,MAChB,IAAA,QACHmc,EAAStP,YACTsP,EAASrP,OAAoB,QAAb6E,EAAqC,QAAdC,GACvCuK,EAAS7K,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,GAAdC,EAAgC,QAAbD,EAAqC,QAAdC,GACvIuK,EAAS7K,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GAC5IuK,EAAS7K,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GAC5IuK,EAAS7K,cAA2B,OAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GAC5IuK,EAASlP,aACTmP,EAAgBD,EAASpL,qBAAqB,QAAWY,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,IACjHZ,aAAa,EAAG,8BAC9BoL,EAAcpL,aAAa,EAAG,8BAC9B,MAEG,IAAA,QACHmL,EAAStP,YACTsP,EAASrP,OAAoB,QAAb6E,EAAqC,QAAdC,GACvCuK,EAAS7K,cAA2B,OAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,GAAbD,EAAgC,QAAdC,GACvIuK,EAAS7K,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GAC5IuK,EAAS7K,cAA2B,QAAbK,EAAqC,MAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,GAAbD,EAAgC,QAAdC,GACvIuK,EAAS7K,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,MAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GAC5IuK,EAASlP,aACTmP,EAAgBD,EAASpL,qBAAqB,EAAG,QAAWa,EAAa,EAAG,QAAWA,IACzEZ,aAAa,EAAG,8BAC9BoL,EAAcpL,aAAa,EAAG,8BAC9B,MAEG,IAAA,QACHmL,EAAStP,YACTsP,EAASrP,OAAoB,OAAb6E,EAAqC,OAAdC,GACvCuK,EAAS7K,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GAC5IuK,EAAS7K,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GAC5IuK,EAAS7K,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GAC5IuK,EAAS7K,cAA2B,MAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GAC5IuK,EAAS7K,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,MAAdC,GAC5IuK,EAAS7K,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GAC5IuK,EAAS7K,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,OAAbD,EAAqC,OAAdC,GAC5IuK,EAAS7K,cAA2B,QAAbK,EAAqC,OAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GAC5IuK,EAAS7K,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GAC5IuK,EAAS7K,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,OAAbD,EAAqC,OAAdC,GAC5IuK,EAASlP,aACTmP,EAAgBD,EAAS3K,qBAAsB,GAAOG,EAAc,GAAOC,EAAc,EAAK,GAAOD,EAAe,GAAOC,EAAc,OAAWD,IACtIX,aAAa,EAAG,0BAC9BoL,EAAcpL,aAAa,IAAM,0BACjCoL,EAAcpL,aAAa,IAAM,0BACjCoL,EAAcpL,aAAa,EAAG,6BAE9BmL,EAAStP,YACTsP,EAASrP,OAAoB,QAAb6E,EAAqC,QAAdC,GACvCuK,EAAS7K,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,OAAbD,EAAqC,QAAdC,GAC5IuK,EAAS7K,cAA2B,OAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GAC5IuK,EAAS7K,cAA2B,MAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GAC5IuK,EAAS7K,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,OAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GAC5IuK,EAAS7K,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GAC5IuK,EAAS7K,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GAC5IuK,EAASlP,aACToP,EAAiBF,EAASpL,qBAAqB,QAAWY,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,IACjHZ,aAAa,EAAG,8BAC/BqL,EAAerL,aAAa,EAAG,8BAC/BmL,EAAS5O,UAAY8O,EACrBF,EAAS1O,OACT,MAEG,IAAA,QACH0O,EAAStP,YACTsP,EAASrP,OAAoB,QAAb6E,EAAqC,GAAdC,GACvCuK,EAAS7K,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,GAAbD,EAAgC,QAAdC,GACvIuK,EAAS7K,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GAC5IuK,EAAS7K,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GAC5IuK,EAAS7K,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GAC5IuK,EAAS7K,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,MAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GAC5IuK,EAAS7K,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,OAAdC,EAAqC,QAAbD,EAAqC,GAAdC,GAC5IuK,EAASlP,aACTmP,EAAgBD,EAASpL,qBAAqB,EAAG,QAAWa,EAAa,EAAG,QAAWA,IACzEZ,aAAa,EAAG,8BAC9BoL,EAAcpL,aAAa,EAAG,8BAC9B,MAEG,IAAA,QAEL,QACEmL,EAAStP,YACTsP,EAASrP,OAAoB,QAAb6E,EAAqC,QAAdC,GACvCuK,EAAS7K,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,GAAbD,EAAgC,QAAdC,GACvIuK,EAAS7K,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GAC5IuK,EAAS7K,cAA2B,QAAbK,EAAqC,MAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,GAAbD,EAAgC,QAAdC,GACvIuK,EAAS7K,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,MAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GAC5IuK,EAASlP,aACTmP,EAAgBD,EAASpL,qBAAqB,EAAG,QAAWa,EAAa,EAAG,QAAWA,IACzEZ,aAAa,EAAG,8BAC9BoL,EAAcpL,aAAa,EAAG,8BAGlCmL,EAAS5O,UAAY6O,EACrBD,EAAS1O,OAGTuO,EAA0BlL,MAAMD,GAAYqL,EAGvC,OADP9T,EAAI2B,UAAUiS,EAA0BlL,MAAMD,GAAW,EAAG,GACrD,MAETmL,EAA0BlL,MAAQ,GAEnBkL,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACrDAgB,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EApHf,IAAA,EAAA,QAAA,WAMIA,EAAiB,SAAjBA,EAA0B1M,EAAMtK,EAAOqS,GACrC4E,IAAAA,EAAWC,EAIbtM,EAFAuM,EAAa,EAAI7c,KAAKC,MAAM+P,EAAO,GACnC8M,EAAa,EAAI9c,KAAKC,MAAM+P,EAAO,GAEnCO,EAAWP,EAAKxI,WAAa9B,EAAQqS,EAAS7S,cAG5C,IAACwX,EAAelM,MAAMD,GAAW,CAI3B7K,OAFRkX,GADAD,GAAY,EAAa3M,EAAAA,cAAAA,EAAMA,IACZzG,WAAW,MAEtB7D,GACD,KAAA,GAEH4K,EAAOsM,EAAO1L,qBAAqB2L,EAAYC,EAAY,EAAGD,EAAYC,EAAmB,GAAP9M,EAAa,IAC9FU,aAAa,EAAGqH,EAAS3S,iBAC9BkL,EAAKI,aAAa,GAAKqH,EAAS1S,iBAChCiL,EAAKI,aAAa,EAAGqH,EAASzS,gBAC9BsX,EAAO3P,UAAYqD,EAEnBsM,EAAOrQ,YACPqQ,EAAO3L,IAAI4L,EAAYC,EAAmB,GAAP9M,EAAa,EAAG,EAAGpK,EAAtD,QAA8D,GAC9DgX,EAAOjQ,YACPiQ,EAAOzP,QAGPmD,EAAOsM,EAAO1L,qBAAqB2L,EAAYC,EAAY,EAAGD,EAAYC,EAAmB,GAAP9M,EAAa,IAC9FU,aAAa,EAAG,oBACrBJ,EAAKI,aAAa,GAAK,oBACvBJ,EAAKI,aAAa,EAAG,sBACrBkM,EAAO3P,UAAYqD,EAEnBsM,EAAOrQ,YACPqQ,EAAO3L,IAAI4L,EAAYC,EAAmB,GAAP9M,EAAa,EAAG,EAAGpK,EAAtD,QAA8D,GAC9DgX,EAAOjQ,YACPiQ,EAAOzP,QAGPmD,EAAOsM,EAAOnM,qBAAqB,EAAG,IAAOT,EAAM,EAAG,IAAOA,EAAO,IAAOA,IACtEU,aAAa,EAAG,4BACrBJ,EAAKI,aAAa,EAAG,0BACrBkM,EAAO3P,UAAYqD,EAEnBsM,EAAOrQ,YACPqQ,EAAO3L,IAAI4L,EAAY,IAAO7M,EAAO,GAAMA,EAAO,EAAU,GAAPA,EAAY,EAAGpK,EAApE,QAA4E,GAC5EgX,EAAOjQ,YACPiQ,EAAOzP,OACP,MAEG,KAAA,GAEHmD,EAAOsM,EAAO1L,qBAAqB2L,EAAYC,EAAY,EAAGD,EAAYC,EAAmB,GAAP9M,EAAa,IAC9FU,aAAa,EAAGqH,EAAS/S,gBAC9BsL,EAAKI,aAAa,GAAKqH,EAAS9S,gBAChCqL,EAAKI,aAAa,EAAGqH,EAAS7S,eAC9B0X,EAAO3P,UAAYqD,EAEnBsM,EAAOrQ,YACPqQ,EAAO3L,IAAI4L,EAAYC,EAAmB,GAAP9M,EAAa,EAAG,EAAGpK,EAAtD,QAA8D,GAC9DgX,EAAOjQ,YACPiQ,EAAOzP,QAGPmD,EAAOsM,EAAO1L,qBAAqB2L,EAAYC,EAAY,EAAGD,EAAYC,EAAmB,GAAP9M,EAAa,IAC9FU,aAAa,EAAG,oBACrBJ,EAAKI,aAAa,GAAK,oBACvBJ,EAAKI,aAAa,EAAG,sBACrBkM,EAAO3P,UAAYqD,EAEnBsM,EAAOrQ,YACPqQ,EAAO3L,IAAI4L,EAAYC,EAAmB,GAAP9M,EAAa,EAAG,EAAGpK,EAAtD,QAA8D,GAC9DgX,EAAOjQ,YACPiQ,EAAOzP,QAGPmD,EAAOsM,EAAOnM,qBAAqB,EAAG,IAAOT,EAAM,EAAG,IAAOA,EAAO,IAAOA,IACtEU,aAAa,EAAG,4BACrBJ,EAAKI,aAAa,EAAG,0BACrBkM,EAAO3P,UAAYqD,EAEnBsM,EAAOrQ,YACPqQ,EAAO3L,IAAI4L,EAAY,IAAO7M,EAAO,GAAMA,EAAO,EAAU,GAAPA,EAAY,EAAGpK,EAApE,QAA4E,GAC5EgX,EAAOjQ,YACPiQ,EAAOzP,QAGPmD,EAAOsM,EAAO1L,qBAAqB2L,EAAYC,EAAY,EAAGD,EAAYC,EAAY9M,EAAO,IACxFU,aAAa,GAAG,EAASqH,EAAAA,UAAAA,EAAS5S,YAAa,IACpDmL,EAAKI,aAAa,IAAK,EAASqH,EAAAA,UAAAA,EAAS5S,YAAa,KACtDmL,EAAKI,aAAa,IAAK,EAASqH,EAAAA,UAAAA,EAAS5S,YAAa,MACtDmL,EAAKI,aAAa,IAAK,EAASqH,EAAAA,UAAAA,EAAS5S,YAAa,MACtDmL,EAAKI,aAAa,KAAM,EAASqH,EAAAA,UAAAA,EAAS5S,YAAa,MACvDmL,EAAKI,aAAa,GAAG,EAASqH,EAAAA,UAAAA,EAAS5S,YAAa,IACpDyX,EAAO3P,UAAYqD,EAEnBsM,EAAOrQ,YACPqQ,EAAO3L,IAAI4L,EAAYC,EAAY9M,EAAO,EAAG,EAAGpK,EAAhD,QAAwD,GACxDgX,EAAOjQ,YACPiQ,EAAOzP,OAIXuP,EAAelM,MAAMD,GAAYoM,EAE5BD,OAAAA,EAAelM,MAAMD,IAE9BmM,EAAelM,MAAQ,GAERkM,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACjEAK,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAnDf,IAAA,EAAA,QAAA,WAKIA,EAA2B,SAA3BA,EAAoCpT,EAAOC,EAAQ2M,GACjDyG,IAAAA,EAAWC,EAMb3M,EAHA4M,EAAKvT,EACLwT,EAAKvT,EACLwT,EAA+B,KAA1Bpd,KAAK+N,IAAIpE,EAAOC,GAIrByT,EAAK1T,EAAQ,EACb2T,EAAK1T,EAAS,EACd2T,EAAKH,EAAK,EACV7M,EAAW5G,EAAMnC,WAAaoC,EAAS4T,KAAKC,UAAUlH,GA6BjDwG,OA1BFA,EAAyBvM,MAAMD,MAIlCD,GAFA2M,GADAD,GAAY,EAAarT,EAAAA,cAAAA,EAAOC,IACbL,WAAW,OAEhBkH,qBAAqB,EAjB9B,EAiBqC,EAjBrC,EAiB6C0M,IAC7CzM,aAAa,EAAG,WACrBJ,EAAKI,aAAa,IAAM,WACxBJ,EAAKI,aAAa,IAAM,WACxBJ,EAAKI,aAAa,EAAG,WACrBuM,EAAOhQ,UAAYqD,GACF2M,EAAAA,EAAAA,kBAAAA,EAxBZ,EACA,EAuB4BC,EAAIC,EAAIC,GACzCH,EAAO9P,QAGPmD,EAAO2M,EAAOxM,qBAAqB,EArB9B,EAqBqC,EArBrC,EAqB6C6M,IAC7C5M,aAAa,EAAG6F,EAASnS,oBAC9BkM,EAAKI,aAAa,IAAM6F,EAASlS,wBACjCiM,EAAKI,aAAa,IAAM6F,EAASjS,wBACjCgM,EAAKI,aAAa,GAAK6F,EAAShS,wBAChC+L,EAAKI,aAAa,EAAG6F,EAAS/R,mBAC9ByY,EAAOhQ,UAAYqD,GACF2M,EAAAA,EAAAA,kBAAAA,EA7BZ,EACA,EA4B4BI,EAAIC,EAAIC,GACzCN,EAAO9P,OAEP4P,EAAyBvM,MAAMD,GAAYyM,GAEtCD,EAAyBvM,MAAMD,IAExCwM,EAAyBvM,MAAQ,GAElBuM,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACLAW,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA9Cf,IAAA,EAAA,QAAA,WAIIA,EAA2B,SAA3BA,EAAoC1N,EAAM2N,EAAgBC,EAAQC,GAChEC,IAAAA,EAAiBC,EACnBxN,EAAWP,EAAKxI,WAAamW,EAAiBC,EAASC,EAoClDH,OAjCFA,EAAyBlN,MAAMD,KAElCwN,GADAD,EAAkB/X,EAAI6G,IAAAA,cAAc,WACLrD,WAAW,MAC1CuU,EAAgBnU,MAAQqG,EACxB8N,EAAgBlU,OAASoG,EACzB+N,EAAa9Q,UAAY0Q,EACrBC,GACFG,EAAaxR,YACbwR,EAAavR,OAAc,GAAPwD,EAAYA,GAChC+N,EAAatR,OAAO,EAAG,GACvBsR,EAAatR,OAAOuD,EAAM,GAC1B+N,EAAapR,YACboR,EAAa5Q,QAET0Q,GACFE,EAAaxR,YACbwR,EAAavR,OAAOwD,EAAa,GAAPA,GAC1B+N,EAAatR,OAAO,EAAG,GACvBsR,EAAatR,OAAO,EAAGuD,GACvB+N,EAAapR,YACboR,EAAa5Q,SAEb4Q,EAAaxR,YACbwR,EAAavR,OAAc,GAAPwD,EAAY,GAChC+N,EAAatR,OAAOuD,EAAMA,GAC1B+N,EAAatR,OAAO,EAAGuD,GACvB+N,EAAapR,YACboR,EAAa5Q,QAIjBuQ,EAAyBlN,MAAMD,GAAYuN,GAEtCJ,EAAyBlN,MAAMD,IAExCmN,EAAyBlN,MAAQ,GAElBkN,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACmMAM,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAjPf,IAAA,EAAA,QAAA,WAMIA,EAAuB,SAAvBA,EAAgCrU,EAAOsU,EAAWtW,GAChDiC,IACFsU,EAAaC,EACbhR,EAFEvD,EAAiB,EAARD,EAGX4G,EAAW0N,EAAUvY,MAAQiE,EAAQ6T,KAAKC,UAAU9V,GAEpDyW,EAAc,WAERrG,IAAAA,EAAWpQ,EAAO,GAEE,OAApBsW,EAAUvY,QACZyH,EAAOgR,EAASjN,qBAAqB,GAAMvH,EAAO,GAAMC,EAAQ,EAAG,GAAMD,EAAO,GAAMC,EAAQ,GAAMD,IAC/F+G,aAAa,EAAGqH,EAAS/S,gBAC9BmI,EAAKuD,aAAa,GAAKqH,EAAS9S,gBAChCkI,EAAKuD,aAAa,EAAGqH,EAAS7S,kBAE9BiI,EAAOgR,EAAS1N,qBAAqB,EAAG,EAAG,EAAG,GAAM7G,IAC/C8G,aAAa,EAAG,WACrBvD,EAAKuD,aAAa,EAAG,YAEvByN,EAASlR,UAAYE,EACrBgR,EAAS5R,YACT4R,EAAS3R,OAAO,GAAM7C,EAAO,GAC7BwU,EAAS1R,OAAO9C,EAAO,GAAMC,GAC7BuU,EAAS1R,OAAO,KAAQ9C,EAAO,GAAMC,GACrCuU,EAAS1R,OAAO,KAAQ9C,EAAO,IAAOC,GACtCuU,EAAS1R,OAAO,KAAQ9C,EAAO,IAAOC,GACtCuU,EAAS1R,OAAO,KAAQ9C,EAAO,GAAMC,GACrCuU,EAAS1R,OAAO,EAAG,GAAM7C,GACzBuU,EAASxR,YACTwR,EAAShR,OACe,OAApB8Q,EAAUvY,OAEZyY,EAASrN,YAAc,qBACvBqN,EAAS5R,YACT4R,EAAS3R,OAAO,EAAG,GAAM5C,GACzBuU,EAAS1R,OAAO,GAAM9C,EAAO,GAC7BwU,EAAS1R,OAAO9C,EAAO,GAAMC,GAC7BuU,EAAS3R,OAAO,KAAQ7C,EAAO,GAAMC,GACrCuU,EAAS1R,OAAO,KAAQ9C,EAAO,IAAOC,GACtCuU,EAASpN,SAEToN,EAASrN,YAAc,2BACvBqN,EAAS5R,YACT4R,EAAS3R,OAAO,KAAQ7C,EAAO,IAAOC,GACtCuU,EAAS1R,OAAO,KAAQ9C,EAAO,IAAOC,GACtCuU,EAAS1R,OAAO,KAAQ9C,EAAO,GAAMC,GACrCuU,EAAS1R,OAAO9C,EAAO,GAAMC,GAC7BuU,EAASpN,YAGT5D,EAAOgR,EAASjN,qBAAqB,GAAMvH,EAAO,GAAMC,EAAQ,EAAG,GAAMD,EAAO,GAAMC,EAAQ,GAAMD,IAC/F+G,aAAa,GAAG,EAASqH,EAAAA,UAAAA,EAAS5S,YAAa,IACpDgI,EAAKuD,aAAa,IAAK,EAASqH,EAAAA,UAAAA,EAAS5S,YAAa,KACtDgI,EAAKuD,aAAa,IAAK,EAASqH,EAAAA,UAAAA,EAAS5S,YAAa,KACtDgI,EAAKuD,aAAa,IAAK,EAASqH,EAAAA,UAAAA,EAAS5S,YAAa,KACtDgI,EAAKuD,aAAa,KAAM,EAASqH,EAAAA,UAAAA,EAAS5S,YAAa,MACvDgI,EAAKuD,aAAa,GAAG,EAASqH,EAAAA,UAAAA,EAAS5S,YAAa,IACpDgZ,EAASlR,UAAYE,EAErBgR,EAAS5R,YACT4R,EAASlN,IAAI,GAAMtH,EAAO,GAAMC,EAAQ,GAAMD,EAAO,EAAG/D,EAAxD,QAAgE,GAChEuY,EAASxR,YACTwR,EAAShR,SAIbkR,EAAa,WAEPtG,IAAAA,EAAWpQ,EAAO,GAEtBwW,EAAS5R,YACe,WAApB0R,EAAUvY,OACZyH,EAAO4K,EAAS7S,cAChBiZ,EAASlR,UAAYE,EACrBgR,EAASjR,KAAK,KAAQvD,EAAO,IAAOC,EAAQ,KAAQD,EAAO,KAAQC,GACnEuU,EAASjR,KAAK,KAAQvD,EAAO,KAAQC,EAAQ,KAAQD,EAAO,KAAQC,GACpEuU,EAASxR,YACTwR,EAAShR,UAETA,EAAOgR,EAAS1N,qBAAqB,EAAG,IAAO7G,EAAQ,EAAG,IAAOA,EAAS,KAAQA,IAC7E8G,aAAa,EAAG,WACrBvD,EAAKuD,aAAa,EAAG,WACrByN,EAASlR,UAAYE,EACrBgR,EAASjR,KAAK,KAAQvD,EAAO,IAAOC,EAAQ,KAAQD,EAAO,KAAQC,GACnEuU,EAASxR,YACTwR,EAAShR,QACTA,EAAOgR,EAAS1N,qBAAqB,EAAG,KAAQ7G,EAAQ,EAAG,KAAQA,EAAS,KAAQA,IAC/E8G,aAAa,EAAG,WACrBvD,EAAKuD,aAAa,EAAG,WACrByN,EAASlR,UAAYE,EACrBgR,EAASjR,KAAK,KAAQvD,EAAO,KAAQC,EAAQ,KAAQD,EAAO,KAAQC,GACpEuU,EAASxR,YACTwR,EAAShR,QAEa,WAApB8Q,EAAUvY,OAEZyY,EAASrN,YAAc,qBACvBqN,EAAS5R,YACT4R,EAAS3R,OAAO,KAAQ7C,EAAO,IAAOC,EAAS,KAAQA,GACvDuU,EAAS1R,OAAO,KAAQ9C,EAAO,IAAOC,GACtCuU,EAAS1R,OAAO,KAAQ9C,EAAQ,KAAQA,EAAO,IAAOC,GACtDuU,EAASpN,SACToN,EAAS5R,YACT4R,EAAS3R,OAAO,KAAQ7C,EAAO,KAAQC,EAAS,KAAQA,GACxDuU,EAAS1R,OAAO,KAAQ9C,EAAO,KAAQC,GACvCuU,EAAS1R,OAAO,KAAQ9C,EAAQ,KAAQA,EAAO,KAAQC,GACvDuU,EAASpN,SAEToN,EAASrN,YAAc,2BACvBqN,EAAS5R,YACT4R,EAAS3R,OAAO,KAAQ7C,EAAQ,KAAQA,EAAO,IAAOC,GACtDuU,EAAS1R,OAAO,KAAQ9C,EAAQ,KAAQA,EAAO,IAAOC,EAAS,KAAQA,GACvEuU,EAAS1R,OAAO,KAAQ9C,EAAO,IAAOC,EAAS,KAAQA,GACvDuU,EAASpN,SACToN,EAAS5R,YACT4R,EAAS3R,OAAO,KAAQ7C,EAAQ,KAAQA,EAAO,KAAQC,GACvDuU,EAAS1R,OAAO,KAAQ9C,EAAQ,KAAQA,EAAO,KAAQC,EAAS,KAAQA,GACxEuU,EAAS1R,OAAO,KAAQ9C,EAAO,KAAQC,EAAS,KAAQA,GACxDuU,EAASpN,YAGT5D,EAAOgR,EAASjN,qBAAqB,GAAMvH,EAAO,GAAMC,EAAQ,EAAG,GAAMD,EAAO,GAAMC,EAAQ,GAAMD,IAC/F+G,aAAa,GAAG,EAASqH,EAAAA,UAAAA,EAAS5S,YAAa,IACpDgI,EAAKuD,aAAa,IAAK,EAASqH,EAAAA,UAAAA,EAAS5S,YAAa,KACtDgI,EAAKuD,aAAa,IAAK,EAASqH,EAAAA,UAAAA,EAAS5S,YAAa,KACtDgI,EAAKuD,aAAa,IAAK,EAASqH,EAAAA,UAAAA,EAAS5S,YAAa,KACtDgI,EAAKuD,aAAa,KAAM,EAASqH,EAAAA,UAAAA,EAAS5S,YAAa,MACvDgI,EAAKuD,aAAa,GAAG,EAASqH,EAAAA,UAAAA,EAAS5S,YAAa,IACpDgZ,EAASlR,UAAYE,EACrBgR,EAAS5R,YACT4R,EAASlN,IAAI,GAAMtH,EAAO,GAAMC,EAAQ,GAAMD,EAAO,EAAG/D,EAAxD,QAAgE,GAChEuY,EAASxR,YACTwR,EAAShR,SAIbmR,EAAgB,WAEVvG,IAAAA,EAAWpQ,EAAO,GACE,SAApBsW,EAAUvY,QACZyH,EAAOgR,EAASjN,qBAAqB,GAAMvH,EAAO,GAAMC,EAAQ,EAAG,GAAMD,EAAO,GAAMC,EAAQ,GAAMD,IAC/F+G,aAAa,EAAGqH,EAAS/S,gBAC9BmI,EAAKuD,aAAa,GAAKqH,EAAS9S,gBAChCkI,EAAKuD,aAAa,EAAGqH,EAAS7S,kBAE9BiI,EAAOgR,EAAS1N,qBAAqB,EAAG,IAAO7G,EAAQ,EAAGA,IACrD8G,aAAa,EAAG,WACrBvD,EAAKuD,aAAa,EAAG,YAEvByN,EAAS5R,YACT4R,EAASlR,UAAYE,EACrBgR,EAAS3R,OAAO,GAAM7C,EAAOC,GAC7BuU,EAAS1R,OAAO9C,EAAO,GAAMC,GAC7BuU,EAAS1R,OAAO,KAAQ9C,EAAO,GAAMC,GACrCuU,EAAS1R,OAAO,KAAQ9C,EAAO,IAAOC,GACtCuU,EAAS1R,OAAO,KAAQ9C,EAAO,IAAOC,GACtCuU,EAAS1R,OAAO,KAAQ9C,EAAO,GAAMC,GACrCuU,EAAS1R,OAAO,EAAG,GAAM7C,GACzBuU,EAASxR,YACTwR,EAAShR,OACe,SAApB8Q,EAAUvY,OAEZyY,EAASrN,YAAc,qBACvBqN,EAAS5R,YACT4R,EAAS3R,OAAO,EAAG,GAAM5C,GACzBuU,EAAS1R,OAAO,KAAQ9C,EAAO,GAAMC,GACrCuU,EAAS3R,OAAO,KAAQ7C,EAAO,IAAOC,GACtCuU,EAAS1R,OAAO,KAAQ9C,EAAO,IAAOC,GACtCuU,EAASpN,SACToN,EAAS5R,YACT4R,EAAS3R,OAAO,KAAQ7C,EAAO,GAAMC,GACrCuU,EAAS1R,OAAO9C,EAAO,GAAMC,GAC7BuU,EAASpN,SAEToN,EAASrN,YAAc,2BACvBqN,EAAS5R,YACT4R,EAAS3R,OAAO,EAAG,GAAM5C,GACzBuU,EAAS1R,OAAO,GAAM9C,EAAOC,GAC7BuU,EAAS1R,OAAO9C,EAAO,GAAMC,GAC7BuU,EAASpN,SACToN,EAAS5R,YACT4R,EAAS3R,OAAO,KAAQ7C,EAAO,GAAMC,GACrCuU,EAAS1R,OAAO,KAAQ9C,EAAO,IAAOC,GACtCuU,EAASpN,YAGT5D,EAAOgR,EAASjN,qBAAqB,GAAMvH,EAAO,GAAMC,EAAQ,EAAG,GAAMD,EAAO,GAAMC,EAAQ,GAAMD,IAC/F+G,aAAa,GAAG,EAASqH,EAAAA,UAAAA,EAAS5S,YAAa,IACpDgI,EAAKuD,aAAa,IAAK,EAASqH,EAAAA,UAAAA,EAAS5S,YAAa,KACtDgI,EAAKuD,aAAa,IAAK,EAASqH,EAAAA,UAAAA,EAAS5S,YAAa,KACtDgI,EAAKuD,aAAa,IAAK,EAASqH,EAAAA,UAAAA,EAAS5S,YAAa,KACtDgI,EAAKuD,aAAa,KAAM,EAASqH,EAAAA,UAAAA,EAAS5S,YAAa,MACvDgI,EAAKuD,aAAa,GAAG,EAASqH,EAAAA,UAAAA,EAAS5S,YAAa,IACpDgZ,EAASlR,UAAYE,EACrBgR,EAAS5R,YACT4R,EAASlN,IAAI,GAAMtH,EAAO,GAAMC,EAAQ,GAAMD,EAAO,EAAG/D,EAAxD,QAAgE,GAChEuY,EAASxR,YACTwR,EAAShR,SAKX,IAAC6Q,EAAqBxN,MAAMD,GAAW,CAMjC0N,OAJRC,GAAc,EAAavU,EAAAA,cAAQ,EAARA,EAAmB,EAARA,IACtCwU,EAAWD,EAAY3U,WAAW,OACzBkL,UAAkB,GAAR9K,EAAqB,GAARA,GAExBsU,EAAUvY,OACX,IAAA,KACH4Y,IACAD,IACAD,IACA,MACG,IAAA,SACHE,IACAF,IACAC,IACA,MACG,IAAA,OAEL,QACED,IACAC,IACAC,IAIJN,EAAqBxN,MAAMD,GAAY2N,EAElCF,OAAAA,EAAqBxN,MAAMD,IAEpCyN,EAAqBxN,MAAQ,GAEdwN,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;AC1KAO,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAvEf,IAAA,EAAA,QAAA,WAIA,EAAA,QAAA,iBAiBIA,EAAiB,SAASzW,EAAKuJ,EAAYC,EAAakN,EAAaC,EAAY1K,EAAiB8J,EAAUD,EAAQc,EAAQnG,GAC9HA,OAAapY,IAAcoY,EAAYA,EAAYiE,EAAUhE,UAAAA,MAAQD,EACrEzQ,EAAI2J,OACJ3J,EAAI6W,UAAaf,EAAS,SAAW,OACrC9V,EAAI8W,aAAe,SACnB9W,EAAIgJ,YAAciD,EAAgB7P,WAAWmD,eAC7CS,EAAImF,UAAY8G,EAAgB7P,WAAWmD,eAEvCuW,GACF9V,EAAI+W,KAAO,QAAWxN,EAAa,MAAQnL,EAA3C,YACA4B,EAAIgX,SAASN,EAAanN,EAAa,EAAiB,GAAdC,EAAgC,GAAbD,GAC7DvJ,EAAIgX,SAASL,EAAYpN,EAAa,EAAiB,IAAdC,EAAiC,GAAbD,IAGzDwM,GACF/V,EAAI+W,KAAO,GAAMxN,EAAa,MAAQnL,EAAtC,YACA4B,EAAI2J,OACJ3J,EAAI2M,UAAU,QAAWpD,EAAY,MAASC,GAC9CxJ,EAAI4M,OAAO,UACX5M,EAAIgX,SAASN,EAAa,EAAG,GAC7B1W,EAAI2M,WAAW,QAAWpD,GAAa,MAASC,GAChDxJ,EAAI6J,UACJ7J,EAAI+W,KAAO,QAAWxN,EAAa,MAAQnL,EAA3C,YACIwY,EAEqB,UAAnBnG,EAAU7Y,MACZoI,EAAI6W,UAAY,QAChB7W,EAAIgX,SAASL,EAAY,IAAOpN,EAA0B,IAAdC,EAAiC,IAAbD,IAEhEvJ,EAAIgX,SAASL,EAAY,IAAOpN,EAA0B,IAAdC,EAAiC,GAAbD,IAIlEvJ,EAAI6W,UAAY,SACO,UAAnBpG,EAAU7Y,KACZoI,EAAIgX,SAASL,EAAYpN,EAAa,EAAiB,IAAdC,EAAiC,GAAbD,GAE7DvJ,EAAIgX,SAASL,EAAYpN,EAAa,EAAiB,IAAdC,EAAiC,GAAbD,MAIjEvJ,EAAI+W,KAAO,KAAQxN,EAAa,MAAQnL,EAAxC,YACA4B,EAAIgX,SAASN,EAA0B,IAAbnN,EAAiC,IAAdC,EAAiC,GAAbD,GACjEvJ,EAAI+W,KAAO,KAAQxN,EAAa,MAAQnL,EAAxC,YACA4B,EAAIgX,SAASL,EAAyB,MAAbpN,EAAmC,GAAdC,EAAgC,IAAbD,IAGrEvJ,EAAI6J,WAGS4M,EAAAA,EAAAA,QAAAA,QAAAA;;ACmLAQ,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA3Pf,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,QAAA,WA0PeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAlPf,IAAIA,EAAW,SAASjN,EAAQkN,GAI1BC,IAaFC,EAAOpX,EAEPqX,EAAaC,EAAYC,EACzB1V,EAAO2V,EAAcC,EAAeC,EAGpCC,EAAkBC,EAClBC,EAAkBC,EAClBC,EAAaC,EACbC,EAAeC,EAtBbf,OAAY9e,KAHhB6e,EAAaA,GAAc,IAGcC,SAAW,KAAOD,EAAWC,SACpErV,OAAUzJ,IAAc6e,EAAWpV,OAAS,EAAIoV,EAAWpV,OAC3DqW,OAAU9f,IAAc6e,EAAWiB,OAAS,EAAIjB,EAAWiB,OAC3DC,OAAY/f,IAAc6e,EAAWkB,SAAW,EAAIlB,EAAWkB,SAC/DC,OAAoBhgB,IAAc6e,EAAWmB,iBAAmB,UAAYnB,EAAWmB,iBACvFC,OAAoBjgB,IAAc6e,EAAWoB,iBAAmB,UAAYpB,EAAWoB,iBACvFvB,OAAQ1e,IAAc6e,EAAWH,KAAO,aAAeG,EAAWH,KAClEpQ,OAAStO,IAAc6e,EAAWvQ,MAAQ,EAAIuQ,EAAWvQ,MACzD4R,OAAkBlgB,IAAc6e,EAAWqB,eAAiB,UAAYrB,EAAWqB,eACnFC,OAAkBngB,IAAc6e,EAAWsB,eAAiB,UAAYtB,EAAWsB,eACnFC,OAAgBpgB,IAAc6e,EAAWuB,aAAe,IAAOvB,EAAWuB,aAE1EC,GAAc,EAEdC,GAAa,EAGbC,EAAS,GAUT5Y,EADEmX,IAGI,EAAiBnN,EAAAA,kBAAAA,GAIV,IAAXlI,IACFA,EAAS9B,EAAIgK,OAAOlI,QAIlB6E,EAAQ,IACVA,EAAQ,GAGV0Q,EAAcnf,KAAKiM,MAAe,IAATrC,GACzByV,EAAU,OAASF,EAAc,MAAQN,EAEzCO,EAAapf,KAAKiM,MAAe,IAATrC,GACxBD,EAAQyV,GAAca,EAASC,GAG/BV,EAA6B,KAD7BD,GADAD,EAA6B,GAAdH,GACgB,IAI/BrX,EAAIgK,OAAOnI,MAAQA,EACnB7B,EAAIgK,OAAOlI,OAASA,EAGpB6V,GAAmB,EAAa9V,EAAAA,cAAAA,EAAOC,GACvC8V,EAAoBD,EAAiBlW,WAAW,MAEhDoW,GAAmB,EAAahW,EAAAA,cAAAA,EAAOC,GACvCgW,EAAoBD,EAAiBpW,WAAW,MAEhDsW,GAAc,EAAaT,EAAAA,cAAAA,EAA2B,IAAfE,GACvCQ,EAAeD,EAAYtW,WAAW,MAEtCwW,GAAgB,EAAaX,EAAAA,cAAAA,EAA2B,IAAfE,GACzCU,EAAiBD,EAAcxW,WAAW,MA2GrCoX,KAAAA,iBAAmB,SAASC,EAAQnR,GACnCoR,IAAAA,EAAQ,KA4BL,OA3BPD,EAASE,WAAWF,IAEP,IACXA,EAAS,GAEPnS,IAAUmS,SACRzgB,IAAc+e,GAASA,EAAMte,WAC/Bse,EAAMvf,QAGRuf,EAAQ,IAAIpiB,EAAJ,QAAU,GAAI,GAAIA,EAAMkG,QAAAA,cAAeyL,EAAOmS,EAAQ,IACxDG,gBAAkB,SAASC,GAC/BvS,EAAQuS,EAAMvhB,OAAOX,KAChB2hB,IACHA,GAAa,GACII,EAAAA,EAAAA,kBAAAA,EAAMI,WAKvBxR,GAAiC,mBAAdA,IACrByP,EAAMgC,iBAAmBzR,GAG3ByP,EAAM3e,SAEH0gB,KAAAA,UACE,MAGJE,KAAAA,SAAW,SAASP,GAMhB,OALPnS,EAAQqS,WAAWF,IACP,IACVnS,EAAQ,GAELwS,KAAAA,UACE,MAGJG,KAAAA,SAAW,WACP3S,OAAAA,GAGJwS,KAAAA,QAAU,WACRT,GAvJEtiB,WACHoS,IAAAA,EAAMlT,EAqCLA,IAnCLojB,GAAc,EAGdZ,EAAkB1S,KAAK,EAAG,EAAGvD,EAAOC,IACpC0G,EAAOsP,EAAkBnP,qBAAqB,EAAG,EAAG,EAAG7G,IAClD8G,aAAa,EAAG,oBACrBJ,EAAKI,aAAa,GAAK,sBACvBJ,EAAKI,aAAa,IAAM,6BACxBJ,EAAKI,aAAa,IAAM,0BACxBJ,EAAKI,aAAa,GAAK,sBACvBJ,EAAKI,aAAa,EAAG,oBACrBkP,EAAkB3S,UAAYqD,EAC9BsP,EAAkBzS,OAIlB2S,EAAa5S,KAAK,EAAG,EAAGkS,EAA2B,IAAfE,GACpCQ,EAAa7S,UAAYoT,EACzBP,EAAa3S,OAEb2S,EAAahP,YAAc,UAC3BgP,EAAanP,UAAY,MACzBmP,EAAatT,OAAO,EAAG,GACvBsT,EAAarT,OAAO,EAAkB,IAAf6S,GACvBQ,EAAa/O,SACb+O,EAAahP,YAAc,UAC3BgP,EAAatT,OAAO4S,EAAY,GAChCU,EAAarT,OAAO2S,EAA2B,IAAfE,GAChCQ,EAAa/O,SAEb+O,EAAanB,UAAY,SACzBmB,EAAalB,aAAe,SAC5BkB,EAAajB,KAAOQ,EACpBS,EAAa7S,UAAYqT,EAEpBljB,EAAI,EAAGA,EAAI,GAAIA,IAClB0iB,EAAahB,SAAS1hB,EAAI,GAAiB,GAAbgiB,EAAkBG,GAAiBniB,EAAI,GAAKmiB,EAAgB,GAIxFW,GAAAA,EAAW,EAqBR9iB,IAnBL4iB,EAAe9S,KAAK,EAAG,EAAGkS,EAA2B,IAAfE,GACtCU,EAAe/S,UAAYkT,EAC3BH,EAAe7S,OAEf6S,EAAelP,YAAc,UAC7BkP,EAAerP,UAAY,MAC3BqP,EAAexT,OAAO,EAAG,GACzBwT,EAAevT,OAAO,EAAkB,IAAf6S,GACzBU,EAAejP,SACfiP,EAAelP,YAAc,UAC7BkP,EAAexT,OAAO4S,EAAY,GAClCY,EAAevT,OAAO2S,EAA2B,IAAfE,GAClCU,EAAejP,SAEfiP,EAAerB,UAAY,SAC3BqB,EAAepB,aAAe,SAC9BoB,EAAenB,KAAOQ,EACtBW,EAAe/S,UAAYmT,EAEtBhjB,EAAI,EAAGA,EAAI,GAAIA,IAClB4iB,EAAelB,SAAS1hB,EAAI,GAAiB,GAAbgiB,EAAkBG,GAAiBniB,EAAI,GAAKmiB,EAAgB,GAI3FniB,IAAAA,EAAI,EAAGA,EAAK6iB,EAASC,EAAW9iB,IACnCsjB,EAAOtjB,GAAK4C,KAAKqS,SAAWkO,EAAe3W,EAAS2W,EAAe3W,EAAS,EAkF5E1L,GA7EKmjB,WACHC,IAEFlkB,EAAGmkB,EAAKC,EAAMC,EAAMC,EAFlBJ,EAAM,EACRK,EAAMlT,EAIHrR,IAAAA,EAAI,EAAGA,EAAI8iB,EAAU9iB,IACxBukB,GAAO,GAQJvkB,IAJLqkB,EAAOE,GADPH,EAAOxhB,KAAKiM,MAAM0V,IAElBH,EAAO3R,OAAO2R,GACdE,EAAU,EAELtkB,EAAI,EAAGA,EAAI8iB,EAAWD,EAAQ7iB,IACjCmkB,GAAOC,EAAKzW,UAAUyW,EAAKjkB,OAASH,EAAI,EAAGokB,EAAKjkB,OAASH,IAAM,EAC/C,IAAZskB,IACFD,EAAO,GAELrkB,EAAI8iB,EACNR,EAAkBjW,UAAUsW,EAAepW,EAAQyV,EAAakC,IAAO/B,GAAiBgC,EAAME,GAAQjC,EAAakB,EAAOtjB,KAE1HsiB,EAAkBjW,UAAUoW,EAAalW,EAAQyV,EAAakC,IAAO/B,GAAiBgC,EAAME,GAAQjC,EAAakB,EAAOtjB,KAE1HkkB,IACAI,EAAUH,EAuDZF,GAGA3B,EAAkBjW,UAAUkW,EAAkB,EAAG,GAGjD7X,EAAI2B,UAAUgW,EAAkB,EAAG,GAEnCgB,GAAa,GAGVQ,KAAAA,WAGQlC,EAAAA,EAAAA,QAAAA,QAAAA;;ACmnCAnB,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA92Cf,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,uBACA,EAAA,EAAA,QAAA,2BACA,EAAA,EAAA,QAAA,gCACA,EAAA,EAAA,QAAA,4BACA,EAAA,EAAA,QAAA,gCACA,EAAA,EAAA,QAAA,sBACA,EAAA,EAAA,QAAA,qBACA,EAAA,EAAA,QAAA,+BACA,EAAA,EAAA,QAAA,+BACA,EAAA,EAAA,QAAA,2BACA,EAAA,EAAA,QAAA,qBACA,EAAA,QAAA,WAcA,EAAA,QAAA,iBAiBA,EAAA,EAAA,QAAA,eAm0CeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAj0Cf,IAAIA,EAAS,SAAS9L,EAAQkN,GAExBzG,IAyDAqJ,EAzDArJ,OAAapY,KADjB6e,EAAaA,GAAc,IACezG,UAAYiE,EAAU7D,UAAAA,MAAQqG,EAAWzG,UACjFvI,OAAQ7P,IAAc6e,EAAWhP,KAAO,EAAIgP,EAAWhP,KACvD6R,OAAY1hB,IAAc6e,EAAW6C,SAAW,EAAI7C,EAAW6C,SAC/DC,OAAY3hB,IAAc6e,EAAW8C,SAAYD,EAAW,IAAO7C,EAAW8C,SAC9EC,OAAa5hB,IAAc6e,EAAW+C,WAAmB/C,EAAW+C,UACpEC,OAAa7hB,IAAc6e,EAAWgD,WAAaF,EAAWD,GAAY,EAAIA,EAAW7C,EAAWgD,UACpGC,OAAmB9hB,IAAc6e,EAAWiD,iBAAyBjD,EAAWiD,gBAChFnW,OAAW3L,IAAc6e,EAAWlT,QAAU,KAAOkT,EAAWlT,QAChEoW,OAAQ/hB,IAAc6e,EAAWkD,KAAO,KAAOlD,EAAWkD,KAC1D1D,OAAere,IAAc6e,EAAWR,YAAc,GAAKQ,EAAWR,YACtEC,OAActe,IAAc6e,EAAWP,WAAa,GAAKO,EAAWP,WACpErN,OAAejR,IAAc6e,EAAW5N,YAAc+Q,EAAY1I,YAAAA,MAAQuF,EAAW5N,YACrFgR,OAAgBjiB,IAAc6e,EAAWoD,cAAsBpD,EAAWoD,aAC1ErO,OAAmB5T,IAAc6e,EAAWjL,gBAAkBsO,EAAgBhN,gBAAAA,UAAY2J,EAAWjL,gBACrGuO,OAAqBniB,IAAc6e,EAAWsD,mBAA2BtD,EAAWsD,kBACpFrI,OAAe9Z,IAAc6e,EAAW/E,YAAcsI,EAAY/J,YAAAA,MAAQwG,EAAW/E,YACrFuI,OAAgBriB,IAAc6e,EAAWwD,aAAerf,EAASyS,MAAAA,IAAMoJ,EAAWwD,aAClFtJ,OAAY/Y,IAAc6e,EAAW9F,SAAWuJ,EAAStJ,SAAAA,cAAgB6F,EAAW9F,SACpFG,OAAalZ,IAAc6e,EAAW3F,UAAYqJ,EAAUnJ,UAAAA,OAASyF,EAAW3F,UAChF9C,OAAYpW,IAAc6e,EAAWzI,SAAWoM,EAAS5L,SAAAA,SAAWiI,EAAWzI,SAC/EqM,OAAcziB,IAAc6e,EAAW4D,YAAoB5D,EAAW4D,WACtEC,OAAe1iB,IAAc6e,EAAW6D,YAAc,EAAI7D,EAAW6D,YACrEC,OAAe3iB,IAAc6e,EAAW8D,aAAsB9D,EAAW8D,YACzEC,OAA2B5iB,IAAc6e,EAAW+D,wBAA0B,EAAI/D,EAAW+D,wBAC7FhL,OAAY5X,IAAc6e,EAAWjH,SAAWiL,EAAShL,SAAAA,QAAUgH,EAAWjH,SAC9EkL,OAAc9iB,IAAc6e,EAAWiE,YAAoBjE,EAAWiE,WACtEC,OAAgB/iB,IAAc6e,EAAWkE,aAAeF,EAAS/K,SAAAA,UAAY+G,EAAWkE,aACxFC,OAAkBhjB,IAAc6e,EAAWmE,gBAAyBnE,EAAWmE,eAC/EC,OAAoBjjB,IAAc6e,EAAWoE,kBAA0BpE,EAAWoE,iBAClFC,OAA2BljB,IAAc6e,EAAWqE,yBAAkCrE,EAAWqE,wBACjGC,OAA2BnjB,IAAc6e,EAAWsE,yBAAkCtE,EAAWsE,wBACjGzI,OAAkB1a,IAAc6e,EAAWnE,eAAiB0I,EAAe/K,eAAAA,MAAQwG,EAAWnE,eAC9F2I,OAAqBrjB,IAAc6e,EAAWwE,mBAA2BxE,EAAWwE,kBACpF1I,OAAqB3a,IAAc6e,EAAWlE,kBAAoB2I,EAAkB1M,kBAAAA,SAAWiI,EAAWlE,kBAC1G4I,OAAavjB,IAAc6e,EAAW0E,WAAoB1E,EAAW0E,UACrEC,OAAcxjB,IAAc6e,EAAW2E,YAAqB3E,EAAW2E,WACvEC,QAAezjB,IAAc6e,EAAW4E,YAAc,KAAO5E,EAAW4E,YACxE3I,QAAwB9a,IAAc6e,EAAW/D,qBAAwB1C,IAAciE,EAAUhE,UAAAA,MAAQqL,EAAqBzI,qBAAAA,QAAUyI,EAAqB3I,qBAAAA,OAAU8D,EAAW/D,qBAClL6I,QAAgB3jB,IAAc6e,EAAW8E,cAAuB9E,EAAW8E,aAC3EC,QAAe5jB,IAAc6e,EAAW+E,YAAc,CAACf,EAAShL,SAAAA,QAASgL,EAAS/K,SAAAA,UAAW+K,EAAS3K,SAAAA,UAAY2G,EAAW+E,YAC7HC,QAAe7jB,IAAc6e,EAAWgF,aAAsBhF,EAAWgF,YACzEC,QAAkB9jB,IAAc6e,EAAWiF,eAAiB,GAAKjF,EAAWiF,eAC5EC,QAAoB/jB,IAAc6e,EAAWkF,kBAA2BlF,EAAWkF,iBACnFC,QAA2BhkB,IAAc6e,EAAWmF,wBAA0B,IAAMnF,EAAWmF,wBAG7FC,IAAU,EAAiBtS,EAAAA,kBAAAA,GAElB,IAAT9B,IACFA,EAAOhQ,KAAK+N,IAAIqW,GAAQtS,OAAOnI,MAAOya,GAAQtS,OAAOlI,SAIvDwa,GAAQtS,OAAOnI,MAAQqG,EACvBoU,GAAQtS,OAAOlI,OAASoG,EAIpB0T,IAA4B,IAAfC,KACf/B,EAAe7b,EAAI6G,IAAAA,cAAc,UACpByX,aAAa,MAAOV,GACjC/B,EAAayC,aAAa,UAAW,SAGnC5V,IAaAyQ,GASAoF,GACAC,GAEAC,GACAC,GAuBAC,GAwFA1H,GAyCA2H,GAAeC,GAAmBC,GAAiBC,GAGnDC,GAAUC,GAAWC,GArLrBxW,GAAQoT,EACRqD,GAAWrD,EACXsD,GAAO,KAGPC,GAAmBtD,EACnBuD,GAAmBxD,EAEnByD,IAAc,EACdC,IAAkB,EAElBC,GAAa,EACbC,GAAiB,EAEjBhF,IAAa,EAEbiF,GAAiBC,EAAWlK,WAAAA,IAC5BmK,GAAmB,IAAP5V,EACZ6V,GAAmB,IAAP7V,EACZ8V,GAAmB,IAAP9V,EASZ7H,GAAQoc,IAAkB9V,GAAQoT,GAAY4C,GAE9CpT,GAAarB,EACbsB,GAActB,EAEdjI,GAAUsJ,GAAa,EACvBrJ,GAAUsJ,GAAc,EAGxByU,GAAiB,QAAP/V,EACVgW,GAAU,GAAM3U,GAChB4U,GAAU,GAAM3U,GAChB4U,GAAc3N,IAAciE,EAAU9D,UAAAA,MAAQ,GAAMrH,GAAatJ,GAAUge,GAAU,EACrFI,GAAc5N,IAAciE,EAAU9D,UAAAA,MAAQ,IAAOpH,GAAc,IAAOA,GAC1E8U,GAAgBpmB,KAAKiM,MAAMoF,GAAa,IACxCgO,GAAU+G,GAAgB,MAAQlgB,EAAtC,YACImgB,GAAUD,GAAgB,MAAQngB,EAAtC,YACIqgB,GAA0B,IAAdhV,GACZiV,GAAwB,GAAblV,GACXmV,IAAWnV,GAAakV,IAAY,EACpCE,GAAwB,IAAdnV,GACDoV,GAAwB,IAAdpV,GACnB6K,GAA4B,KAAb9K,GAGfmP,IAAc,EAGdmG,GAAe9E,EACf+E,GAAe9E,EACf+E,GAAY/E,EAAWD,EACvBjb,GAAQggB,GAAeD,GACvBG,GAAmB,EACnBC,GAAmB,EAqEnBC,IAAc,EAAahX,EAAAA,cAAAA,EAAMA,GACjCiX,GAAeD,GAAYzd,WAAW,MAGtCkW,IAAmB,EAAazP,EAAAA,cAAAA,EAAMA,GACtC0P,GAAoBD,GAAiBlW,WAAW,MAKhD2d,IAAc,EAAanB,EAAAA,cAAAA,GAASA,IACpCoB,GAAeD,GAAY3d,WAAW,MAGtC6d,IAAe,EAAarB,EAAAA,cAAAA,GAASA,IACrCsB,GAAgBD,GAAa7d,WAAW,MAGxCoT,GAAYyK,GAGZE,IAAkB,EAAavB,EAAAA,cAAAA,GAASA,IACxCwB,GAAmBD,GAAgB/d,WAAW,MAG9Cie,IAAmB,EAAazB,EAAAA,cAAAA,GAASA,IACzC0B,GAAoBD,GAAiBje,WAAW,MAGhDme,GAAgBF,GAGhBG,IAAyB,EAAa3nB,EAAAA,cAAAA,KAAK+I,KAAY,QAAPiH,GAAkBhQ,KAAK+I,KAAY,QAAPiH,IAC5E4X,GAAsBD,GAAuBpe,WAAW,MAGxDse,IAAyB,EAAa7nB,EAAAA,cAAAA,KAAK+I,KAAY,QAAPiH,GAAkBhQ,KAAK+I,KAAY,QAAPiH,IAC5E8X,GAAsBD,GAAuBte,WAAW,MAGxDwe,IAAgB,EAAa/X,EAAAA,cAAAA,EAAMA,GACnCgY,GAAiBD,GAAcxe,WAAW,MAG1CoW,IAAmB,EAAa3P,EAAAA,cAAAA,EAAMA,GACtC4P,GAAoBD,GAAiBpW,WAAW,MAOhDya,IAAepB,IACjBoC,IAAY,EAAa,EAAA,cAAA,GAAI,IAC7BC,GAAaD,GAAUzb,WAAW,OAIhC0e,IAwFAC,GAAuB,SAASpgB,EAAKvH,EAAOZ,EAAMqL,EAAOmd,GAWvD5nB,GAVAA,EAAQshB,EACVthB,EAAQshB,EACCthB,EAAQuhB,IACjBvhB,EAAQuhB,GAENniB,EAAOkiB,EACTliB,EAAOkiB,EACEliB,EAAOmiB,IAChBniB,EAAOmiB,KAELvhB,GAASZ,GAATY,CAGJuH,EAAI2J,OACJ3J,EAAIgJ,YAAc9F,EAClBlD,EAAImF,UAAYjC,EAChBlD,EAAI6I,UAAyB,KAAbU,GACZ+W,IAAAA,EAAc5D,GAAa5d,GAAQrG,EAAQikB,GAAa5d,GAAQib,EAChEwG,EAAYD,GAAczoB,EAAOY,IAAUqG,GAAQ4d,IACvD1c,EAAI2M,UAAU1M,GAASC,IACvBF,EAAI4M,OAAO6P,IACXzc,EAAIyE,YACA4b,GACFrgB,EAAI0E,OAAO,EAAG,GACd1E,EAAImJ,IAAI,EAAG,EAAgB,KAAbI,GAAqBvJ,EAAI6I,UAAY,EAAGyX,EAAYC,GAAW,IAE7EvgB,EAAImJ,IAAI,EAAG,EAAgB,KAAbI,GAAoB+W,EAAYC,GAAW,GAEvDF,GACFrgB,EAAI0E,OAAO,EAAG,GACd1E,EAAIqF,QAEJrF,EAAIiJ,SAGNjJ,EAAI2M,WAAW1M,IAAUC,IACzBF,EAAI6J,YAoKFzT,GAAO,SAAS8gB,GAEdsJ,IA5QwBxgB,EA4QxBwgB,OAAanoB,KADjB6e,EAAaA,GAAc,IACeuJ,OAAgBvJ,EAAWuJ,MACjEC,OAAkBroB,IAAc6e,EAAWyJ,YAAqBzJ,EAAWyJ,WAC3EC,OAAWvoB,IAAc6e,EAAW2J,KAAc3J,EAAW2J,IAC7DC,OAAezoB,IAAc6e,EAAW6J,SAAkB7J,EAAW6J,QACrEC,OAAe3oB,IAAc6e,EAAW+J,SAAkB/J,EAAW+J,QACrEC,OAAkB7oB,IAAc6e,EAAWiK,YAAqBjK,EAAWiK,WAC3EC,OAAa/oB,IAAc6e,EAAWmK,OAAgBnK,EAAWmK,MACjEC,OAAWjpB,IAAc6e,EAAWqK,KAAcrK,EAAWqK,IA+C7Db,GA7CJhI,IAAc,EAtaA,WAwBNjI,OAvBJwJ,GACF8E,IAAY,EAAe/E,EAAAA,gBAAAA,EAAWD,GAAU,GAChDkF,IAAmB,EAAeF,EAAAA,gBAAAA,GAAayC,GAAwB,GACvE3C,GAAe3mB,KAAKiM,MAAM4V,EAAWkF,IAAoBA,GACzDH,GAAe5mB,KAAK+I,KAAK+Y,EAAWiF,IAAoBA,GACxDD,IAAmB,EAAeC,EAAAA,gBAAAA,GAAoBwC,GAAwB,GAG9E3iB,IADAkb,EAAW8E,KADX/E,EAAW8E,MAKXA,GAAe9E,EACf+E,GAAe9E,EACflb,GAHAigB,GAAa/E,EAAWD,EAIxBkF,IAAmB,EAAeF,EAAAA,gBAAAA,GAAayC,GAAwB,GACvExC,IAAmB,EAAeC,EAAAA,gBAAAA,GAAoBwC,GAAwB,IAGhF9a,GAAQA,GAAQoT,EAAWA,EAAWpT,GAAQqT,EAAWA,EAAWrT,GACpE2W,GAAmBA,GAAmBvD,EAAWA,EAAWuD,GAAmBtD,EAAWA,EAAWsD,GACrGC,GAAmBA,GAAmBxD,EAAWA,EAAWwD,GAAmBvD,EAAWA,EAAWuD,GACrGrD,EAAYA,EAAYH,EAAWA,EAAWG,EAAYF,EAAWA,EAAWE,EAExEzJ,EAAU7Y,MACX,IAAA,QACH4kB,GAAgB,EAChBC,GAAiBriB,EAAjB,GACiByD,EAAjB,QACA6e,GAAa7e,EAAb,QACA8e,GAAYD,GAAa5d,GACzB,MAEG,IAAA,QACH0d,GAAgB,EAChBC,GAAiBriB,EAAjB,GACiByD,EAAjB,QACA6e,GAAatiB,EAAb,GACAuiB,GAAYD,GAAa5d,GACzB,MAEG,IAAA,QACH0d,GAAgB,EAChBC,GAAiB5e,EAAjB,QACiB,EACjB6e,GAAa,IAAMtiB,EAAnB,GACAuiB,GAAYD,GAAa5d,GACzB,MAEG,IAAA,QAEL,QACE0d,GAAgB,GAAKze,EAArB,WACA0e,GAAiB5e,EAAW2e,QAAAA,GAAgB,EAC3B,EACjBE,GAAa5e,EAAS0e,OAAAA,GACtBG,GAAYD,GAAa5d,GAG7BuB,GAAQoc,IAAkB9V,GAAQoT,GAAY4C,GA8W9C+E,GAGIlB,GAAalG,IACM6E,EAAAA,EAAAA,SAAAA,GAAc7V,EAAarJ,GAASC,GAASqJ,GAAYC,IAI5EkX,GAAkBlG,KACM5C,EAAAA,EAAAA,SAAAA,GAAmB3L,EAAiBhM,GAASC,GAASqJ,GAAYC,KAGtEoO,EAAAA,EAAAA,SAAAA,GAAmBkE,GAAa7b,GAASC,GAASqJ,GAAYC,KAGlFoX,IAEFvB,GAAa1d,WAAU,EAAezJ,EAAAA,SAAAA,KAAK+I,KAAY,QAAPiH,GAAkB,EAAG+H,GAAW,EAAG,GAGnFsP,GAAc5d,WAAU,EAAezJ,EAAAA,SAAAA,KAAK+I,KAAY,QAAPiH,GAAkB,EAAG+H,GAAW,EAAG,IAGlF6Q,IAEFrB,GAAiB9d,WAAU,EAAezJ,EAAAA,SAAAA,KAAK+I,KAAY,QAAPiH,GAAkB,EAAGkT,GAAe,EAAG,GAG3FuE,GAAkBhe,WAAU,EAAezJ,EAAAA,SAAAA,KAAK+I,KAAY,QAAPiH,GAAkB,EAAGkT,GAAe,EAAG,IAI1FG,GACFuE,GAAoBne,WAAU,EAAyBzJ,EAAAA,SAAAA,KAAK+I,KAAY,QAAPiH,GAAkB7M,EAAS2S,MAAAA,KAAKnR,KAAK0C,gBAAgB,GAAM,GAAO,EAAG,GAIpIic,GACFwE,GAAoBre,WAAU,EAAyBzJ,EAAAA,SAAAA,KAAK+I,KAAY,QAAPiH,GAAkB7M,EAASyS,MAAAA,IAAIhR,OAAOyC,gBAAgB,GAAO,EAAG,GAI/HmhB,GAAkBlG,EAAmB,CAInC,IAtUsBxa,EAmUX4X,IAlUbjO,OAEA,UAAY8G,EAAU7Y,MAExBoI,EAAI2B,WAAU,EAAgBzJ,EAAAA,SAAAA,KAAK+I,KAAmB,QAAduI,IAAyBmR,EAAStJ,SAAAA,cAAeE,GAAyB,QAAbhI,GAAqC,QAAdC,IAG1H,UAAYiH,EAAU7Y,MAAQ,UAAY6Y,EAAU7Y,MAEtDoI,EAAI2B,WAAU,EAAgBzJ,EAAAA,SAAAA,KAAK+I,KAAmB,QAAduI,IAAyBmR,EAAStJ,SAAAA,cAAeE,GAAyB,QAAbhI,GAAqC,QAAdC,IAG1H,UAAYiH,EAAU7Y,MAAQ,UAAY6Y,EAAU7Y,MAEtDoI,EAAI2B,WAAU,EAAgBzJ,EAAAA,SAAAA,KAAK+I,KAAmB,QAAduI,IAAyBmR,EAAStJ,SAAAA,cAAeE,GAAyB,QAAbhI,GAAqC,QAAdC,IAG1H,UAAYiH,EAAU7Y,MAExBoI,EAAI2B,WAAU,EAAgBzJ,EAAAA,SAAAA,KAAK+I,KAAmB,QAAduI,IAAyBmR,EAAStJ,SAAAA,cAAeE,GAAyB,QAAbhI,GAAqC,QAAdC,IAG1H,UAAYiH,EAAU7Y,OAExBoI,EAAI2B,WAAU,EAAgBzJ,EAAAA,SAAAA,KAAK+I,KAAmB,QAAduI,IAAyBmR,EAAStJ,SAAAA,cAAeE,GAAyB,QAAbhI,GAAqC,QAAdC,IAG5HxJ,EAAI2B,WAAU,EAAgBzJ,EAAAA,SAAAA,KAAK+I,KAAmB,QAAduI,IAAyBmR,EAAStJ,SAAAA,cAAeE,GAAyB,QAAbhI,GAAqC,QAAdC,KAG9HxJ,EAAI6J,UAuSE,OAAS7F,GAAW,EAAIA,EAAQvO,OAAQ,CACtCksB,IAAAA,EAAe3d,EAAQvO,OACxB,GAED2qB,GAAqBxI,GAAmB5T,IADxC2d,GAC8DlpB,MAAOuL,EAAQ2d,GAAc9pB,KAAMmM,EAAQ2d,GAAcze,OAAO,SAEzH,EAAIye,GAIT,GAAA,OAASvH,GAAQ,EAAIA,EAAK3kB,OAAQ,CAChCmsB,IAAAA,GAAYxH,EAAK3kB,OAClB,GAED2qB,GAAqBxI,GAAmBwC,IADxCwH,IACwDnpB,MAAO2hB,EAAKwH,IAAW/pB,KAAMuiB,EAAKwH,IAAW1e,OAAO,SAEvG,EAAI0e,KA7OQ,SAAS5hB,EAAKgT,GACjC6O,IAGFC,EAWAxsB,EAdEusB,EAAW3pB,KAAK+I,KAAkB,IAAbsI,IACvB5K,EAAQ8d,GACRsF,EAAepF,GAAYqC,GAE3BgD,EAAejI,EACfkI,EAAmBR,EACnBS,EAA2B,IAAb3Y,GACd4Y,EAAiC,IAAb5Y,GACpB6Y,EAA+B,KAAb7Y,GAClB8Y,EAAiC,IAAb9Y,GACpB+Y,EAAgC,GAAb/Y,GACnBgZ,EAA0B,GAAbhZ,GAEbiZ,EAAoBxJ,WAAWgB,EAASjW,QAAQ,IAiB7CzO,IAdL2W,EAAgB7P,WAAWkD,SAAS,GACpCU,EAAI2J,OACJ3J,EAAI6W,UAAY,SAChB7W,EAAI8W,aAAe,SACnB9W,EAAI+W,KAAO8K,EAAW,MAAQzjB,EAA9B,YACA4B,EAAIgJ,YAAciD,EAAgB7P,WAAWmD,eAC7CS,EAAImF,UAAY8G,EAAgB7P,WAAWmD,eAC3CS,EAAI2M,UAAU1M,GAASC,IACvBF,EAAI4M,OAAO6P,IAEY,UAAnBhM,EAAU7Y,MAAuC,UAAnB6Y,EAAU7Y,OAC1C2qB,EAA0B,IAAbhZ,IAGVjU,EAAIykB,EAAUf,WAAW1jB,EAAEyO,QAAQ,KAAOye,EAAmBltB,GAAK0pB,GAIjEiD,GAHJH,EAAoBC,EAAelkB,EAAnC,QA9RoB,MA+RpBokB,EApB6BR,IA2EMQ,GACjCjiB,EAAI6I,UAAY,EAChB7I,EAAIyE,YACJzE,EAAI0E,OAAOwd,EAAa,GACxBliB,EAAI2E,OAAOyd,EAAiB,GAC5BpiB,EAAI6E,YACJ7E,EAAIiJ,WAEJjJ,EAAI6I,UAAY,GAChB7I,EAAIyE,YACJzE,EAAI0E,OAAOwd,EAAa,GACxBliB,EAAI2E,OAAO0d,EAAmB,GAC9BriB,EAAI6E,YACJ7E,EAAIiJ,UAENjJ,EAAI4M,OAAOmV,GACXpjB,GAASojB,MArELE,CAUM9O,OATRnT,EAAI6I,UAAY,IAChB7I,EAAIyE,YACJzE,EAAI0E,OAAOwd,EAAa,GACxBliB,EAAI2E,OAAOwd,EAAmB,GAC9BniB,EAAI6E,YACJ7E,EAAIiJ,SACJjJ,EAAI2J,OACJ3J,EAAI2M,UAAU2V,EAAkB,GAExBnP,GAAqBvb,MACtB,IAAA,aACHkqB,GAAqBnjB,EACrB,MAEG,IAAA,UACHmjB,EAAqBnjB,GAASd,EAAUzD,QAAAA,EAAnB,GAAwBA,EAAxB,GAA6B,EAClD,MAEG,IAAA,SAEL,QACE0nB,EAAoBjkB,EAApB,QAKImV,OAFRhT,EAAI4M,OAAOkV,GAEH9O,EAAkBrV,QACnB,IAAA,aACHqC,EAAIgX,SAAUgL,EAAaje,QAAQkX,GAA2B,EAAG,EAAGsH,GACpE,MAEG,IAAA,aACHviB,EAAIgX,SAAUgL,EAAaS,YAAY,GAAK,EAAG,EAAGF,GAClD,MAEG,IAAA,WAEL,QACEviB,EAAIgX,SAAUgL,EAAaje,QAAQ,GAAK,EAAG,EAAGwe,GAGlDviB,EAAI2M,WAAW2V,EAAkB,GACjCtiB,EAAI6J,UAEJmY,GAAgB/C,GAChBgD,EAAmB,EACnBjiB,EAAI4M,OAAOmV,GACXpjB,GAASojB,EAwEb/hB,EAAI2M,WAAW1M,IAAUC,IACzBF,EAAI6J,UAqFF6Y,CAAmB9K,GAAmB5E,IAGvB4E,EAAAA,EAAAA,SAAAA,GAAmBrO,GAAYC,GAAakN,EAAaC,EAAY1K,GAAiB,GAAM,GA0CzGiV,GAtCAR,GAAkBpF,IACpB1D,GAAkBjO,OAClBiO,GAAkBjL,UAAU1M,GAASC,IACrC0X,GAAkBhL,OAAO6P,IAAkBvC,EAAYH,GAAY4C,GAAY9e,EAA/E,SACA+Z,GAAkBjL,WAAW1M,IAAUC,IACvC0X,GAAkBjW,UAnUK,WACrBghB,IAAAA,EAAkB1kB,EAAI6G,IAAAA,cAAc,UACxC6d,EAAgB9gB,MAAQ3J,KAAK+I,KAAY,QAAPiH,GAClCya,EAAgB7gB,OAAS5J,KAAK+I,KAA6B,GAAxB0hB,EAAgB9gB,OAC/C+gB,IAAAA,EAAeD,EAAgBlhB,WAAW,MAE9CmhB,EAAajZ,OACTkZ,IAAAA,EAAgBD,EAAaja,qBAAqB,EAAG,GAAK,EAA4B,GAAzBga,EAAgB7gB,QAoB1E6gB,OAnBPE,EAAcja,aAAa,EAAG,WAC9Bia,EAAcja,aAAa,GAAK,WAChCia,EAAcja,aAAa,IAAM,WACjCia,EAAcja,aAAa,EAAG,WAC9Bga,EAAazd,UAAY0d,EAEzBD,EAAane,YACbme,EAAale,OAA+B,GAAxBie,EAAgB9gB,MAAa,IACjD+gB,EAAaje,OAA+B,GAAxBge,EAAgB9gB,MAAsC,GAAzB8gB,EAAgB7gB,QACjE8gB,EAAaje,OAA+B,GAAxBge,EAAgB9gB,MAAsC,GAAzB8gB,EAAgB7gB,QACjE8gB,EAAaje,OAA+B,GAAxBge,EAAgB9gB,MAAa,IACjD+gB,EAAa/d,YAEb+d,EAAavd,OACbud,EAAa5Z,YAAc,UAC3B4Z,EAAa3Z,SAEb2Z,EAAa/Y,UAEN8Y,EAwSuBG,GAAqC,KAAbvZ,GAAkC,IAAdC,IACxEoO,GAAkBjL,UAAU1M,GAASC,IACrC0X,GAAkB/N,WAIhB6W,GAAkB5F,IAChBoB,IAAeoF,GACjBrE,GAAW,IAAI8F,EAAJ,QAAa,GAAI,CAC1B5L,SAAUgG,GACVrb,OAAe,KAAPoG,EACRkQ,SAAU+D,GAAe/D,SACzBD,YAAmC9f,IAA1B8jB,GAAehE,OAAuB,EAAIgE,GAAehE,OAClEK,eAAgB2D,GAAe3D,eAC/BD,eAAgB4D,GAAe5D,eAC/BD,iBAAkB6D,GAAe7D,iBACjCD,iBAAkB8D,GAAe9D,iBACjCtB,KAAMoF,GAAepF,KACrBpQ,MAAOA,KAETiW,IAAWrT,GAAa2T,GAAUrb,OAAS,GACjCqa,KACVhH,IAAY,EAAyBuJ,EAAAA,SAAAA,GAAUD,GAAW/P,GAC1DmJ,GAAkBjW,UAAUuT,GAAWwJ,GAASC,MAKhDqC,IACed,EAAAA,EAAAA,SAAAA,GAAgB3W,GAAY4I,EAAauI,EAAczO,EAAgB7P,YAItF8kB,GAAkBxF,EAAmB,CACnCsH,IAAAA,GAAoC,WAArB7Q,EAAYva,MAA0C,WAArBua,EAAYva,MACtCkgB,EAAAA,EAAAA,SAAAA,GAAmB/E,EAAgBxJ,GAAYC,GAAawZ,GAAa5R,EAAUG,EAAWd,GAItH2Q,GAAapF,KACfa,IAAgB,EAAqBiB,EAAAA,SAAAA,GAAWD,EAAWrK,WAAAA,GAAIyI,IAC/Da,IAAoB,EAAqBgB,EAAAA,SAAAA,GAAWD,EAAWpK,WAAAA,OAAQwI,IACvEc,IAAkB,EAAqBe,EAAAA,SAAAA,GAAWD,EAAWnK,WAAAA,KAAMuI,IACnEe,IAAiB,EAAqBc,EAAAA,SAAAA,GAAWD,EAAWlK,WAAAA,IAAKsI,MAIjEgH,GAAe,SAASC,GAEtBC,IAAAA,OAAc9qB,KADlB6qB,EAAUA,GAAW,IACmBzC,OAAgByC,EAAQzC,MAC5D2C,OAAmB/qB,IAAc6qB,EAAQvC,YAAqBuC,EAAQvC,WACtE0C,OAAYhrB,IAAc6qB,EAAQrC,KAAcqC,EAAQrC,IACxDyC,OAAgBjrB,IAAc6qB,EAAQnC,SAAkBmC,EAAQnC,QAChEwC,OAAgBlrB,IAAc6qB,EAAQjC,SAAkBiC,EAAQjC,QAChEuC,OAAmBnrB,IAAc6qB,EAAQ/B,YAAqB+B,EAAQ/B,WAEtEgC,IACFjE,GAAYrd,MAAQqG,EACpBgX,GAAYpd,OAASoG,EACrBiX,GAAeD,GAAYzd,WAAW,OAGpC2hB,IACFzL,GAAiB9V,MAAQqG,EACzByP,GAAiB7V,OAASoG,EAC1B0P,GAAoBD,GAAiBlW,WAAW,OAG9C4hB,IACFjE,GAAYvd,MAAQ3J,KAAK+I,KAAY,QAAPiH,GAC9BkX,GAAYtd,OAAS5J,KAAK+I,KAAY,QAAPiH,GAC/BmX,GAAeD,GAAY3d,WAAW,MAEtC6d,GAAazd,MAAQ3J,KAAK+I,KAAY,QAAPiH,GAC/BoX,GAAaxd,OAAS5J,KAAK+I,KAAY,QAAPiH,GAChCqX,GAAgBD,GAAa7d,WAAW,MAGxCoT,GAAYyK,IAGVgE,IACF9D,GAAgB3d,MAAQ3J,KAAK+I,KAAY,QAAPiH,GAClCsX,GAAgB1d,OAAS5J,KAAK+I,KAAY,QAAPiH,GACnCuX,GAAmBD,GAAgB/d,WAAW,MAE9Cie,GAAiB7d,MAAQ3J,KAAK+I,KAAY,QAAPiH,GACnCwX,GAAiB5d,OAAS5J,KAAK+I,KAAY,QAAPiH,GACpCyX,GAAoBD,GAAiBje,WAAW,MAGhDme,GAAgBF,IAGd6D,IACFtD,GAAcpe,MAAQqG,EACtB+X,GAAcne,OAASoG,EACvBgY,GAAiBD,GAAcxe,WAAW,OAGxC+hB,IACF3L,GAAiBhW,MAAQqG,EACzB2P,GAAiB/V,OAASoG,EAC1B4P,GAAoBD,GAAiBpW,WAAW,QAIhDgiB,GAAsB,WACpBtI,IAEAtG,GADEA,KAAcuK,GACJE,GAEAF,GAETzG,KACHA,IAAa,GACI0E,EAAAA,EAAAA,kBAAAA,GAAKlE,YAKxBuK,GAA0B,WACxBrI,IAEAuE,GADEA,KAAkBJ,GACJE,GAEAF,GAEb7G,KACHA,IAAa,GACI0E,EAAAA,EAAAA,kBAAAA,GAAKlE,YAKxBwK,GAAQ,SAASC,GACfA,EACFlG,GAAamG,YAAYJ,GAAqB,MAE9CK,cAAcpG,IACd7I,GAAYyK,KAujBT,OAziBFjG,KAAAA,SAAW,SAAS0K,GAEnBC,IAAAA,GADJD,EAAW/K,WAAW+K,IACOhK,EAAWA,EAAYgK,EAAW/J,EAAWA,EAAW+J,EA4B9E,OA3BHpd,KAAUqd,KACZrd,GAAQqd,GAEIzG,KACVA,GAAmB5W,IAEjBA,GAAQ2W,KACVA,GAAmB3W,IAGhBA,IAASuT,IAAcsD,IAAerD,GACxCxT,IAASuT,IAAcsD,KAAgBrD,GAExCwJ,GADAnG,IAAc,GAEV5B,GACF9B,EAAamK,SAELtd,GAAQuT,GAAasD,IAAerD,GAC7CxT,GAAQuT,GAAasD,KAAgBrD,KAEtCwJ,GADAnG,IAAc,GAEV5B,GACF9B,EAAaoK,SAGZ/K,KAAAA,WAEA,MAGJG,KAAAA,SAAW,WACP3S,OAAAA,IAGJwd,KAAAA,YAAc,SAASJ,GAEtBC,IAAAA,GADJD,EAAW/K,WAAW+K,IACQ,EAAI,EAAIA,EAK/B,OAJH3G,KAAa4G,IACf5G,GAAW4G,EACN7K,KAAAA,WAEA,MAGJiL,KAAAA,YAAc,WACVhH,OAAAA,IAGJvE,KAAAA,iBAAmB,SAASkL,EAAUpc,GAErCqc,IAEFK,EAFEL,GADJD,EAAW/K,WAAW+K,IACQhK,EAAWA,EAAYgK,EAAW/J,EAAWA,EAAW+J,EACpFhL,EAAQ,KAmDH,OAhDHpS,KAAUqd,SACR3rB,IAAc+e,IAASA,GAAMte,WAC/Bse,GAAMvf,OAERwsB,EAAOhI,GAA0BnkB,KAAKiC,IAAI6pB,EAAcrd,KAAUqT,EAAWD,GAC7EsK,EAAOnsB,KAAKgO,IAAIme,EAAMhI,GAA0B,IAChDjF,GAAQ,IAAIpiB,EAAJ,QAAU,GAAI,GAAIA,EAAMgG,QAAAA,iBAAkB2L,GAAOqd,EAAaK,IAIhEpL,gBAAkB,SAASC,IAC/BvS,GAAQuS,EAAMvhB,OAAOX,OAEPkjB,IAAcsD,IAAerD,GACxCxT,IAASuT,IAAcsD,KAAgBrD,GAExCwJ,GADAnG,IAAc,GAEV5B,GACF9B,EAAamK,SAELtd,GAAQuT,GAAasD,IAAerD,GAC7CxT,GAAQuT,GAAasD,KAAgBrD,KAEtCwJ,GADAnG,IAAc,GAEV5B,GACF9B,EAAaoK,SAIbvd,GAAQ4W,KACVA,GAAmB5W,IAEjBA,GAAQ2W,KACVA,GAAmB3W,IAEhBgS,KACHA,IAAa,GACII,EAAAA,EAAAA,kBAAAA,EAAMI,WAKvBxR,GAAiC,mBAAdA,IACrByP,GAAMgC,iBAAmBzR,GAG3ByP,GAAM3e,SAED,MAGJ6rB,KAAAA,sBAAwB,WAC3BhH,GAAmB3W,GACdwS,KAAAA,WAGFoL,KAAAA,sBAAwB,WAGpB,OAFPhH,GAAmB5W,GACdwS,KAAAA,UACE,MAGJqL,KAAAA,2BAA6B,SAASC,GAGlC,OAFPlJ,IAA4BkJ,EACvBtL,KAAAA,UACE,MAGJuL,KAAAA,2BAA6B,SAASD,GAGlC,OAFPjJ,IAA4BiJ,EACvBtL,KAAAA,UACE,MAGJwL,KAAAA,oBAAsB,SAASZ,GAK3B,OAJPA,EAAW/K,WAAW+K,GAEtBxG,GADkBwG,EAAWhK,EAAWA,EAAYgK,EAAW/J,EAAWA,EAAW+J,EAEhF5K,KAAAA,UACE,MAGJyL,KAAAA,oBAAsB,SAASb,GAK3B,OAJPA,EAAW/K,WAAW+K,GAEtBzG,GADkByG,EAAWhK,EAAWA,EAAYgK,EAAW/J,EAAWA,EAAW+J,EAEhF5K,KAAAA,UACE,MAGJ0L,KAAAA,eAAiB,SAASC,GAStB,OARPpO,EAAcoO,EACd7B,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJ4L,KAAAA,cAAgB,SAASC,GASrB,OARPrO,EAAaqO,EACb/B,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJ8L,KAAAA,YAAc,SAASlB,GASnB,OARPhK,EAAWf,WAAW+K,GACtBd,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJ+L,KAAAA,YAAc,WACVnL,OAAAA,GAGJoL,KAAAA,YAAc,SAASpB,GASnB,OARP/J,EAAWhB,WAAW+K,GACtBd,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJiM,KAAAA,YAAc,WACVpL,OAAAA,GAGJqL,KAAAA,aAAe,SAAStB,GAWpB,OAVPA,EAAW/K,WAAW+K,GAEtB7J,EADkB6J,EAAWhK,EAAWA,EAAYgK,EAAW/J,EAAWA,EAAW+J,EAErFd,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJmM,KAAAA,QAAU,SAASC,GASf,OARPnL,EAAOmL,EACPtC,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJqM,KAAAA,WAAa,SAASC,GASlB,OARPzhB,EAAUyhB,EACVxC,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJuM,KAAAA,oBAAsB,SAASjB,GAG3B,OAFPnJ,IAAqBmJ,EAChBtL,KAAAA,UACE,MAGJwM,KAAAA,mBAAqB,SAASC,GAM1B,OALPzL,IAAoByL,EAGpBjC,GADAnG,IAAeA,IAEVrE,KAAAA,UACE,MAGJ0M,KAAAA,eAAiB,SAASzN,GAGtB,OAFP2C,EAAcnc,SAASwZ,EAAU,IAC5Be,KAAAA,UACE,MAGJ2M,KAAAA,eAAiB,SAASC,GAStB,OARP9C,GAAa,CACXxC,OAAO,IAETnX,EAAcyc,EACd3vB,GAAK,CACHqqB,OAAO,IAEJtH,KAAAA,UACE,MAGJ6M,KAAAA,mBAAqB,SAASC,GAW1B,OAVPhD,GAAa,CACXtC,YAAY,EACZM,QAA+B,UAArB9O,EAAYva,MAAyC,WAArBua,EAAYva,OAExDqU,EAAkBga,EAClB7vB,GAAK,CACHuqB,YAAY,EACZM,QAA+B,UAArB9O,EAAYva,MAAyC,WAArBua,EAAYva,OAEnDuhB,KAAAA,UACE,MAGJ+M,KAAAA,kBAAoB,SAASC,GASzB,OARPlD,GAAa,CACX9B,YAAY,IAEdpO,EAAiBoT,EACjB/vB,GAAK,CACH+qB,YAAY,IAEThI,KAAAA,UACE,MAGJiN,KAAAA,eAAiB,SAASC,GAWtB,OAVPpD,GAAa,CACXhC,SAAS,EACTE,YAAY,IAEdhP,EAAckU,EACdjwB,GAAK,CACH6qB,SAAS,EACTE,YAAY,IAEThI,KAAAA,UACE,MAGJmN,KAAAA,gBAAkB,SAASC,GASvB,OARPtD,GAAa,CACXhC,SAAS,IAEXvG,EAAe6L,EACfnwB,GAAK,CACH6qB,SAAS,IAEN9H,KAAAA,UACE,MAGJqN,KAAAA,YAAc,SAASC,GASnB,OARPxD,GAAa,CACXpC,KAAK,IAEP5Q,EAAWwW,EACXrwB,GAAK,CACHyqB,KAAK,IAEF1H,KAAAA,UACE,MAGJuN,KAAAA,gBAAkB,SAASD,GASvB,OARPxD,GAAa,CACXlC,SAAS,IAEX3F,EAAeqL,EACfrwB,GAAK,CACH2qB,SAAS,IAEN5H,KAAAA,UACE,MAGJwN,KAAAA,cAAgB,WAOZ,OALL/G,GADEA,KAAkBJ,GACJE,GAEAF,GAEbrG,KAAAA,UACE,MAGJyN,KAAAA,gBAAkB,SAASC,GAOvB,OALLjH,IADE,IAASiH,EACKrH,GAEAE,GAEbvG,KAAAA,UACE,MAGJ2N,KAAAA,aAAe,SAASnD,GAYpB,OAXHA,EACGlG,MACO,EA7XZE,GAAiBkG,YAAYH,GAAyB,MAEtDI,cAAcnG,IACdiC,GAAgBF,IA2XdjC,IAAkB,GAGhBA,KACFqG,cAAcnG,IACdF,IAAkB,GAGf,MAGJsJ,KAAAA,cAAgB,SAAStC,GAGrB,OAFPtJ,IAAesJ,EACVtL,KAAAA,UACE,MAGJ6N,KAAAA,kBAAoB,SAASvC,GAGzB,OAFPpJ,IAAmBoJ,EACdtL,KAAAA,UACE,MAGJ8N,KAAAA,YAAc,SAASC,GASnB,OARPzY,EAAWyY,EACXjE,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJgO,KAAAA,SAAW,SAASpD,GAGhB,OAFPnG,GAAiBmG,EACZ5K,KAAAA,UACE,MAGJiO,KAAAA,gBAAkB,SAAS3C,GAGvB,OAFPzI,KAAiByI,EACZtL,KAAAA,UACE,MAGJkO,KAAAA,2BAA6B,SAASjP,GASlC,OARP6C,EAA0Brc,SAASwZ,EAAU,IAC7C6K,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJmO,KAAAA,qBAAuB,SAAS3pB,GAS5B,OARPqV,EAAoBrV,EACpBslB,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJA,KAAAA,QAAU,WA4CT6C,GA3CCtD,IACHtiB,GAAK,CACHqqB,OAAO,EACPE,YAAY,EACZE,KAAK,EACLE,SAAS,EACTE,SAAS,EACTI,OAAO,EACPF,YAAY,EACZI,KAAK,IAGTjF,GAAQiL,UAAU,EAAG,EAAGrf,EAAMA,GAG1BoS,GACFgC,GAAQ3a,UAAUud,GAAa,EAAG,GAIpC5C,GAAQ3a,UAAUgW,GAAkB,EAAG,GAGnCmD,IACEoB,IACFe,GAAS5D,SAAS+C,GAAmBzV,GAAQyW,IAC7Cd,GAAQ3a,UAAUub,GAAWN,GAASgC,KA/+B1B,SAAS5e,EAAK2G,GAC9B3G,EAAI6J,UACJ7J,EAAI2J,OACJ3J,EAAI6W,UAAY,QAChB7W,EAAIgJ,YAAcyF,EAAS9R,UAC3BqD,EAAImF,UAAYsJ,EAAS9R,UAErB8R,IAAaoM,EAAS5L,SAAAA,UAAYR,IAAaoM,EAAS3L,SAAAA,iBAC1DlP,EAAIsU,YAAc,OAClBtU,EAAIuU,cAA6B,KAAbhL,GACpBvJ,EAAIwU,cAA6B,KAAbjL,GACpBvJ,EAAIyU,WAA0B,KAAblL,IAGjBvJ,EAAI+W,KADFiE,EACSuD,GAEAhH,GAEbvX,EAAIgX,SAASrQ,EAAM5C,QAAQgX,GAAc2D,GAAUD,GAAsB,IAAXA,GAAiBE,GAAsB,GAAZH,GAAkC,IAAhBF,GAAiC,GAAXG,IAEjIze,EAAI6J,UA69BAsW,CAAY7D,GAAS3V,KAKrBwU,GACFmB,GAAQ3a,UAAUkT,GAAWqJ,GAASC,IAIpC9C,GACFiB,GAAQ3a,UAAUie,GAAexB,GAAaC,IAI5CrC,GACM4B,OAAAA,GAAehgB,OAChB,IAAA,KACH0e,GAAQ3a,UAAUkb,GAAekB,GAAWC,IAC5C,MACG,IAAA,SACH1B,GAAQ3a,UAAUmb,GAAmBiB,GAAWC,IAChD,MACG,IAAA,OACH1B,GAAQ3a,UAAUob,GAAiBgB,GAAWC,IAC9C,MACG,IAAA,MACH1B,GAAQ3a,UAAUqb,GAAgBe,GAAWC,IAM/CzC,IACFe,GAAQ3S,OACR2S,GAAQ3P,UAAU1M,GAASC,IAC3Boc,GAAQ1P,OAAO6P,GAAiB5e,EAAjB,SAA4Byf,GAAmBvD,GAAY4C,IAC1EL,GAAQ3P,WAAW1M,IAAUC,IAC7Boc,GAAQ3a,UAAUke,GAA+C,MAAvBvD,GAAQtS,OAAOnI,MAAwC,KAAxBya,GAAQtS,OAAOlI,QACxFwa,GAAQzS,WAIN2R,IACFc,GAAQ3S,OACR2S,GAAQ3P,UAAU1M,GAASC,IAC3Boc,GAAQ1P,OAAO6P,GAAiB5e,EAAjB,SAA4B0f,GAAmBxD,GAAY4C,IAC1EL,GAAQ3P,WAAW1M,IAAUC,IAC7Boc,GAAQ3a,UAAUoe,GAA+C,MAAvBzD,GAAQtS,OAAOnI,MAAwC,KAAxBya,GAAQtS,OAAOlI,QACxFwa,GAAQzS,WAGVxJ,GAAQoc,GAAiB5e,EAAjB,SAA4B8I,GAAQoT,GAAY4C,GAGxDL,GAAQ3S,OACR2S,GAAQ3P,UAAU1M,GAASC,IAC3Boc,GAAQ1P,OAAOvM,IACfic,GAAQ3P,WAAW1M,IAAUC,IAE7Boc,GAAQhI,YAAc,qBACtBgI,GAAQ/H,cAAgB+H,GAAQ9H,cAAgBH,GAChDiI,GAAQ7H,WAA4B,EAAfJ,GAErBiI,GAAQ3a,UAAUse,GAAe,EAAG,GAEpC3D,GAAQzS,UAGJ6R,GACFY,GAAQ3a,UAAUkW,GAAkB,EAAG,GAGzCc,IAAa,GAIVQ,KAAAA,UAEE,MAGMrD,EAAAA,EAAAA,QAAAA,QAAAA;;AC7LA0R,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAjrCf,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,2BACA,EAAA,EAAA,QAAA,gCACA,EAAA,EAAA,QAAA,4BACA,EAAA,EAAA,QAAA,gCACA,EAAA,EAAA,QAAA,qBACA,EAAA,EAAA,QAAA,+BACA,EAAA,EAAA,QAAA,2BACA,EAAA,EAAA,QAAA,qBACA,EAAA,QAAA,WAgBA,EAAA,QAAA,iBAwpCeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAvoCf,IAAIA,EAAiB,SAASxd,EAAQkN,GAEhCzG,IAAAA,OAAapY,KADjB6e,EAAaA,GAAc,IACezG,UAAYiE,EAAU7D,UAAAA,MAAQqG,EAAWzG,UACjFvI,OAAQ7P,IAAc6e,EAAWhP,KAAO,EAAIgP,EAAWhP,KACvD6R,OAAY1hB,IAAc6e,EAAW6C,SAAW,EAAI7C,EAAW6C,SAC/DC,OAAY3hB,IAAc6e,EAAW8C,SAAYD,EAAW,IAAO7C,EAAW8C,SAC9EC,OAAa5hB,IAAc6e,EAAW+C,WAAmB/C,EAAW+C,UACpEC,OAAa7hB,IAAc6e,EAAWgD,WAAaF,EAAWD,GAAY,EAAIA,EAAW7C,EAAWgD,UACpGC,OAAmB9hB,IAAc6e,EAAWiD,iBAAyBjD,EAAWiD,gBAChFnW,OAAW3L,IAAc6e,EAAWlT,QAAU,KAAOkT,EAAWlT,QAChEyjB,OAAoBpvB,IAAc6e,EAAWuQ,kBAA2BvQ,EAAWuQ,iBACnF/Q,OAAere,IAAc6e,EAAWR,YAAc,GAAKQ,EAAWR,YACtEC,OAActe,IAAc6e,EAAWP,WAAa,GAAKO,EAAWP,WACpErN,OAAejR,IAAc6e,EAAW5N,YAAc+Q,EAAY1I,YAAAA,MAAQuF,EAAW5N,YACrFgR,OAAgBjiB,IAAc6e,EAAWoD,cAAsBpD,EAAWoD,aAC1ErO,OAAmB5T,IAAc6e,EAAWjL,gBAAkBsO,EAAgBhN,gBAAAA,UAAY2J,EAAWjL,gBACrGuO,OAAqBniB,IAAc6e,EAAWsD,mBAA2BtD,EAAWsD,kBACpFkN,OAAcrvB,IAAc6e,EAAWwQ,WAAarsB,EAASyS,MAAAA,IAAMoJ,EAAWwQ,WAC9EjZ,OAAYpW,IAAc6e,EAAWzI,SAAWoM,EAAS5L,SAAAA,SAAWiI,EAAWzI,SAC/EqM,OAAcziB,IAAc6e,EAAW4D,YAAoB5D,EAAW4D,WACtEC,OAAe1iB,IAAc6e,EAAW6D,YAAc,EAAI7D,EAAW6D,YACrEC,OAAe3iB,IAAc6e,EAAW8D,aAAsB9D,EAAW8D,YACzEC,OAA2B5iB,IAAc6e,EAAW+D,wBAA0B,EAAI/D,EAAW+D,wBAC7Fa,OAAezjB,IAAc6e,EAAW4E,YAAc,KAAO5E,EAAW4E,YACxE7L,OAAY5X,IAAc6e,EAAWjH,SAAWiL,EAAShL,SAAAA,QAAUgH,EAAWjH,SAC9EkL,OAAc9iB,IAAc6e,EAAWiE,YAAoBjE,EAAWiE,WACtEC,OAAgB/iB,IAAc6e,EAAWkE,aAAeF,EAAS/K,SAAAA,UAAY+G,EAAWkE,aACxFC,OAAkBhjB,IAAc6e,EAAWmE,gBAAyBnE,EAAWmE,eAC/ErI,OAAqB3a,IAAc6e,EAAWlE,kBAAoB2I,EAAkB1M,kBAAAA,SAAWiI,EAAWlE,kBAC1GD,OAAkB1a,IAAc6e,EAAWnE,eAAiB0I,EAAe/K,eAAAA,MAAQwG,EAAWnE,eAC9F2I,OAAqBrjB,IAAc6e,EAAWwE,mBAA2BxE,EAAWwE,kBACpFE,OAAavjB,IAAc6e,EAAW0E,WAAoB1E,EAAW0E,UACrEC,OAAcxjB,IAAc6e,EAAW2E,YAAqB3E,EAAW2E,WACvE8L,OAAiBtvB,IAAc6e,EAAWyQ,cAAgB,KAAOzQ,EAAWyQ,cAC5EC,OAAoBvvB,IAAc6e,EAAW0Q,kBAA2B1Q,EAAW0Q,iBACnFzU,OAAwB9a,IAAc6e,EAAW/D,qBAAwB1C,IAAciE,EAAUhE,UAAAA,MAAQqL,EAAqBzI,qBAAAA,QAAUyI,EAAqB3I,qBAAAA,OAAU8D,EAAW/D,qBAClL6I,OAAgB3jB,IAAc6e,EAAW8E,cAAuB9E,EAAW8E,aAC3EC,OAAe5jB,IAAc6e,EAAW+E,YAAc,CAACf,EAAShL,SAAAA,QAASgL,EAAS/K,SAAAA,UAAW+K,EAAS3K,SAAAA,UAAY2G,EAAW+E,YAC7HI,OAA2BhkB,IAAc6e,EAAWmF,wBAA0B,IAAMnF,EAAWmF,wBAG7FC,GAAU,EAAiBtS,EAAAA,kBAAAA,GAW3B4R,GATS,IAAT1T,IACFA,EAAOhQ,KAAK+N,IAAIqW,EAAQtS,OAAOnI,MAAOya,EAAQtS,OAAOlI,SAIvDwa,EAAQtS,OAAOnI,MAAQqG,EACvBoU,EAAQtS,OAAOlI,OAASoG,EAGpB0T,IAA4B,IAAfC,EAAsB,CACjC/B,IAAAA,EAAe7b,EAAI6G,IAAAA,cAAc,SACrCgV,EAAayC,aAAa,MAAOV,GACjC/B,EAAayC,aAAa,UAAW,QAGnC5V,IAQAyQ,EAKAoF,EACAC,GACAoL,GAEAnL,GACAoL,GACAnL,GAnBAhW,GAAQoT,EACRuD,GAAmBvD,EACnBwD,GAAmBvD,EACnBlb,GAAQkb,EAAWD,EACnByD,IAAc,EACdE,GAAa,EACbD,IAAkB,EAClBE,GAAiB,EAEjBN,GAAO,KACP1E,IAAa,EAYboP,GAAgB,GAChBC,IAAoB,EACpBC,IAAoB,EAEpB1e,GAAarB,EACbsB,GAActB,EAEdjI,GAAUsJ,GAAa,EACvBrJ,GAAUsJ,GAAc,EAGxB8U,GAAgBpmB,KAAKiM,MAAMoF,GAAa,IACxCgO,GAAU+G,GAAgB,MAAQlgB,EAAtC,YACImgB,GAAUD,GAAgB,MAAQngB,EAAtC,YACIqgB,GAA0B,IAAdhV,GACZiV,GAAwB,GAAblV,GACXmV,IAAWnV,GAAakV,IAAY,EACpCE,GAAUnV,GAAc,EAAIgV,GAAY,EAGxC0J,GAAgC,QAAb3e,GACnB4e,GAAgC,QAAb5e,GACnB6e,GAAWlwB,KAAK+I,KAAY,QAAPiH,GAErBmgB,GAAyB,IAAb9e,GACZ+e,GAA0B,IAAd9e,GACZ+e,GAAiB9X,IAAciE,EAAU9D,UAAAA,MAAQ,GAAMrH,GAAatJ,GAAUmoB,GAAW,EACzFI,GAAiB/X,IAAciE,EAAU9D,UAAAA,MAAQ,IAAOpH,GAAc,IAAOA,GAE7EoU,GAAiBC,EAAWlK,WAAAA,IAC5BmK,GAAmB,IAAP5V,EACZ6V,GAAmB,IAAP7V,EACZ8V,GAAmB,IAAP9V,EAERuI,OAAAA,EAAU7Y,MACX,IAAA,QACH4kB,EAAgB,EAChBC,GAAiBriB,EAAjB,GACAytB,GAAiB,EACAhqB,EAAjB,QACA6e,GAAa7e,EAAb,QACAiqB,GAAgBpL,GAAa1e,EAA7B,WACA2e,GAAYD,GAAa5d,GACzB,MAEG,IAAA,QACH0d,EAAgB,EAChBC,GAAiBriB,EAAjB,GACAytB,GAAiB,EACAhqB,EAAjB,QACA6e,GAAatiB,EAAb,GACA0tB,GAAgBpL,GAAa1e,EAA7B,WACA2e,GAAYD,GAAa5d,GACzB,MAEG,IAAA,QACH0d,EAAgB,EAChBC,GAAiB5e,EAAjB,QACAgqB,IAAkBhqB,EAAlB,QACiB,EACjB6e,GAAa,IAAMtiB,EAAnB,GACA0tB,GAAgBpL,GAAa1e,EAA7B,WACA2e,GAAYD,GAAa5d,GACzB,MAEG,IAAA,QAEL,QACE0d,EAAgB,GAAKze,EAArB,WACA0e,GAAiB5e,EAAW2e,QAAAA,EAAgB,EAC5CqL,IAAkB/pB,EAAD,OAAU,EACV,EACjB4e,GAAa5e,EAAS0e,OAAAA,EACtBsL,GAAgBpL,GAAa1e,EAA7B,WACA2e,GAAYD,GAAa5d,GAKzBogB,IAOAhK,GAmCA2H,GAAeC,GAAmBC,GAAiBC,GA1CnDkC,IAAc,EAAahX,EAAAA,cAAAA,EAAMA,GACjCiX,GAAeD,GAAYzd,WAAW,MAGtCkW,IAAmB,EAAazP,EAAAA,cAAAA,EAAMA,GACtC0P,GAAoBD,GAAiBlW,WAAW,MAKhDgnB,IAAkB,EAAavwB,EAAAA,cAAAA,KAAK+I,KAAY,QAAPiH,GAAkBhQ,KAAK+I,KAAY,QAAPiH,IACrEwgB,GAAmBD,GAAgBhnB,WAAW,MAG9C2d,IAAc,EAAagJ,EAAAA,cAAAA,GAAUA,IACrC/I,GAAeD,GAAY3d,WAAW,MAGtC6d,IAAe,EAAa8I,EAAAA,cAAAA,GAAUA,IACtC7I,GAAgBD,GAAa7d,WAAW,MAGxCoT,GAAYyK,GAGZE,IAAkB,EAAa4I,EAAAA,cAAAA,GAAUA,IACzC3I,GAAmBD,GAAgB/d,WAAW,MAG9Cie,IAAmB,EAAa0I,EAAAA,cAAAA,GAAUA,IAC1CzI,GAAoBD,GAAiBje,WAAW,MAGhDme,GAAgBF,GAKhB7H,IAAmB,EAAa3P,EAAAA,cAAAA,EAAMA,GACtC4P,GAAoBD,GAAiBpW,WAAW,MAKhDiX,IAAc,EAGdmG,GAAe9E,EACf+E,GAAe9E,EACf+E,GAAY/E,EAAWD,EAC3Bjb,GAAQggB,GAAeD,GACnBG,IAAAA,GAAmB,EACnBC,GAAmB,EAuEnB7oB,GAAO,SAAS8gB,GAEdsJ,IAAAA,OAAanoB,KADjB6e,EAAaA,GAAc,IACeuJ,OAAgBvJ,EAAWuJ,MACjEC,OAAkBroB,IAAc6e,EAAWyJ,YAAqBzJ,EAAWyJ,WAC3EC,OAAWvoB,IAAc6e,EAAW2J,KAAc3J,EAAW2J,IAC7DC,OAAezoB,IAAc6e,EAAW6J,SAAkB7J,EAAW6J,QACrE4H,OAAatwB,IAAc6e,EAAWvQ,OAAgBuQ,EAAWvQ,MACjEua,OAAkB7oB,IAAc6e,EAAWiK,YAAqBjK,EAAWiK,WAC3EC,OAAa/oB,IAAc6e,EAAWmK,OAAgBnK,EAAWmK,MA2DjEoG,GAzDJ/O,IAAc,EA5EA,WA0BNjI,OAzBJwJ,GACF8E,IAAY,EAAe/E,EAAAA,gBAAAA,EAAWD,GAAU,GAChDkF,IAAmB,EAAeF,EAAAA,gBAAAA,GAAayC,GAAwB,GACvE3C,GAAe3mB,KAAKiM,MAAM4V,EAAWkF,IAAoBA,GACzDH,GAAe5mB,KAAK+I,KAAK+Y,EAAWiF,IAAoBA,GACxDD,IAAmB,EAAeC,EAAAA,gBAAAA,GAAoBwC,GAAwB,GAG9E3iB,IADAkb,EAAW8E,KADX/E,EAAW8E,MAKXA,GAAe9E,EACf+E,GAAe9E,EACflb,GAHAigB,GAAa/E,EAAWD,EAMxBkF,IAAmB,EAAeF,EAAAA,gBAAAA,GAAayC,GAAwB,GACvExC,IAAmB,EAAeC,EAAAA,gBAAAA,GAAoBwC,GAAwB,IAGhF9a,GAAQA,GAAQoT,EAAWA,EAAWpT,GAAQqT,EAAWA,EAAWrT,GACpE2W,GAAmBA,GAAmBvD,EAAWA,EAAWuD,GAAmBtD,EAAWA,EAAWsD,GACrGC,GAAmBA,GAAmBxD,EAAWA,EAAWwD,GAAmBvD,EAAWA,EAAWuD,GACrGrD,EAAYA,EAAYH,EAAWA,EAAWG,EAAYF,EAAWA,EAAWE,EAExEzJ,EAAU7Y,MACX,IAAA,QACH4kB,EAAgB,EAChBC,GAAiBriB,EAAjB,GACiByD,EAAjB,QACA6e,GAAa7e,EAAb,QACA8e,GAAYD,GAAa5d,GACzB,MAEG,IAAA,QACH0d,EAAgB,EAChBC,GAAiBriB,EAAjB,GACiByD,EAAjB,QACA6e,GAAatiB,EAAb,GACAuiB,GAAYD,GAAa5d,GACzB,MAEG,IAAA,QACH0d,EAAgB,EAChBC,GAAiB5e,EAAjB,QACiB,EACjB6e,GAAa,IAAMtiB,EAAnB,GACAuiB,GAAYD,GAAa5d,GACzB,MAEG,IAAA,QAEL,QACE0d,EAAgB,GAAKze,EAArB,WACA0e,GAAiB5e,EAAW2e,QAAAA,EAAgB,EAC3B,EACjBE,GAAa5e,EAAS0e,OAAAA,EACtBG,GAAYD,GAAa5d,GAGrB2d,IAAkB9V,GAAQoT,GAAY4C,GAiB9C+E,GAGIlB,GAAalG,IACM6E,EAAAA,EAAAA,SAAAA,GAAc7V,EAAarJ,GAASC,GAASqJ,GAAYC,IAI5EkX,GAAkBlG,KACM5C,EAAAA,EAAAA,SAAAA,GAAmB3L,EAAiBhM,GAASC,GAASqJ,GAAYC,KAGtEoO,EAAAA,EAAAA,SAAAA,GAAmBkE,EAAa7b,GAASC,GAASqJ,GAAYC,KAGlFoX,IAEFvB,GAAa1d,WAAU,EAAeymB,EAAAA,SAAAA,GAAU,EAAGnY,GAAW,EAAG,GAGjEsP,GAAc5d,WAAU,EAAeymB,EAAAA,SAAAA,GAAU,EAAGnY,GAAW,EAAG,GAGlD2H,GAAkBtS,aAAa+iB,GAAWC,GAAWF,GAAUA,KAG7EtH,IAEFrB,GAAiB9d,WAAU,EAAezJ,EAAAA,SAAAA,KAAK+I,KAAKmnB,IAAW,EAAGhN,GAAe,EAAG,GAGpFuE,GAAkBhe,WAAU,EAAezJ,EAAAA,SAAAA,KAAK+I,KAAKmnB,IAAW,EAAGhN,GAAe,EAAG,IAGnFsF,GAEFkI,GAAuBhR,IAIrB8I,GAAkBlG,IACpBkI,GAAmB9K,GAAmB5E,IAGvB4E,EAAAA,EAAAA,SAAAA,GAAmBrO,GAAYC,GAAakN,EAAaC,EAAY1K,GAAiB,GAAM,IAIzGyU,GAAkB5F,IACpB5F,IAAY,EAAyBuJ,EAAAA,SAAAA,GAAUD,GAAW/P,GAC1DmJ,GAAkBjW,UAAUuT,GAAWwJ,GAASC,KAIlDqJ,IAAoB,EAChBP,GAAoB,OAASzjB,GAAW,EAAIA,EAAQvO,OAAQ,CAC9DuyB,IAAoB,EAChBrG,IAAAA,EAAe3d,EAAQvO,OAC3BsyB,GAAgB,GACb,GACDpG,IACAoG,GAAcvuB,KAAK,CACjBf,OAAUuL,EAAQ2d,GAAclpB,MAAQP,KAAKiC,IAAI4f,KAAcC,EAAWD,GAAa+N,GACvFjwB,MAASmM,EAAQ2d,GAAc9pB,KAAOK,KAAKiC,IAAI4f,KAAcC,EAAWD,GAAa+N,GACrF5kB,OAAO,EAAec,EAAAA,gBAAAA,EAAQ2d,GAAcze,eAEvC,EAAIye,GAIfsG,IAAoB,EAChBL,GAAsC,OAAlBD,IAEtBK,IAAoB,EACpBC,IAAoB,GAIlBU,GACFE,GAAcH,GAAkBhB,GAI9BxG,GAAkBxF,IACM5D,EAAAA,EAAAA,SAAAA,GAAmB/E,EAAgBxJ,GAAYC,IAAa,GAIpF4X,GAAapF,IACfa,IAAgB,EAAqBiB,EAAAA,SAAAA,GAAWD,EAAWrK,WAAAA,GAAIyI,GAC/Da,IAAoB,EAAqBgB,EAAAA,SAAAA,GAAWD,EAAWpK,WAAAA,OAAQwI,GACvEc,IAAkB,EAAqBe,EAAAA,SAAAA,GAAWD,EAAWnK,WAAAA,KAAMuI,GACnEe,IAAiB,EAAqBc,EAAAA,SAAAA,GAAWD,EAAWlK,WAAAA,IAAKsI,KAIjEgH,GAAe,SAASC,GAEtBC,IAAAA,OAAc9qB,KADlB6qB,EAAUA,GAAW,IACmBzC,OAAgByC,EAAQzC,MAC5D2C,OAAmB/qB,IAAc6qB,EAAQvC,YAAqBuC,EAAQvC,WACtE0C,OAAYhrB,IAAc6qB,EAAQrC,KAAcqC,EAAQrC,IACxDyC,OAAgBjrB,IAAc6qB,EAAQnC,SAAkBmC,EAAQnC,QAChE+H,OAAczwB,IAAc6qB,EAAQvc,OAAgBuc,EAAQvc,MAC5D6c,OAAmBnrB,IAAc6qB,EAAQ/B,YAAqB+B,EAAQ/B,WAGtEgC,IACFjE,GAAYrd,MAAQqG,EACpBgX,GAAYpd,OAASoG,EACrBiX,GAAeD,GAAYzd,WAAW,OAIpC2hB,IACFzL,GAAiB9V,MAAQqG,EACzByP,GAAiB7V,OAASoG,EAC1B0P,GAAoBD,GAAiBlW,WAAW,OAI9CqnB,IACFL,GAAgB5mB,MAAQ3J,KAAK+I,KAAY,QAAPiH,GAClCugB,GAAgB3mB,OAAS5J,KAAK+I,KAAY,QAAPiH,GACnCwgB,GAAmBD,GAAgBhnB,WAAW,OAG5C4hB,IAEFjE,GAAYvd,MAAQ3J,KAAK+I,KAAKmnB,IAC9BhJ,GAAYtd,OAAS5J,KAAK+I,KAAKmnB,IAC/B/I,GAAeD,GAAY3d,WAAW,MAGtC6d,GAAazd,MAAQ3J,KAAK+I,KAAKmnB,IAC/B9I,GAAaxd,OAAS5J,KAAK+I,KAAKmnB,IAChC7I,GAAgBD,GAAa7d,WAAW,MAGxCoT,GAAYyK,IAGVgE,IACF9D,GAAgB3d,MAAQ3J,KAAK+I,KAAKmnB,IAClC5I,GAAgB1d,OAAS5J,KAAK+I,KAAKmnB,IACnC3I,GAAmBD,GAAgB/d,WAAW,MAE9Cie,GAAiB7d,MAAQ3J,KAAK+I,KAAKmnB,IACnC1I,GAAiB5d,OAAS5J,KAAK+I,KAAKmnB,IACpCzI,GAAoBD,GAAiBje,WAAW,MAGhDme,GAAgBF,IAId8D,IACF3L,GAAiBhW,MAAQqG,EACzB2P,GAAiB/V,OAASoG,EAC1B4P,GAAoBD,GAAiBpW,WAAW,QAIhDmnB,GAAyB,SAAS5oB,GAEpCA,EAAI2J,OAKJ3J,EAAI2J,OACJ3J,EAAI6I,UAAmB,KAAPX,EAChBlI,EAAIyE,YACJzE,EAAI2M,UAAU1M,GAASC,IACvBF,EAAI4M,OAAO6P,GAAiB,EAAI1e,EAAhC,YACAiC,EAAI2M,WAAW1M,IAAUC,IACzBF,EAAImJ,IAAIlJ,GAASC,GAAsB,OAAbqJ,GAAuB,EAAGmT,GAAa,EAAI3e,EAArE,YAAiF,GACjFiC,EAAI4M,QAAQ6P,IACRsM,IAAAA,EAAwB/oB,EAAI2I,qBAAqB,EAAG,QAAWa,GAAa,EAAG,QAAWA,IAC9Fuf,EAAsBngB,aAAa,EAAG,WACtCmgB,EAAsBngB,aAAa,IAAM,WACzCmgB,EAAsBngB,aAAa,IAAM,WACzCmgB,EAAsBngB,aAAa,EAAG,WACtC5I,EAAIgJ,YAAc+f,EAClB/oB,EAAIiJ,SACJjJ,EAAI6J,UAGJ7J,EAAI2J,OACJ3J,EAAI6I,UAAmB,KAAPX,EAChBlI,EAAIyE,YACJzE,EAAI2M,UAAU1M,GAASC,IACvBF,EAAI4M,OAAO6P,GAAiB,EAAI1e,EAAhC,YACAiC,EAAI2M,WAAW1M,IAAUC,IACzBF,EAAImJ,IAAIlJ,GAASC,GAAsB,OAAbqJ,GAAuB,EAAGmT,GAAa,EAAI3e,EAArE,YAAiF,GACjFiC,EAAI4M,QAAQ6P,IACRuM,IAAAA,EAAuBhpB,EAAI2I,qBAAqB,EAAG,QAAWa,GAAa,EAAG,QAAWA,IAC7Fwf,EAAqBpgB,aAAa,EAAG,WACrCogB,EAAqBpgB,aAAa,EAAG,WACrC5I,EAAIgJ,YAAcggB,EAClBhpB,EAAIiJ,SACJjJ,EAAI6J,UAGAkL,IAAAA,GAA2B,QAAbxL,GAAqC,QAAbA,IAAyB,EAC/DyL,GAA2B,QAAbzL,GAAqC,QAAbA,IAAyB,EAC/D0f,EAAiBjpB,EAAIoJ,qBAAqB2L,EAAYC,EAAY,EAAGD,EAAYC,EAAY,QAAWzL,IAC5G0f,EAAergB,aAAa,EAAG,WAC/BqgB,EAAergB,aAAa,EAAG,WAC3BvI,IAAAA,EAAQ,EACPA,IAAAA,EAAQ,EAAGA,GAASynB,GAAeznB,GAAS,EAC/CL,EAAI2J,OACJ3J,EAAI2M,UAAU1M,GAASC,IACvBF,EAAI4M,OAAQvM,EAAQtC,EAAT,WAAuB8pB,IAClC7nB,EAAI2M,WAAW1M,IAAUC,IACzBF,EAAIyE,YACJzE,EAAIoF,KAAkB,QAAbmE,GAAoC,QAAbA,GAAoC,QAAbA,GAAoC,QAAbA,IAC9EvJ,EAAI6E,YACJ7E,EAAImF,UAAY8jB,EAChBjpB,EAAIqF,OACJrF,EAAI6J,UAGN7J,EAAI6J,WAGFgf,GAAgB,SAAS7oB,EAAKkD,GAChClD,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAIoF,KAAK,EAAG,EAAGpF,EAAIgK,OAAOnI,MAAO7B,EAAIgK,OAAOlI,QAC5C9B,EAAI6E,YACAkQ,IAAAA,EAAc/U,EAAIgK,OAAOnI,MAAQ,EACjCmT,EAAchV,EAAIgK,OAAOlI,OAAS,EAClConB,EAAc5M,EAAQlT,qBAAqB2L,EAAYC,EAAY,EAAGD,EAAYC,EAAYhV,EAAIgK,OAAOnI,MAAQ,GACrHqnB,EAAYtgB,aAAa,EAAG1F,EAAMnG,MAAMwC,gBACxC2pB,EAAYtgB,aAAa,EAAG1F,EAAMrG,KAAK0C,gBACvCS,EAAImF,UAAY+jB,EAChBlpB,EAAIqF,OACJrF,EAAI6J,WA2BF6Y,GAAqB,SAAS1iB,EAAKgT,GACjCrU,IAEFmjB,EAOAxsB,EATEqJ,EAAQ8d,GACVsF,EAAepF,GAAYqC,GAE3B6C,EAAW3pB,KAAK+I,KAAkB,IAAbsI,IACrByY,EAAejI,EACfkI,EAAmBR,EACnBa,EAAgC,IAAb/Y,GACnBgZ,EAA0B,GAAbhZ,GACbiZ,EAAoBxJ,WAAWgB,EAASjW,QAAQ,IAiB7CzO,IAdL2W,EAAgB7P,WAAWkD,SAAS,GACpCU,EAAI2J,OACJ3J,EAAI6W,UAAY,SAChB7W,EAAI8W,aAAe,SACnB9W,EAAI+W,KAAO8K,EAAW,MAAQzjB,EAA9B,YACA4B,EAAIgJ,YAAciD,EAAgB7P,WAAWmD,eAC7CS,EAAImF,UAAY8G,EAAgB7P,WAAWmD,eAC3CS,EAAI2M,UAAU1M,GAASC,IACvBF,EAAI4M,OAAO6P,IAEY,UAAnBhM,EAAU7Y,MAAuC,UAAnB6Y,EAAU7Y,OAC1C2qB,EAA0B,MAAbhZ,IAGVjU,EAAIykB,EAAUf,WAAW1jB,EAAEyO,QAAQ,KAAOye,EAAmBltB,GAAK0pB,GAIjEiD,GAHJH,GAAqBC,EAAelkB,EAApC,QArXoB,OAsXpBokB,EA+CAjiB,EAAI4M,OAAOmV,GACXpjB,GAASojB,MA9CLE,CAIM9O,OAHRnT,EAAI2J,OACJ3J,EAAI2M,UAAU2V,EAAkB,GAExBnP,EAAqBvb,MACtB,IAAA,aACHkqB,GAAqBnjB,EACrB,MAEG,IAAA,UACHmjB,EAAqBnjB,GAASd,EAAUzD,QAAAA,EAAnB,GAAwBA,EAAxB,GAA6B,EAClD,MAEG,IAAA,SAEL,QACE0nB,EAAoBjkB,EAApB,QAKImV,OAFRhT,EAAI4M,OAAOkV,GAEH9O,EAAkBrV,QACnB,IAAA,aACHqC,EAAIgX,SAAUgL,EAAaje,QAAQkX,GAA2B,EAAG,EAAGsH,GACpE,MAEG,IAAA,aACHviB,EAAIgX,SAAUgL,EAAaS,YAAY,GAAK,EAAG,EAAGF,GAClD,MAEG,IAAA,WAEL,QACEviB,EAAIgX,SAAUgL,EAAaje,QAAQ,GAAK,EAAG,EAAGwe,GAGlDviB,EAAI2M,WAAW2V,EAAkB,GACjCtiB,EAAI6J,UAEJmY,GAAgB/C,GAChBgD,EAAmB,EACnBjiB,EAAI4M,OAAOmV,GACXpjB,GAASojB,EAOb/hB,EAAI2M,WAAW1M,IAAUC,IACzBF,EAAI6J,WAGF8Z,GAAQ,SAASC,GACfA,EACFlG,GAAamG,YAAYJ,GAAqB,MAE9CK,cAAcpG,IACd7I,GAAYyK,KAaZmE,GAAsB,WACpBtI,IAEAtG,GADEA,KAAcuK,GACJE,GAEAF,GAETzG,KACHA,IAAa,GACI0E,EAAAA,EAAAA,kBAAAA,GAAKlE,YAKxBuK,GAA0B,WACxBrI,IAEAuE,GADEA,KAAkBJ,GACJE,GAEAF,GAEb7G,KACHA,IAAa,GACI0E,EAAAA,EAAAA,kBAAAA,GAAKlE,YA0drB,OApdFE,KAAAA,SAAW,SAAS0K,GAEnBC,IAAAA,GADJD,EAAW/K,WAAW+K,IACQhK,EAAWA,EAAYgK,EAAW/J,EAAWA,EAAW+J,EAoB/E,OAnBHpd,KAAUqd,KACZrd,GAAQqd,IACM9J,IAAcsD,IAAerD,GACxCxT,IAASuT,IAAcsD,KAAgBrD,GAExCwJ,GADAnG,IAAc,GAEV5B,GACF9B,EAAamK,SAELtd,GAAQuT,GAAasD,IAAerD,GAC7CxT,GAAQuT,GAAasD,KAAgBrD,KAEtCwJ,GADAnG,IAAc,GAEV5B,GACF9B,EAAaoK,SAGZ/K,KAAAA,WAEA,MAGJG,KAAAA,SAAW,WACP3S,OAAAA,IAGJkS,KAAAA,iBAAmB,SAASkL,EAAUpc,GAErCqc,IAEFK,EAFEL,GADJD,EAAW/K,WAAW+K,IACQhK,EAAWA,EAAYgK,EAAW/J,EAAWA,EAAW+J,EACpFhL,EAAQ,KA4CH,OAzCHpS,KAAUqd,SACR3rB,IAAc+e,GAASA,EAAMte,WAC/Bse,EAAMvf,OAGRwsB,EAAOhI,EAA0BnkB,KAAKiC,IAAI6pB,EAAcrd,KAAUqT,EAAWD,GAC7EsK,EAAOnsB,KAAKgO,IAAIme,EAAMhI,EAA0B,IAChDjF,EAAQ,IAAIpiB,EAAJ,QAAU,GAAI,GAAIA,EAAMgG,QAAAA,iBAAkB2L,GAAOqd,EAAaK,IAGhEpL,gBAAkB,SAASC,IAC/BvS,GAAQuS,EAAMvhB,OAAOX,OAEPkjB,IAAcsD,IAAerD,GACxCxT,IAASuT,IAAcsD,KAAgBrD,GAExCwJ,GADAnG,IAAc,GAEV5B,GACF9B,EAAamK,SAELtd,GAAQuT,GAAasD,IAAerD,GAC7CxT,GAAQuT,GAAasD,KAAgBrD,KAEtCwJ,GADAnG,IAAc,GAEV5B,GACF9B,EAAaoK,SAGZvL,KACHA,IAAa,GACII,EAAAA,EAAAA,kBAAAA,EAAMI,WAKvBxR,GAAiC,mBAAdA,IACrByP,EAAMgC,iBAAmBzR,GAG3ByP,EAAM3e,SAED,MAGJqtB,KAAAA,eAAiB,SAASC,GAStB,OARP9C,GAAa,CACXxC,OAAO,IAETnX,EAAcyc,EACd3vB,GAAK,CACHqqB,OAAO,IAEJtH,KAAAA,UACE,MAGJ6M,KAAAA,mBAAqB,SAASC,GAW1B,OAVPhD,GAAa,CACXtC,YAAY,EACZE,KAAK,IAEP5U,EAAkBga,EAClB7vB,GAAK,CACHuqB,YAAY,EACZE,KAAK,IAEF1H,KAAAA,UACE,MAGJ+M,KAAAA,kBAAoB,SAASC,GASzB,OARPlD,GAAa,CACX9B,YAAY,IAEdpO,EAAiBoT,EACjB/vB,GAAK,CACH+qB,YAAY,IAEThI,KAAAA,UACE,MAGJgQ,KAAAA,cAAgB,SAASC,GASrB,OARPnG,GAAa,CACXtc,OAAO,IAET+gB,EAAa0B,EACbhzB,GAAK,CACHuQ,OAAO,IAEJwS,KAAAA,UACE,MAGJqN,KAAAA,YAAc,SAASC,GASnB,OARPxD,GAAa,CACXpC,KAAK,IAEP5Q,EAAWwW,EACXrwB,GAAK,CACHyqB,KAAK,IAEF1H,KAAAA,UACE,MAGJuN,KAAAA,gBAAkB,SAASD,GASvB,OARPxD,GAAa,CACXlC,SAAS,IAEX3F,EAAeqL,EACfrwB,GAAK,CACH2qB,SAAS,IAEN5H,KAAAA,UACE,MAGJwN,KAAAA,cAAgB,WAOZ,OALL/G,GADEA,KAAkBJ,GACJE,GAEAF,GAEbrG,KAAAA,UACE,MAGJyN,KAAAA,gBAAkB,SAASC,GAOvB,OALLjH,IADE,IAASiH,EACKrH,GAEAE,GAEbvG,KAAAA,UACE,MAGJ2N,KAAAA,aAAe,SAASnD,GAYpB,OAXHA,EACGlG,MACO,EApNZE,GAAiBkG,YAAYH,GAAyB,MAEtDI,cAAcnG,IACdiC,GAAgBF,IAkNdjC,IAAkB,GAGhBA,KACFqG,cAAcnG,IACdF,IAAkB,GAGf,MAGJsJ,KAAAA,cAAgB,SAAStC,GAGrB,OAFPtJ,IAAesJ,EACVtL,KAAAA,UACE,MAGJ6N,KAAAA,kBAAoB,SAASvC,GAGzB,OAFPpJ,IAAmBoJ,EACdtL,KAAAA,UACE,MAGJ8N,KAAAA,YAAc,SAASC,GASnB,OARPzY,EAAWyY,EACXjE,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJ0M,KAAAA,eAAiB,SAASzN,GAGtB,OAFP2C,EAAcnc,SAASwZ,EAAU,IAC5Be,KAAAA,UACE,MAGJqM,KAAAA,WAAa,SAASC,GAIlB,OAHPzhB,EAAUyhB,EACVrvB,KACK+iB,KAAAA,UACE,MAGJkQ,KAAAA,iBAAmB,SAAS1iB,GAIxB,OAHP8gB,EAAmB9gB,EACnBvQ,KACK+iB,KAAAA,UACE,MAGJmQ,KAAAA,YAAc,SAAS9gB,GAInB,OAHPmf,EAAgBnf,EAChBpS,KACK+iB,KAAAA,UACE,MAGJoQ,KAAAA,kBAAoB,SAAS5iB,GAIzB,OAHPihB,EAAmBjhB,EACnBvQ,KACK+iB,KAAAA,UACE,MAGJ8L,KAAAA,YAAc,SAASlB,GASnB,OARPhK,EAAWgK,EACXd,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJ+L,KAAAA,YAAc,WACVnL,OAAAA,GAGJoL,KAAAA,YAAc,SAASpB,GASnB,OARP/J,EAAW+J,EACXd,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJiM,KAAAA,YAAc,WACVpL,OAAAA,GAGJqL,KAAAA,aAAe,SAAStB,GAWpB,OAVPA,EAAW/K,WAAW+K,GAEtB7J,EADkB6J,EAAWhK,EAAWA,EAAYgK,EAAW/J,EAAWA,EAAW+J,EAErFd,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJwM,KAAAA,mBAAqB,SAASC,GAM1B,OALPzL,IAAoByL,EAGpBjC,GADAnG,IAAeA,IAEVrE,KAAAA,UACE,MAGJ0L,KAAAA,eAAiB,SAASC,GAStB,OARPpO,EAAcoO,EACd7B,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJ4L,KAAAA,cAAgB,SAASC,GASrB,OARPrO,EAAaqO,EACb/B,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJgO,KAAAA,SAAW,SAASpD,GAGhB,OAFPnG,GAAiBmG,EACZ5K,KAAAA,UACE,MAGJiO,KAAAA,gBAAkB,SAAS3C,GAGvB,OAFPzI,IAAiByI,EACZtL,KAAAA,UACE,MAGJkO,KAAAA,2BAA6B,SAASjP,GACzC6C,EAA0Brc,SAASwZ,EAAU,IAC7C6K,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,WAGFmO,KAAAA,qBAAuB,SAAS3pB,GAS5B,OARPqV,EAAoBrV,EACpBslB,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJA,KAAAA,QAAU,WACTqQ,IACFC,EAEAppB,EAAO/K,EACPo0B,EACAC,EACArnB,EANEknB,GAAmB7iB,GAAQoT,IAAaC,EAAWD,GAAa+N,GAElE8B,EAAqBlC,EA6BlBrnB,IAvBAqY,IACHtiB,GAAK,CACHqqB,OAAO,EACPE,YAAY,EACZE,KAAK,EACLE,SAAS,EACTpa,OAAO,EACP0a,OAAO,EACPF,YAAY,IAIhB7E,EAAQiL,UAAU,EAAG,EAAGrf,EAAMA,GAG1BoS,GACFgC,EAAQ3a,UAAUud,GAAa,EAAG,GAIpC5C,EAAQ3a,UAAUgW,GAAkB,EAAG,GAGlCtX,EAAQ,EAAGA,GAASmpB,EAAgBnpB,GAAS,EAAG,CAI/C4nB,GAFJwB,EAAiB/B,EAEbO,GAEFyB,EAAe3P,EAAY1Z,EAAQynB,IAAkB9N,EAAWD,GAChE4P,EAAYhC,EAAc9kB,SAAW8kB,EAAc/kB,WACnDN,GAAYonB,EAAe3P,GAAY4P,EACvCrnB,EAAWpK,KAAKgO,IAAIhO,KAAK+N,IAAI3D,EAAU,GAAI,GAC3CmnB,GAAiB,EAAe9B,EAAAA,gBAAAA,EAActlB,WAAWC,GAAU/C,qBAC9D,GAAIyoB,GACJ1yB,IAAAA,EAAI,EAAGA,EAAIyyB,GAActyB,OAAQH,IAChC+K,GAAAA,GAAS0nB,GAAczyB,GAAGmD,OAAS4H,EAAQ0nB,GAAczyB,GAAGuC,KAAM,CACpE4xB,EAAiB1B,GAAczyB,GAAG4N,MAClC,MAKF0mB,EAAmB9sB,OAAO2C,gBAAkBgqB,EAAe3sB,OAAO2C,gBACpEopB,GAAcH,GAAkBe,GAChCG,EAAqBH,GAEvBnN,EAAQ3S,OACR2S,EAAQ3P,UAAU1M,GAASC,IAC3Boc,EAAQ1P,OAAQvM,EAAQtC,EAAT,WAAuB8pB,IACtCvL,EAAQ3P,WAAW1M,IAAUC,IAC7Boc,EAAQ3a,UAAU8mB,GAAiBP,GAAkBC,IACrD7L,EAAQzS,UAmBNmS,GAfAlB,GAnkBY,SAAS9a,EAAK2G,GAE9B3G,EAAI2J,OACJ3J,EAAI6W,UAAY,QAChB7W,EAAIgJ,YAAcyF,EAAS9R,UAC3BqD,EAAImF,UAAYsJ,EAAS9R,UAErB8R,IAAaoM,EAAS5L,SAAAA,UAAYR,IAAaoM,EAAS3L,SAAAA,iBAC1DlP,EAAIsU,YAAc,OAClBtU,EAAIuU,cAA6B,KAAbhL,GACpBvJ,EAAIwU,cAA6B,KAAbjL,GACpBvJ,EAAIyU,WAA0B,KAAblL,IAIjBvJ,EAAI+W,KADFiE,EACSuD,GAEAhH,GAEbvX,EAAIgX,SAASrQ,EAAM5C,QAAQgX,GAAc2D,GAAUD,GAAsB,IAAXA,GAAiBE,GAAsB,GAAZH,GAAkC,IAAhBF,GAAiC,GAAXG,IAEjIze,EAAI6J,UA+iBFsW,CAAY7D,EAAS3V,IAInBwU,GACFmB,EAAQ3a,UAAUkT,GAAWwT,GAAWC,IAItCjN,GACFiB,EAAQ3a,UAAUie,GAAe2I,GAAgBC,IAI/CxM,EACM4B,OAAAA,GAAehgB,OAChB,IAAA,KACH0e,EAAQ3a,UAAUkb,GAAekB,GAAWC,IAC5C,MACG,IAAA,SACH1B,EAAQ3a,UAAUmb,GAAmBiB,GAAWC,IAChD,MACG,IAAA,OACH1B,EAAQ3a,UAAUob,GAAiBgB,GAAWC,IAC9C,MACG,IAAA,MACH1B,EAAQ3a,UAAUqb,GAAgBe,GAAWC,IAM/CtC,GACFY,EAAQ3a,UAAUkW,GAAkB,EAAG,GAGzCc,IAAa,GAIVQ,KAAAA,UAEE,MAGMqO,EAAAA,EAAAA,QAAAA,QAAAA;;AC7LAqC,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAp/Bf,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,uBACA,EAAA,EAAA,QAAA,2BACA,EAAA,EAAA,QAAA,gCACA,EAAA,EAAA,QAAA,gCACA,EAAA,EAAA,QAAA,sBACA,EAAA,EAAA,QAAA,qBACA,EAAA,EAAA,QAAA,+BACA,EAAA,QAAA,WAWA,EAAA,QAAA,iBAi+BeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAh9Bf,IAAIA,EAAiB,SAAS7f,EAAQkN,GAEhCnG,IAAAA,OAAe1Y,KADnB6e,EAAaA,GAAc,IACiBnG,YAAc4D,EAAY3D,YAAAA,MAAQkG,EAAWnG,YACvF7I,OAAQ7P,IAAc6e,EAAWhP,KAAO,EAAIgP,EAAWhP,KACvD6R,OAAY1hB,IAAc6e,EAAW6C,SAAW,EAAI7C,EAAW6C,SAC/DC,OAAY3hB,IAAc6e,EAAW8C,SAAYD,EAAW,IAAO7C,EAAW8C,SAC9EC,OAAa5hB,IAAc6e,EAAW+C,WAAmB/C,EAAW+C,UACpEC,OAAa7hB,IAAc6e,EAAWgD,WAAaF,EAAWD,GAAY,EAAIA,EAAW7C,EAAWgD,UACpGlW,OAAW3L,IAAc6e,EAAWlT,QAAU,KAAOkT,EAAWlT,QAChEoW,OAAQ/hB,IAAc6e,EAAWkD,KAAO,KAAOlD,EAAWkD,KAC1D1D,OAAere,IAAc6e,EAAWR,YAAc,GAAKQ,EAAWR,YACtEC,OAActe,IAAc6e,EAAWP,WAAa,GAAKO,EAAWP,WACpErN,OAAejR,IAAc6e,EAAW5N,YAAc+Q,EAAY1I,YAAAA,MAAQuF,EAAW5N,YACrFgR,OAAgBjiB,IAAc6e,EAAWoD,cAAsBpD,EAAWoD,aAC1ErO,OAAmB5T,IAAc6e,EAAWjL,gBAAkBsO,EAAgBhN,gBAAAA,UAAY2J,EAAWjL,gBACrGuO,OAAqBniB,IAAc6e,EAAWsD,mBAA2BtD,EAAWsD,kBACpFrI,OAAe9Z,IAAc6e,EAAW/E,YAAcsI,EAAY/J,YAAAA,MAAQwG,EAAW/E,YACrFuI,OAAgBriB,IAAc6e,EAAWwD,aAAerf,EAASyS,MAAAA,IAAMoJ,EAAWwD,aAClFtJ,OAAY/Y,IAAc6e,EAAW9F,SAAWuJ,EAAStJ,SAAAA,cAAgB6F,EAAW9F,SACpFG,OAAalZ,IAAc6e,EAAW3F,UAAYqJ,EAAUnJ,UAAAA,OAASyF,EAAW3F,UAChFtB,OAAY5X,IAAc6e,EAAWjH,SAAWiL,EAAShL,SAAAA,QAAUgH,EAAWjH,SAC9EkL,OAAc9iB,IAAc6e,EAAWiE,YAAoBjE,EAAWiE,WACtEG,OAAoBjjB,IAAc6e,EAAWoE,kBAA0BpE,EAAWoE,iBAClFnB,OAAmB9hB,IAAc6e,EAAWiD,iBAAyBjD,EAAWiD,gBAChFoB,OAA2BljB,IAAc6e,EAAWqE,yBAAkCrE,EAAWqE,wBACjGC,OAA2BnjB,IAAc6e,EAAWsE,yBAAkCtE,EAAWsE,wBACjGzI,OAAkB1a,IAAc6e,EAAWnE,eAAiB0I,EAAe/K,eAAAA,MAAQwG,EAAWnE,eAC9F2I,OAAqBrjB,IAAc6e,EAAWwE,mBAA2BxE,EAAWwE,kBACpF1I,OAAqB3a,IAAc6e,EAAWlE,kBAAoB2I,EAAkB1M,kBAAAA,SAAWiI,EAAWlE,kBAC1G4I,OAAavjB,IAAc6e,EAAW0E,WAAoB1E,EAAW0E,UACrEC,OAAcxjB,IAAc6e,EAAW2E,YAAqB3E,EAAW2E,WACvEQ,OAA2BhkB,IAAc6e,EAAWmF,wBAA0B,IAAMnF,EAAWmF,wBAG7FC,GAAU,EAAiBtS,EAAAA,kBAAAA,GAW3B4R,GATS,IAAT1T,IACFA,EAAOhQ,KAAK+N,IAAIqW,EAAQtS,OAAOnI,MAAOya,EAAQtS,OAAOlI,SAIvDwa,EAAQtS,OAAOnI,MAAQqG,EACvBoU,EAAQtS,OAAOlI,OAASoG,EAGpB0T,IAA4B,IAAfC,EAAsB,CACjC/B,IAAAA,EAAe7b,EAAI6G,IAAAA,cAAc,SACrCgV,EAAayC,aAAa,MAAOV,GACjC/B,EAAayC,aAAa,UAAW,QAEnC9L,IAcA2G,EAdA3G,EAAYiE,EAAU5D,UAAAA,MAEtBuM,EAAO,KACP1W,EAAQoT,EAGRuD,EAAmBtD,EACnBuD,EAAmBxD,EACnBxQ,EAAarB,EACbsB,EAActB,EAEdsV,GAAc,EAEdE,EAAa,EAEb/E,IAAa,EAGbkG,GAAe9E,EACf+E,GAAe9E,EACf+E,GAAY/E,EAAWD,EACvBjb,GAAQggB,GAAeD,GACvBG,GAAmB,EACnBC,GAAmB,EAKnBxC,GAAiB,KAAOriB,EAA5B,GAEIsiB,IADwBtiB,EAA5B,GACiByD,EAAjB,SACI8e,GAAYD,GAAa5d,GACzBuV,GAA4B,KAAb9K,EACfugB,GAA6B,KAAbvgB,EAAoB,EAEpCmP,IAAc,EAEdrY,GAAQoc,IAAkB9V,EAAQoT,GAAY4C,GAE9C1c,GAAUsJ,EAAa,EACvBrJ,GAAwB,QAAdsJ,EAGV0U,GAAU,KAAQ3U,EAClB4U,GAAU,IAAO3U,EAsCjB0V,IAAc,EAAahX,EAAAA,cAAAA,EAAMA,GACjCiX,GAAeD,GAAYzd,WAAW,MAGtCkW,IAAmB,EAAazP,EAAAA,cAAAA,EAAMA,GACtC0P,GAAoBD,GAAiBlW,WAAW,MAGhD2d,IAAc,EAAalX,EAAAA,cAAO,QAAPA,EAAwB,QAAPA,GAC5CmX,GAAeD,GAAY3d,WAAW,MAGtC6d,IAAe,EAAapX,EAAAA,cAAO,QAAPA,EAAwB,QAAPA,GAC7CqX,GAAgBD,GAAa7d,WAAW,MAGxCoT,GAAYyK,GAGZO,IAAyB,EAAa3nB,EAAAA,cAAAA,KAAK+I,KAAY,QAAPiH,GAAkBhQ,KAAK+I,KAAY,QAAPiH,IAC5E4X,GAAsBD,GAAuBpe,WAAW,MAGxDse,IAAyB,EAAa7nB,EAAAA,cAAAA,KAAK+I,KAAY,QAAPiH,GAAkBhQ,KAAK+I,KAAY,QAAPiH,IAC5E8X,GAAsBD,GAAuBte,WAAW,MAGxDwe,IAAgB,EAAa/X,EAAAA,cAAAA,EAAMA,GACnCgY,GAAiBD,GAAcxe,WAAW,MAG1CoW,IAAmB,EAAa3P,EAAAA,cAAAA,EAAMA,GACtC4P,GAAoBD,GAAiBpW,WAAW,MAwDhD2e,GAAuB,SAASpgB,EAAKvH,EAAOZ,EAAMqL,EAAOmd,GAC3DrgB,EAAI2J,OACJ3J,EAAIgJ,YAAc9F,EAClBlD,EAAImF,UAAYjC,EAChBlD,EAAI6I,UAAyB,KAAbU,EACZ+W,IAAAA,EAAc5D,GAAa5d,GAAQrG,EAAQikB,GAAa5d,GAAQib,EAChEwG,EAAYD,GAAczoB,EAAOY,IAAUqG,GAAQ4d,IACvD1c,EAAI2M,UAAU1M,GAASC,IACvBF,EAAI4M,OAAO6P,IACXzc,EAAIyE,YACA4b,GACFrgB,EAAI0E,OAAO,EAAG,GACd1E,EAAImJ,IAAI,EAAG,EAAgB,KAAbI,EAAqBvJ,EAAI6I,UAAY,EAAGyX,EAAYC,GAAW,IAE7EvgB,EAAImJ,IAAI,EAAG,EAAgB,KAAbI,EAAoB+W,EAAYC,GAAW,GAEvDF,GACFrgB,EAAI0E,OAAO,EAAG,GACd1E,EAAIqF,QAEJrF,EAAIiJ,SAGNjJ,EAAI2M,WAAW1M,IAAUC,IACzBF,EAAI6J,WA0KFzT,GAAO,SAAS8gB,GAEdsJ,IAzPwBxgB,EAyPxBwgB,OAAanoB,KADjB6e,EAAaA,GAAc,IACeuJ,OAAgBvJ,EAAWuJ,MACjEC,OAAkBroB,IAAc6e,EAAWyJ,YAAqBzJ,EAAWyJ,WAC3EC,OAAWvoB,IAAc6e,EAAW2J,KAAc3J,EAAW2J,IAC7DG,OAAe3oB,IAAc6e,EAAW+J,SAAkB/J,EAAW+J,QACrEC,OAAkB7oB,IAAc6e,EAAWiK,YAAqBjK,EAAWiK,WAsC3ET,GApCJhI,IAAc,EApUVuB,GACF8E,IAAY,EAAe/E,EAAAA,gBAAAA,EAAWD,GAAU,GAChDkF,IAAmB,EAAeF,EAAAA,gBAAAA,GAAayC,GAAwB,GACvE3C,GAAe3mB,KAAKiM,MAAM4V,EAAWkF,IAAoBA,GACzDH,GAAe5mB,KAAK+I,KAAK+Y,EAAWiF,IAAoBA,GACxDD,IAAmB,EAAeC,EAAAA,gBAAAA,GAAoBwC,GAAwB,GAG9E3iB,IADAkb,EAAW8E,KADX/E,EAAW8E,MAKXA,GAAe9E,EACf+E,GAAe9E,EACflb,GAHAigB,GAAa/E,EAAWD,EAIxBiF,GAAmB,EACnBC,GAAmB,IAGrBtY,EAAQA,EAAQoT,EAAWA,EAAWpT,EAAQqT,EAAWA,EAAWrT,EACpE2W,EAAmBA,EAAmBvD,EAAWA,EAAWuD,EAAmBtD,EAAWA,EAAWsD,EACrGC,EAAmBA,EAAmBxD,EAAWA,EAAWwD,EAAmBvD,EAAWA,EAAWuD,EACrGrD,EAAYA,EAAYH,EAAWA,EAAWG,EAAYF,EAAWA,EAAWE,EAEhE,EAChBuC,GAAiB,KAAOriB,EAAxB,GACiB,KAAOA,EAAxB,GACAsiB,GAAa7e,EAAb,QAGAwC,GAAQoc,IAAkB9V,EAAQoT,IAFlC4C,GAAYD,GAAa5d,IA+SrB0hB,GAAalG,IACM6E,EAAAA,EAAAA,SAAAA,GAAc7V,EAAarJ,GAASiI,EAAO,EAAGqB,EAAYC,GAI7EkX,GAAkBlG,IACM5C,EAAAA,EAAAA,SAAAA,GAAmB3L,EAAiBhM,GAASiI,EAAO,EAAGqB,EAAYC,GAI3FoX,IACFvB,GAAa1d,WAAU,EAAezJ,EAAAA,SAAAA,KAAK+I,KAAY,QAAPiH,GAAkB,EAAG+H,GAAW,EAAG,GAGnFsP,GAAc5d,WAAU,EAAezJ,EAAAA,SAAAA,KAAK+I,KAAY,QAAPiH,GAAkB,EAAG+H,GAAW,EAAG,IAIlFsL,IACFuE,GAAoBne,WAAU,EAAyBzJ,EAAAA,SAAAA,KAAK+I,KAAY,QAAPiH,GAAkB7M,EAAS2S,MAAAA,KAAKnR,KAAK0C,gBAAgB,GAAM,GAAO,EAAG,GACtIugB,GAAoBjW,WAIlB2R,IACFwE,GAAoBre,WAAU,EAAyBzJ,EAAAA,SAAAA,KAAK+I,KAAY,QAAPiH,GAAkB7M,EAASyS,MAAAA,IAAIhR,OAAOyC,gBAAgB,GAAO,EAAG,GACjIygB,GAAoBnW,WAIlB6W,GAAkBlG,EAAmB,CAInC,GAvSsBxa,EAoSX4X,GAnSb,UAAYnH,EAAU7Y,OACxBoI,EAAI2J,OACqB,SAArBoH,EAAYnZ,MAEdoI,EAAI2B,WAAU,EAAgBzJ,EAAAA,SAAAA,KAAK+I,KAAmB,QAAduI,GAAyBmR,EAAStJ,SAAAA,cAAeE,GAAyB,IAAbhI,EAAiC,GAAdC,GAExHxJ,EAAI2B,WAAU,EAAgBzJ,EAAAA,SAAAA,KAAK+I,KAAmB,QAAduI,GAAyBmR,EAAStJ,SAAAA,cAAeE,GAAyB,IAAbhI,EAAiC,IAAdC,IAC1F,SAArBuH,EAAYnZ,MAErBoI,EAAI2B,WAAU,EAAgBzJ,EAAAA,SAAAA,KAAK+I,KAAmB,QAAduI,GAAyBmR,EAAStJ,SAAAA,cAAeE,GAAyB,IAAbhI,EAAiC,GAAdC,GAExHxJ,EAAI2B,WAAU,EAAgBzJ,EAAAA,SAAAA,KAAK+I,KAAmB,QAAduI,GAAyBmR,EAAStJ,SAAAA,cAAeE,GAAyB,IAAbhI,EAAiC,IAAdC,KAGxHxJ,EAAI2B,WAAU,EAAgBzJ,EAAAA,SAAAA,KAAK+I,KAAmB,QAAduI,GAAyBmR,EAAStJ,SAAAA,cAAeE,GAAyB,GAAbhI,EAAiC,QAAdC,EAAsC,QAAdA,GAEhJxJ,EAAI2B,WAAU,EAAgBzJ,EAAAA,SAAAA,KAAK+I,KAAmB,QAAduI,GAAyBmR,EAAStJ,SAAAA,cAAeE,GAAyB,GAAbhI,EAAgC,QAAdC,IAEzHxJ,EAAI6J,WAoRA,OAAS7F,GAAW,EAAIA,EAAQvO,OAAQ,CAC1CmiB,GAAkBjO,OACdgL,EAAYxD,YAAAA,OAASJ,GACvB6G,GAAkBjL,UAAU1M,GAASA,IACrC2X,GAAkBhL,QAAQ/O,EAA1B,SACA+Z,GAAkBjL,WAAW1M,IAAUA,KAC9B0U,EAAYzD,YAAAA,OAASH,IAC9B6G,GAAkBjL,UAAU1M,GAASA,IACrC2X,GAAkBhL,OAAO/O,EAAzB,SACA+Z,GAAkBjL,WAAW1M,IAAUA,KAErC0hB,IAAAA,EAAe3d,EAAQvO,OACxB,GAED2qB,GAAqBxI,GAAmB5T,IADxC2d,GAC8DlpB,MAAOuL,EAAQ2d,GAAc9pB,KAAMmM,EAAQ2d,GAAcze,OAAO,SAEzH,EAAIye,GACX/J,GAAkB/N,UAIhB,GAAA,OAASuQ,GAAQ,EAAIA,EAAK3kB,OAAQ,CAChCkf,EAAYxD,YAAAA,OAASJ,IACvB6G,GAAkBjL,UAAU1M,GAASA,IACrC2X,GAAkBhL,QAAQ/O,EAA1B,SACA+Z,GAAkBjL,WAAW1M,IAAUA,KAErC0U,EAAYzD,YAAAA,OAASH,IACvB6G,GAAkBjL,UAAU1M,GAASA,IACrC2X,GAAkBhL,OAAO/O,EAAzB,SACA+Z,GAAkBjL,WAAW1M,IAAUA,KAErC2hB,IAAAA,EAAYxH,EAAK3kB,OAClB,GAED2qB,GAAqBxI,GAAmBwC,IADxCwH,GACwDnpB,MAAO2hB,EAAKwH,GAAW/pB,KAAMuiB,EAAKwH,GAAW1e,OAAO,SAEvG,EAAI0e,GACXhK,GAAkB/N,WA5OC,SAAS7J,EAAKgT,GACrC/G,EAAgB7P,WAAWkD,SAAS,GACpCU,EAAI2J,OAEAgL,EAAYxD,YAAAA,OAASJ,IACvB/Q,EAAI2M,UAAU1M,GAASA,IACvBD,EAAI4M,QAAQ/O,EAAZ,SACAmC,EAAI2M,WAAW1M,IAAUA,KAEvB0U,EAAYzD,YAAAA,OAASH,IACvB/Q,EAAI2M,UAAU1M,GAASA,IACvBD,EAAI4M,OAAO/O,EAAX,SACAmC,EAAI2M,WAAW1M,IAAUA,KAG3BD,EAAI6W,UAAY,SAChB7W,EAAI8W,aAAe,SACf+K,IAAAA,EAAW3pB,KAAK+I,KAAkB,IAAbsI,GACzBvJ,EAAI+W,KAAO8K,EAAW,MAAQzjB,EAA9B,YACA4B,EAAIgJ,YAAciD,EAAgB7P,WAAWmD,eAC7CS,EAAImF,UAAY8G,EAAgB7P,WAAWmD,eAC3CS,EAAI2M,UAAU1M,GAASC,IACvBF,EAAI4M,OAAO6P,IACPsF,IACAD,EAaAxsB,EAdAysB,EAAepF,GAAYqC,GAG3BgD,EAAejI,EACfkI,EAAmBR,EAEnBS,EAA2B,IAAb3Y,EACd4Y,EAAiC,IAAb5Y,EACpB6Y,EAA+B,KAAb7Y,EAClB8Y,EAAiC,IAAb9Y,EACpB+Y,EAAgC,IAAb/Y,EACnBgZ,EAA0B,IAAbhZ,EAEbiZ,EAAoBxJ,WAAWgB,EAASjW,QAAQ,IAG/CzO,IAAAA,EAAIykB,EAAUf,WAAW1jB,EAAEyO,QAAQ,KAAOye,EAAmBltB,GAAK0pB,GAIjEiD,GAHJH,GAAqBC,EAAelkB,EAApC,QAtOoB,MAuOpBokB,EAN+BR,IA2CIQ,GACjCjiB,EAAI6I,UAAY,EAChB7I,EAAIyE,YACJzE,EAAI0E,OAAOwd,EAAa,GACxBliB,EAAI2E,OAAOyd,EAAiB,GAC5BpiB,EAAI6E,YACJ7E,EAAIiJ,WAEJjJ,EAAI6I,UAAY,GAChB7I,EAAIyE,YACJzE,EAAI0E,OAAOwd,EAAa,GACxBliB,EAAI2E,OAAO0d,EAAmB,GAC9BriB,EAAI6E,YACJ7E,EAAIiJ,UAENjJ,EAAI4M,OAAOmV,OAlDPE,CAUMjP,OATRhT,EAAI6I,UAAY,IAChB7I,EAAIyE,YACJzE,EAAI0E,OAAOwd,EAAa,GACxBliB,EAAI2E,OAAOwd,EAAmB,GAC9BniB,EAAI6E,YACJ7E,EAAIiJ,SACJjJ,EAAI2J,OACJ3J,EAAI2M,UAAU2V,EAAkB,GAChCtiB,EAAI4M,OAAOkV,GACH9O,EAAkBrV,QACnB,IAAA,aACHqC,EAAIgX,SAAUgL,EAAaje,QAAQ,GAAK,EAAG,EAAGwe,GAC9C,MAEG,IAAA,aACHviB,EAAIgX,SAAUgL,EAAaS,YAAY,GAAK,EAAG,EAAGF,GAClD,MAEG,IAAA,WAEL,QACEviB,EAAIgX,SAAUgL,EAAaje,QAAQ,GAAK,EAAG,EAAGwe,GAGlDviB,EAAI2M,WAAW2V,EAAkB,GACjCtiB,EAAI6J,UAEJmY,GAAgB/C,GAChBgD,EAAmB,EACnBjiB,EAAI4M,OAAOmV,GAuEf/hB,EAAI2M,WAAW1M,IAAUC,IACzBF,EAAI6J,UA+FF6Y,CAAmB9K,GAAmB5E,GAjQrB,SAAShT,GACxB+pB,IAAAA,EAAYC,EAChBhqB,EAAI2J,OACJ3J,EAAI6W,UAAY,OAChB7W,EAAI8W,aAAe,SACnB9W,EAAIgJ,YAAciD,EAAgB7P,WAAWmD,eAC7CS,EAAImF,UAAY8G,EAAgB7P,WAAWmD,eAE3CS,EAAI+W,KAAO,QAAWxN,EAAa,MAAQnL,EAA3C,YACA2rB,EAAa/pB,EAAIiqB,YAAYvT,GAAa7U,MAC1C7B,EAAIgX,SAASN,GAAcnN,EAAawgB,GAAc,EAAiB,GAAdvgB,EAAgC,GAAbD,GAC5EygB,EAAYhqB,EAAIiqB,YAAYtT,GAAY9U,MACxC7B,EAAIgX,SAASL,GAAapN,EAAaygB,GAAa,EAAiB,IAAdxgB,EAAiC,GAAbD,GAE3EvJ,EAAI6J,UAsPF4M,CAAemB,IA8BbsJ,GA1BA5F,IACF1D,GAAkBjO,OACdgL,EAAYxD,YAAAA,OAASJ,IACvB6G,GAAkBjL,UAAU1M,GAASA,IACrC2X,GAAkBhL,QAAQ/O,EAA1B,SACA+Z,GAAkBjL,WAAW1M,IAAUA,KAErC0U,EAAYzD,YAAAA,OAASH,IACvB6G,GAAkBjL,UAAU1M,GAASA,IACrC2X,GAAkBhL,OAAO/O,EAAzB,SACA+Z,GAAkBjL,WAAW1M,IAAUA,KAEzC2X,GAAkBjL,UAAU1M,GAASC,IACrC0X,GAAkBhL,OAAO6P,IAAkBvC,EAAYH,GAAY4C,GAAY9e,EAA/E,SACA+Z,GAAkBjL,WAAW1M,IAAUC,IACvC0X,GAAkBjW,UAhVK,WACrBghB,IAAAA,EAAkB1kB,EAAI6G,IAAAA,cAAc,UACxC6d,EAAgB9gB,MAAQ3J,KAAK+I,KAAY,QAAPiH,GAClCya,EAAgB7gB,OAAS5J,KAAK+I,KAA6B,GAAxB0hB,EAAgB9gB,OAC/C+gB,IAAAA,EAAeD,EAAgBlhB,WAAW,MAE9CmhB,EAAajZ,OACTkZ,IAAAA,EAAgBD,EAAaja,qBAAqB,EAAG,GAAK,EAA4B,GAAzBga,EAAgB7gB,QAoB1E6gB,OAnBPE,EAAcja,aAAa,EAAG,WAC9Bia,EAAcja,aAAa,GAAK,WAChCia,EAAcja,aAAa,IAAM,WACjCia,EAAcja,aAAa,EAAG,WAC9Bga,EAAazd,UAAY0d,EAEzBD,EAAane,YACbme,EAAale,OAA+B,GAAxBie,EAAgB9gB,MAAa,IACjD+gB,EAAaje,OAA+B,GAAxBge,EAAgB9gB,MAAsC,GAAzB8gB,EAAgB7gB,QACjE8gB,EAAaje,OAA+B,GAAxBge,EAAgB9gB,MAAsC,GAAzB8gB,EAAgB7gB,QACjE8gB,EAAaje,OAA+B,GAAxBge,EAAgB9gB,MAAa,IACjD+gB,EAAa/d,YAEb+d,EAAavd,OACbud,EAAa5Z,YAAc,UAC3B4Z,EAAa3Z,SAEb2Z,EAAa/Y,UAEN8Y,EAqTuBG,GAAqC,KAAbvZ,EAAkC,IAAdC,GACxEoO,GAAkB/N,WAIhBmX,IACed,EAAAA,EAAAA,SAAAA,GAA6B,KAAb3W,EAAmB4I,EAAauI,EAAczO,EAAgB7P,YAK7F8kB,GAAkBxF,EAAmB,CACnCsH,IAAAA,EAAoC,WAArB7Q,EAAYva,MAA0C,WAArBua,EAAYva,MACtCkgB,EAAAA,EAAAA,SAAAA,GAAmB/E,EAAgBxJ,EAAYC,EAAawZ,EAAa5R,EAAUG,EAAWd,EAAWM,KAInIkS,GAAe,SAASC,GAEtBC,IAAAA,OAAc9qB,KADlB6qB,EAAUA,GAAW,IACmBzC,OAAgByC,EAAQzC,MAC5D2C,OAAmB/qB,IAAc6qB,EAAQvC,YAAqBuC,EAAQvC,WACtE0C,OAAYhrB,IAAc6qB,EAAQrC,KAAcqC,EAAQrC,IACxD0C,OAAgBlrB,IAAc6qB,EAAQjC,SAAkBiC,EAAQjC,QAChEuC,OAAmBnrB,IAAc6qB,EAAQ/B,YAAqB+B,EAAQ/B,WAEtEgC,IACFjE,GAAYrd,MAAQqG,EACpBgX,GAAYpd,OAASoG,EACrBiX,GAAeD,GAAYzd,WAAW,OAGpC2hB,IACFzL,GAAiB9V,MAAQqG,EACzByP,GAAiB7V,OAASoG,EAC1B0P,GAAoBD,GAAiBlW,WAAW,OAG9C4hB,IACFjE,GAAYvd,MAAQ3J,KAAK+I,KAAY,QAAPiH,GAC9BkX,GAAYtd,OAAS5J,KAAK+I,KAAY,QAAPiH,GAC/BmX,GAAeD,GAAY3d,WAAW,MAEtC6d,GAAazd,MAAQ3J,KAAK+I,KAAY,QAAPiH,GAC/BoX,GAAaxd,OAAS5J,KAAK+I,KAAY,QAAPiH,GAChCqX,GAAgBD,GAAa7d,WAAW,MAGxCoT,GAAYyK,IAGViE,IACFtD,GAAcpe,MAAQqG,EACtB+X,GAAcne,OAASoG,EACvBgY,GAAiBD,GAAcxe,WAAW,OAGxC+hB,IACF3L,GAAiBhW,MAAQqG,EACzB2P,GAAiB/V,OAASoG,EAC1B4P,GAAoBD,GAAiBpW,WAAW,QAIhDkiB,GAAQ,SAASC,GACfA,EACFlG,EAAamG,YAAYJ,GAAqB,MAE9CK,cAAcpG,GACd7I,GAAYyK,KAIZmE,GAAsB,WACpBtI,IAEAtG,GADEA,KAAcuK,GACJE,GAEAF,GAETzG,KACHA,IAAa,GACI0E,EAAAA,EAAAA,kBAAAA,EAAKlE,YA8WrB,OAxWFE,KAAAA,SAAW,SAAS0K,GAEnBC,IAAAA,GADJD,EAAW/K,WAAW+K,IACQhK,EAAWA,EAAYgK,EAAW/J,EAAWA,EAAW+J,EA6B/E,OA5BHpd,IAAUqd,KACZrd,EAAQqd,GAEIzG,IACVA,EAAmB5W,GAEjBA,EAAQ2W,IACVA,EAAmB3W,GAGhBA,GAASuT,IAAcsD,GAAerD,GACxCxT,GAASuT,IAAcsD,IAAgBrD,GAExCwJ,GADAnG,GAAc,GAEV5B,GACF9B,EAAamK,SAELtd,EAAQuT,GAAasD,GAAerD,GAC7CxT,EAAQuT,GAAasD,IAAgBrD,KAEtCwJ,GADAnG,GAAc,GAEV5B,GACF9B,EAAaoK,SAIZ/K,KAAAA,WAEA,MAGJG,KAAAA,SAAW,WACP3S,OAAAA,GAGJkS,KAAAA,iBAAmB,SAASkL,EAAUpc,GAErCqc,IAEFK,EAFEL,GADJD,EAAW/K,WAAW+K,IACQhK,EAAWA,EAAYgK,EAAW/J,EAAWA,EAAW+J,EACpFhL,EAAQ,KAoDH,OAjDHpS,IAAUqd,SACR3rB,IAAc+e,GAASA,EAAMte,WAC/Bse,EAAMvf,OAGRwsB,EAAOhI,EAA0BnkB,KAAKiC,IAAI6pB,EAAcrd,IAAUqT,EAAWD,GAC7EsK,EAAOnsB,KAAKgO,IAAIme,EAAMhI,EAA0B,IAChDjF,EAAQ,IAAIpiB,EAAJ,QAAU,GAAI,GAAIA,EAAMgG,QAAAA,iBAAkB2L,EAAOqd,EAAaK,IAGhEpL,gBAAkB,SAASC,IAC/BvS,EAAQuS,EAAMvhB,OAAOX,OAEPkjB,IAAcsD,GAAerD,GACxCxT,GAASuT,IAAcsD,IAAgBrD,GAExCwJ,GADAnG,GAAc,GAEV5B,GACF9B,EAAamK,SAELtd,EAAQuT,GAAasD,GAAerD,GAC7CxT,EAAQuT,GAAasD,IAAgBrD,KAEtCwJ,GADAnG,GAAc,GAEV5B,GACF9B,EAAaoK,SAIbvd,EAAQ4W,IACVA,EAAmB5W,GAEjBA,EAAQ2W,IACVA,EAAmB3W,GAGhBgS,KACHA,IAAa,GACII,EAAAA,EAAAA,kBAAAA,EAAMI,WAKvBxR,GAAiC,mBAAdA,IACrByP,EAAMgC,iBAAmBzR,GAG3ByP,EAAM3e,SAED,MAGJwsB,KAAAA,YAAc,SAASlB,GASnB,OARPhK,EAAWf,WAAW+K,GACtBd,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJ+L,KAAAA,YAAc,WACVnL,OAAAA,GAGJoL,KAAAA,YAAc,SAASpB,GASnB,OARP/J,EAAWhB,WAAW+K,GACtBd,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJiM,KAAAA,YAAc,WACVpL,OAAAA,GAGJ2K,KAAAA,oBAAsB,SAASZ,GAK3B,OAJPA,EAAW/K,WAAW+K,GAEtBxG,EADkBwG,EAAWhK,EAAWA,EAAYgK,EAAW/J,EAAWA,EAAW+J,EAEhF5K,KAAAA,UACE,MAGJyL,KAAAA,oBAAsB,SAASb,GAK3B,OAJPA,EAAW/K,WAAW+K,GAEtBzG,EADkByG,EAAWhK,EAAWA,EAAYgK,EAAW/J,EAAWA,EAAW+J,EAEhF5K,KAAAA,UACE,MAGJmL,KAAAA,sBAAwB,WAGpB,OAFPhH,EAAmB3W,EACdwS,KAAAA,UACE,MAGJoL,KAAAA,sBAAwB,WAGpB,OAFPhH,EAAmB5W,EACdwS,KAAAA,UACE,MAGJqL,KAAAA,2BAA6B,SAASC,GAGlC,OAFPlJ,IAA4BkJ,EACvBtL,KAAAA,UACE,MAGJuL,KAAAA,2BAA6B,SAASD,GAGlC,OAFPjJ,IAA4BiJ,EACvBtL,KAAAA,UACE,MAGJuM,KAAAA,oBAAsB,SAASjB,GAG3B,OAFPnJ,IAAqBmJ,EAChBtL,KAAAA,UACE,MAGJwM,KAAAA,mBAAqB,SAASC,GAM1B,OALPzL,IAAoByL,EAGpBjC,GADAnG,GAAeA,GAEVrE,KAAAA,UACE,MAGJ2M,KAAAA,eAAiB,SAASC,GAStB,OARP9C,GAAa,CACXxC,OAAO,IAETnX,EAAcyc,EACd3vB,GAAK,CACHqqB,OAAO,IAEJtH,KAAAA,UACE,MAGJ6M,KAAAA,mBAAqB,SAASC,GAW1B,OAVPhD,GAAa,CACXtC,YAAY,EACZM,QAA+B,UAArB9O,EAAYva,MAAyC,WAArBua,EAAYva,OAExDqU,EAAkBga,EAClB7vB,GAAK,CACHuqB,YAAY,EACZM,QAA+B,UAArB9O,EAAYva,MAAyC,WAArBua,EAAYva,OAEnDuhB,KAAAA,UACE,MAGJ+M,KAAAA,kBAAoB,SAASC,GASzB,OARPlD,GAAa,CACX9B,YAAY,IAEdpO,EAAiBoT,EACjB/vB,GAAK,CACH+qB,YAAY,IAEThI,KAAAA,UACE,MAGJiN,KAAAA,eAAiB,SAASC,GAWtB,OAVPpD,GAAa,CACXhC,SAAS,EACTE,YAAY,IAEdhP,EAAckU,EACdjwB,GAAK,CACH6qB,SAAS,EACTE,YAAY,IAEThI,KAAAA,UACE,MAGJmN,KAAAA,gBAAkB,SAASC,GASvB,OARPtD,GAAa,CACXhC,SAAS,IAEXvG,EAAe6L,EACfnwB,GAAK,CACH6qB,SAAS,IAEN9H,KAAAA,UACE,MAGJqN,KAAAA,YAAc,SAASC,GASnB,OARPxD,GAAa,CACXpC,KAAK,IAEP5Q,EAAWwW,EACXrwB,GAAK,CACHyqB,KAAK,IAEF1H,KAAAA,UACE,MAGJ4N,KAAAA,cAAgB,SAAStC,GAGrB,OAFPtJ,IAAesJ,EACVtL,KAAAA,UACE,MAGJA,KAAAA,QAAU,WACRT,IACHtiB,GAAK,CACHqqB,OAAO,EACPE,YAAY,EACZE,KAAK,EACLI,SAAS,EACTE,YAAY,IAIhB7E,EAAQiL,UAAU,EAAG,EAAGrf,EAAMA,GAC9BoU,EAAQ3S,OAGJ2Q,GACFgC,EAAQ3a,UAAUud,GAAa,EAAG,GAIpC5C,EAAQ3a,UAAUgW,GAAkB,EAAG,GAGnCwD,GACFmB,EAAQ3a,UAAUkT,GAAWqJ,GAASC,IAGpCxJ,EAAYxD,YAAAA,OAASJ,IACvBuL,EAAQ3P,UAAU1M,GAASA,IAC3Bqc,EAAQ1P,QAAQ/O,EAAhB,SACAye,EAAQ3P,WAAW1M,IAAUA,KAE3B0U,EAAYzD,YAAAA,OAASH,IACvBuL,EAAQ3P,UAAU1M,GAASA,IAC3Bqc,EAAQ1P,OAAO/O,EAAf,SACAye,EAAQ3P,WAAW1M,IAAUA,KAI3Bsb,IACFe,EAAQ3S,OACR2S,EAAQ3P,UAAU1M,GAASC,IAC3Boc,EAAQ1P,OAAO6P,GAAiB5e,EAAjB,SAA4Byf,EAAmBvD,GAAY4C,IAC1EL,EAAQ3P,WAAW1M,IAAUC,IAC7Boc,EAAQ3a,UAAUke,GAA+C,MAAvBvD,EAAQtS,OAAOnI,MAAwC,IAAxBya,EAAQtS,OAAOlI,QACxFwa,EAAQzS,WAIN2R,IACFc,EAAQ3S,OACR2S,EAAQ3P,UAAU1M,GAASC,IAC3Boc,EAAQ1P,OAAO6P,GAAiB5e,EAAjB,SAA4B0f,EAAmBxD,GAAY4C,IAC1EL,EAAQ3P,WAAW1M,IAAUC,IAC7Boc,EAAQ3a,UAAUoe,GAA+C,MAAvBzD,EAAQtS,OAAOnI,MAAwC,IAAxBya,EAAQtS,OAAOlI,QACxFwa,EAAQzS,WAGVxJ,GAAQoc,GAAiB5e,EAAjB,SAA4B8I,EAAQoT,GAAY4C,GAGxDL,EAAQ3S,OACR2S,EAAQ3P,UAAU1M,GAASC,IAC3Boc,EAAQ1P,OAAOvM,IAEfic,EAAQhI,YAAc,qBACtBgI,EAAQ/H,cAAgB+H,EAAQ9H,cAAgBH,GAChDiI,EAAQ7H,WAA4B,EAAfJ,GAErBiI,EAAQ3P,WAAWmd,IAAgBA,IACnCxN,EAAQ3a,UAAUse,GAAe,EAAG,GAEpC3D,EAAQzS,UAGJ6R,IACE/G,EAAYxD,YAAAA,OAASJ,GACvBuL,EAAQ3P,UAAU1M,GAASA,IAC3Bqc,EAAQ1P,OAAO/O,EAAf,SACAye,EAAQ3P,WAAW1M,IAAUA,KACpB0U,EAAYzD,YAAAA,OAASH,IAC9BuL,EAAQ3P,UAAU1M,GAASA,IAC3Bqc,EAAQ1P,QAAQ/O,EAAhB,SACAye,EAAQ3P,WAAW1M,IAAUA,KAE/Bqc,EAAQ3a,UAAUkW,GAAkB,EAAG,IAEzCyE,EAAQzS,UAER8O,IAAa,GAIVQ,KAAAA,UAEE,MAGM0Q,EAAAA,EAAAA,QAAAA,QAAAA;;ACrzBAK,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA9Lf,IAAA,EAAA,EAAA,QAAA,mBACA,EAAA,EAAA,QAAA,yBACA,EAAA,EAAA,QAAA,0BACA,EAAA,QAAA,WA2LeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAnLf,IAAIA,EAA4B,SAA5BA,EAAqClqB,EAAKiM,EAAiB1C,EAAYC,EAAauM,GAClFzgB,IAAAA,EAAG8M,EAAKoG,EAAM5I,EAAWC,EAC3BsqB,EACAC,EAAYC,EACZrpB,EACAuL,EAAYtM,EAASC,EAASsM,EAC9BJ,EAAMC,EAAcC,EACpB7D,EAAWc,EAAW7J,WAAa8J,EAAcuM,EAAW9J,EAAgB7U,KAG1E,IAAC8yB,EAA0BxhB,MAAMD,GAAW,CAC9C0hB,EAA8E,IAAjEjyB,KAAKkJ,KAAKmI,EAAaA,EAAaC,EAAcA,GAC/D2gB,EAAajyB,KAAK+I,KAAK/I,KAAK+N,IAAIkkB,EAAoD,IAAvCpU,EAAWxM,EAAaC,KAAuB,EAExF8gB,IAAAA,EAAgBpyB,KAAKiM,MAA8C,SAAvC4R,EAAWxM,EAAaC,IAUpDyC,GANQA,GADZoe,GADAD,GAAa,EAAa7gB,EAAAA,cAAAA,EAAYC,IACjB/H,WAAW,OAExBoH,UAAY,GAEHwhB,EAAAA,EAAAA,kBAAAA,EAASF,EAAYA,EAAY5gB,EAA0B,EAAb4gB,EAAgB3gB,EAA2B,EAAb2gB,EAAgBG,GAGhF,WAAzBre,EAAgB7U,MAA8C,kBAAzB6U,EAAgB7U,MAC9B,cAAzB6U,EAAgB7U,MAAiD,kBAAzB6U,EAAgB7U,MAC/B,sBAAzB6U,EAAgB7U,MAAyD,WAAzB6U,EAAgB7U,KAAmB,CAW/E6U,GAVyB,WAAzBA,EAAgB7U,OAClBizB,EAAQllB,UAAYklB,EAAQ3d,cAAc3C,EAAtB,QAAoC,UACxDsgB,EAAQhlB,QAGmB,kBAAzB4G,EAAgB7U,OAClBizB,EAAQllB,UAAYklB,EAAQ3d,cAAcxC,EAAtB,QAA0C,UAC9DmgB,EAAQhlB,SAGmB,cAAzB4G,EAAgB7U,MAAiD,WAAzB6U,EAAgB7U,QAE1DwI,EAAY,CAAC,EACX,IACA,GACA,IACA,IACA,IACA,IACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,GAIFC,EAAS,CAAC,IAAIxB,EAAJ,UAAc,WACtB,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,YAEhBmK,EAAO,IAAI7I,EAAJ,gBAAoBC,EAAWC,GAEtCwqB,EAAQzgB,OACRpB,EAAK5G,SAASyoB,EAAS9gB,EAAa,EAAGC,EAAc,EAAGD,EAA0B,EAAb4gB,EAAgB3gB,EAA2B,EAAb2gB,EAAgB5gB,EAAa,EAAGC,EAAc,IAEjJhB,EAAO6hB,EAAQ1hB,qBAAqB,EAAGwhB,EAAY,EAAG3gB,EAA2B,EAAb2gB,IAC/DvhB,aAAa,EAAG,uBACrBJ,EAAKI,aAAa,GAAK,uBACvBJ,EAAKI,aAAa,EAAG,oBACrByhB,EAAQllB,UAAYqD,EACpB6hB,EAAQhlB,OAEqB,WAAzB4G,EAAgB7U,MAAmB,CAoBhC9B,IAjBLiX,EAAsB,KADtBvL,EAAS9I,KAAKkJ,MAAMmI,EAA0B,EAAb4gB,IAAmB5gB,EAA0B,EAAb4gB,IAAmB3gB,EAA2B,EAAb2gB,IAAmB3gB,EAA2B,EAAb2gB,IAAmB,GAEtJlqB,EAAUsJ,EAAa,EACvBrJ,EAAUsJ,EAAc,EAExBgD,EAAW1O,EAAS,OAAA,KAAO,IAAMkD,GAGjCqpB,EAAQ1gB,QAGS0gB,EAAAA,EAAAA,kBAAAA,EAASF,EAAYA,EAAY5gB,EAA0B,EAAb4gB,EAAgB3gB,EAA2B,EAAb2gB,EAAgBG,GAC7GD,EAAQzgB,OAGRygB,EAAQxhB,UAAY,GACpBzG,EAAMtE,EAAS0O,OAAW,GAAXA,EAEVlX,EAAI,EAAGA,EAAI8M,EAAK9M,GAAKkX,EAExB6d,EAAQrhB,YAAc,4BACtBqhB,EAAQ5lB,YACR4lB,EAAQlhB,IAAIlJ,EAAUsM,EAAYrM,EAASqM,EAAY,EAAGzO,EAA1D,QACAusB,EAAQphB,SAERohB,EAAQ1d,UAAU1M,EAASC,GAC3BmqB,EAAQzd,OAAkB,GAAXJ,GACf6d,EAAQ1d,WAAW1M,GAAUC,GAE7BmqB,EAAQrhB,YAAc,wBACtBqhB,EAAQ5lB,YACR4lB,EAAQlhB,IAAIlJ,EAAUsM,EAAYrM,EAASqM,EAAY,EAAGzO,EAA1D,QACAusB,EAAQphB,SACRohB,EAAQ1d,UAAU1M,EAASC,GAC3BmqB,EAAQzd,OAAmB,IAAXJ,GAChB6d,EAAQ1d,WAAW1M,GAAUC,GAG7BmqB,EAAQ1d,UAAU1M,EAASC,GAC3BmqB,EAAQzd,OAAOJ,GACf6d,EAAQ1d,WAAW1M,GAAUC,GAG/BmqB,EAAQxgB,WAIZrB,EAAO6hB,EAAQ1hB,qBAAqBwhB,EAAYA,EAAY5gB,EAA0B,EAAb4gB,EAAgB3gB,EAA2B,EAAb2gB,IAClGvhB,aAAa,EAAG,uBACrBJ,EAAKI,aAAa,GAAK,oBACvBJ,EAAKI,aAAa,EAAG,uBACrByhB,EAAQllB,UAAYqD,GACH6hB,EAAAA,EAAAA,kBAAAA,EAASF,EAAYA,EAAY5gB,EAA0B,EAAb4gB,EAAgB3gB,EAA2B,EAAb2gB,EAAgBG,GAC7GD,EAAQhlB,OAEqB,kBAAzB4G,EAAgB7U,MAAqD,sBAAzB6U,EAAgB7U,OAC9DgV,EAAiC,kBAAzBH,EAAgB7U,KACxBiV,EAAezN,SAASqN,EAAgB9P,aAAasD,cAAcZ,QAAQ,GAAI,IAC/EyN,GAAU,EAAoBD,EAAAA,SAAAA,EAAc,EAAG,GAAKD,EAAM,IAC1Die,EAAQllB,UAAYklB,EAAQ3d,cAAcJ,EAAQjH,KAAK,EAAG,EAAGkE,EAAYC,GAAc,aACvF6gB,EAAQhlB,aAGVmD,EAAO6hB,EAAQ1hB,qBAAqB,EAAGwhB,EAAY,EAAG3gB,EAA2B,EAAb2gB,IAC/DvhB,aAAa,EAAGqD,EAAgBhQ,cAAcsD,gBACnDiJ,EAAKI,aAAa,GAAKqD,EAAgB/P,iBAAiBqD,gBACxDiJ,EAAKI,aAAa,EAAGqD,EAAgB9P,aAAaoD,gBAClD8qB,EAAQllB,UAAYqD,EACpB6hB,EAAQhlB,OAWL/P,IARLuK,EAAS,CAAC,sBACR,sBACA,sBACA,sBACA,sBACA,sBACA,uBAEGvK,EAAI,EAAGA,EAAI,EAAGA,IACjB+0B,EAAQrhB,YAAcnJ,EAAOvK,IACZ+0B,EAAAA,EAAAA,kBAAAA,EAASF,EAAa70B,EAAG60B,EAAa70B,EAAGiU,EAA0B,EAAb4gB,EAAkB,EAAI70B,EAAIkU,EAA2B,EAAb2gB,EAAkB,EAAI70B,EAAIg1B,GACzID,EAAQphB,SAGVihB,EAA0BxhB,MAAMD,GAAY2hB,EAGvC,OADPpqB,EAAI2B,UAAUuoB,EAA0BxhB,MAAMD,GAAW,EAAG,GACrD,MAETyhB,EAA0BxhB,MAAQ,GAEnBwhB,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACpIAK,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA1Df,IAAA,EAAA,QAAA,WAKIA,EAA4B,SAA5BA,EAAqCvqB,EAAKuJ,EAAYC,EAAauM,GACjEyU,IAAAA,EAAaC,EACfC,EACAP,EAAYQ,EAAUC,EACtBniB,EAAWc,EAAW7J,WAAa8J,EAAcuM,EA6C5C,OA1CFwU,EAA0B7hB,MAAMD,KAGnCgiB,GADAD,GAAc,EAAajhB,EAAAA,cAAAA,EAAYC,IAChB/H,WAAW,MAElC0oB,EAA8E,IAAjEjyB,KAAKkJ,KAAKmI,EAAaA,EAAaC,EAAcA,GAG/DohB,EAAuB,MADvBD,EAAwB,KADxBR,EAAajyB,KAAK+N,IAAIkkB,EAAoD,IAAvCpU,EAAWxM,EAAaC,MAI3DihB,EAAShmB,YACTgmB,EAAS/lB,OAAOimB,EAAUnhB,EAAcmhB,GACxCF,EAAS9lB,OAAO4E,EAAaohB,EAAUnhB,EAAcmhB,GACrDF,EAASvhB,cAAcK,EAAaohB,EAAUnhB,EAAcmhB,EAAUphB,EAAaqhB,EAAyB,GAAdphB,EAAmBD,EAAaqhB,EAAyB,GAAdphB,GACzIihB,EAASvhB,cAAcK,EAAaqhB,EAAWA,EAAWrhB,EAAaohB,EAAUA,EAAUphB,EAAa4gB,EAAYQ,GACpHF,EAAS9lB,OAAOgmB,EAAUA,GAC1BF,EAASvhB,cAAcyhB,EAAUA,EAAUC,EAAyB,QAAdphB,EAAwBohB,EAAyB,GAAdphB,GACzFihB,EAASvhB,cAAc0hB,EAAyB,GAAdphB,EAAmBmhB,EAAUnhB,EAAcmhB,EAAUR,EAAY3gB,EAAcmhB,GACjHF,EAAS5lB,aAET6lB,EAAqBD,EAAS9hB,qBAAqB,EAAIa,EAAc2gB,EAAa,EAAGA,IAClEvhB,aAAa,EAAG,0BACnC8hB,EAAmB9hB,aAAa,IAAM,0BACtC8hB,EAAmB9hB,aAAa,IAAM,0BACtC8hB,EAAmB9hB,aAAa,IAAM,0BACtC8hB,EAAmB9hB,aAAa,IAAM,iCACtC8hB,EAAmB9hB,aAAa,MAAQ,0BACxC8hB,EAAmB9hB,aAAa,IAAM,0BACtC8hB,EAAmB9hB,aAAa,GAAK,0BACrC8hB,EAAmB9hB,aAAa,IAAM,iCACtC8hB,EAAmB9hB,aAAa,IAAM,iCACtC8hB,EAAmB9hB,aAAa,IAAM,iCACtC8hB,EAAmB9hB,aAAa,IAAM,iCACtC8hB,EAAmB9hB,aAAa,IAAM,0BACtC8hB,EAAmB9hB,aAAa,EAAG,0BACnC6hB,EAAStlB,UAAYulB,EACrBD,EAASplB,OAGTklB,EAA0B7hB,MAAMD,GAAY+hB,GAE9CxqB,EAAI2B,UAAU4oB,EAA0B7hB,MAAMD,GAAW,EAAG,GACrD,MAET8hB,EAA0B7hB,MAAQ,GAEnB6hB,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACsQAM,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAhUf,IAAA,EAAA,QAAA,WAOIA,EAAuB,SAAvBA,EAAgC7qB,EAAKsJ,EAAaC,EAAYC,EAAauM,GACzEoU,IAAAA,EACFW,EAAYC,EACZC,EACAC,EACAC,EACA1iB,EACA5I,EAAY,GACZC,EAAS,GACT4I,EAAWc,EAAW7J,WAAa8J,EAAcF,EAAY5L,OAASqY,EAGpE,IAAC8U,EAAqBniB,MAAMD,GAAW,CA0BjCa,OAzBR6gB,EAA8E,IAAjEjyB,KAAKkJ,KAAKmI,EAAaA,EAAaC,EAAcA,GAC/D2gB,EAAajyB,KAAK+I,KAAK/I,KAAK+N,IAAIkkB,EAAoD,IAAvCpU,EAAWxM,EAAaC,KAIrEuhB,GADAD,GAAa,EAAavhB,EAAAA,cAAAA,EAAYC,IACjB/H,WAAW,MAG5BsU,GAEFkV,GADAD,EAA4B9yB,KAAK+I,KAAkB,IAAbsI,IACiB,EACvD2hB,EAAyBhzB,KAAKiM,MAAmB,QAAboF,KAGpC0hB,GADAD,EAA4B9yB,KAAK+I,KAAmB,IAAduI,IACiB,EACvD0hB,EAAyBhzB,KAAKiM,MAAoB,QAAdqF,KAGrBuhB,EAAAA,EAAAA,kBAAAA,EAAS,EAAG,EAAGxhB,EAAYC,EAAawhB,GACzDD,EAAQ5lB,UAAY,UACpB4lB,EAAQ1lB,QAES0lB,EAAAA,EAAAA,kBAAAA,EAAS,EAAG,EAAGxhB,EAAa,EAAGC,EAAc,EAAGyhB,GAGzD3hB,EAAY5L,QACb,IAAA,SACH8K,EAAOuiB,EAAQpiB,qBAAqB,EAAgB,QAAbY,EAAuB,EAAiB,QAAdC,IAC5DZ,aAAa,EAAG,WACrBJ,EAAKI,aAAa,IAAM,sBACxBJ,EAAKI,aAAa,IAAM,sBACxBJ,EAAKI,aAAa,EAAG,sBACrBmiB,EAAQ5lB,UAAYqD,EACpBuiB,EAAQ1lB,OACR,MAEG,IAAA,SACHmD,EAAOuiB,EAAQpiB,qBAAqB,EAAgB,QAAbY,EAAuB,EAAiB,QAAdC,IAC5DZ,aAAa,EAAG,sBACrBJ,EAAKI,aAAa,IAAM,sBACxBJ,EAAKI,aAAa,GAAM,sBACxBJ,EAAKI,aAAa,GAAM,mBACxBJ,EAAKI,aAAa,GAAM,sBACxBJ,EAAKI,aAAa,IAAM,sBACxBJ,EAAKI,aAAa,EAAG,sBACrBmiB,EAAQ5lB,UAAYqD,EACpBuiB,EAAQ1lB,OACR,MAEG,IAAA,SACHmD,EAAOuiB,EAAQpiB,qBAAqB,EAAgB,QAAbY,EAAuB,EAAiB,QAAdC,IAC5DZ,aAAa,EAAG,sBACrBJ,EAAKI,aAAa,IAAM,sBACxBJ,EAAKI,aAAa,GAAM,sBACxBJ,EAAKI,aAAa,GAAM,mBACxBJ,EAAKI,aAAa,GAAM,sBACxBJ,EAAKI,aAAa,IAAM,sBACxBJ,EAAKI,aAAa,EAAG,sBACrBmiB,EAAQ5lB,UAAYqD,EACpBuiB,EAAQ1lB,OACR,MAEG,IAAA,QACHmD,EAAOuiB,EAAQpiB,qBAAqB,EAAgB,QAAbY,EAAuB,EAAiB,QAAdC,IAC5DZ,aAAa,EAAG,sBACrBJ,EAAKI,aAAa,IAAM,qBACxBJ,EAAKI,aAAa,IAAM,qBACxBJ,EAAKI,aAAa,GAAK,sBACvBJ,EAAKI,aAAa,IAAM,qBACxBJ,EAAKI,aAAa,IAAM,qBACxBJ,EAAKI,aAAa,IAAM,qBACxBJ,EAAKI,aAAa,GAAK,qBACvBJ,EAAKI,aAAa,IAAM,qBACxBJ,EAAKI,aAAa,IAAM,qBACxBJ,EAAKI,aAAa,EAAG,sBACrBmiB,EAAQ5lB,UAAYqD,EACpBuiB,EAAQ1lB,OACR,MAEG,IAAA,cACHmD,EAAOuiB,EAAQpiB,qBAAqB,EAAG,QAAWa,EAAa,EAAG,QAAWA,IACxEZ,aAAa,EAAG,sBACrBJ,EAAKI,aAAa,IAAM,mBACxBJ,EAAKI,aAAa,IAAM,mBACxBJ,EAAKI,aAAa,EAAG,mBACrBmiB,EAAQ5lB,UAAYqD,EACpBuiB,EAAQ1lB,OACR,MAEG,IAAA,cACHmD,EAAOuiB,EAAQpiB,qBAAqB,QAAWY,EAAY,QAAWC,EAAa,OAAUD,EAAY,QAAWC,IAC/GZ,aAAa,EAAG,WACrBJ,EAAKI,aAAa,IAAM,sBACxBJ,EAAKI,aAAa,IAAM,sBACxBJ,EAAKI,aAAa,IAAM,WACxBJ,EAAKI,aAAa,IAAM,WACxBJ,EAAKI,aAAa,IAAM,WACxBJ,EAAKI,aAAa,EAAG,WACrBmiB,EAAQ5lB,UAAYqD,EACpBuiB,EAAQ1lB,OACR,MAEG,IAAA,eACHmD,EAAOuiB,EAAQpiB,qBAAqB,QAAWY,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,IAChHZ,aAAa,EAAG,WACrBJ,EAAKI,aAAa,IAAM,WACxBJ,EAAKI,aAAa,IAAM,WACxBJ,EAAKI,aAAa,IAAM,WACxBJ,EAAKI,aAAa,EAAG,WACrBmiB,EAAQ5lB,UAAYqD,EACpBuiB,EAAQ1lB,OACR,MAEG,IAAA,eA+Bc0lB,EAAAA,EAAAA,kBAAAA,EAAS,EAAG,EAAGxhB,EAAa,EAAGC,EAAc,EAAGwhB,GACjED,EAAQnhB,QACRpB,EAAOuiB,EAAQpiB,qBAAqB,EAAG,EAAG,EAAGa,EAAc,IAUtDZ,aAAa,EAAG,sBACrBJ,EAAKI,aAAa,GAAK,sBACvBJ,EAAKI,aAAa,GAAK,WACvBJ,EAAKI,aAAa,GAAK,mBACvBJ,EAAKI,aAAa,GAAK,sBACvBJ,EAAKI,aAAa,EAAG,sBACrBmiB,EAAQ5lB,UAAYqD,EACpBuiB,EAAQ1lB,QAGS0lB,EAAAA,EAAAA,kBAAAA,EAASZ,EAAa,EAAGA,EAAa,EAAG5gB,EAAgC,GAAlB4gB,EAAa,GAAQ3gB,EAAiC,GAAlB2gB,EAAa,GAAQe,GACjIH,EAAQnhB,OACRmhB,EAAQ5lB,UAAY,UACpB4lB,EAAQ1lB,QAGS0lB,EAAAA,EAAAA,kBAAAA,EAASZ,EAAa,EAAGA,EAAa,EAAG5gB,EAAgC,GAAlB4gB,EAAa,GAAQ3gB,EAAiC,GAAlB2gB,EAAa,GAAQe,GACjIH,EAAQnhB,OACRmhB,EAAQ5lB,UAAY,UAEpB,MAEG,IAAA,aACHvF,EAAY,CAAC,EACX,KACA,QACA,GACA,QACA,KACA,GAGFC,EAAS,CAAC,IAAIxB,EAAJ,UAAc,WACtB,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,YAGhB0sB,EAAQtmB,aACSsmB,EAAAA,EAAAA,kBAAAA,EAAS,EAAG,EAAGxhB,EAAa,EAAGC,EAAc,EAAGwhB,GACjED,EAAQlmB,YACRkmB,EAAQnhB,QACRpB,EAAO,IAAI7I,EAAJ,gBAAoBC,EAAWC,IACjC+B,SAASmpB,EAASxhB,EAAa,EAAGC,EAAc,EAAGD,EAAYC,EAAa2gB,EAAYA,GAC7F,MAEG,IAAA,aACHvqB,EAAY,CAAC,EACX,KACA,IACA,QACA,GACA,QACA,IACA,KACA,GAGFC,EAAS,CAAC,IAAIxB,EAAJ,UAAc,WACtB,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,YAGhB0sB,EAAQtmB,aACSsmB,EAAAA,EAAAA,kBAAAA,EAAS,EAAG,EAAGxhB,EAAa,EAAGC,EAAc,EAAGwhB,GACjED,EAAQlmB,YACRkmB,EAAQnhB,QACRpB,EAAO,IAAI7I,EAAJ,gBAAoBC,EAAWC,IACjC+B,SAASmpB,EAASxhB,EAAa,EAAGC,EAAc,EAAGD,EAAYC,EAAa2gB,EAAYA,GAC7F,MAEG,IAAA,SACHvqB,EAAY,CAAC,EACX,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACA,IACA,IACA,IACA,GAGFC,EAAS,CAAC,IAAIxB,EAAJ,UAAc,WACtB,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,WACd,IAAIA,EAAJ,UAAc,YAGhB0sB,EAAQtmB,aACSsmB,EAAAA,EAAAA,kBAAAA,EAAS,EAAG,EAAGxhB,EAAa,EAAGC,EAAc,EAAGwhB,GACjED,EAAQlmB,YACRkmB,EAAQnhB,QACRpB,EAAO,IAAI7I,EAAJ,gBAAoBC,EAAWC,IACjC+B,SAASmpB,EAASxhB,EAAa,EAAGC,EAAc,EAAGD,EAAYC,EAAa2gB,EAAYA,IAIhFY,EAAAA,EAAAA,kBAAAA,EAASZ,EAAYA,EAAY5gB,EAA4B,EAAd4gB,EAAiB3gB,EAA6B,EAAd2gB,EAAiBe,GACjHH,EAAQ5lB,UAAY,qBAGpB4lB,EAAQjhB,yBAA2B,mBAClBihB,EAAAA,EAAAA,kBAAAA,EAASZ,EAAYA,EAAY5gB,EAA0B,EAAb4gB,EAAgB3gB,EAA2B,EAAb2gB,EAAgBe,GAC7GH,EAAQ1lB,OAGRwlB,EAAqBniB,MAAMD,GAAYqiB,EAGlC,OADP9qB,EAAI2B,UAAUkpB,EAAqBniB,MAAMD,GAAW,EAAG,GAChD,MAEToiB,EAAqBniB,MAAQ,GAEdmiB,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACw7BAM,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAzvCf,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,gCACA,EAAA,EAAA,QAAA,gCACA,EAAA,EAAA,QAAA,2BACA,EAAA,EAAA,QAAA,qBACA,EAAA,EAAA,QAAA,+BACA,EAAA,EAAA,QAAA,+BACA,EAAA,EAAA,QAAA,qBACA,EAAA,QAAA,WAWA,EAAA,QAAA,iBAsuCeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GArtCf,IAAIA,EAAS,SAASnhB,EAAQkN,GAExBzG,IAAAA,OAAapY,KADjB6e,EAAaA,GAAc,IACezG,UAAYiE,EAAUhE,UAAAA,MAAQwG,EAAWzG,UACjF5O,OAASxJ,IAAc6e,EAAWrV,MAAQ,EAAIqV,EAAWrV,MACzDC,OAAUzJ,IAAc6e,EAAWpV,OAAS,EAAIoV,EAAWpV,OAC3DiY,OAAY1hB,IAAc6e,EAAW6C,SAAW,EAAI7C,EAAW6C,SAC/DC,OAAY3hB,IAAc6e,EAAW8C,SAAYD,EAAW,IAAO7C,EAAW8C,SAC9EC,OAAa5hB,IAAc6e,EAAW+C,WAAmB/C,EAAW+C,UACpEC,OAAa7hB,IAAc6e,EAAWgD,WAAaF,EAAWD,GAAY,EAAIA,EAAW7C,EAAWgD,UACpGxD,OAAere,IAAc6e,EAAWR,YAAc,GAAKQ,EAAWR,YACtEC,OAActe,IAAc6e,EAAWP,WAAa,GAAKO,EAAWP,WACpErN,OAAejR,IAAc6e,EAAW5N,YAAc+Q,EAAY1I,YAAAA,MAAQuF,EAAW5N,YACrFgR,OAAgBjiB,IAAc6e,EAAWoD,cAAsBpD,EAAWoD,aAC1ErO,OAAmB5T,IAAc6e,EAAWjL,gBAAkBsO,EAAgBhN,gBAAAA,UAAY2J,EAAWjL,gBACrGuO,OAAqBniB,IAAc6e,EAAWsD,mBAA2BtD,EAAWsD,kBACpFkN,OAAcrvB,IAAc6e,EAAWwQ,WAAarsB,EAASyS,MAAAA,IAAMoJ,EAAWwQ,WAC9EjZ,OAAYpW,IAAc6e,EAAWzI,SAAWoM,EAAS5L,SAAAA,SAAWiI,EAAWzI,SAC/EqM,OAAcziB,IAAc6e,EAAW4D,YAAoB5D,EAAW4D,WACtEC,OAAe1iB,IAAc6e,EAAW6D,YAAc,EAAI7D,EAAW6D,YACrEC,OAAe3iB,IAAc6e,EAAW8D,aAAsB9D,EAAW8D,YACzE/K,OAAY5X,IAAc6e,EAAWjH,SAAWiL,EAAShL,SAAAA,QAAUgH,EAAWjH,SAC9EkL,OAAc9iB,IAAc6e,EAAWiE,YAAoBjE,EAAWiE,WACtEG,OAAoBjjB,IAAc6e,EAAWoE,kBAA0BpE,EAAWoE,iBAClFnB,OAAmB9hB,IAAc6e,EAAWiD,iBAAyBjD,EAAWiD,gBAChFoB,OAA2BljB,IAAc6e,EAAWqE,yBAAkCrE,EAAWqE,wBACjGC,OAA2BnjB,IAAc6e,EAAWsE,yBAAkCtE,EAAWsE,wBACjGxI,OAAqB3a,IAAc6e,EAAWlE,kBAAoB2I,EAAkB1M,kBAAAA,SAAWiI,EAAWlE,kBAC1G0I,OAAqBrjB,IAAc6e,EAAWwE,mBAA2BxE,EAAWwE,kBACpFE,OAAavjB,IAAc6e,EAAW0E,WAAoB1E,EAAW0E,UACrEC,OAAcxjB,IAAc6e,EAAW2E,YAAqB3E,EAAW2E,WACvEQ,OAA2BhkB,IAAc6e,EAAWmF,wBAA0B,IAAMnF,EAAWmF,wBAG7FC,GAAU,EAAiBtS,EAAAA,kBAAAA,GAEjB,IAAVnI,IACFA,EAAQya,EAAQtS,OAAOnI,OAEV,IAAXC,IACFA,EAASwa,EAAQtS,OAAOlI,QAI1Bwa,EAAQtS,OAAOnI,MAAQA,EACvBya,EAAQtS,OAAOlI,OAASA,EAEpByH,IAAAA,EAAa1H,EACb2H,EAAc1H,EAGd8Z,GAAAA,IAA4B,IAAfC,EAAsB,CACjC/B,IAAAA,EAAe7b,EAAI6G,IAAAA,cAAc,SACrCgV,EAAayC,aAAa,MAAOV,GAEjC/B,EAAayC,aAAa,UAAW,QAGnCc,IAYAjG,EAZAiG,EAAO,KACP1W,EAAQoT,EAGRuD,EAAmBtD,EACnBuD,EAAmBxD,EAGA,UAAnBtJ,EAAU7Y,MAAuC,UAAnB6Y,EAAU7Y,OAC1C6Y,EAAYiE,EAAUhE,UAAAA,OAIpB8M,IAQAU,EACAC,EAGA5G,EACAgH,EAbAf,IAAc,EACd7E,IAAa,EAEb+E,GAAa,EAEb3H,GAAWlU,GAASC,EAKpBmc,GAAU/lB,KAAKC,MAAoC,KAA7B4d,GAAWjU,EAASD,IAC1CupB,GAAgBlzB,KAAKC,MAAoC,KAA7B4d,GAAWlU,EAAQC,IAK/CiU,IACFmI,EAAU3U,EAAa,EAAI0U,GAAU,EACrCE,GAA8B,UAAnB1N,EAAU7Y,KAAmB,KAAQ,MAAS4R,EACzD+N,EAAUrf,KAAKiM,MAAMqF,EAAc,IAAM,MAAQpL,EAAjD,YACAmgB,EAAUrmB,KAAKiM,MAAMqF,EAAc,IAAM,MAAQrL,EAAjD,cAEA+f,EAAU,IAAO3U,EACjB4U,EAAU3U,EAAc,EAAIyU,GAAU,EACtC1G,EAAUrf,KAAKiM,MAAMqF,EAAc,IAAM,MAAQpL,EAAjD,YACAmgB,EAAUrmB,KAAKiM,MAAMqF,EAAc,IAAM,MAAQrL,EAAjD,aAGEua,IA+CAxD,GA/CAwD,IAAc,EAGdmG,GAAe9E,EACf+E,GAAe9E,EACf+E,GAAY/E,EAAWD,EAEvBiF,GAAmB,EACnBC,GAAmB,EAgCnBC,IAAc,EAAard,EAAAA,cAAAA,EAAOC,GAClCqd,GAAeD,GAAYzd,WAAW,MAGtCkW,IAAmB,EAAa9V,EAAAA,cAAAA,EAAOC,GACvC8V,GAAoBD,GAAiBlW,WAAW,MAKhD2d,IAAc,EAAanB,EAAAA,cAAAA,GAASA,IACpCoB,GAAeD,GAAY3d,WAAW,MAGtC6d,IAAe,EAAarB,EAAAA,cAAAA,GAASA,IACrCsB,GAAgBD,GAAa7d,WAAW,MAGxCoT,GAAYyK,GAGZO,IAAyB,EAAauL,EAAAA,cAAAA,GAAeA,IACrDtL,GAAsBD,GAAuBpe,WAAW,MAGxDse,IAAyB,EAAaqL,EAAAA,cAAAA,GAAeA,IACrDpL,GAAsBD,GAAuBte,WAAW,MAGxDoW,IAAmB,EAAahW,EAAAA,cAAAA,EAAOC,GACvCgW,GAAoBD,GAAiBpW,WAAW,MA2NhD4pB,GAAkB,SAASrrB,EAAKsrB,EAAWC,EAAUC,EAAYzV,GAC/DA,GAEF/V,EAAIyE,YACJzE,EAAI0E,OAAO4mB,EAAWE,GACtBxrB,EAAI2E,OAAO4mB,EAAUC,GACrBxrB,EAAI6E,YACJ7E,EAAIiJ,WAGJjJ,EAAIyE,YACJzE,EAAI0E,OAAO8mB,EAAYF,GACvBtrB,EAAI2E,OAAO6mB,EAAYD,GACvBvrB,EAAI6E,YACJ7E,EAAIiJ,WAKJ7S,GAAO,SAAS8gB,GAEdsJ,IAKAiL,EACAC,EACAC,EAPAnL,OAAanoB,KADjB6e,EAAaA,GAAc,IACeuJ,OAAgBvJ,EAAWuJ,MACjEC,OAAkBroB,IAAc6e,EAAWyJ,YAAqBzJ,EAAWyJ,WAC3EC,OAAWvoB,IAAc6e,EAAW2J,KAAc3J,EAAW2J,IAC7DK,OAAkB7oB,IAAc6e,EAAWiK,YAAqBjK,EAAWiK,WAM/EzI,IAAc,EAjTVuB,GACF8E,IAAY,EAAe/E,EAAAA,gBAAAA,EAAWD,GAAU,GAChDkF,IAAmB,EAAeF,EAAAA,gBAAAA,GAAayC,GAAwB,GACvE3C,GAAe3mB,KAAKiM,MAAM4V,EAAWkF,IAAoBA,GACzDH,GAAe5mB,KAAK+I,KAAK+Y,EAAWiF,IAAoBA,GACxDD,IAAmB,EAAeC,EAAAA,gBAAAA,GAAoBwC,GAAwB,IAE9EzH,EAAW8E,KADX/E,EAAW8E,MAKXA,GAAe9E,EACf+E,GAAe9E,EAFf+E,GAAa/E,EAAWD,EAIxBiF,GAAmB,EACnBC,GAAmB,IAGrBtY,EAAQA,EAAQoT,EAAWA,EAAWpT,EAAQqT,EAAWA,EAAWrT,EACpE2W,EAAmBA,EAAmBvD,EAAWA,EAAWuD,EAAmBtD,EAAWA,EAAWsD,EACrGC,EAAmBA,EAAmBxD,EAAWA,EAAWwD,EAAmBvD,EAAWA,EAAWuD,EACrGrD,EAAYA,EAAYH,EAAWA,EAAWG,EAAYF,EAAWA,EAAWE,EAkS5EsG,GAAalG,IACM6E,EAAAA,EAAAA,SAAAA,GAAc7V,EAAaC,EAAYC,EAAauM,IAIvE2K,GAAkBlG,IACM5C,EAAAA,EAAAA,SAAAA,GAAmB3L,EAAiB1C,EAAYC,EAAauM,IAIrF2K,GAAqC,UAAnBjQ,EAAU7Y,MAC9Bg0B,GAAoBhU,IAGlBgJ,IAGAvB,GAAa1d,WAAU,EAAesc,EAAAA,SAAAA,GAAS,EAAGhO,GAAW,EAAG,GAGhEsP,GAAc5d,WAAU,EAAesc,EAAAA,SAAAA,GAAS,EAAGhO,GAAW,EAAG,IAWjEsL,GAEAuE,GAAoBne,WAAU,EAAyBypB,EAAAA,SAAAA,GAAe/vB,EAAS2S,MAAAA,KAAKnR,KAAK0C,gBAAgB,EAAOwW,IAAW,EAAG,GAO9HyF,GAEAwE,GAAoBre,WAAU,EAAyBypB,EAAAA,SAAAA,GAAe/vB,EAASyS,MAAAA,IAAIhR,OAAOyC,gBAAgB,EAAOwW,IAAW,EAAG,GAO/H2K,GAAkBlG,KA5NC,SAASxa,EAAKgT,EAAmB+C,GACxD9J,EAAgB7P,WAAWkD,SAAS,GACpCU,EAAI2J,OACJ3J,EAAI8W,aAAe,SACfyL,IAAAA,EAA0B,GAAbhZ,EACjBvJ,EAAIgJ,YAAciD,EAAgB7P,WAAWmD,eAC7CS,EAAImF,UAAY8G,EAAgB7P,WAAWmD,eAEvCyiB,IAEA6J,EACAL,EACAM,EACAC,EAEAC,EAGAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAsCAC,EArDAvK,EAAejI,EACfkI,EAAmBR,EAOnB+K,EAAmB,EA8ClBD,IAtCDxW,GACFkW,EAAkB,IAAO1iB,EACzB2iB,EAAiB,IAAO3iB,EACxB4iB,EAAmB,IAAO5iB,EAC1B6iB,EAAkB,IAAO7iB,EACzB8iB,EAAkB,IAAO9iB,EACzB+iB,EAAiB,IAAO/iB,EACxBvJ,EAAI6W,UAAY,QAChBiV,EAAe,EACfC,EAA6B,OAAdviB,EAOfgjB,GAJER,EADqB,UAAnBvb,EAAU7Y,KACkB,QAAd4R,EAAuC,OAAdA,EAEX,MAAdA,EAAqC,OAAdA,IAENwQ,EAAWD,KAE9CkS,EAAkB,IAAOziB,EACzB0iB,EAAiB,IAAO1iB,EACxB2iB,EAAmB,IAAO3iB,EAC1B4iB,EAAkB,IAAO5iB,EACzB6iB,EAAkB,IAAO7iB,EACzB8iB,EAAiB,IAAO9iB,EACxBxJ,EAAI6W,UAAY,SAChBkV,EAAe,EAQfC,EAAe,EACfQ,GARuB,UAAnB/b,EAAU7Y,KAEiB,QAAb2R,GADhBuiB,EAA4B,QAAbviB,GAIc,IAAbA,GADhBuiB,EAA4B,OAAbviB,KAIkByQ,EAAWD,IAI3CwS,EAAexS,EAAU8R,EAAc,EAAGU,GAAgBvS,EAAUuS,GAAgBvN,GAAkB6M,GAAe7M,GAYpHiD,GARFuJ,EADEzV,EACWgW,EAAeC,EAAeH,EAAcW,EAE5CV,EAAeD,EAAcW,EArNxB,MAwNpBvK,EAoDyDR,IAAtBQ,GACjCjiB,EAAI6I,UAAY,EAChBwiB,GAAgBrrB,EAAKmsB,EAAiBC,EAAgBZ,EAAYzV,KAElE/V,EAAI6I,UAAY,GAChBwiB,GAAgBrrB,EAAKisB,EAAgBC,EAAeV,EAAYzV,QAtD9DkM,CAOElM,GAJJ/V,EAAI6I,UAAY,IAChBwiB,GAAgBrrB,EAAKqsB,EAAgBC,EAAed,EAAYzV,GAG5DA,EAEM/C,OAAAA,EAAkBrV,QACnB,IAAA,aACHqC,EAAIgX,SAAUgL,EAAaje,QAAQ,GAAkB,IAAbwF,EAAmBiiB,EAAYjJ,GACvE,MAEG,IAAA,aACHviB,EAAIgX,SAAUgL,EAAaS,YAAY,GAAkB,IAAblZ,EAAmBiiB,EAAYjJ,GAC3E,MAEG,IAAA,WAEL,QACEviB,EAAIgX,SAAUgL,EAAaje,QAAQ,GAAkB,IAAbwF,EAAmBiiB,EAAYjJ,QAKnEvP,OAAAA,EAAkBrV,QACnB,IAAA,aACHqC,EAAIgX,SAAUgL,EAAaje,QAAQ,GAAKynB,EAA2B,IAAdhiB,EAAqB+Y,GAC1E,MAEG,IAAA,aACHviB,EAAIgX,SAAUgL,EAAaS,YAAY,GAAK+I,EAA2B,IAAdhiB,EAAqB+Y,GAC9E,MAEG,IAAA,WAEL,QACEviB,EAAIgX,SAAUgL,EAAaje,QAAQ,GAAKynB,EAA2B,IAAdhiB,EAAqB+Y,GAKhFP,GAAgB/C,GAChBgD,EAAmB,EAcvBjiB,EAAI6J,UA2FF6Y,CAAmB9K,GAAmB5E,EAAmB+C,KAIxC6B,EAAAA,EAAAA,SAAAA,GAAmBrO,EAAYC,EAAakN,EAAaC,EAAY1K,EAAiB8J,GAAU,KAAM+E,EAAYrK,IAOjIiQ,GAAkBpF,IACpB1D,GAAkBjO,OACdoM,IAEF0V,EAA8B,UAAnBhb,EAAU7Y,KAAmB,QAAW,MAEnD+zB,EAAWniB,EAAciiB,EAAWjiB,GADpCkiB,EAASD,EAAU,SAC0CvR,EAAYH,IAAaC,EAAWD,GACjGnC,GAAkBjL,UAAuB,KAAbpD,EAAoBoiB,EAAWP,GAAgB,KAI3EM,GADAD,EAA8B,UAAnBhb,EAAU7Y,KAAmB,QAAW,MACZ,UAAnB6Y,EAAU7Y,KAAmB,QAAW,QAC5D+zB,EAAWpiB,EAAamiB,GAAUxR,EAAYH,IAAaC,EAAWD,GACtEnC,GAAkBjL,UAAUpD,GAAiC,UAAnBkH,EAAU7Y,KAAmB,QAAW,QAAWwzB,GAAgB,EAAIO,EAAwB,IAAdniB,IAE7HoO,GAAkBjW,UA7RK,SAASoU,GAC9B4M,IAAAA,EAAkB1kB,EAAI6G,IAAAA,cAAc,UACpC8d,EAAeD,EAAgBlhB,WAAW,MAC9CkhB,EAAgB7gB,OAAS6gB,EAAgB9gB,MAAQupB,GAEjDxI,EAAajZ,OACTkZ,IAAAA,EAAgBD,EAAaja,qBAAqB,EAAG,GAAK,EAA4B,GAAzBga,EAAgB7gB,QA2B1E6gB,OA1BPE,EAAcja,aAAa,EAAG,WAC9Bia,EAAcja,aAAa,GAAK,WAChCia,EAAcja,aAAa,IAAM,WACjCia,EAAcja,aAAa,EAAG,WAC9Bga,EAAazd,UAAY0d,EAErB9M,GACF6M,EAAane,YACbme,EAAale,OAAO,GAA8B,GAAzBie,EAAgB7gB,QACzC8gB,EAAaje,OAA+B,GAAxBge,EAAgB9gB,MAAa,IACjD+gB,EAAaje,OAA+B,GAAxBge,EAAgB9gB,MAAsC,GAAzB8gB,EAAgB7gB,QACjE8gB,EAAa/d,cAEb+d,EAAane,YACbme,EAAale,OAAO,GAAK,IACzBke,EAAaje,OAA+B,GAAxBge,EAAgB9gB,MAAa,IACjD+gB,EAAaje,OAA+B,GAAxBge,EAAgB9gB,MAAsC,GAAzB8gB,EAAgB7gB,QACjE8gB,EAAa/d,aAGf+d,EAAavd,OACbud,EAAa5Z,YAAc,UAC3B4Z,EAAa3Z,SAEb2Z,EAAa/Y,UAEN8Y,EA4PuBG,CAAqB/M,IAAW,EAAG,GAC/D6B,GAAkB/N,WAIhB6W,GAAkB5F,IAChB/E,IACFb,IAAY,EAAyB3L,EAAAA,SAAa,QAAbA,EAAqC,KAAdC,EAAqBiF,GACjFmJ,GAAkBjW,UAAUuT,IAAa3L,EAA2B,QAAbA,GAA0B,EAAkB,IAAdC,KAErF0L,IAAY,EAAyB3L,EAAAA,SAAa,IAAbA,EAAiC,IAAdC,EAAoBiF,GAC5EmJ,GAAkBjW,UAAUuT,GAAwB,KAAb3L,EAAkC,IAAdC,KAK3D0X,GAAqC,UAAnBzQ,EAAU7Y,MAC9B60B,GAAoB3U,IAIlBoJ,GAAkBxF,IACM5D,EAAAA,EAAAA,SAAAA,GAAmBvO,EAAYC,EAAauM,IAAU,IAIhFkN,GAAe,SAASC,GAEtBC,IAAAA,OAAc9qB,KADlB6qB,EAAUA,GAAW,IACmBzC,OAAgByC,EAAQzC,MAC5D2C,OAAmB/qB,IAAc6qB,EAAQvC,YAAqBuC,EAAQvC,WACtE0C,OAAYhrB,IAAc6qB,EAAQrC,KAAcqC,EAAQrC,IACxD2C,OAAmBnrB,IAAc6qB,EAAQ/B,YAAqB+B,EAAQ/B,WAEtEgC,IACFjE,GAAYrd,MAAQA,EACpBqd,GAAYpd,OAASA,EACrBqd,GAAeD,GAAYzd,WAAW,OAGpC2hB,IACFzL,GAAiB9V,MAAQA,EACzB8V,GAAiB7V,OAASA,EAC1B8V,GAAoBD,GAAiBlW,WAAW,OAG9C4hB,IACFjE,GAAYvd,MAAQ3J,KAAK+I,KAAa,QAARY,GAC9Bud,GAAYtd,OAAS5J,KAAK+I,KAAc,QAATa,GAC/Bud,GAAeD,GAAY3d,WAAW,MAEtC6d,GAAazd,MAAQ3J,KAAK+I,KAAa,QAARY,GAC/Byd,GAAaxd,OAAS5J,KAAK+I,KAAc,QAATa,GAChCyd,GAAgBD,GAAa7d,WAAW,MAGxCoT,GAAYyK,IAGVkE,IACF3L,GAAiBhW,MAAQA,EACzBgW,GAAiB/V,OAASA,EAC1BgW,GAAoBD,GAAiBpW,WAAW,QAIhDkiB,GAAQ,SAASC,GACfA,EACFlG,GAAamG,YAAYJ,GAAqB,MAE9CK,cAAcpG,IACd7I,GAAYyK,KAIZmE,GAAsB,WACpBtI,IAEAtG,GADEA,KAAcuK,GACJE,GAEAF,GAETzG,KACHA,IAAa,GACI0E,EAAAA,EAAAA,kBAAAA,EAAKlE,YAyKxBsT,GAAsB,SAASzsB,GAC7B0sB,IAAAA,EAAY3W,GAAWvM,EAAcD,EAEzCvJ,EAAI2J,OACAoM,GACF/V,EAAI2M,UAAUpD,EAAa,EAAG,IAE9BvJ,EAAI2M,UAAUpD,EAAa,EAAGC,EAAc,GAC5CxJ,EAAI4M,OAAO/O,EAAX,SACAmC,EAAI2M,UAAU,GAAIpD,EAAa,EAAiB,IAAbA,IAIrCvJ,EAAIyE,YACJzE,EAAI0E,QAAQ,KAASgoB,EAAU,KAAQA,GACvC1sB,EAAIkJ,eAAe,KAASwjB,EAAU,MAASA,GAAW,MAASA,EAAU,KAAQA,EAAU,MAASA,EAAU,KAAQA,GAC1H1sB,EAAIkJ,cAAc,MAASwjB,EAAU,KAAQA,EAAU,KAASA,EAAU,MAASA,EAAU,KAASA,EAAU,KAAQA,GACxH1sB,EAAIkJ,cAAc,KAASwjB,EAAU,IAAOA,EAAU,MAASA,EAAU,MAASA,EAAU,MAASA,EAAU,MAASA,GACxH1sB,EAAIkJ,eAAe,MAASwjB,EAAU,MAASA,GAAW,KAASA,EAAU,IAAOA,GAAW,KAASA,EAAU,KAAQA,GAC1H1sB,EAAI6E,YACA2D,IAAAA,EAAOxI,EAAIoJ,qBAAqB,EAAIsjB,EAAU,KAAQA,EAAU,EAAG,EAAIA,EAAU,KAAQA,EAAU,KAASA,GAChHlkB,EAAKI,aAAa,EAAG8e,EAAW5qB,OAAOyC,gBACvCiJ,EAAKI,aAAa,GAAK8e,EAAW5qB,OAAOyC,gBACzCiJ,EAAKI,aAAa,EAAG8e,EAAW3qB,MAAMwC,gBACtCS,EAAImF,UAAYqD,EAChBxI,EAAIqF,OAGJrF,EAAIyE,YACAsR,IACF/V,EAAI0E,QAAQ,MAASgoB,EAAU,MAASA,GACxC1sB,EAAIkJ,eAAe,MAASwjB,EAAU,MAASA,GAAW,MAASA,EAAU,MAASA,GAAW,MAASA,EAAU,MAASA,GAC7H1sB,EAAIkJ,cAAc,MAASwjB,EAAU,KAAQA,EAAU,MAASA,EAAU,MAASA,EAAU,MAASA,EAAU,MAASA,GACzH1sB,EAAIkJ,cAAc,MAASwjB,EAAU,MAASA,EAAU,MAASA,EAAU,KAAQA,EAAU,MAASA,EAAU,MAASA,GACzH1sB,EAAIkJ,eAAe,MAASwjB,EAAU,MAASA,GAAW,MAASA,EAAU,MAASA,GAAW,MAASA,EAAU,MAASA,GAC7HlkB,EAAOxI,EAAIoJ,qBAAqB,EAAG,GAAMsjB,EAAU,EAAG,EAAG,GAAMA,EAAU,MAASA,KAElF1sB,EAAIyE,YACJzE,EAAI0E,QAAQ,MAASgoB,EAAU,IAAOA,GACtC1sB,EAAIkJ,eAAe,MAASwjB,EAAU,IAAOA,GAAW,MAASA,EAAU,KAAQA,GAAW,MAASA,EAAU,KAAQA,GACzH1sB,EAAIkJ,eAAe,MAASwjB,EAAU,KAAQA,GAAW,MAASA,EAAU,MAASA,GAAW,MAASA,EAAU,MAASA,GAC5H1sB,EAAIkJ,eAAe,MAASwjB,EAAU,MAASA,GAAW,MAASA,EAAU,MAASA,GAAW,MAASA,EAAU,MAASA,GAC7H1sB,EAAIkJ,eAAe,MAASwjB,EAAU,MAASA,GAAW,MAASA,EAAU,IAAOA,GAAW,MAASA,EAAU,IAAOA,GACzHlkB,EAAOxI,EAAIoJ,sBAAsB,IAAOsjB,EAAU,MAASA,EAAU,GAAI,IAAOA,EAAU,MAASA,EAAU,MAASA,IAExHlkB,EAAKI,aAAa,EAAK,6BACvBJ,EAAKI,aAAa,EAAK,6BACvB5I,EAAImF,UAAYqD,EAChBxI,EAAI6E,YACJ7E,EAAIqF,OAGJrF,EAAIyE,YACJzE,EAAI0E,QAAQ,MAASgoB,EAAU,KAAQA,GACvC1sB,EAAIkJ,eAAe,MAASwjB,EAAU,MAASA,GAAW,MAASA,EAAU,MAASA,GAAW,MAASA,EAAU,MAASA,GAC7H1sB,EAAIkJ,eAAe,MAASwjB,EAAU,MAASA,GAAW,MAASA,EAAU,MAASA,GAAW,MAASA,EAAU,MAASA,GAC7H1sB,EAAIkJ,eAAe,MAASwjB,EAAU,MAASA,EAAU,MAASA,EAAU,MAASA,EAAU,MAASA,EAAU,KAAQA,GAC1H1sB,EAAIkJ,cAAc,MAASwjB,EAAU,KAAQA,EAAU,MAASA,EAAU,IAAOA,EAAU,MAASA,EAAU,IAAOA,GACrH1sB,EAAIkJ,cAAc,MAASwjB,EAAU,MAASA,GAAW,MAASA,EAAU,MAASA,GAAW,MAASA,EAAU,MAASA,GAC5H1sB,EAAIkJ,eAAe,MAASwjB,EAAU,MAASA,GAAW,MAASA,EAAU,MAASA,GAAW,MAASA,EAAU,MAASA,GAC7H1sB,EAAIkJ,eAAe,MAASwjB,EAAU,MAASA,GAAW,MAASA,EAAU,MAASA,GAAW,MAASA,EAAU,IAAOA,GAC3H1sB,EAAIkJ,eAAe,MAASwjB,EAAU,IAAOA,GAAW,MAASA,EAAU,KAAQA,GAAW,MAASA,EAAU,KAAQA,GACzH1sB,EAAI6E,aACJ2D,EAAOxI,EAAI2I,sBAAsB,MAAS+jB,EAAU,EAAG,MAASA,EAAU,IACrE9jB,aAAa,EAAK,4BACvBJ,EAAKI,aAAa,IAAM,4BACxBJ,EAAKI,aAAa,EAAK,4BACvB5I,EAAImF,UAAYqD,EAChBxI,EAAIqF,OAEJrF,EAAI6J,WAGF+hB,GAAsB,SAAS5rB,GAC7B2sB,IAAAA,EAAY5W,GAAWvM,EAAcD,EACzCvJ,EAAI2J,OACAoM,GACF/V,EAAI2M,UAAUpD,EAAa,EAAG,IAE9BvJ,EAAI2M,UAAUpD,EAAa,EAAGC,EAAc,GAC5CxJ,EAAI4M,OAAO/O,EAAX,SACAmC,EAAI2M,UAAU,GAAIpD,EAAa,EAAiB,IAAbA,IAErCvJ,EAAIyE,YACJzE,EAAI0E,QAAQ,MAASioB,EAAU,KAAQA,GACvC3sB,EAAIkJ,eAAe,MAASyjB,EAAU,MAASA,GAAW,MAASA,EAAU,KAAQA,EAAU,MAASA,EAAU,KAAQA,GAC1H3sB,EAAIkJ,cAAc,MAASyjB,EAAU,KAAQA,EAAU,MAASA,EAAU,MAASA,EAAU,MAASA,EAAU,KAAQA,GACxH3sB,EAAIkJ,cAAc,MAASyjB,EAAU,MAASA,EAAU,KAASA,EAAU,MAASA,EAAU,MAASA,EAAU,MAASA,GAC1H3sB,EAAIkJ,cAAc,MAASyjB,EAAU,MAASA,EAAU,MAASA,EAAU,IAAOA,EAAU,MAASA,EAAU,IAAOA,GACtH3sB,EAAIkJ,cAAc,MAASyjB,EAAU,MAASA,EAAU,MAASA,EAAU,MAASA,EAAU,MAASA,EAAU,MAASA,GAC1H3sB,EAAIkJ,eAAe,MAASyjB,EAAU,MAASA,GAAW,MAASA,EAAU,MAASA,GAAW,MAASA,EAAU,IAAOA,GAC3H3sB,EAAIkJ,eAAe,MAASyjB,EAAU,IAAOA,GAAW,MAASA,EAAU,MAASA,GAAW,MAASA,EAAU,MAASA,GAC3H3sB,EAAIkJ,eAAe,MAASyjB,EAAU,IAAOA,GAAW,MAASA,EAAU,KAAQA,GAAW,MAASA,EAAU,KAAQA,GACzH3sB,EAAI6E,YACA2D,IAAAA,EAAOxI,EAAI2I,sBAAsB,MAASgkB,EAAU,EAAG,MAASA,EAAU,GAC9EnkB,EAAKI,aAAa,EAAG,4BACrBJ,EAAKI,aAAa,GAAK,4BACvBJ,EAAKI,aAAa,EAAG,4BACrB5I,EAAImF,UAAYqD,EAChBxI,EAAIqF,OACJrF,EAAI6I,UAAY,EAChB7I,EAAIgJ,YAAc,2BAClBhJ,EAAIiJ,SACJjJ,EAAI6J,WA0XC,OAtXFwP,KAAAA,SAAW,SAAS0K,GAEnBC,IAAAA,GADJD,EAAW/K,WAAW+K,IACQhK,EAAWA,EAAYgK,EAAW/J,EAAWA,EAAW+J,EA6B/E,OA5BHpd,IAAUqd,KACZrd,EAAQqd,GAEIzG,IACVA,EAAmB5W,GAEjBA,EAAQ2W,IACVA,EAAmB3W,GAGhBA,GAASuT,IAAcsD,IAAerD,GACxCxT,GAASuT,IAAcsD,KAAgBrD,GAExCwJ,GADAnG,IAAc,GAEV5B,GACF9B,EAAamK,SAELtd,EAAQuT,GAAasD,IAAerD,GAC7CxT,EAAQuT,GAAasD,KAAgBrD,KAEtCwJ,GADAnG,IAAc,GAEV5B,GACF9B,EAAaoK,SAIZ/K,KAAAA,WAEA,MAGJG,KAAAA,SAAW,WACP3S,OAAAA,GAGJkS,KAAAA,iBAAmB,SAASkL,EAAUpc,GACrCqc,IAAAA,EAEFK,EADAtL,EAAQ,KAmDH,OAjDPgL,EAAW/K,WAAW+K,GAElBpd,KADJqd,EAAeD,EAAWhK,EAAWA,EAAYgK,EAAW/J,EAAWA,EAAW+J,UAE5E1rB,IAAc+e,GAASA,EAAMte,WAC/Bse,EAAMvf,OAGRwsB,EAAOhI,EAA0BnkB,KAAKiC,IAAI6pB,EAAcrd,IAAUqT,EAAWD,GAC7EsK,EAAOnsB,KAAKgO,IAAIme,EAAMhI,EAA0B,IAChDjF,EAAQ,IAAIpiB,EAAJ,QAAU,GAAI,GAAIA,EAAMgG,QAAAA,iBAAkB2L,EAAOqd,EAAaK,IAGhEpL,gBAAkB,SAASC,IAC/BvS,EAAQuS,EAAMvhB,OAAOX,MACTumB,IACVA,EAAmB5W,GAEjBA,EAAQ2W,IACVA,EAAmB3W,GAGhBA,GAASuT,IAAcsD,IAAerD,GACxCxT,GAASuT,IAAcsD,KAAgBrD,GAExCwJ,GADAnG,IAAc,GAEV5B,GACF9B,EAAamK,SAELtd,EAAQuT,GAAasD,IAAerD,GAC7CxT,EAAQuT,GAAasD,KAAgBrD,KAEtCwJ,GADAnG,IAAc,GAEV5B,GACF9B,EAAaoK,SAGZvL,KACHA,IAAa,GACII,EAAAA,EAAAA,kBAAAA,EAAMI,WAKvBxR,GAAiC,mBAAdA,IACrByP,EAAMgC,iBAAmBzR,GAG3ByP,EAAM3e,SAED,MAGJ6rB,KAAAA,sBAAwB,WAGpB,OAFPhH,EAAmB3W,EACdwS,KAAAA,UACE,MAGJoL,KAAAA,sBAAwB,WAGpB,OAFPhH,EAAmB5W,EACdwS,KAAAA,UACE,MAGJqL,KAAAA,2BAA6B,SAASC,GAGlC,OAFPlJ,IAA4BkJ,EACvBtL,KAAAA,UACE,MAGJuL,KAAAA,2BAA6B,SAASD,GAGlC,OAFPjJ,IAA4BiJ,EACvBtL,KAAAA,UACE,MAGJkM,KAAAA,aAAe,SAASuH,GAWpB,OAVPA,EAAY5T,WAAW4T,GAEvB1S,EADmB0S,EAAY7S,EAAWA,EAAY6S,EAAY5S,EAAWA,EAAW4S,EAExF3J,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJuM,KAAAA,oBAAsB,SAASjB,GAG3B,OAFPnJ,IAAqBmJ,EAChBtL,KAAAA,UACE,MAGJwM,KAAAA,mBAAqB,SAASC,GAM1B,OALPzL,IAAoByL,EAGpBjC,GADAnG,IAAeA,IAEVrE,KAAAA,UACE,MAGJ0M,KAAAA,eAAiB,SAASzN,GAGtB,OAFP2C,EAAcnc,SAASwZ,EAAU,IAC5Be,KAAAA,UACE,MAGJ2M,KAAAA,eAAiB,SAASC,GAStB,OARP9C,GAAa,CACXxC,OAAO,IAETnX,EAAcyc,EACd3vB,GAAK,CACHqqB,OAAO,IAEJtH,KAAAA,UACE,MAGJ6M,KAAAA,mBAAqB,SAASC,GAS1B,OARPhD,GAAa,CACXtC,YAAY,IAEd1U,EAAkBga,EAClB7vB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJgQ,KAAAA,cAAgB,SAASC,GASrB,OARPnG,GAAa,CACX9B,YAAY,IAEduG,EAAa0B,EACbhzB,GAAK,CACH+qB,YAAY,IAEThI,KAAAA,UACE,MAGJqN,KAAAA,YAAc,SAASC,GASnB,OARPxD,GAAa,CACXpC,KAAK,IAEP5Q,EAAWwW,EACXrwB,GAAK,CACHyqB,KAAK,IAEF1H,KAAAA,UACE,MAGJ4N,KAAAA,cAAgB,SAAStC,GAGrB,OAFPtJ,IAAesJ,EACVtL,KAAAA,UACE,MAGJ8N,KAAAA,YAAc,SAASC,GASnB,OARPjE,GAAa,CACXtC,YAAY,IAEdlS,EAAWyY,EACX9wB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJwL,KAAAA,oBAAsB,SAAS7L,GAK3B,OAJPA,EAASE,WAAWF,GAEpByE,EADmBzE,EAASiB,EAAWA,EAAYjB,EAASkB,EAAWA,EAAWlB,EAE7EK,KAAAA,UACE,MAGJyL,KAAAA,oBAAsB,SAAS9L,GAK3B,OAJPA,EAASE,WAAWF,GAEpBwE,EADmBxE,EAASiB,EAAWA,EAAYjB,EAASkB,EAAWA,EAAWlB,EAE7EK,KAAAA,UACE,MAGJ0L,KAAAA,eAAiB,SAASC,GAStB,OARPpO,EAAcoO,EACd7B,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJ4L,KAAAA,cAAgB,SAASC,GASrB,OARPrO,EAAaqO,EACb/B,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJ8L,KAAAA,YAAc,SAASnM,GASnB,OARPmK,GAAa,CACXtC,YAAY,IAEd5G,EAAWf,WAAWF,GACtB1iB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJ+L,KAAAA,YAAc,WACVnL,OAAAA,GAGJoL,KAAAA,YAAc,SAASrM,GASnB,OARPmK,GAAa,CACXtC,YAAY,IAEd3G,EAAWhB,WAAWF,GACtB1iB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJiM,KAAAA,YAAc,WACVpL,OAAAA,GAGJb,KAAAA,QAAU,WA8BTwS,IAAAA,EACAF,EACAC,EACAmB,EAASC,EAhCRpU,IACHtiB,GAAK,CACHqqB,OAAO,EACPE,YAAY,EACZE,KAAK,EACLM,YAAY,IAIhB7E,EAAQiL,UAAU,EAAG,EAAGjL,EAAQtS,OAAOnI,MAAOya,EAAQtS,OAAOlI,QAGzDwY,GACFgC,EAAQ3a,UAAUud,GAAa,EAAG,GAIpC5C,EAAQ3a,UAAUgW,GAAkB,EAAG,GAGnCmD,GAz+BY,SAAS9a,EAAK2G,EAAOoP,GAoBjCgX,IAAAA,EACAC,EACAC,EArBJjtB,EAAI2J,OACJ3J,EAAI6W,UAAY,QAChB7W,EAAI8W,aAAe,SACnB9W,EAAIgJ,YAAcyF,EAAS9R,UAC3BqD,EAAImF,UAAYsJ,EAAS9R,UAErB8R,IAAaoM,EAAS5L,SAAAA,UAAYR,IAAaoM,EAAS3L,SAAAA,iBAC1DlP,EAAIsU,YAAc,OACdyB,GACF/V,EAAIuU,cAA8B,KAAd/K,EACpBxJ,EAAIwU,cAA8B,KAAdhL,EACpBxJ,EAAIyU,WAA2B,KAAdjL,IAEjBxJ,EAAIuU,cAA8B,KAAd/K,EACpBxJ,EAAIwU,cAA8B,KAAdhL,EACpBxJ,EAAIyU,WAA2B,KAAdjL,IASnBxJ,EAAI+W,KADFiE,EACSuD,EAEAhH,EAGTxB,GACFgX,GAAYxjB,EAA2B,QAAbA,GAA0B,EAAiB,QAAbA,EAAwB,EAChFyjB,EAAyB,IAAdxjB,EAAqB,GAAmB,KAAdA,EAAsB,GAAK,EAChEyjB,EAA4B,GAAb1jB,EAAmB,IAElCwjB,EAAyB,KAAbxjB,EAAmC,IAAbA,EAAoB,EACtDyjB,EAA0B,IAAdxjB,EAAsB,GAAmB,IAAdA,EAAqB,GAAK,EACjEyjB,EAA6B,IAAdzjB,EAAqB,GAGtCxJ,EAAIgX,SAASrQ,EAAM5C,QAAQgX,GAAcgS,EAAUC,EAAUC,GAE7DjtB,EAAI6J,UAg8BFsW,CAAY7D,EAAS3V,EAAOoP,IAI1BoF,GACFmB,EAAQ3a,UAAUkT,GAAWqJ,EAASC,GAQpC5C,IACExF,IACF0V,EAA8B,UAAnBhb,EAAU7Y,KAAmB,QAAW,MAEnD+zB,EAAWniB,EAAciiB,EAAWjiB,GADpCkiB,EAAUD,EAAU,SACyCnO,EAAmBvD,IAAaC,EAAWD,GACxG8S,EAAuB,IAAbtjB,EAAoBsW,GAAuBhe,MACrDirB,EAAUnB,EAAW9L,GAAuB/d,OAAS,IAGrD4pB,GADAD,EAA8B,UAAnBhb,EAAU7Y,KAAmB,QAAW,MACZ,UAAnB6Y,EAAU7Y,KAAmB,QAAW,QAC5D+zB,EAAYpiB,EAAamiB,GAAWpO,EAAmBvD,IAAaC,EAAWD,GAC/E8S,EAAUtjB,GAAiC,UAAnBkH,EAAU7Y,KAAmB,QAAW,QAAWioB,GAAuB/d,OAAS,EAAI6pB,EAC/GmB,EAAwB,IAAdtjB,GAEZ8S,EAAQ3a,UAAUke,GAAwBgN,EAASC,IAIjDtR,IACEzF,IACF4V,EAAWniB,EAAciiB,EAAWjiB,EAAckiB,GAAWnO,EAAmBxD,IAAaC,EAAWD,GACxG8S,EAAuB,IAAbtjB,EAAoBwW,GAAuBle,MACrDirB,EAAUnB,EAAW5L,GAAuBje,OAAS,IAGrD4pB,GADAD,EAA8B,UAAnBhb,EAAU7Y,KAAmB,QAAW,KACZ,UAAnB6Y,EAAU7Y,KAAmB,OAAU,QAC3D+zB,EAAYpiB,EAAamiB,GAAWnO,EAAmBxD,IAAaC,EAAWD,GAC/E8S,EAAUtjB,GAAiC,UAAnBkH,EAAU7Y,KAAmB,QAAW,QAAWmoB,GAAuBje,OAAS,EAAI6pB,EAC/GmB,EAAwB,IAAdtjB,GAEZ8S,EAAQ3a,UAAUoe,GAAwB8M,EAASC,IAGrDxQ,EAAQ3S,OAtnBM,SAAS3J,EAAKuJ,EAAYC,GACpC0jB,IAAAA,EACAC,EAEAC,EACAC,EAAWC,EACXC,EAAaC,EAAaC,EAAYC,EACtCC,EAAuBC,EAAuBC,EAAsBC,EACpEC,EAAmBC,EAAmBC,EAAkBC,EACxDC,EAAuBC,EAAuBC,EAAsBC,EANpElyB,EAAa6P,EAAgB7P,WAyC7BqU,GAhCAsF,IAEFmX,EAAoB,OAAd1jB,EAQN8jB,GANEH,EADqB,UAAnB1c,EAAU7Y,KACW,QAAd4R,EAEc,MAAdA,IAGX6jB,GADAD,EAAWD,EAASD,IACIvmB,EAAQoT,IAAaC,EAAWD,IAExD4T,EAAwB,EACxBC,EAAwBV,EACxBW,EAAuB,EACvBC,EAAuBX,IAGA,UAAnB1c,EAAU7Y,MACZs1B,EAAmB,QAAb3jB,EACN4jB,EAAsB,QAAb5jB,IAET2jB,EAAmB,IAAb3jB,EACN4jB,EAAsB,OAAb5jB,GAGX8jB,GADAD,EAAWF,EAAMC,IACOxmB,EAAQoT,IAAaC,EAAWD,GACxDuT,EAAWH,EACXQ,EAAwBT,EACxBU,EAAwB,EACxBC,EAAuBV,EACvBW,EAAuB,GAEF,UAAnBrd,EAAU7Y,KAAkB,CAC1BmO,IAAAA,EAAUkG,IAAoBsO,EAAgBnM,gBAAAA,QAChDnC,IAAoBsO,EAAgBpM,gBAAAA,eACpClC,IAAoBsO,EAAgBlM,gBAAAA,WACpCpC,IAAoBsO,EAAgBhM,gBAAAA,mBACpCtC,IAAoBsO,EAAgB/L,gBAAAA,OAAU,GAAM,EAClD+f,EAA+BvuB,EAAI2I,qBAAqBglB,EAAuBC,EAAuBC,EAAsBC,GAChI1xB,EAAWkD,SAAS,IAAOyG,GAC3BwoB,EAA6B3lB,aAAa,EAAGxM,EAAWmD,gBACxDnD,EAAWkD,SAAS,IAAOyG,GAC3BwoB,EAA6B3lB,aAAa,IAAMxM,EAAWmD,gBAC3DnD,EAAWkD,SAAS,IAAOyG,GAC3BwoB,EAA6B3lB,aAAa,IAAMxM,EAAWmD,gBAC3DnD,EAAWkD,SAAS,IAAOyG,GAC3BwoB,EAA6B3lB,aAAa,EAAGxM,EAAWmD,gBACxDS,EAAImF,UAAYopB,EAEZxY,GACF/V,EAAI4B,SAAsB,QAAb2H,EAAuB2jB,EAAkB,QAAb3jB,EAAuB6jB,GAEhEptB,EAAI4B,SAAsB,QAAb2H,EAAqC,QAAdC,EAAwB4jB,EAAwB,QAAd5jB,GAGpEuM,IAEFgY,EAAoB,EACpBC,EAAoBd,EACpBe,EAAmB,EACnBC,EAAmBhB,EAAME,IAGzBW,EAAiC,QAAbxkB,EAAwB6jB,EAC5CY,EAAoB,EACpBC,EAAgC,QAAb1kB,EACnB2kB,EAAmB,GAEjBM,IAAAA,EAAsBxuB,EAAI2I,qBAAqBolB,EAAmBC,EAAmBC,EAAkBC,GAC3G9xB,EAAWkD,SAAS,GAAMyG,GAC1ByoB,EAAoB5lB,aAAa,EAAGxM,EAAWmD,gBAC/CnD,EAAWkD,SAAS,KACpBkvB,EAAoB5lB,aAAa,IAAMxM,EAAWmD,gBAClDnD,EAAWkD,SAAS,IACpBkvB,EAAoB5lB,aAAa,IAAMxM,EAAWmD,gBAClDnD,EAAWkD,SAAS,IACpBkvB,EAAoB5lB,aAAa,EAAGxM,EAAWmD,gBAC/CS,EAAImF,UAAYqpB,EACZzY,IACF/V,EAAI4B,SAAsB,QAAb2H,EAAuB2jB,EAAkB,QAAb3jB,EAAuB6jB,GAChEptB,EAAI4B,SAAsB,QAAb2H,EAAuB2jB,EAAkB,QAAb3jB,EAAuB6jB,KAEhEptB,EAAI4B,SAAsB,QAAb2H,EAAqC,QAAdC,EAAwB4jB,EAAwB,QAAd5jB,GACtExJ,EAAI4B,SAAsB,QAAb2H,EAAqC,QAAdC,EAAwB4jB,EAAwB,QAAd5jB,IAGtEuM,GAEqB,UAAnBtF,EAAU7Y,MACZ21B,EAA2B,IAAbhkB,EACdikB,EAAc,EACdC,EAA0B,IAAblkB,EAAiC,QAAbA,EACjCmkB,EAAa,IAGbF,EAAc,EACdC,GAFAF,EAAchkB,EAAa,EAAkB,MAAdC,EAAuB,GAEb,KAAdA,EAC3BkkB,EAAa,GAIQ,UAAnBjd,EAAU7Y,MACZ21B,EAAc,EACdC,EAA4B,IAAdhkB,EACdikB,EAAa,EACbC,EAA2B,IAAdlkB,EAAmC,QAAdA,IAElC+jB,EAAc,EAEdE,EAAa,EACbC,GAFAF,EAAchkB,EAAc,EAAiB,KAAbD,GAEQ,KAAbA,GAI3BklB,IAAAA,EAA0BzuB,EAAI2I,qBAAqB4kB,EAAaC,EAAaC,EAAYC,GAC7Fe,EAAwB7lB,aAAa,EAAG8e,EAAW5qB,OAAOyC,gBAC1DkvB,EAAwB7lB,aAAa,EAAG8e,EAAW3qB,MAAMwC,gBACzDS,EAAImF,UAAYspB,EACZC,IAAAA,EAAkC,UAAnBje,EAAU7Y,KAAmB,EAAKme,GAAyB,IAAdvM,EAAkC,IAAbD,EAOjFkH,GANAsF,GACF/V,EAAI4B,SAAS2rB,EAAaD,EAAUG,EAAaF,EAAaF,EAAYqB,GAE1E1uB,EAAI4B,SAAS0rB,EAAWoB,EAAalB,EAAaH,EAAYqB,EAAahB,EAAaF,GAGnE,UAAnB/c,EAAU7Y,KAAkB,CAE1Bme,IAGFqY,EAAwB,EACxBC,GAFAF,EAAqC,IAAb5kB,GAEoC,IAAbA,EAC/C+kB,EAAuB,IAGvBH,EAAwB,EAExBE,EAAuB,EACvBC,GAFAF,EAAsC,IAAd5kB,GAEqC,IAAdA,GAE7CmlB,IAAAA,EAA0B3uB,EAAI2I,qBAAqBwlB,EAAuBC,EAAuBC,EAAsBC,GAC3HK,EAAwB/lB,aAAa,EAAG,4BACxC+lB,EAAwB/lB,aAAa,IAAM,4BAC3C5I,EAAImF,UAAYwpB,EACZ5Y,GACF/V,EAAI4B,SAASusB,EAAuBb,EAAUe,EAAsBhB,GAEpErtB,EAAI4B,SAAS0rB,EAAUc,EAAuBf,EAAWiB,EAAuBF,IAwdpFzF,CAAUrM,EAAS/S,EAAYC,GAC/B8S,EAAQzS,WAGJ6R,GAAwC,UAAnBjL,EAAU7Y,OACjC0kB,EAAQ3a,UAAUkW,GAAkB,EAAG,GAGzCc,IAAa,GAIVQ,KAAAA,UAEE,MAGMgS,EAAAA,EAAAA,QAAAA,QAAAA;;AC4EAyD,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAr0Cf,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,gCACA,EAAA,EAAA,QAAA,gCACA,EAAA,EAAA,QAAA,2BACA,EAAA,EAAA,QAAA,qBACA,EAAA,EAAA,QAAA,+BACA,EAAA,EAAA,QAAA,+BACA,EAAA,EAAA,QAAA,qBACA,EAAA,QAAA,WAWA,EAAA,QAAA,iBAkzCeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAjyCf,IAAIA,EAAiB,SAAS5kB,EAAQkN,GAEhCrV,IAAAA,OAASxJ,KADb6e,EAAaA,GAAc,IACWrV,MAAQ,EAAIqV,EAAWrV,MAC3DC,OAAUzJ,IAAc6e,EAAWpV,OAAS,EAAIoV,EAAWpV,OAC3DiY,OAAY1hB,IAAc6e,EAAW6C,SAAW,EAAI7C,EAAW6C,SAC/DC,OAAY3hB,IAAc6e,EAAW8C,SAAYD,EAAW,IAAO7C,EAAW8C,SAC9EhW,OAAW3L,IAAc6e,EAAWlT,QAAU,KAAOkT,EAAWlT,QAEhEiW,QADoB5hB,IAAc6e,EAAWuQ,kBAA2BvQ,EAAWuQ,sBACtEpvB,IAAc6e,EAAW+C,WAAmB/C,EAAW+C,WACpEC,OAAa7hB,IAAc6e,EAAWgD,WAAaF,EAAWD,GAAY,EAAIA,EAAW7C,EAAWgD,UACpGxD,OAAere,IAAc6e,EAAWR,YAAc,GAAKQ,EAAWR,YACtEC,OAActe,IAAc6e,EAAWP,WAAa,GAAKO,EAAWP,WACpErN,OAAejR,IAAc6e,EAAW5N,YAAc+Q,EAAY1I,YAAAA,MAAQuF,EAAW5N,YACrFgR,OAAgBjiB,IAAc6e,EAAWoD,cAAsBpD,EAAWoD,aAC1ErO,OAAmB5T,IAAc6e,EAAWjL,gBAAkBsO,EAAgBhN,gBAAAA,UAAY2J,EAAWjL,gBACrGuO,OAAqBniB,IAAc6e,EAAWsD,mBAA2BtD,EAAWsD,kBACpFkN,OAAcrvB,IAAc6e,EAAWwQ,WAAarsB,EAASyS,MAAAA,IAAMoJ,EAAWwQ,WAC9EjZ,OAAYpW,IAAc6e,EAAWzI,SAAWoM,EAAS5L,SAAAA,SAAWiI,EAAWzI,SAC/EqM,OAAcziB,IAAc6e,EAAW4D,YAAoB5D,EAAW4D,WACtEC,OAAe1iB,IAAc6e,EAAW6D,YAAc,EAAI7D,EAAW6D,YACrEC,OAAe3iB,IAAc6e,EAAW8D,aAAsB9D,EAAW8D,YACzE/K,OAAY5X,IAAc6e,EAAWjH,SAAWiL,EAAShL,SAAAA,QAAUgH,EAAWjH,SAC9EkL,OAAc9iB,IAAc6e,EAAWiE,YAAoBjE,EAAWiE,WACtEG,OAAoBjjB,IAAc6e,EAAWoE,kBAA0BpE,EAAWoE,iBAClFnB,OAAmB9hB,IAAc6e,EAAWiD,iBAAyBjD,EAAWiD,gBAChFoB,OAA2BljB,IAAc6e,EAAWqE,yBAAkCrE,EAAWqE,wBACjGC,OAA2BnjB,IAAc6e,EAAWsE,yBAAkCtE,EAAWsE,wBACjGxI,OAAqB3a,IAAc6e,EAAWlE,kBAAoB2I,EAAkB1M,kBAAAA,SAAWiI,EAAWlE,kBAC1G0I,OAAqBrjB,IAAc6e,EAAWwE,mBAA2BxE,EAAWwE,kBACpFE,OAAavjB,IAAc6e,EAAW0E,WAAoB1E,EAAW0E,UACrEC,OAAcxjB,IAAc6e,EAAW2E,YAAqB3E,EAAW2E,WACvE8L,OAAiBtvB,IAAc6e,EAAWyQ,cAAgB,KAAOzQ,EAAWyQ,cAC5EC,OAAoBvvB,IAAc6e,EAAW0Q,kBAA2B1Q,EAAW0Q,iBACnFvL,OAA2BhkB,IAAc6e,EAAWmF,wBAA0B,IAAMnF,EAAWmF,wBAG7FC,GAAU,EAAiBtS,EAAAA,kBAAAA,GAEjB,IAAVnI,IACFA,EAAQya,EAAQtS,OAAOnI,OAEV,IAAXC,IACFA,EAASwa,EAAQtS,OAAOlI,QAI1Bwa,EAAQtS,OAAOnI,MAAQA,EACvBya,EAAQtS,OAAOlI,OAASA,EAEpByH,IAAAA,EAAa1H,EACb2H,EAAc1H,EAGd8Z,GAAAA,IAA4B,IAAfC,EAAsB,CACjC/B,IAAAA,EAAe7b,EAAI6G,IAAAA,cAAc,SACrCgV,EAAayC,aAAa,MAAOV,GACjC/B,EAAayC,aAAa,UAAW,QAGnCc,IAOAjG,EAWA8G,EACAC,EAGA5G,EACAgH,EAvBAlB,EAAO,KACP1W,EAAQoT,EAGRuD,GAAmBtD,EACnBuD,GAAmBxD,EAGnByD,IAAc,EACd7E,IAAa,EACbqP,IAAoB,EACpBC,IAAoB,EACpB4G,GAAgB,GAChBnR,GAAa,EAEb3H,GAAWlU,GAASC,EAKpBmc,GAAU/lB,KAAKC,MAAoC,KAA7B4d,GAAWjU,EAASD,IAC1CupB,GAAgBlzB,KAAKC,MAAoC,KAA7B4d,GAAWlU,EAAQC,IAI/CiU,IACFmI,EAAU3U,EAAa,EAAI0U,GAAU,EACrCE,EAAU,KAAQ3U,EAClB+N,EAAUrf,KAAKiM,MAAMqF,EAAc,IAAM,MAAQpL,EAAjD,YACAmgB,EAAUrmB,KAAKiM,MAAMqF,EAAc,IAAM,MAAQrL,EAAjD,cAEA+f,EAAU,IAAO3U,EACjB4U,EAAU3U,EAAc,KAAOyU,GAAU,EACzC1G,EAAUrf,KAAKiM,MAAMqF,EAAc,IAAM,MAAQpL,EAAjD,YACAmgB,EAAUrmB,KAAKiM,MAAMqF,EAAc,IAAM,MAAQrL,EAAjD,aAGEua,IA+CAxD,GA/CAwD,IAAc,EAGdmG,GAAe9E,EACf+E,GAAe9E,EACf+E,GAAY/E,EAAWD,EAEvBiF,GAAmB,EACnBC,GAAmB,EAgCnBC,IAAc,EAAard,EAAAA,cAAAA,EAAOC,GAClCqd,GAAeD,GAAYzd,WAAW,MAGtCkW,IAAmB,EAAa9V,EAAAA,cAAAA,EAAOC,GACvC8V,GAAoBD,GAAiBlW,WAAW,MAKhDgnB,GAAkBxqB,EAAI6G,IAAAA,cAAc,UACpCiR,IACF0S,GAAgB5mB,MAAqB,QAAb0H,EACxBkf,GAAgB3mB,OAAuB,QAAd0H,IAEzBif,GAAgB5mB,MAAqB,QAAb0H,EACxBkf,GAAgB3mB,OAAuB,QAAd0H,GAEvBkf,IAAAA,GAAmBD,GAAgBhnB,WAAW,MAG9CqtB,GAAoB7wB,EAAI6G,IAAAA,cAAc,UACtCiR,IACF+Y,GAAkBjtB,MAAqB,QAAb0H,EAC1BulB,GAAkBhtB,OAAuB,QAAd0H,IAE3BslB,GAAkBjtB,MAAqB,QAAb0H,EAC1BulB,GAAkBhtB,OAAuB,QAAd0H,GAEzBulB,IAAAA,GAAqBD,GAAkBrtB,WAAW,MAGlD2d,IAAc,EAAanB,EAAAA,cAAAA,GAASA,IACpCoB,GAAeD,GAAY3d,WAAW,MAGtC6d,IAAe,EAAarB,EAAAA,cAAAA,GAASA,IACrCsB,GAAgBD,GAAa7d,WAAW,MAGxCoT,GAAYyK,GAGZO,IAAyB,EAAauL,EAAAA,cAAAA,GAAeA,IACrDtL,GAAsBD,GAAuBpe,WAAW,MAGxDse,IAAyB,EAAaqL,EAAAA,cAAAA,GAAeA,IACrDpL,GAAsBD,GAAuBte,WAAW,MAGxDoW,IAAmB,EAAahW,EAAAA,cAAAA,EAAOC,GACvCgW,GAAoBD,GAAiBpW,WAAW,MAkNhD4pB,GAAkB,SAASrrB,EAAKsrB,EAAWC,EAAUC,EAAYzV,GAC/DA,GAEF/V,EAAIyE,YACJzE,EAAI0E,OAAO4mB,EAAWE,GACtBxrB,EAAI2E,OAAO4mB,EAAUC,GACrBxrB,EAAI6E,YACJ7E,EAAIiJ,WAGJjJ,EAAIyE,YACJzE,EAAI0E,OAAO8mB,EAAYF,GACvBtrB,EAAI2E,OAAO6mB,EAAYD,GACvBvrB,EAAI6E,YACJ7E,EAAIiJ,WAKJ7S,GAAO,SAAS8gB,GAEdsJ,IAyDEmL,EAzDFnL,OAAanoB,KADjB6e,EAAaA,GAAc,IACeuJ,OAAgBvJ,EAAWuJ,MACjEC,OAAkBroB,IAAc6e,EAAWyJ,YAAqBzJ,EAAWyJ,WAC3EC,OAAWvoB,IAAc6e,EAAW2J,KAAc3J,EAAW2J,IAC7DK,OAAkB7oB,IAAc6e,EAAWiK,YAAqBjK,EAAWiK,WAC3E6N,OAAmB32B,IAAc6e,EAAW+X,aAAsB/X,EAAW+X,aAEjFvW,IAAc,EA3TVuB,GACF8E,IAAY,EAAe/E,EAAAA,gBAAAA,EAAWD,GAAU,GAChDkF,IAAmB,EAAeF,EAAAA,gBAAAA,GAAayC,GAAwB,GACvE3C,GAAe3mB,KAAKiM,MAAM4V,EAAWkF,IAAoBA,GACzDH,GAAe5mB,KAAK+I,KAAK+Y,EAAWiF,IAAoBA,GACxDD,IAAmB,EAAeC,EAAAA,gBAAAA,GAAoBwC,GAAwB,IAE9EzH,EAAW8E,KADX/E,EAAW8E,MAKXA,GAAe9E,EACf+E,GAAe9E,EAFf+E,GAAa/E,EAAWD,EAIxBiF,GAAmB,EACnBC,GAAmB,IAGrBtY,EAAQA,EAAQoT,EAAWA,EAAWpT,EAAQqT,EAAWA,EAAWrT,EACpE2W,GAAmBA,GAAmBvD,EAAWA,EAAWuD,GAAmBtD,EAAWA,EAAWsD,GACrGC,GAAmBA,GAAmBxD,EAAWA,EAAWwD,GAAmBvD,EAAWA,EAAWuD,GACrGrD,EAAYA,EAAYH,EAAWA,EAAWG,EAAYF,EAAWA,EAAWE,EA4S5EsG,GAAalG,IACM6E,EAAAA,EAAAA,SAAAA,GAAc7V,EAAaC,EAAYC,EAAauM,IAIvE2K,GAAkBlG,IACM5C,EAAAA,EAAAA,SAAAA,GAAmB3L,EAAiB1C,EAAYC,EAAauM,IAGrF6K,IAGAvB,GAAa1d,WAAU,EAAesc,EAAAA,SAAAA,GAAS,EAAGhO,GAAW,EAAG,GAGhEsP,GAAc5d,WAAU,EAAesc,EAAAA,SAAAA,GAAS,EAAGhO,GAAW,EAAG,IAWjEsL,GAEAuE,GAAoBne,WAAU,EAAyBypB,EAAAA,SAAAA,GAAe/vB,EAAS2S,MAAAA,KAAKnR,KAAK0C,gBAAgB,EAAOwW,IAAW,EAAG,GAO9HyF,GAEAwE,GAAoBre,WAAU,EAAyBypB,EAAAA,SAAAA,GAAe/vB,EAASyS,MAAAA,IAAIhR,OAAOyC,gBAAgB,EAAOwW,IAAW,EAAG,GAO/H2K,GAAkBlG,MA3MC,SAASxa,EAAKgT,EAAmB+C,GACxD9J,EAAgB7P,WAAWkD,SAAS,GACpCU,EAAI2J,OACJ3J,EAAI8W,aAAe,SACfyL,IAAAA,EAA0B,GAAbhZ,EACjBvJ,EAAIgJ,YAAciD,EAAgB7P,WAAWmD,eAC7CS,EAAImF,UAAY8G,EAAgB7P,WAAWmD,eAEvCyiB,IAEA6J,EACAL,EACAM,EACAC,EAEAC,EAGAC,EACAC,EACAC,EACAC,EACAC,EACAC,EA6BAC,EA5CAvK,EAAejI,EACfkI,EAAmBR,EAOnB+K,EAAmB,EAqClBD,IA7BDxW,GACFkW,EAAkB,IAAO1iB,EACzB2iB,EAAiB,IAAO3iB,EACxB4iB,EAAmB,IAAO5iB,EAC1B6iB,EAAkB,IAAO7iB,EACzB8iB,EAAkB,IAAO9iB,EACzB+iB,EAAiB,IAAO/iB,EACxBvJ,EAAI6W,UAAY,QAChBiV,EAAe,EACfC,EAA6B,OAAdviB,EAGfgjB,GADAR,EAA8B,QAAdxiB,EAAuC,OAAdA,IACNwQ,EAAWD,KAE9CkS,EAAkB,IAAOziB,EACzB0iB,EAAiB,IAAO1iB,EACxB2iB,EAAmB,IAAO3iB,EAC1B4iB,EAAkB,IAAO5iB,EACzB6iB,EAAkB,IAAO7iB,EACzB8iB,EAAiB,IAAO9iB,EACxBxJ,EAAI6W,UAAY,SAChBiV,EAA4B,QAAbviB,EACfwiB,EAAe,EAEfC,EAAe,EACfQ,GAF6B,QAAbjjB,EAAqC,QAAbA,IAELyQ,EAAWD,IAI3CwS,EAAexS,EAAU8R,EAAc,EAAGU,GAAgBvS,EAAUuS,GAAgBvN,GAAkB6M,GAAe7M,GAYpHiD,GARFuJ,EADEzV,EACWgW,EAAeC,EAAeH,EAAcW,EAE5CV,EAAeD,EAAcW,EAlOxB,MAqOpBvK,EAoDyDR,IAAtBQ,GACjCjiB,EAAI6I,UAAY,EAChBwiB,GAAgBrrB,EAAKmsB,EAAiBC,EAAgBZ,EAAYzV,KAElE/V,EAAI6I,UAAY,GAChBwiB,GAAgBrrB,EAAKisB,EAAgBC,EAAeV,EAAYzV,QAtD9DkM,CAOElM,GAJJ/V,EAAI6I,UAAY,IAChBwiB,GAAgBrrB,EAAKqsB,EAAgBC,EAAed,EAAYzV,GAG5DA,EAEM/C,OAAAA,EAAkBrV,QACnB,IAAA,aACHqC,EAAIgX,SAAUgL,EAAaje,QAAQ,GAAkB,IAAbwF,EAAmBiiB,EAAYjJ,GACvE,MAEG,IAAA,aACHviB,EAAIgX,SAAUgL,EAAaS,YAAY,GAAkB,IAAblZ,EAAmBiiB,EAAYjJ,GAC3E,MAEG,IAAA,WAEL,QACEviB,EAAIgX,SAAUgL,EAAaje,QAAQ,GAAkB,IAAbwF,EAAmBiiB,EAAYjJ,QAKnEvP,OAAAA,EAAkBrV,QACnB,IAAA,aACHqC,EAAIgX,SAAUgL,EAAaje,QAAQ,GAAKynB,EAA2B,IAAdhiB,EAAqB+Y,GAC1E,MAEG,IAAA,aACHviB,EAAIgX,SAAUgL,EAAaS,YAAY,GAAK+I,EAA2B,IAAdhiB,EAAqB+Y,GAC9E,MAEG,IAAA,WAEL,QACEviB,EAAIgX,SAAUgL,EAAaje,QAAQ,GAAKynB,EAA2B,IAAdhiB,EAAqB+Y,GAKhFP,GAAgB/C,GAChBgD,EAAmB,EAcvBjiB,EAAI6J,UAmFF6Y,CAAmB9K,GAAmB5E,EAAmB+C,IAGrDuF,IACF1D,GAAkBjO,OACdoM,IAEF4V,EAAyB,QAAdniB,EAAwC,QAAdA,GAA2B0Q,EAAYH,IAAaC,EAAWD,GACpGnC,GAAkBjL,UAAuB,KAAbpD,EAAoBoiB,EAAWP,GAAgB,KAG3EO,GAAyB,QAAbpiB,EAAqC,OAAbA,IAA0B2Q,EAAYH,IAAaC,EAAWD,GAClGnC,GAAkBjL,UAAuB,QAAbpD,EAAwB6hB,GAAgB,EAAIO,EAAwB,IAAdniB,IAEpFoO,GAAkBjW,UAhQG,SAASoU,GAC9B4M,IAAAA,EAAkB1kB,EAAI6G,IAAAA,cAAc,UACxC6d,EAAgB7gB,OAAS6gB,EAAgB9gB,MAAQupB,GAC7CxI,IAAAA,EAAeD,EAAgBlhB,WAAW,MAE9CmhB,EAAajZ,OACTkZ,IAAAA,EAAgBD,EAAaja,qBAAqB,EAAG,GAAK,EAA4B,GAAzBga,EAAgB7gB,QA2B1E6gB,OA1BPE,EAAcja,aAAa,EAAG,WAC9Bia,EAAcja,aAAa,GAAK,WAChCia,EAAcja,aAAa,IAAM,WACjCia,EAAcja,aAAa,EAAG,WAC9Bga,EAAazd,UAAY0d,EAErB9M,GACF6M,EAAane,YACbme,EAAale,OAAO,GAA8B,GAAzBie,EAAgB7gB,QACzC8gB,EAAaje,OAA+B,GAAxBge,EAAgB9gB,MAAa,IACjD+gB,EAAaje,OAA+B,GAAxBge,EAAgB9gB,MAAsC,GAAzB8gB,EAAgB7gB,QACjE8gB,EAAa/d,cAEb+d,EAAane,YACbme,EAAale,OAAO,GAAK,IACzBke,EAAaje,OAA+B,GAAxBge,EAAgB9gB,MAAa,IACjD+gB,EAAaje,OAA+B,GAAxBge,EAAgB9gB,MAAsC,GAAzB8gB,EAAgB7gB,QACjE8gB,EAAa/d,aAGf+d,EAAavd,OACbud,EAAa5Z,YAAc,UAC3B4Z,EAAa3Z,SAEb2Z,EAAa/Y,UAEN8Y,EA+NyBG,CAAqB/M,IAAW,EAAG,GAC/D6B,GAAkB/N,YAKH+N,EAAAA,EAAAA,SAAAA,GAAmBrO,EAAYC,EAAakN,EAAaC,EAAY1K,EAAiB8J,GAAU,KAAM+E,IAyBrH,GAlBA4F,GAAkB5F,IAChB/E,IACFb,IAAY,EAAyB3L,EAAAA,SAAa,QAAbA,EAAqC,KAAdC,EAAqBiF,GACjFmJ,GAAkBjW,UAAUuT,IAAa3L,EAA2B,QAAbA,GAA0B,EAAkB,IAAdC,KAErF0L,IAAY,EAAyB3L,EAAAA,SAAa,IAAbA,EAAiC,IAAdC,EAAoBiF,GAC5EmJ,GAAkBjW,UAAUuT,GAAwB,KAAb3L,EAAkC,IAAdC,KAK3DwlB,IACFE,GAAgBH,IAChBlG,GAAcH,GAAkBhB,IAIlCM,IAAoB,EAChB,OAAShkB,GAAW,EAAIA,EAAQvO,OAAQ,CAC1CuyB,IAAoB,EAChBrG,IACayL,EAAU+B,EADvBxN,EAAe3d,EAAQvO,OAGvBsgB,IAIFqX,EADuB,QAAd5jB,EADW,OAAdA,EAGN2lB,EAAY,IAKZ/B,EAFmB,QAAb7jB,EACgB,OAAbA,EAET4lB,EAAyB,QAAb5lB,EAAwB,GAEtCslB,GAAgB,GACb,GACDlN,IACAkN,GAAcr1B,KAAK,CACjBf,OAAUuL,EAAQ2d,GAAclpB,MAAQP,KAAKiC,IAAI4f,KAAcC,EAAWD,GAAaqT,EAAW+B,EAClGt3B,MAASmM,EAAQ2d,GAAc9pB,KAAOK,KAAKiC,IAAI4f,KAAcC,EAAWD,GAAaqT,EAAW+B,EAChGjsB,OAAO,EAAec,EAAAA,gBAAAA,EAAQ2d,GAAcze,eAEvC,EAAIye,GAIfsG,IAAoB,EAChBL,GAAsC,OAAlBD,IAEtBK,IAAoB,EACpBC,IAAoB,GAIlB/G,GAAkBxF,IACM5D,EAAAA,EAAAA,SAAAA,GAAmBvO,EAAYC,EAAauM,IAAU,IAIhFkN,GAAe,SAASC,GAEtBC,IAAAA,OAAc9qB,KADlB6qB,EAAUA,GAAW,IACmBzC,OAAgByC,EAAQzC,MAC5D2C,OAAmB/qB,IAAc6qB,EAAQvC,YAAqBuC,EAAQvC,WACtE0C,OAAYhrB,IAAc6qB,EAAQrC,KAAcqC,EAAQrC,IACxDuO,OAAoB/2B,IAAc6qB,EAAQ+L,aAAsB/L,EAAQ+L,YACxEzL,OAAmBnrB,IAAc6qB,EAAQ/B,YAAqB+B,EAAQ/B,WAEtEgC,IACFjE,GAAYrd,MAAQA,EACpBqd,GAAYpd,OAASA,EACrBqd,GAAeD,GAAYzd,WAAW,OAGpC2hB,IACFzL,GAAiB9V,MAAQA,EACzB8V,GAAiB7V,OAASA,EAC1B8V,GAAoBD,GAAiBlW,WAAW,OAG9C2tB,IACErZ,IACF0S,GAAgB5mB,MAAgB,QAARA,EACxB4mB,GAAgB3mB,OAAkB,QAATA,IAEzB2mB,GAAgB5mB,MAAgB,QAARA,EACxB4mB,GAAgB3mB,OAAkB,QAATA,GAE3B4mB,GAAmBD,GAAgBhnB,WAAW,MAG1CsU,IACF+Y,GAAkBjtB,MAAgB,QAARA,EAC1BitB,GAAkBhtB,OAAkB,QAATA,IAE3BgtB,GAAkBjtB,MAAgB,QAARA,EAC1BitB,GAAkBhtB,OAAkB,QAATA,GAE7BitB,GAAqBD,GAAkBrtB,WAAW,OAGhD4hB,IACFjE,GAAYvd,MAAQ3J,KAAK+I,KAAa,QAARY,GAC9Bud,GAAYtd,OAAS5J,KAAK+I,KAAc,QAATa,GAC/Bud,GAAeD,GAAY3d,WAAW,MAEtC6d,GAAazd,MAAQ3J,KAAK+I,KAAa,QAARY,GAC/Byd,GAAaxd,OAAS5J,KAAK+I,KAAc,QAATa,GAChCyd,GAAgBD,GAAa7d,WAAW,MAGxCoT,GAAYyK,IAGVkE,IACF3L,GAAiBhW,MAAQA,EACzBgW,GAAiB/V,OAASA,EAC1BgW,GAAoBD,GAAiBpW,WAAW,QAIhDkiB,GAAQ,SAASC,GACfA,EACFlG,GAAamG,YAAYJ,GAAqB,MAE9CK,cAAcpG,IACd7I,GAAYyK,KAIZmE,GAAsB,WACpBtI,IAEAtG,GADEA,KAAcuK,GACJE,GAEAF,GAETzG,KACHA,IAAa,GACI0E,EAAAA,EAAAA,kBAAAA,EAAKlE,YAuNxB+V,GAAkB,SAASlvB,GAC7BA,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAIoF,KAAK,EAAG,EAAGpF,EAAIgK,OAAOnI,MAAO7B,EAAIgK,OAAOlI,QAC5C9B,EAAI6E,YACAkQ,IAAAA,EAAc/U,EAAIgK,OAAOnI,MAAQ,EACjCmT,EAAchV,EAAIgK,OAAOlI,OAAS,EAClConB,EAAc5M,EAAQlT,qBAAqB2L,EAAYC,EAAY,EAAGD,EAAYC,EAAYhV,EAAIgK,OAAOnI,MAAQ,GACrHqnB,EAAYtgB,aAAa,EAAG,WAC5BsgB,EAAYtgB,aAAa,EAAG,WAC5B5I,EAAImF,UAAY+jB,EAChBlpB,EAAIqF,OACJrF,EAAI6J,WAGFgf,GAAgB,SAAS7oB,EAAKkD,GAChClD,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAIoF,KAAK,EAAG,EAAGpF,EAAIgK,OAAOnI,MAAO7B,EAAIgK,OAAOlI,QAC5C9B,EAAI6E,YACAkQ,IAEAsa,EAFAta,EAAc/U,EAAIgK,OAAOnI,MAAQ,EACjCmT,EAAchV,EAAIgK,OAAOlI,OAAS,EAGpCutB,EADEtZ,GACY/V,EAAIgK,OAAOnI,MAAQ,EAEnB7B,EAAIgK,OAAOlI,OAAS,EAEhConB,IAAAA,EAAc5M,EAAQlT,qBAAqB2L,EAAYC,EAAY,EAAGD,EAAYC,EAAYqa,GAClGnG,EAAYtgB,aAAa,EAAG1F,EAAMnG,MAAMwC,gBACxC2pB,EAAYtgB,aAAa,EAAG1F,EAAMrG,KAAK0C,gBACvCS,EAAImF,UAAY+jB,EAChBlpB,EAAIqF,OACJrF,EAAI6J,WAiaC,OA7ZFwP,KAAAA,SAAW,SAAS0K,GAEnBC,IAAAA,GADJD,EAAW/K,WAAW+K,IACQhK,EAAWA,EAAYgK,EAAW/J,EAAWA,EAAW+J,EA6B/E,OA5BHpd,IAAUqd,KACZrd,EAAQqd,GAEIzG,KACVA,GAAmB5W,GAEjBA,EAAQ2W,KACVA,GAAmB3W,GAGhBA,GAASuT,IAAcsD,IAAerD,GACxCxT,GAASuT,IAAcsD,KAAgBrD,GAExCwJ,GADAnG,IAAc,GAEV5B,GACF9B,EAAamK,SAELtd,EAAQuT,GAAasD,IAAerD,GAC7CxT,EAAQuT,GAAasD,KAAgBrD,KAEtCwJ,GADAnG,IAAc,GAEV5B,GACF9B,EAAaoK,SAIZ/K,KAAAA,WAEA,MAGJG,KAAAA,SAAW,WACP3S,OAAAA,GAGJkS,KAAAA,iBAAmB,SAASkL,EAAUpc,GACrCqc,IAAAA,EAEFK,EADAtL,EAAQ,KAsDH,OApDPgL,EAAW/K,WAAW+K,GAGlBpd,KAFJqd,EAAeD,EAAWhK,EAAWA,EAAYgK,EAAW/J,EAAWA,EAAW+J,UAG5E1rB,IAAc+e,GAASA,EAAMte,WAC/Bse,EAAMvf,OAGRwsB,EAAOhI,EAA0BnkB,KAAKiC,IAAI6pB,EAAcrd,IAAUqT,EAAWD,GAC7EsK,EAAOnsB,KAAKgO,IAAIme,EAAMhI,EAA0B,IAChDjF,EAAQ,IAAIpiB,EAAJ,QAAU,GAAI,GAAIA,EAAMgG,QAAAA,iBAAkB2L,EAAOqd,EAAaK,IAGhEpL,gBAAkB,SAASC,IAC/BvS,EAAQuS,EAAMvhB,OAAOX,OAEPkjB,IAAcsD,IAAerD,GACxCxT,GAASuT,IAAcsD,KAAgBrD,GAExCwJ,GADAnG,IAAc,GAEV5B,GACF9B,EAAamK,SAELtd,EAAQuT,GAAasD,IAAerD,GAC7CxT,EAAQuT,GAAasD,KAAgBrD,KAEtCwJ,GADAnG,IAAc,GAEV5B,GACF9B,EAAaoK,SAIbvd,EAAQ4W,KACVA,GAAmB5W,GAEjBA,EAAQ2W,KACVA,GAAmB3W,GAGhBgS,KACHA,IAAa,GACII,EAAAA,EAAAA,kBAAAA,EAAMI,WAKvBxR,GAAiC,mBAAdA,IACrByP,EAAMgC,iBAAmBzR,GAG3ByP,EAAM3e,SAED,MAGJ6rB,KAAAA,sBAAwB,WAGpB,OAFPhH,GAAmB3W,EACdwS,KAAAA,UACE,MAGJoL,KAAAA,sBAAwB,WAGpB,OAFPhH,GAAmB5W,EACdwS,KAAAA,UACE,MAGJqL,KAAAA,2BAA6B,SAASC,GAGlC,OAFPlJ,IAA4BkJ,EACvBtL,KAAAA,UACE,MAGJuL,KAAAA,2BAA6B,SAASD,GAGlC,OAFPjJ,IAA4BiJ,EACvBtL,KAAAA,UACE,MAGJuM,KAAAA,oBAAsB,SAASjB,GAG3B,OAFPnJ,IAAqBmJ,EAChBtL,KAAAA,UACE,MAGJwM,KAAAA,mBAAqB,SAASC,GAM1B,OALPzL,IAAoByL,EAGpBjC,GADAnG,IAAeA,IAEVrE,KAAAA,UACE,MAGJ0M,KAAAA,eAAiB,SAASzN,GAGtB,OAFP2C,EAAcnc,SAASwZ,EAAU,IAC5Be,KAAAA,UACE,MAGJ2M,KAAAA,eAAiB,SAASC,GAStB,OARP9C,GAAa,CACXxC,OAAO,IAETnX,EAAcyc,EACd3vB,GAAK,CACHqqB,OAAO,IAEJtH,KAAAA,UACE,MAGJ6M,KAAAA,mBAAqB,SAASC,GAS1B,OARPhD,GAAa,CACXtC,YAAY,IAEd1U,EAAkBga,EAClB7vB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJgQ,KAAAA,cAAgB,SAASC,GASrB,OARPnG,GAAa,CACXgM,aAAa,IAEfvH,EAAa0B,EACbhzB,GAAK,CACH64B,aAAa,IAEV9V,KAAAA,UACE,MAGJqN,KAAAA,YAAc,SAASC,GASnB,OARPxD,GAAa,CACXpC,KAAK,IAEP5Q,EAAWwW,EACXrwB,GAAK,CACHyqB,KAAK,IAEF1H,KAAAA,UACE,MAGJ4N,KAAAA,cAAgB,SAAStC,GAGrB,OAFPtJ,IAAesJ,EACVtL,KAAAA,UACE,MAGJ8N,KAAAA,YAAc,SAASC,GASnB,OARPzY,EAAWyY,EACXjE,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJqM,KAAAA,WAAa,SAASC,GAIlB,OAHPzhB,EAAUyhB,EACVrvB,KACK+iB,KAAAA,UACE,MAGJkQ,KAAAA,iBAAmB,SAAS1iB,GAIxB,OAHYA,EACnBvQ,KACK+iB,KAAAA,UACE,MAGJmQ,KAAAA,YAAc,SAAS9gB,GAInB,OAHPmf,EAAgBnf,EAChBpS,KACK+iB,KAAAA,UACE,MAGJoQ,KAAAA,kBAAoB,SAAS5iB,GAIzB,OAHPihB,EAAmBjhB,EACnBvQ,KACK+iB,KAAAA,UACE,MAGJwL,KAAAA,oBAAsB,SAASZ,GAE9BC,IAAAA,GADJD,EAAW/K,WAAW+K,IACQhK,EAAWA,EAAYgK,EAAW/J,EAAWA,EAAW+J,EAK/E,OAJHxG,KAAqByG,IACvBzG,GAAmByG,EACd7K,KAAAA,WAEA,MAGJyL,KAAAA,oBAAsB,SAASb,GAE9BC,IAAAA,GADJD,EAAW/K,WAAW+K,IACQhK,EAAWA,EAAYgK,EAAW/J,EAAWA,EAAW+J,EAK/E,OAJHzG,KAAqB0G,IACvB1G,GAAmB0G,EACd7K,KAAAA,WAEA,MAGJ0L,KAAAA,eAAiB,SAASC,GAStB,OARPpO,EAAcoO,EACd7B,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJ4L,KAAAA,cAAgB,SAASC,GASrB,OARPrO,EAAaqO,EACb/B,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJ8L,KAAAA,YAAc,SAASlB,GASnB,OARPhK,EAAWf,WAAW+K,GACtBd,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJ+L,KAAAA,YAAc,WACVnL,OAAAA,GAGJoL,KAAAA,YAAc,SAASpB,GASnB,OARP/J,EAAWhB,WAAW+K,GACtBd,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJiM,KAAAA,YAAc,WACVpL,OAAAA,GAGJqL,KAAAA,aAAe,SAAStB,GAEvBC,IAAAA,GADJD,EAAW/K,WAAW+K,IACQhK,EAAWA,EAAYgK,EAAW/J,EAAWA,EAAW+J,EAW/E,OAVH7J,IAAc8J,IAChB9J,EAAY8J,EACZf,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,WAEA,MAGJuM,KAAAA,oBAAsB,SAASjB,GAG3B,OAFPnJ,IAAqBmJ,EAChBtL,KAAAA,UACE,MAGJA,KAAAA,QAAU,WAkCTwS,IAAAA,EACAkB,EAASC,EAlCRpU,IACHtiB,GAAK,CACHqqB,OAAO,EACPE,YAAY,EACZE,KAAK,EACLI,SAAS,EACTE,YAAY,EACZ8N,aAAa,IAKjB3S,EAAQiL,UAAU,EAAG,EAAGjL,EAAQtS,OAAOnI,MAAOya,EAAQtS,OAAOlI,QAGzDwY,GACFgC,EAAQ3a,UAAUud,GAAa,EAAG,GAIhC1E,GACF8B,EAAQ3a,UAAUgW,GAAkB,EAAG,GAIrCmD,GA1iCY,SAAS9a,EAAK2G,EAAOoP,GAoBjCgX,IAAAA,EACAC,EACAC,EArBJjtB,EAAI2J,OACJ3J,EAAI6W,UAAY,QAChB7W,EAAI8W,aAAe,SACnB9W,EAAIgJ,YAAcyF,EAAS9R,UAC3BqD,EAAImF,UAAYsJ,EAAS9R,UAErB8R,IAAaoM,EAAS5L,SAAAA,UAAYR,IAAaoM,EAAS3L,SAAAA,iBAC1DlP,EAAIsU,YAAc,OACdyB,GACF/V,EAAIuU,cAA6B,KAAbhL,EACpBvJ,EAAIwU,cAA6B,KAAbjL,EACpBvJ,EAAIyU,WAA0B,KAAblL,IAEjBvJ,EAAIuU,cAA8B,KAAd/K,EACpBxJ,EAAIwU,cAA8B,KAAdhL,EACpBxJ,EAAIyU,WAA2B,KAAdjL,IASnBxJ,EAAI+W,KADFiE,EACSuD,EAEAhH,EAGTxB,GACFgX,GAAYxjB,EAA2B,QAAbA,GAA0B,EAAI,EAAiB,QAAbA,EAAwB,EACpFyjB,EAAyB,IAAdxjB,EAAqB,GAAmB,KAAdA,EAAsB,GAAK,EAChEyjB,EAA4B,GAAb1jB,EAAmB,IAElCwjB,EAAyB,KAAbxjB,EAAmC,IAAbA,EAAoB,EACtDyjB,EAA0B,IAAdxjB,EAAsB,GAAmB,IAAdA,EAAqB,GAAK,EACjEyjB,EAA6B,IAAdzjB,EAAqB,GAGtCxJ,EAAIgX,SAASrQ,EAAM5C,QAAQgX,GAAcgS,EAAUC,EAAUC,GAE7DjtB,EAAI6J,UAigCFsW,CAAY7D,EAAS3V,EAAOoP,IAI1BoF,GACFmB,EAAQ3a,UAAUkT,GAAWqJ,EAASC,GAKpC5C,IACExF,IACF4V,EAAyB,QAAdniB,EAAwC,QAAdA,GAA2B8T,GAAmBvD,IAAaC,EAAWD,GAC3G8S,EAAuB,IAAbtjB,EAAoBsW,GAAuBhe,MACrDirB,EAAUnB,EAAW9L,GAAuB/d,OAAS,IAErD6pB,GAA0B,QAAbpiB,EAAuC,OAAbA,IAA2B+T,GAAmBvD,IAAaC,EAAWD,GAC7G8S,EAAuB,QAAbtjB,EAAwBsW,GAAuB/d,OAAS,EAAI6pB,EACtEmB,EAAwB,IAAdtjB,GAEZ8S,EAAQ3a,UAAUke,GAAwBgN,EAASC,IAIjDtR,IACEzF,IACF4V,EAAyB,QAAdniB,EAAwC,QAAdA,GAA2B+T,GAAmBxD,IAAaC,EAAWD,GAC3G8S,EAAuB,IAAbtjB,EAAoBwW,GAAuBle,MACrDirB,EAAUnB,EAAW5L,GAAuBje,OAAS,IAErD6pB,GAA0B,QAAbpiB,EAAuC,OAAbA,IAA2BgU,GAAmBxD,IAAaC,EAAWD,GAC7G8S,EAAuB,QAAbtjB,EAAwBwW,GAAuBje,OAAS,EAAI6pB,EACtEmB,EAAwB,IAAdtjB,GAEZ8S,EAAQ3a,UAAUoe,GAAwB8M,EAASC,IAGrDxQ,EAAQ3S,OAroBM,SAAS3J,EAAKuJ,EAAYC,GACpC0jB,IAAAA,EAGAE,EAGAO,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAxE,EACAC,EACArnB,EAdAlG,EAAa6P,EAAgB7P,WAiB7B2Z,IAEFmX,EAAoB,OAAd1jB,EAEN4jB,EADuB,QAAd5jB,EACW0jB,EAGpBS,EAAwB,EACxBC,EAAwBV,EACxBW,EAAuB,EACvBC,EAAuBZ,EAAiB,MAAXE,IAK7BA,GAFAF,EAAmB,QAAb3jB,GACgB,OAAbA,EAMTskB,GAFAF,EAAqC,IAAbpkB,GAEkC,MAAX6jB,EAC/CU,EAFAF,EAAsC,QAAdpkB,GAKtBzD,IAAAA,EAAUkG,IAAoBsO,EAAgBnM,gBAAAA,QAChDnC,IAAoBsO,EAAgBpM,gBAAAA,eACpClC,IAAoBsO,EAAgBlM,gBAAAA,WACpCpC,IAAoBsO,EAAgBhM,gBAAAA,mBACpCtC,IAAoBsO,EAAgB/L,gBAAAA,OAAU,GAAM,EAElD+f,EAA+BvuB,EAAI2I,qBAAqBglB,EAAuBC,EAAuBC,EAAsBC,GAChI1xB,EAAWkD,SAAS,QAAWyG,GAC/BwoB,EAA6B3lB,aAAa,EAAGxM,EAAWmD,gBACxDnD,EAAWkD,SAAS,QAAWyG,GAC/BwoB,EAA6B3lB,aAAa,IAAMxM,EAAWmD,gBAC3DnD,EAAWkD,SAAS,QAAWyG,GAC/BwoB,EAA6B3lB,aAAa,IAAMxM,EAAWmD,gBAC3DnD,EAAWkD,SAAS,QAAWyG,GAC/BwoB,EAA6B3lB,aAAa,EAAGxM,EAAWmD,gBACxDS,EAAImF,UAAYopB,EAEZxY,GACF/V,EAAI4B,SAAsB,QAAb2H,EAAuB2jB,EAAkB,IAAb3jB,EAA8B,MAAX6jB,GAE5DptB,EAAI4B,SAAS+rB,EAAuBC,EAAkC,MAAXR,EAAgC,QAAd5jB,GAG3EuM,IAEFgY,EAAoB,EACpBC,EAAoBd,EACpBe,EAAmB,EACnBC,EAAmBhB,EAAiB,MAAXE,IAGzBW,EAAoBJ,EACpBK,EAAoB,EACpBC,EAAmBJ,EACnBK,EAAmB,GAGjBM,IAmBAc,EACAC,EACAC,EACAC,EAGAC,EACAC,EAmBAC,EAAYC,EACZpG,EA9CA+E,EAAsBxuB,EAAI2I,qBAAqBolB,EAAmBC,EAAmBC,EAAkBC,GAC3G9xB,EAAWkD,SAAS,QAAWyG,GAC/ByoB,EAAoB5lB,aAAa,EAAGxM,EAAWmD,gBAC/CnD,EAAWkD,SAAS,QAAWyG,GAC/ByoB,EAAoB5lB,aAAa,IAAMxM,EAAWmD,gBAClDnD,EAAWkD,SAAS,QAAWyG,GAC/ByoB,EAAoB5lB,aAAa,IAAMxM,EAAWmD,gBAClDnD,EAAWkD,SAAS,GAAMyG,GAC1ByoB,EAAoB5lB,aAAa,EAAGxM,EAAWmD,gBAC/CS,EAAImF,UAAYqpB,EACZzY,IACF/V,EAAI4B,SAAsB,QAAb2H,EAAuB2jB,EAAkB,QAAb3jB,EAAkC,MAAX6jB,GAChEptB,EAAI4B,SAAsB,QAAb2H,EAAuB2jB,EAAkB,QAAb3jB,EAAkC,MAAX6jB,KAEhEptB,EAAI4B,SAAsB,IAAb2H,EAAiC,QAAdC,EAAmC,MAAX4jB,EAAgC,QAAd5jB,GAC1ExJ,EAAI4B,SAAsB,IAAb2H,EAAiC,QAAdC,EAAmC,MAAX4jB,EAAgC,QAAd5jB,IAYxEuM,IAEFuZ,EAAoB,IAAb/lB,EAEPimB,EAAoB,QAAbjmB,EADPgmB,EAAqB,QAAd/lB,EAEPimB,EAAqB,QAAdjmB,IAKP8lB,EAAoB,QAAb/lB,EAEPimB,EAAoB,QAAbjmB,EADPgmB,EAAqB,IAAd/lB,EAEPimB,EAAqB,QAAdjmB,GAOLogB,IACAt0B,EADAs0B,EAAqBlC,EAGrB3R,GAAAA,GAAU,CAGP8Z,IADLF,EAAevC,EACVyC,EAAa,EAAGA,GAAcF,EAAcE,GAAcJ,EAAO,EACpEzvB,EAAI2M,UAAU,GAAIkjB,GAClB7vB,EAAI2B,UAAUmtB,GAAmBQ,EAAMC,GACvCvvB,EAAI2M,UAAU,EAAGkjB,GAIdA,IADLH,GAAe/oB,EAAQoT,IAAaC,EAAWD,GAAaqT,EACvDyC,EAAa,EAAGA,GAAcH,EAAYG,GAAcJ,EAAO,EAAG,CAIjExH,GAFJwB,EAAiB/B,EAEbO,GAEFyB,EAAe3P,EAAY8V,EAAazC,GAAapT,EAAWD,GAChE4P,EAAYhC,EAAc9kB,SAAW8kB,EAAc/kB,WACnDN,GAAYonB,EAAe3P,GAAY4P,EACvCrnB,EAAWpK,KAAKgO,IAAIhO,KAAK+N,IAAI3D,EAAU,GAAI,GAC3CmnB,GAAiB,EAAe9B,EAAAA,gBAAAA,EAActlB,WAAWC,GAAU/C,qBAC9D,GAAIyoB,GACJ1yB,IAAAA,EAAI,EAAGA,EAAIu5B,GAAcp5B,OAAQH,IAChCu6B,GAAAA,GAAchB,GAAcv5B,GAAGmD,OAASo3B,EAAahB,GAAcv5B,GAAGuC,KAAM,CAC9E4xB,EAAiBoF,GAAcv5B,GAAG4N,MAClC,MAKF0mB,EAAmB9sB,OAAO2C,gBAAkBgqB,EAAe3sB,OAAO2C,gBACpEopB,GAAcH,GAAkBe,GAChCG,EAAqBH,GAGvBzpB,EAAI2M,UAAU,GAAIkjB,GAClB7vB,EAAI2B,UAAU8mB,GAAiB6G,EAAMC,GACrCvvB,EAAI2M,UAAU,EAAGkjB,QAEd,CAGAD,IADLD,EAAevC,EACVwC,GAAeJ,EAAO,EAAII,GAAcD,EAAcC,GAAcJ,EAAO,EAC9ExvB,EAAI2M,UAAUijB,EAAY,GAC1B5vB,EAAI2B,UAAUmtB,GAAmBQ,EAAMC,GACvCvvB,EAAI2M,WAAWijB,EAAY,GAIxBA,IADLF,GAAe/oB,EAAQoT,IAAaC,EAAWD,GAAaqT,EACvDwC,GAAeJ,EAAO,EAAII,GAAcF,EAAYE,GAAcJ,EAAO,EAAG,CAG3EvH,GADJwB,EAAiB/B,EACbO,GAEFyB,EAAe3P,EAAY6V,EAAaxC,GAAapT,EAAWD,GAChE4P,EAAYhC,EAAc9kB,SAAW8kB,EAAc/kB,WACnDN,GAAYonB,EAAe3P,GAAY4P,EACvCrnB,EAAWpK,KAAKgO,IAAIhO,KAAK+N,IAAI3D,EAAU,GAAI,GAC3CmnB,GAAiB,EAAe9B,EAAAA,gBAAAA,EAActlB,WAAWC,GAAU/C,qBAC9D,GAAIyoB,GACJ1yB,IAAAA,EAAI,EAAGA,EAAIu5B,GAAcp5B,OAAQH,IAChCs6B,GAAAA,GAAcf,GAAcv5B,GAAGmD,OAASm3B,EAAaf,GAAcv5B,GAAGuC,KAAM,CAC9E4xB,EAAiBoF,GAAcv5B,GAAG4N,MAClC,MAKF0mB,EAAmB9sB,OAAO2C,gBAAkBgqB,EAAe3sB,OAAO2C,gBACpEopB,GAAcH,GAAkBe,GAChCG,EAAqBH,GAEvBzpB,EAAI2M,UAAUijB,EAAY,GAC1B5vB,EAAI2B,UAAU8mB,GAAiB6G,EAAMC,GACrCvvB,EAAI2M,WAAWijB,EAAY,KAyb/BjH,CAAUrM,EAAS/S,EAAYC,GAC/B8S,EAAQzS,UAGJ6R,GACFY,EAAQ3a,UAAUkW,GAAkB,EAAG,GAGzCc,IAAa,GAIVQ,KAAAA,UAEE,MAGMyV,EAAAA,EAAAA,QAAAA,QAAAA;;AC/+BAkB,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EArVf,IAAA,EAAA,EAAA,QAAA,+BACA,EAAA,QAAA,WAYA,EAAA,QAAA,iBAwUeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAvTf,IAAIA,EAAgB,SAAS9lB,EAAQkN,GAE/BrV,IAiBAkuB,EAjBAluB,OAASxJ,KADb6e,EAAaA,GAAc,IACWrV,MAAQ,EAAIqV,EAAWrV,MAC3DC,OAAUzJ,IAAc6e,EAAWpV,OAAS,EAAIoV,EAAWpV,OAC3D2M,OAAYpW,IAAc6e,EAAWzI,SAAWoM,EAAS5L,SAAAA,SAAWiI,EAAWzI,SAC/EsM,OAAe1iB,IAAc6e,EAAW6D,YAAc,EAAI7D,EAAW6D,YACrEpE,OAActe,IAAc6e,EAAWP,WAAa,GAAKO,EAAWP,WACpEqZ,OAAqB33B,IAAc6e,EAAW8Y,mBAA4B9Y,EAAW8Y,kBACrFC,OAAgB53B,IAAc6e,EAAW+Y,aAAe,GAAK/Y,EAAW+Y,aACxEC,OAAuB73B,IAAc6e,EAAWgZ,qBAA8BhZ,EAAWgZ,oBACzFlV,OAAe3iB,IAAc6e,EAAW8D,aAAsB9D,EAAW8D,YACzEmV,OAAiB93B,IAAc6e,EAAWiZ,eAAuBjZ,EAAWiZ,cAC5ExpB,OAAStO,IAAc6e,EAAWvQ,MAAQ,EAAIuQ,EAAWvQ,MACzDypB,OAAgB/3B,IAAc6e,EAAWkZ,cAAuBlZ,EAAWkZ,aAC3EC,OAAch4B,IAAc6e,EAAWmZ,YAAqBnZ,EAAWmZ,WACvErsB,OAAW3L,IAAc6e,EAAWlT,QAAU,KAAOkT,EAAWlT,QAE9DssB,GAAY,EACZC,EAAU,EAEV5X,GAAa,EAEb0E,EAAO,KAGPf,GAAU,EAAiBtS,EAAAA,kBAAAA,GAEjB,IAAVnI,IACFA,EAAQya,EAAQtS,OAAOnI,OAEV,IAAXC,IACFA,EAASwa,EAAQtS,OAAOlI,QAI1Bwa,EAAQtS,OAAOnI,MAAQA,EACvBya,EAAQtS,OAAOlI,OAASA,EAEpByH,IAYA2L,EAZA3L,EAAa1H,EACb2H,EAAc1H,EACd0uB,EAAY,EAEZC,EAAav4B,KAAKiM,MAAMqF,EAAc,KACtC+N,EAAUkZ,EAAa,MAAQryB,EAAnC,YACImgB,EAAUkS,EAAa,MAAQtyB,EAAnC,YAEIua,GAAc,EAKdgY,EAAgB,GAChBC,EAAyB,GA2EzBC,EAAwB,SAAS/uB,EAAOC,EAAQoB,EAAOuL,GACrDoiB,IAAAA,GAAmB,EAAahvB,EAAAA,cAAAA,EAAOC,GACvCqT,EAAS0b,EAAiBpvB,WAAW,MAEzC0T,EAAOxL,OACHmnB,IAEA1b,EAAKvT,EACLwT,EAAKvT,EACLwT,EAA+B,KAA1Bpd,KAAK+N,IAAIpE,EAAOC,GAErBivB,EAAgB5b,EAAOxM,qBAAqB,EALvC,EAK8C,EAL9C,EAKsD0M,GAE/D0b,EAAcnoB,aAAa,EAAG,WAC9BmoB,EAAcnoB,aAAa,IAAM,WACjCmoB,EAAcnoB,aAAa,IAAM,WACjCmoB,EAAcnoB,aAAa,EAAG,WAC9BuM,EAAOhQ,UAAY4rB,GAEF5b,EAAAA,EAAAA,kBAAAA,EAdR,EACA,EAawBC,EAAIC,EAAIC,GAEzCH,EAAO9P,OACP8P,EAAOtL,UAEPsL,EAAOxL,OAEHqnB,IAAAA,GAAM,EAAe9tB,EAAAA,gBAAAA,GACrB+tB,GAAM,EAASD,EAAAA,UAAAA,EAAI,GAAIA,EAAI,GAAIA,EAAI,IAEnCE,GAAW,EAAeziB,EAAAA,gBAAAA,EAASnS,oBACnC60B,GAAW,EAASD,EAAAA,UAAAA,EAAS,GAAIA,EAAS,GAAIA,EAAS,IACvDE,GAAe,EAAe3iB,EAAAA,gBAAAA,EAASlS,wBACvC80B,GAAe,EAASD,EAAAA,UAAAA,EAAa,GAAIA,EAAa,GAAIA,EAAa,IACvEE,GAAe,EAAe7iB,EAAAA,gBAAAA,EAASjS,wBACvC+0B,GAAe,EAASD,EAAAA,UAAAA,EAAa,GAAIA,EAAa,GAAIA,EAAa,IACvEE,GAAe,EAAe/iB,EAAAA,gBAAAA,EAAShS,wBACvCg1B,GAAe,EAASD,EAAAA,UAAAA,EAAa,GAAIA,EAAa,GAAIA,EAAa,IACvEE,GAAU,EAAejjB,EAAAA,gBAAAA,EAAS/R,mBAClCi1B,GAAU,EAASD,EAAAA,UAAAA,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,IAEnDE,GAAa,EAASX,EAAAA,UAAAA,EAAI,GAAIA,EAAI,GAAIE,EAAS,GAAK,KACpDU,GAAiB,EAASZ,EAAAA,UAAAA,EAAI,GAAIA,EAAI,GAAII,EAAa,GAAK,KAC5DS,GAAiB,EAASb,EAAAA,UAAAA,EAAI,GAAIA,EAAI,GAAIM,EAAa,GAAK,KAC5DQ,GAAiB,EAASd,EAAAA,UAAAA,EAAI,GAAIA,EAAI,GAAIQ,EAAa,GAAK,KAC5DO,GAAY,EAASf,EAAAA,UAAAA,EAAI,GAAIA,EAAI,GAAIU,EAAQ,GAAK,KAIlDpc,EAAK1T,EAAQ,EACb2T,EAAK1T,EAAS,EACd2T,EAAKH,EAAK,EACV2c,EAAgB9c,EAAOxM,qBAAqB,EAJvC,EAI8C,EAJ9C,EAIsD6M,GAaxDqb,OAZPoB,EAAcrpB,aAAa,EAAG,OAASgpB,EAAW,GAAK,KAAOA,EAAW,GAAK,KAAOA,EAAW,GAAK,KACrGK,EAAcrpB,aAAa,IAAM,OAASipB,EAAe,GAAK,IAAMA,EAAe,GAAK,IAAMA,EAAe,GAAK,KAClHI,EAAcrpB,aAAa,IAAM,OAASkpB,EAAe,GAAK,IAAMA,EAAe,GAAK,IAAMA,EAAe,GAAK,KAClHG,EAAcrpB,aAAa,GAAK,OAASmpB,EAAe,GAAK,IAAMA,EAAe,GAAK,IAAMA,EAAe,GAAK,KACjHE,EAAcrpB,aAAa,EAAG,OAASopB,EAAU,GAAK,IAAMA,EAAU,GAAK,IAAMA,EAAU,GAAK,KAChG7c,EAAOhQ,UAAY8sB,GAEF9c,EAAAA,EAAAA,kBAAAA,EAbR,EACA,EAYwBI,EAAIC,EAAIC,GAEzCN,EAAO9P,OACP8P,EAAOtL,UAEAgnB,GAULqB,EAAU,SAAVA,IACE5B,GACEC,EAAUhnB,IACZgnB,GAAWC,GAEbD,GAAW,EACXR,EAAc92B,WAAWi5B,EAAS,KAElC3B,EAAU,EAEP5X,IACHA,GAAa,GACI0E,EAAAA,EAAAA,kBAAAA,EAAKlE,WAKtB/iB,EAAO,WACLurB,IAAAA,EAzBsCwQ,EACtCC,EACAC,EACAC,EA4BA,GALJ5Z,GAAc,EAGdxD,GAAY,EAAyBrT,EAAAA,SAAAA,EAAOC,EAAQ2M,GAEhD,OAASzK,GAAW,EAAIA,EAAQvO,OAC7BksB,IAAAA,EAAe,EAAGA,EAAe3d,EAAQvO,OAAQksB,IACpD+O,EAAc/O,GAAgBiP,EAAsB/uB,EAAOC,EAAQkC,EAAQ2d,GAAcze,MAAOuL,GAChGkiB,EAAuBhP,IAlCewQ,EAkC8BnuB,EAAQ2d,GAAcze,MAjC1FkvB,OAAAA,EACAC,OAAAA,EACAC,OAAAA,EAFAF,GAAa,EAAeD,EAAAA,gBAAAA,GAC5BE,GAAa,EAASD,EAAAA,UAAAA,EAAW,GAAIA,EAAW,GAAIA,EAAW,IAE5D,QADHE,GAAuB,EAASD,EAAAA,UAAAA,EAAW,GAAI,IAAM,MACpB,GAAK,KAAOC,EAAqB,GAAK,KAAOA,EAAqB,GAAK,MA8GvG,OAzEFjZ,KAAAA,SAAW,SAAS0K,GAKhB,OAJHpd,IAAUod,IACZpd,EAAQod,EACH5K,KAAAA,WAEA,MAGJ8N,KAAAA,YAAc,SAASC,GAInB,OAHPzY,EAAWyY,EACX9wB,IACK+iB,KAAAA,UACE,MAGJqM,KAAAA,WAAa,SAAS+M,GAOlB,OANPvuB,EAAUuuB,EACVn8B,IAIK+iB,KAAAA,UACE,MAGJqZ,KAAAA,aAAe,SAASC,GACvBA,GAAAA,EAAQ,CACNnC,GAAAA,EACF,OAEAA,EAAYmC,EACZP,SAGF5B,EAAYmC,EAEP,OAAA,MAGJtZ,KAAAA,QAAU,WACRT,GACHtiB,IAIFkmB,EAAQiL,UAAU,EAAG,EAAGjL,EAAQtS,OAAOnI,MAAOya,EAAQtS,OAAOlI,QAEzD4wB,IAEA/Q,EAFA+Q,EAAsBxd,EACtByd,EAAelkB,EAAS9R,UAGxB,GAAA,OAASqH,GAAW,EAAIA,EAAQvO,OAC7BksB,IAAAA,EAAe,EAAGA,EAAe3d,EAAQvO,OAAQksB,IAChDhb,GAAAA,GAAS3C,EAAQ2d,GAAclpB,OAASkO,GAAS3C,EAAQ2d,GAAc9pB,KAAM,CAC/E66B,EAAsBhC,EAAc/O,GACpCgR,EAAehC,EAAuBhP,GACtC,MAMNrF,EAAQ3a,UAAU+wB,EAAqB,EAAG,GAlP1B,SAAS/rB,EAAOzD,GAsB5BitB,GArBJ7T,EAAQ3S,OACR2S,EAAQzF,UAAY,QAEpByF,EAAQtT,YAAc9F,EACtBoZ,EAAQnX,UAAYjC,EAEpBoZ,EAAQ7X,YACR6X,EAAQlX,KAAK,EAAG,EAAGmE,EAAa,EAAGC,GACnC8S,EAAQzX,YACRyX,EAAQ1S,OAEH6E,IAAaoM,EAAS5L,SAAAA,UAAYR,IAAaoM,EAAS3L,SAAAA,gBAC/C,OAAZlL,IACAsY,EAAQhI,YAAc,OACtBgI,EAAQ/H,cAA8B,KAAd/K,EACxB8S,EAAQ9H,cAA8B,KAAdhL,EACxB8S,EAAQ7H,WAA2B,KAAdjL,GAGvB8S,EAAQvF,KAAOiE,EAAcuD,EAAUhH,EAEnC4Y,EAAe,CAEbnG,IAAAA,EAAY,EAChBwG,EAAY,EACRR,IACF1T,EAAQvF,KAAO7e,KAAKiM,MAAMqF,EAAc,KAAO,MAAQpL,EAAvD,YACA4rB,EAAY1N,EAAQ2N,YAAYtT,GAAY9U,OAE9Cya,EAAQvF,KAAOiE,EAAcuD,EAAUhH,EACnCqb,IAAAA,EAAUjsB,EAAM5C,QAAQgX,GAC5ByV,EAAYlU,EAAQ2N,YAAY2I,GAAS/wB,MACrCgxB,IAAAA,EAAO,IACP3C,IACF2C,EAAO,KAGTvW,EAAQtF,SAAS4b,EAASrpB,EAAaygB,EAAY,EAAIuG,EAAuB,GAAd/mB,EAAoBinB,EAAaoC,GAE7F7C,IACF1T,EAAQvF,KAAO7e,KAAKiM,MAAMqF,EAAc,KAAO,MAAQpL,EAAvD,YACAke,EAAQtF,SAASL,EAAYpN,EAAa,EAAIgnB,EAAuB,GAAd/mB,EAAoBinB,EAAaoC,IAEtF3C,IACF5T,EAAQzF,UAAY,SACpByF,EAAQvF,KAAO7e,KAAKiM,MAAMqF,EAAc,KAAO,MAAQpL,EAAvD,YACAke,EAAQtF,SAASiZ,EAAc1mB,EAAa,EAAiB,GAAdC,SAIjDgnB,EAAYlU,EAAQ2N,YAAYtjB,GAAO9E,MACnCuuB,GAAiBC,GAAcG,EAAYjnB,EAAa,EACrD+mB,IAEDC,EADEC,EAAyB,GAAbjnB,EACJA,EAAainB,EAAyB,GAAbjnB,EAEzB,EAEZ+mB,GAAY,EACZwC,aAAa/C,GACbA,EAAc92B,WAAWi5B,EAAS,MAE3B7B,GAAcG,GAAajnB,EAAa,IACjDgnB,EAAU,EACVD,GAAY,GAEdhU,EAAQtF,SAASrQ,EAAO4C,EAAa,EAAIgnB,EAAuB,GAAd/mB,EAAiC,IAAbinB,GAExEnU,EAAQzS,UAgLRsW,CAAYxZ,EAAOgsB,GAEnBha,GAAa,GAIVQ,KAAAA,UAEE,MAGM2W,EAAAA,EAAAA,QAAAA,QAAAA;;AC9HAiD,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAvNf,IAAA,EAAA,EAAA,QAAA,+BACA,EAAA,QAAA,WAMA,EAAA,QAAA,iBAgNeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GA/Lf,IAAIA,EAAe,SAAS/oB,EAAQkN,GAE9BrV,IAAAA,OAASxJ,KADb6e,EAAaA,GAAc,IACWrV,MAAQ,EAAIqV,EAAWrV,MAC3DC,OAAUzJ,IAAc6e,EAAWpV,OAAS,EAAIoV,EAAWpV,OAC3D2M,OAAYpW,IAAc6e,EAAWzI,SAAWoM,EAAS5L,SAAAA,SAAWiI,EAAWzI,SAC/EsM,OAAe1iB,IAAc6e,EAAW6D,YAAc,EAAI7D,EAAW6D,YACrEkV,OAAgB53B,IAAc6e,EAAW+Y,aAAe,GAAK/Y,EAAW+Y,aACxEC,OAAuB73B,IAAc6e,EAAWgZ,qBAA8BhZ,EAAWgZ,oBACzF8C,OAAgB36B,IAAc6e,EAAW8b,aAAe,GAAK9b,EAAW8b,aACxEC,OAAuB56B,IAAc6e,EAAW+b,qBAA8B/b,EAAW+b,oBACzFC,OAAgB76B,IAAc6e,EAAWgc,cAAsBhc,EAAWgc,aAC1Evc,OAActe,IAAc6e,EAAWP,WAAa,GAAKO,EAAWP,WACpEqZ,OAAqB33B,IAAc6e,EAAW8Y,mBAA4B9Y,EAAW8Y,kBACrFhV,OAAe3iB,IAAc6e,EAAW8D,aAAsB9D,EAAW8D,YACzEmV,OAAiB93B,IAAc6e,EAAWiZ,eAAuBjZ,EAAWiZ,cAC5ExpB,OAAStO,IAAc6e,EAAWvQ,MAAQ,EAAIuQ,EAAWvQ,MACzDwsB,OAAY96B,IAAc6e,EAAWic,SAAW,EAAIjc,EAAWic,SAG7D7W,GAAU,EAAiBtS,EAAAA,kBAAAA,GAEjB,IAAVnI,IACFA,EAAQya,EAAQtS,OAAOnI,OAEV,IAAXC,IACFA,EAASwa,EAAQtS,OAAOlI,QAI1Bwa,EAAQtS,OAAOnI,MAAQA,EACvBya,EAAQtS,OAAOlI,OAASA,EAEpByH,IAYA2L,EAZA3L,EAAa1H,EACb2H,EAAc1H,EAEdyV,EAAUrf,KAAKiM,MAAMqF,EAAc,OAAS,MAAQpL,EAAxD,YACImgB,EAAUrmB,KAAKiM,MAAMqF,EAAc,OAAS,MAAQrL,EAAxD,YACIi1B,EAAal7B,KAAKiM,MAAMqF,EAAc,KAAO,MAAQpL,EAAzD,YACIi1B,EAAan7B,KAAKiM,MAAMqF,EAAc,KAAO,MAAQrL,EAAzD,YAEIua,GAAc,EAgGdtiB,EAAO,WACTsiB,GAAc,EAGdxD,GAAY,EAAyBrT,EAAAA,SAAAA,EAAOC,EAAQ2M,IAgD/C,OA5CF4K,KAAAA,SAAW,SAAS0K,GAQhB,OAPHpd,IAAUod,IACRmP,IACFC,EAAWxsB,GAEbA,EAAQod,EACH5K,KAAAA,WAEA,MAGJma,KAAAA,YAAc,SAASC,GAKnB,OAJHJ,IAAaI,IACfJ,EAAWI,EACNpa,KAAAA,WAEA,MAGJ8N,KAAAA,YAAc,SAASC,GAInB,OAHPzY,EAAWyY,EACX9wB,IACK+iB,KAAAA,UACE,MAGJA,KAAAA,QAAU,WACRT,GACHtiB,IAIFkmB,EAAQiL,UAAU,EAAG,EAAGjL,EAAQtS,OAAOnI,MAAOya,EAAQtS,OAAOlI,QAG7Dwa,EAAQ3a,UAAUuT,EAAW,EAAG,GApIhB,SAASvO,GAcrBwpB,GAbJ7T,EAAQ3S,OACR2S,EAAQzF,UAAY,QACpByF,EAAQxF,aAAe,SACvBwF,EAAQtT,YAAcyF,EAAS9R,UAC/B2f,EAAQnX,UAAYsJ,EAAS9R,UAEzB8R,IAAaoM,EAAS5L,SAAAA,UAAYR,IAAaoM,EAAS3L,SAAAA,iBAC1DoN,EAAQhI,YAAc,OACtBgI,EAAQ/H,cAA8B,KAAd/K,EACxB8S,EAAQ9H,cAA8B,KAAdhL,EACxB8S,EAAQ7H,WAA2B,IAAdjL,GAGnB2mB,EAAe,CAGf7T,EAAQvF,KADNmZ,EACah4B,KAAKiM,MAAMqF,EAAc,GAAK,MAAQpL,EAArD,YAEelG,KAAKiM,MAAMqF,EAAc,KAAO,MAAQpL,EAAvD,YAEE4rB,IAAAA,EAAY,EACZgG,IACEE,GACF5T,EAAQvF,KAAO7e,KAAKiM,MAAMqF,EAAc,GAAK,MAAQpL,EAArD,YACA4rB,EAAY1N,EAAQ2N,YAAYtT,GAAY9U,QAE5Cya,EAAQvF,KAAO7e,KAAKiM,MAAMqF,EAAc,KAAO,MAAQpL,EAAvD,YACA4rB,EAAY1N,EAAQ2N,YAAYtT,GAAY9U,QAGhDya,EAAQvF,KAAOiE,EAAcuD,EAAUhH,EACnCic,IAAAA,EAAY7sB,EAAM5C,QAAQgX,GAC1BmV,EACF5T,EAAQtF,SAASwc,EAAWjqB,EAAaygB,EAAY,EAAiB,GAAdxgB,GAExD8S,EAAQtF,SAASwc,EAAWjqB,EAAaygB,EAAY,EAAiB,IAAdxgB,GAGtDwmB,IACF1T,EAAQvF,KAAO7e,KAAKiM,MAAMqF,EAAc,GAAK,MAAQpL,EAArD,YACAke,EAAQtF,SAASL,EAAYpN,EAAa,EAAiB,IAAdC,IAG3CiqB,IAAAA,EAAeN,EAASpvB,QAAQgX,GAChCkY,IACFQ,EAAeT,EAAeS,GAG9BnX,EAAQvF,KADNiE,EACaqY,EAEXnD,EACah4B,KAAKiM,MAAMqF,EAAc,GAAK,MAAQpL,EAArD,YAEeg1B,EAGnB9W,EAAQzF,UAAY,SAChBqZ,GACF5T,EAAQtF,SAASyc,EAAclqB,EAAa,EAAiB,IAAdC,GAC/C8S,EAAQtF,SAASiZ,EAAc1mB,EAAa,EAAiB,IAAdC,IAE/C8S,EAAQtF,SAASyc,EAAclqB,EAAa,EAAiB,GAAdC,QAG7C0mB,GAEF5T,EAAQvF,KAAO7e,KAAKiM,MAAMqF,EAAc,KAAO,MAAQpL,EAAvD,YACAke,EAAQtF,SAASrQ,EAAO4C,EAAa,EAAiB,IAAdC,GAGxC8S,EAAQvF,KAAO7e,KAAKiM,MAAMqF,EAAc,GAAK,MAAQpL,EAArD,YACAke,EAAQzF,UAAY,SACpByF,EAAQtF,SAASmc,EAAU5pB,EAAa,EAAiB,IAAdC,GAC3C8S,EAAQtF,SAASiZ,EAAc1mB,EAAa,EAAiB,IAAdC,KAG/C8S,EAAQvF,KAAO7e,KAAKiM,MAAMqF,EAAc,KAAO,MAAQpL,EAAvD,YACAke,EAAQtF,SAASrQ,EAAO4C,EAAa,EAAiB,IAAdC,GAExC8S,EAAQvF,KAAOqc,EACf9W,EAAQzF,UAAY,SACpByF,EAAQtF,SAASmc,EAAU5pB,EAAa,EAAiB,GAAdC,IAG/C8S,EAAQzS,UAkDRsW,CAAYxZ,IAITwS,KAAAA,UAEE,MAGM4Z,EAAAA,EAAAA,QAAAA,QAAAA;;ACkeAW,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA1rBf,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,2BACA,EAAA,EAAA,QAAA,gCACA,EAAA,EAAA,QAAA,gCACA,EAAA,QAAA,WAWA,EAAA,QAAA,iBA2qBeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GA1pBf,IAAIA,EAAQ,SAAS1pB,EAAQkN,GAEvBhP,IAuBAkP,EAvBAlP,OAAQ7P,KADZ6e,EAAaA,GAAc,IACUhP,KAAO,EAAIgP,EAAWhP,KACzDyrB,OAAmBt7B,IAAc6e,EAAWyc,iBAA0Bzc,EAAWyc,gBACjFC,OAAwBv7B,IAAc6e,EAAW0c,sBAA+B1c,EAAW0c,qBAC3FtqB,OAAejR,IAAc6e,EAAW5N,YAAc+Q,EAAY1I,YAAAA,MAAQuF,EAAW5N,YACrFgR,OAAgBjiB,IAAc6e,EAAWoD,cAAsBpD,EAAWoD,aAC1ErO,OAAmB5T,IAAc6e,EAAWjL,gBAAkBsO,EAAgBhN,gBAAAA,UAAY2J,EAAWjL,gBACrGuO,OAAqBniB,IAAc6e,EAAWsD,mBAA2BtD,EAAWsD,kBACpFE,OAAgBriB,IAAc6e,EAAWwD,aAAerf,EAASyS,MAAAA,IAAMoJ,EAAWwD,aAClF3H,OAAkB1a,IAAc6e,EAAWnE,eAAiB0I,EAAe/K,eAAAA,MAAQwG,EAAWnE,eAC9F2I,OAAqBrjB,IAAc6e,EAAWwE,mBAA2BxE,EAAWwE,kBACpFmY,OAAcx7B,IAAc6e,EAAW2c,YAAqB3c,EAAW2c,WAGrEvX,GAAU,EAAiBtS,EAAAA,kBAAAA,GAElB,IAAT9B,IACFA,EAAOhQ,KAAK+N,IAAIqW,EAAQtS,OAAOnI,MAAOya,EAAQtS,OAAOlI,SAIvDwa,EAAQtS,OAAOnI,MAAQqG,EACvBoU,EAAQtS,OAAOlI,OAASoG,EAGpByQ,IAAAA,GAAa,EAEbhS,EAAQ,EACRmtB,EAAY,EACZC,EAAe,EACfpX,EAAY7e,EAAS,OAAA,IACrBuC,EAAQ,KAAKsG,MACbyR,EAAWub,EAAkB,EAAI,EAEjCpqB,EAAarB,EACbsB,EAActB,EAEdjI,EAAUsJ,EAAa,EACvBrJ,EAAUsJ,EAAc,EAExBkP,GAAc,EAIdf,GAAmB,EAAazP,EAAAA,cAAAA,EAAMA,GACtC0P,EAAoBD,EAAiBlW,WAAW,MAGhDwe,GAAgB,EAAa/X,EAAAA,cAAAA,EAAMA,GACnCgY,EAAiBD,EAAcxe,WAAW,MAG1CuyB,GAAoB,EAAa9rB,EAAAA,cAAAA,EAAMA,GACvC+rB,EAAqBD,EAAkBvyB,WAAW,MAGlDoW,GAAmB,EAAa3P,EAAAA,cAAAA,EAAMA,GACtC4P,EAAoBD,EAAiBpW,WAAW,MAsUhDrL,EAAO,WAvJW,IAAS4J,EAwJ7B0Y,GAAc,EAEV4B,IACmB1C,EAAAA,EAAAA,SAAAA,EAAmBtO,EAAarJ,EAASC,EAASqJ,EAAYC,GAGjFgR,KACwB5C,EAAAA,EAAAA,SAAAA,EAAmB3L,EAAiBhM,EAASC,EAASqJ,EAAYC,GA3UvE,SAASxJ,GAC5BuX,IAAAA,EAAS2c,EAAS5+B,EASjBA,IAPL0K,EAAI6W,UAAY,SAChB7W,EAAI8W,aAAe,SACnB9W,EAAI2J,OACJ3J,EAAIgJ,YAAciD,EAAgB7P,WAAWmD,eAC7CS,EAAImF,UAAY8G,EAAgB7P,WAAWmD,eAC3CS,EAAI2M,UAAU1M,EAASC,GAElB5K,EAAI,EAAG,IAAMA,EAAGA,IAAK,CA+ChBA,OA9CR0K,EAAIgJ,YAAciD,EAAgB7P,WAAWmD,eAC7CS,EAAI6I,UAAY,GAChB7I,EAAIyE,YACJzE,EAAI0E,OAAoB,IAAb6E,EAAmB,GAC9BvJ,EAAI2E,OAAoB,IAAb4E,EAAmB,GAC9BvJ,EAAI6E,YACJ7E,EAAIiJ,SAEA,GAAM3T,EAAI,IACZ0K,EAAIgJ,YAAciD,EAAgB7P,WAAWmD,eAC7CS,EAAI6I,UAAY,EAChB7I,EAAIyE,YACJzE,EAAI0E,OAAoB,IAAb6E,EAAmB,GAC9BvJ,EAAI2E,OAAoB,IAAb4E,EAAmB,GAC9BvJ,EAAI6E,YACJ7E,EAAIiJ,UAGF,GAAM3T,EAAI,KACZ0K,EAAIgJ,YAAciD,EAAgB7P,WAAWmD,eAC7CS,EAAI6I,UAAY,EAChB7I,EAAIyE,YACJzE,EAAI0E,OAAoB,IAAb6E,EAAmB,GAC9BvJ,EAAI2E,OAAoB,IAAb4E,EAAmB,GAC9BvJ,EAAI6E,YACJ7E,EAAIiJ,UAIF,IAAMM,IAER2qB,EAAU,SADV3c,EAAU,QAAUA,IAGlB,KAAOhO,IAET2qB,EAAU,SADV3c,EAAU,QAAUA,IAGlB,KAAOhO,IAET2qB,EAAU,QADV3c,EAAU,QAAUA,IAGlB,KAAOhO,IAET2qB,EAAU,QADV3c,EAAU,OAASA,IAGrBvX,EAAI2J,OACIrU,GACD,KAAA,EACH0K,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAQtX,EAAIyI,EAAL,WAAmBF,EAA9B,SACAmC,EAAI+W,KAAOQ,EACXvX,EAAIgX,SAAS,KAAW,EAAG,EAAGzN,GAC9BvJ,EAAI4M,QAAStX,EAAIyI,EAAN,WAAoBF,EAA/B,SACAmC,EAAI2M,UAAwB,KAAbpD,EAAmB,GAElCvJ,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAQtX,EAAIyI,EAAL,WAAmBF,EAA9B,SACAmC,EAAI+W,KAAOmd,EACXl0B,EAAIgX,SAAS,KAAM,EAAG,EAAGzN,GACzB,MACG,KAAA,GACHvJ,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAQtX,EAAIyI,EAAL,WAAmB,IAAO3D,EAArC,IACA4F,EAAI+W,KAAOQ,EACXvX,EAAIgX,SAAS,MAAY,EAAG,EAAGzN,GAC/BvJ,EAAI4M,QAAStX,EAAIyI,EAAN,WAAoB,IAAO3D,EAAtC,IACA4F,EAAI2M,UAAwB,KAAbpD,EAAmB,GAElCvJ,EAAI2M,UAAuB,IAAbpD,EAAgC,KAAbA,GACjCvJ,EAAI4M,OAAQtX,EAAIyI,EAAL,WAAmB,IAAO3D,EAArC,IACA4F,EAAI+W,KAAOmd,EACXl0B,EAAIgX,SAAS,OAAQ,EAAG,EAAGzN,GAC3B,MACG,KAAA,GACHvJ,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAQtX,EAAIyI,EAAhB,YACAiC,EAAI+W,KAAOQ,EACXvX,EAAIgX,SAAS,MAAY,EAAG,EAAGzN,GAC/BvJ,EAAI4M,QAAStX,EAAIyI,EAAN,YACXiC,EAAI2M,UAAwB,KAAbpD,EAAmB,GAElCvJ,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAQtX,EAAIyI,EAAhB,YACAiC,EAAI+W,KAAOmd,EACXl0B,EAAIgX,SAAS,IAAU,EAAG,EAAGzN,GAC7B,MACG,KAAA,IACHvJ,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAQtX,EAAIyI,EAAL,WAAmB,IAAO3D,EAArC,IACA4F,EAAI+W,KAAOQ,EACXvX,EAAIgX,SAAS,MAAY,EAAG,EAAGzN,GAC/BvJ,EAAI4M,QAAStX,EAAIyI,EAAN,WAAoB,IAAO3D,EAAtC,IACA4F,EAAI2M,UAAwB,KAAbpD,EAAmB,GAElCvJ,EAAI2M,UAAuB,IAAbpD,EAAiC,MAAbA,GAClCvJ,EAAI4M,OAAQtX,EAAIyI,EAAL,WAAmB,IAAO3D,EAArC,IACA4F,EAAI+W,KAAOmd,EACXl0B,EAAIgX,SAAS,OAAQ,EAAG,EAAGzN,GAC3B,MACG,KAAA,IACHvJ,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAQtX,EAAIyI,EAAL,WAAmBF,EAA9B,SACAmC,EAAI+W,KAAOQ,EACXvX,EAAIgX,SAAS,KAAW,EAAG,EAAGzN,GAC9BvJ,EAAI4M,QAAStX,EAAIyI,EAAN,WAAoBF,EAA/B,SACAmC,EAAI2M,UAAwB,KAAbpD,EAAmB,GAElCvJ,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAQtX,EAAIyI,EAAL,WAAmBF,EAA9B,SACAmC,EAAI+W,KAAOmd,EACXl0B,EAAIgX,SAAS,KAAM,EAAG,EAAGzN,GACzBvJ,EAAI2M,UAAwB,KAAbpD,EAAmB,GAClC,MACG,KAAA,IACHvJ,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAQtX,EAAIyI,EAAL,WAAmB,IAAO3D,EAArC,IACA4F,EAAI+W,KAAOQ,EACXvX,EAAIgX,SAAS,MAAY,EAAG,EAAGzN,GAC/BvJ,EAAI4M,QAAStX,EAAIyI,EAAN,WAAoB,IAAO3D,EAAtC,IACA4F,EAAI2M,UAAwB,KAAbpD,EAAmB,GAElCvJ,EAAI2M,UAAuB,IAAbpD,EAAgC,KAAbA,GACjCvJ,EAAI4M,OAAQtX,EAAIyI,EAAL,WAAmB,IAAO3D,EAArC,IACA4F,EAAI+W,KAAOmd,EACXl0B,EAAIgX,SAAS,OAAQ,EAAG,EAAGzN,GAC3B,MACG,KAAA,IACHvJ,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAQtX,EAAIyI,EAAL,WAAmB3D,EAA9B,IACA4F,EAAI+W,KAAOQ,EACXvX,EAAIgX,SAAS,MAAY,EAAG,EAAGzN,GAC/BvJ,EAAI4M,QAAStX,EAAIyI,EAAN,WAAoB3D,EAA/B,IACA4F,EAAI2M,UAAwB,KAAbpD,EAAmB,GAElCvJ,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAQtX,EAAIyI,EAAL,WAAmB3D,EAA9B,IACA4F,EAAI+W,KAAOmd,EACXl0B,EAAIgX,SAAS,IAAU,EAAG,EAAGzN,GAC7B,MACG,KAAA,IACHvJ,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAQtX,EAAIyI,EAAL,WAAmB,KAAO3D,EAArC,IACA4F,EAAI+W,KAAOQ,EACXvX,EAAIgX,SAAS,MAAY,EAAG,EAAGzN,GAC/BvJ,EAAI4M,QAAStX,EAAIyI,EAAN,WAAoB,KAAO3D,EAAtC,IACA4F,EAAI2M,UAAwB,KAAbpD,EAAmB,GAElCvJ,EAAI2M,UAAuB,IAAbpD,EAAiC,MAAbA,GAClCvJ,EAAI4M,OAAQtX,EAAIyI,EAAL,WAAmB,KAAO3D,EAArC,IACA4F,EAAI+W,KAAOmd,EACXl0B,EAAIgX,SAAS,OAAQ,EAAG,EAAGzN,GAG/BvJ,EAAI6J,UAEJ7J,EAAI4M,OAAO+P,GAEb3c,EAAI2M,WAAW1M,GAAUC,GACzBF,EAAI6J,UAmKF6Y,CAAmB9K,KAhKQ5X,EAmKbkgB,GAlKZvW,OAEJ3J,EAAIgJ,YAAciD,EAAgB7P,WAAWmD,eAC7CS,EAAImF,UAAY8G,EAAgB7P,WAAWmD,eAG3CS,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAI0E,OAAoB,QAAb6E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI6I,UAAY,EAChB7I,EAAI8I,QAAU,SACd9I,EAAI+I,SAAW,QACf/I,EAAIiJ,SAGJjJ,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAI0E,OAAoB,QAAb6E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,GAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI6E,YACJ7E,EAAIqF,OAGJrF,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAI0E,OAAoB,QAAb6E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI6I,UAAY,EAChB7I,EAAI8I,QAAU,SACd9I,EAAI+I,SAAW,QACf/I,EAAIiJ,SAGJjJ,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAI0E,OAAoB,QAAb6E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,GAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI6E,YACJ7E,EAAIqF,OAEJrF,EAAI6J,UAGiB,SAAS7J,GAC9BA,EAAI2J,OAGJ3J,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAI0E,OAAoB,QAAb6E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,GAAb4E,EAAgC,QAAdC,GAC7BxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,GAAbD,EAAgC,QAAdC,GAClIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GACvIxJ,EAAI6E,YACAsvB,IAAAA,EAAyBn0B,EAAI2I,qBAAqB,EAAG,QAAWa,EAAa,EAAG,QAAWA,GAC3F4qB,EAAe1Z,EAAa7d,KAC5Bw3B,EAAgB3Z,EAAa3d,MACjCq3B,EAAa90B,SAAS,QACtB+0B,EAAc/0B,SAAS,QACvB60B,EAAuBvrB,aAAa,EAAGwrB,EAAa70B,gBACpD40B,EAAuBvrB,aAAa,GAAKyrB,EAAc90B,gBACvD40B,EAAuBvrB,aAAa,IAAMyrB,EAAc90B,gBACxD40B,EAAuBvrB,aAAa,EAAGwrB,EAAa70B,gBACpDS,EAAImF,UAAYgvB,EACZG,IAAAA,EAA4B5Z,EAAa3d,MAAMwC,eACnDS,EAAI6I,UAAY,EAChB7I,EAAI8I,QAAU,SACd9I,EAAI+I,SAAW,QACf/I,EAAIgJ,YAAcsrB,EAClBt0B,EAAIqF,OACJrF,EAAIiJ,SAEJmrB,EAAa90B,SAAS,GACtB+0B,EAAc/0B,SAAS,GAEvBU,EAAI6J,UA+EJ5B,CAAiBiY,GA5EQ,SAASlgB,GAClCA,EAAI2J,OAEAyqB,IAAAA,EAAe1Z,EAAa7d,KAC5Bw3B,EAAgB3Z,EAAa3d,MACjCq3B,EAAa90B,SAAS,QACtB+0B,EAAc/0B,SAAS,QAGvBU,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAI0E,OAAoB,QAAb6E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,OAAb4E,EAAqC,GAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GACvIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GACvIxJ,EAAI6E,YACA0vB,IAAAA,EAA8Bv0B,EAAI2I,qBAAqB,QAAWY,EAAY,EAAG,QAAWA,EAAY,GAC5GgrB,EAA4B3rB,aAAa,EAAGwrB,EAAa70B,gBACzDg1B,EAA4B3rB,aAAa,GAAKyrB,EAAc90B,gBAC5Dg1B,EAA4B3rB,aAAa,IAAMyrB,EAAc90B,gBAC7Dg1B,EAA4B3rB,aAAa,EAAGwrB,EAAa70B,gBACzDS,EAAImF,UAAYovB,EACZC,IAAAA,EAAiC9Z,EAAa3d,MAAMwC,eACxDS,EAAI6I,UAAY,EAChB7I,EAAI8I,QAAU,SACd9I,EAAI+I,SAAW,QACf/I,EAAIgJ,YAAcwrB,EAClBx0B,EAAIqF,OACJrF,EAAIiJ,SAGJjJ,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAI0E,OAAoB,QAAb6E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,GAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GACvIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GACvIxJ,EAAI6E,YACA4vB,IAAAA,EAA+Bz0B,EAAI2I,qBAAqB,MAAWY,EAAY,EAAG,OAAUA,EAAY,GAC5GkrB,EAA6B7rB,aAAa,EAAGwrB,EAAa70B,gBAC1Dk1B,EAA6B7rB,aAAa,GAAKyrB,EAAc90B,gBAC7Dk1B,EAA6B7rB,aAAa,IAAMyrB,EAAc90B,gBAC9Dk1B,EAA6B7rB,aAAa,EAAGwrB,EAAa70B,gBAC1DS,EAAImF,UAAYsvB,EACZC,IAAAA,EAAkCha,EAAa3d,MAAMwC,eACzDS,EAAI6I,UAAY,EAChB7I,EAAI8I,QAAU,SACd9I,EAAI+I,SAAW,QACf/I,EAAIgJ,YAAc0rB,EAClB10B,EAAIqF,OACJrF,EAAIiJ,SAEJmrB,EAAa90B,SAAS,GACtB+0B,EAAc/0B,SAAS,GAEvBU,EAAI6J,UAqBJ8qB,CAAqBV,GAEjBvY,IACwB5D,EAAAA,EAAAA,SAAAA,EAAmB/E,EAAgBxJ,EAAYC,GAAa,IAItFyZ,EAAe,WACjBtL,EAAiB9V,MAAQqG,EACzByP,EAAiB7V,OAASoG,EAC1B0P,EAAoBD,EAAiBlW,WAAW,MAGhDwe,EAAcpe,MAAQqG,EACtB+X,EAAcne,OAASoG,EACvBgY,EAAiBD,EAAcxe,WAAW,MAG1CuyB,EAAkBnyB,MAAQqG,EAC1B8rB,EAAkBlyB,OAASoG,EAC3B+rB,EAAqBD,EAAkBvyB,WAAW,MAGlDoW,EAAiBhW,MAAQqG,EACzB2P,EAAiB/V,OAASoG,EAC1B4P,EAAoBD,EAAiBpW,WAAW,OA8O3C,OA1OF4X,KAAAA,SAAW,SAAS0K,GACnBC,IAAAA,EAkDG,OAhDO,GADdD,EAAW/K,WAAW+K,IACQ,IAAMA,EAAYA,EAG5Cpd,KAFJqd,EAAc,MAAQD,EAAYA,EAAW,IAAOA,KAGlDpd,EAAQqd,EAEJ,IADJ8P,EAAoC,GAAlB57B,KAAKiC,IAAIwM,GAAe,GAA9B,KAEVmtB,GAAa,IAGX,IAAMntB,IACRotB,EAAe,IAGb,EAAIptB,GAAS,IAAMA,IACrBotB,EAAgB,GAAKptB,GAGnB,GAAKA,GAAS,KAAOA,IACvBotB,EAAgBptB,EAAQ,IAGtB,IAAMA,GAAS,KAAOA,IACxBotB,EAAgB,IAAMptB,GAGpB,IAAMA,GAAS,KAAOA,IACxBotB,EAAgBptB,EAAQ,KAGtB,EAAIA,GAASA,IAAU,KACzBotB,EAAgB,GAAK77B,KAAKiC,IAAIwM,IAG5BA,GAAS,IAAMA,IAAU,MAC3BotB,EAAe77B,KAAKiC,IAAIwM,GAAS,IAG/BA,GAAS,KAAOA,IAAU,MAC5BotB,EAAe,IAAM77B,KAAKiC,IAAIwM,IAG5BA,GAAS,KAAOA,IAAU,MAC5BotB,EAAe77B,KAAKiC,IAAIwM,GAAS,KAG9BwS,KAAAA,WAEA,MAGJG,KAAAA,SAAW,WACP3S,OAAAA,GAGJkS,KAAAA,iBAAmB,SAASkL,EAAUpc,GAKrChB,GAHA,KADJod,EAAW/K,WAAW+K,IACDpd,EAAQod,EAAWpd,IACtCod,EAAW,IAAMA,GAEfpd,IAAUod,EAAU,MAClB1rB,IAAc+e,GAASA,EAAMte,WAC/Bse,EAAMvf,OAIRuf,EAAQ,IAAIpiB,EAAJ,QAAU,GAAI,GAAIA,EAAMgG,QAAAA,iBAAkB2L,EAAOod,EAAU,GAG/DhL,IAAAA,EAAQ,KAEZ3B,EAAM6B,gBAAkB,SAASC,GAC/BvS,EAAQuS,EAAMvhB,OAAOX,KAEjB,IADJ88B,EAAoC,GAAlB57B,KAAKiC,IAAIwM,GAAe,GAA9B,KAEVmtB,GAAa,IAGX,IAAMntB,IACRotB,EAAe,IAGb,EAAIptB,GAAS,IAAMA,IACrBotB,EAAgB,GAAKptB,GAGnB,GAAKA,GAAS,KAAOA,IACvBotB,EAAgBptB,EAAQ,IAGtB,IAAMA,GAAS,KAAOA,IACxBotB,EAAgB,IAAMptB,GAGpB,IAAMA,GAAS,KAAOA,IACxBotB,EAAgBptB,EAAQ,KAGtB,EAAIA,GAASA,IAAU,KACzBotB,EAAgB,GAAK77B,KAAKiC,IAAIwM,IAG5BA,GAAS,IAAMA,IAAU,MAC3BotB,EAAe77B,KAAKiC,IAAIwM,GAAS,IAG/BA,GAAS,KAAOA,IAAU,MAC5BotB,EAAe,IAAM77B,KAAKiC,IAAIwM,IAG5BA,GAAS,KAAOA,IAAU,MAC5BotB,EAAe77B,KAAKiC,IAAIwM,GAAS,KAG9BgS,IACHA,GAAa,GACII,EAAAA,EAAAA,kBAAAA,EAAMI,WAKvBxR,GAAiC,mBAAdA,IACrByP,EAAMgC,iBAAmBzR,GAG3ByP,EAAM3e,QAED,OAAA,MAGJqtB,KAAAA,eAAiB,SAASC,GAKtB,OAJP9C,IACA3Z,EAAcyc,EACd3vB,IACK+iB,KAAAA,UACE,MAGJ6M,KAAAA,mBAAqB,SAASC,GAK1B,OAJPhD,IACAhX,EAAkBga,EAClB7vB,IACK+iB,KAAAA,UACE,MAGJ+M,KAAAA,kBAAoB,SAASC,GAKzB,OAJPlD,IACAlQ,EAAiBoT,EACjB/vB,IACK+iB,KAAAA,UACE,MAGJmN,KAAAA,gBAAkB,SAASC,GAKvB,OAJPtD,IACAvI,EAAe6L,EACfnwB,IACK+iB,KAAAA,UACE,MAGJA,KAAAA,QAAU,WACRT,GACHtiB,IAGFkmB,EAAQ3S,OACR2S,EAAQiL,UAAU,EAAG,EAAGjL,EAAQtS,OAAOnI,MAAOya,EAAQtS,OAAOlI,QAE7DzB,EAAQxC,EAAU8I,QAAAA,EAAQgW,EAAY9e,EAAtC,QACIg2B,IACFvX,EAAQ3P,UAAU1M,EAASC,GAC3Boc,EAAQ1P,QAAQvM,GAChBic,EAAQ3P,WAAW1M,GAAUC,KAG3Boa,GAAgBE,IAClB8B,EAAQ3a,UAAUgW,EAAkB,EAAG,GAGzC2E,EAAQ3S,OAER2S,EAAQ3P,UAAU1M,EAASC,GAC3Boc,EAAQ1P,OAAOvM,GAGfic,EAAQ3P,WAAW1M,GAAUC,GAC7Boc,EAAQ3a,UAAUse,EAAe,EAAG,GAEpC3D,EAAQnX,UAAY8G,EAAgB7P,WAAWmD,eAC/C+c,EAAQzF,UAAY,SACpByF,EAAQxF,aAAe,SAEnB8c,GACFtX,EAAQzS,UAENyS,EAAQvF,KADN4c,EAC0B,GAAbpqB,EAAmB,MAAQnL,EAA1C,YAE4B,IAAbmL,EAAoB,MAAQnL,EAA3C,YAEFke,EAAQtF,SAAS+c,EAAahwB,QAAQqU,GAAY,IAAUnY,EAASC,EAAsB,IAAbqJ,KAG5E+S,EAAQvF,KADN4c,EAC0B,IAAbpqB,EAAoB,MAAQnL,EAA3C,YAE4B,GAAbmL,EAAmB,MAAQnL,EAA1C,YAEFke,EAAQtF,SAAS+c,EAAahwB,QAAQqU,GAAY,IAAUnY,EAASC,EAAsB,IAAbqJ,GAC9E+S,EAAQzS,WAGVyS,EAAQ3P,UAAU1M,EAASC,GAC3Boc,EAAQ1P,OAAOvM,EAAQyzB,EAAY/1B,EAAnC,YACAue,EAAQ3P,WAAW1M,GAAUC,GAC7Boc,EAAQ3a,UAAUqyB,EAAmB,EAAG,GACxC1X,EAAQzS,UAGJ6R,GACFY,EAAQ3a,UAAUkW,EAAkB,EAAG,GAGzCyE,EAAQzS,UAER8O,GAAa,GAIVQ,KAAAA,UAEE,MAGMua,EAAAA,EAAAA,QAAAA,QAAAA;;ACzdAkB,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAhOf,IAAA,EAAA,QAAA,WAQIA,EAAgB,SAAS50B,EAAKC,EAASC,EAASqJ,EAAYC,EAAayC,GACvE5G,IACF/P,EAAGkT,EADDnD,GAAO,EAEThJ,EAAc4P,EAAgB5P,YAAYkD,eAQvCjK,IANL0K,EAAI2J,OACJ3J,EAAI6I,UAAY,EAChB7I,EAAImF,UAAY9I,EAChB2D,EAAIgJ,YAAc3M,EAClB2D,EAAI2M,UAAU1M,EAASC,GAElB5K,EAAI,EAAGA,EAAI,IAAKA,GAAK,GACxB+P,GAAQA,EAERrF,EAAIyE,YACJzE,EAAImJ,IAAI,EAAG,EAAgB,IAAbI,EAAmBjU,EAAIyI,EAArC,YAAkDzI,EAAI,IAAMyI,EAA5D,YAAwE,GACxEiC,EAAImJ,IAAI,EAAG,EAAgB,IAAbI,GAAoBjU,EAAI,IAAMyI,EAA5C,WAAwDzI,EAAIyI,EAA5D,YAAwE,GACxEiC,EAAI6E,YACAQ,GACFrF,EAAIqF,OAENrF,EAAIiJ,SAwJD3T,IArJL0K,EAAI2M,WAAW1M,GAAUC,GAqJpB5K,EAAI,EAAG,KAAOA,EAAGA,GAAK,GAEzB0K,EAAIyE,YACJzE,EAAI0E,OAAoB,QAAb6E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI6E,YACJ7E,EAAImF,UAAY9I,EAChB2D,EAAIqF,OACJrF,EAAIiJ,SAEJjJ,EAAIyE,YACJzE,EAAI0E,OAAoB,QAAb6E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,GAAb4E,EAAgC,QAAdC,GAC7BxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI6E,aACJ2D,EAAOxI,EAAI2I,qBAAqB,QAAWY,EAAY,EAAG,QAAWA,EAAY,IAC5EX,aAAa,EAAG,sBACrBJ,EAAKI,aAAa,IAAM,sBACxBJ,EAAKI,aAAa,IAAMvM,GACxBmM,EAAKI,aAAa,EAAGvM,GACrB2D,EAAImF,UAAYqD,EAChBxI,EAAIqF,OACJrF,EAAIiJ,SACJjJ,EAAI2M,UAAU1M,EAASC,GACvBF,EAAI4M,OAAOtX,EAAIyI,EAAf,YACAiC,EAAI2M,WAAW1M,GAAUC,GAI3BF,EAAIyE,YACJzE,EAAI2M,UAAU1M,EAASC,GACvBF,EAAImJ,IAAI,EAAG,EAAgB,GAAbI,EAAkB,EAAGzL,EAAnC,QAA2C,GAC3CkC,EAAI6I,UAAyB,KAAbU,EAChBvJ,EAAIiJ,SACJjJ,EAAI2M,WAAW1M,GAAUC,GAEzBF,EAAI6J,WAIS+qB,EAAAA,EAAAA,QAAAA,QAAAA;;AC+WAC,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA/kBf,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,2BACA,EAAA,EAAA,QAAA,gCACA,EAAA,EAAA,QAAA,4BACA,EAAA,EAAA,QAAA,gCACA,EAAA,EAAA,QAAA,oBACA,EAAA,QAAA,WASA,EAAA,QAAA,iBAgkBeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GA/iBf,IAAIA,EAAU,SAAS7qB,EAAQkN,GAEzBhP,IAkBAkP,EAlBAlP,OAAQ7P,KADZ6e,EAAaA,GAAc,IACUhP,KAAO,EAAIgP,EAAWhP,KACzDoB,OAAejR,IAAc6e,EAAW5N,YAAc+Q,EAAY1I,YAAAA,MAAQuF,EAAW5N,YACrFgR,OAAgBjiB,IAAc6e,EAAWoD,cAAsBpD,EAAWoD,aAC1ErO,OAAmB5T,IAAc6e,EAAWjL,gBAAkBsO,EAAgBhN,gBAAAA,UAAY2J,EAAWjL,gBACrGuO,OAAqBniB,IAAc6e,EAAWsD,mBAA2BtD,EAAWsD,kBACpFrI,OAAe9Z,IAAc6e,EAAW/E,YAAcsI,EAAY9J,YAAAA,MAAQuG,EAAW/E,YACrFuI,OAAgBriB,IAAc6e,EAAWwD,aAAerf,EAASyS,MAAAA,IAAMoJ,EAAWwD,aAClFtJ,OAAY/Y,IAAc6e,EAAW9F,SAAWuJ,EAAStJ,SAAAA,cAAgB6F,EAAW9F,SACpFG,OAAalZ,IAAc6e,EAAW3F,UAAYqJ,EAAUnJ,UAAAA,OAASyF,EAAW3F,UAChFwB,OAAkB1a,IAAc6e,EAAWnE,eAAiB0I,EAAe/K,eAAAA,MAAQwG,EAAWnE,eAC9F2I,OAAqBrjB,IAAc6e,EAAWwE,mBAA2BxE,EAAWwE,kBACpFoZ,OAAgBz8B,IAAc6e,EAAW4d,aAAe,CAAC,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,MAAQ5d,EAAW4d,aAClHC,OAAuB18B,IAAc6e,EAAW6d,qBAA6B7d,EAAW6d,oBACxFjZ,OAAezjB,IAAc6e,EAAW4E,YAAc,KAAO5E,EAAW4E,YACxEkZ,OAAe38B,IAAc6e,EAAW8d,aAAsB9d,EAAW8d,YACzEC,OAAe58B,IAAc6e,EAAW+d,aAAqB/d,EAAW+d,YACxEpB,OAAcx7B,IAAc6e,EAAW2c,YAAqB3c,EAAW2c,WAGrElb,GAAa,EACbhS,EAAQ,EACRgW,EAAY5e,EAAhB,WACIsC,EAAQ,KAAKsG,MAGb2V,GAAU,EAAiBtS,EAAAA,kBAAAA,GAElB,IAAT9B,IACFA,EAAOhQ,KAAK+N,IAAIqW,EAAQtS,OAAOnI,MAAOya,EAAQtS,OAAOlI,SAIvDwa,EAAQtS,OAAOnI,MAAQqG,EACvBoU,EAAQtS,OAAOlI,OAASoG,EAEpBqB,IAAAA,EAAarB,EACbsB,EAActB,EAEdjI,EAAUsJ,EAAa,EACvBrJ,EAAUsJ,EAAc,EAExB6K,EAA4B,KAAb9K,EAEfmP,GAAc,EAIdf,GAAmB,EAAazP,EAAAA,cAAAA,EAAMA,GACtC0P,EAAoBD,EAAiBlW,WAAW,MAGhDyzB,GAAa,EAAahtB,EAAAA,cAAAA,EAAMA,GAChCitB,EAAcD,EAAWzzB,WAAW,MAGpCwe,GAAgB,EAAa/X,EAAAA,cAAAA,EAAMA,GACnCgY,EAAiBD,EAAcxe,WAAW,MAG1CoW,GAAmB,EAAa3P,EAAAA,cAAAA,EAAMA,GACtC4P,EAAoBD,EAAiBpW,WAAW,MA8ShDrL,EAAO,WACTsiB,GAAc,EAEV4B,IACmB1C,EAAAA,EAAAA,SAAAA,EAAmBtO,EAAarJ,EAASC,EAASqJ,EAAYC,GAGjFgR,KACwB5C,EAAAA,EAAAA,SAAAA,EAAmB3L,EAAiBhM,EAASC,EAASqJ,EAAYC,IACtEoO,EAAAA,EAAAA,SAAAA,EAAmBkE,EAAa7b,EAASC,EAASqJ,EAAYC,GAEhFyrB,IACYE,EAAAA,EAAAA,SAAAA,EAAal1B,EAASC,EAASqJ,EAAYC,EAAayC,GAvTnD,SAASjM,GAC5B6Z,IAAAA,EAIAtC,EAAS2c,EAAS5+B,EAOlB,GAVJ0K,EAAI6W,UAAY,SAChB7W,EAAI8W,aAAe,SAInB9W,EAAI2J,OACJ3J,EAAIgJ,YAAciD,EAAgB7P,WAAWmD,eAC7CS,EAAImF,UAAY8G,EAAgB7P,WAAWmD,eAC3CS,EAAI2M,UAAU1M,EAASC,GAElB80B,EAuGE1/B,IALLiiB,EAAU,IAAOhO,EAAa,WAC9B2qB,EAAuB,KAAb3qB,EAAqB,WAE/BvJ,EAAI4M,OAAmB,GAAZ+P,GAENrnB,EAAI,GAAI,KAAOA,EAAGA,GAAK,GAAI,CAG1By/B,GADJ/0B,EAAI2J,OACAorB,EACMz/B,OAAAA,GACD,KAAA,IACH0K,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAO/O,EAAX,SACAmC,EAAI+W,KAAOQ,EACXvX,EAAIgX,SAAS8d,EAAa,GAAI,EAAG,EAAGvrB,GACpCvJ,EAAI2M,UAAwB,KAAbpD,EAAmB,GAClC,MACG,KAAA,GACHvJ,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAO/O,EAAX,SACAmC,EAAI+W,KAAOQ,EACXvX,EAAIgX,SAAS8d,EAAa,GAAI,EAAG,EAAGvrB,GACpCvJ,EAAI2M,UAAwB,KAAbpD,EAAmB,GAClC,MACG,KAAA,IACHvJ,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAO/O,EAAX,SACAmC,EAAI+W,KAAOQ,EACXvX,EAAIgX,SAAS8d,EAAa,GAAI,EAAG,EAAGvrB,GACpCvJ,EAAI2M,UAAwB,KAAbpD,EAAmB,GAClC,MACG,KAAA,IACHvJ,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAO/O,EAAX,SACAmC,EAAI+W,KAAOQ,EACXvX,EAAIgX,SAAS8d,EAAa,GAAI,EAAG,EAAGvrB,GACpCvJ,EAAI2M,UAAwB,KAAbpD,EAAmB,GAClC,MACF,QACEsQ,GAAOvkB,EAAI,IAAM,IACjB0K,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAO/O,EAAX,SACAmC,EAAI+W,KAAOmd,EACXl0B,EAAIgX,SAAU,IAAI/T,UAAU4W,GAAO,KAAOA,EAAM,EAAG,EAAGtQ,GACtDvJ,EAAI2M,UAAwB,KAAbpD,EAAmB,QAGtCsQ,GAAOvkB,EAAI,IAAM,IACjB0K,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAO/O,EAAX,SACAmC,EAAI+W,KAAOmd,EACXl0B,EAAIgX,SAAU,IAAI/T,UAAU4W,GAAO,KAAOA,EAAM,EAAG,EAAGtQ,GACtDvJ,EAAI2M,UAAwB,KAAbpD,EAAmB,GAEpCvJ,EAAI6J,UACJ7J,EAAI4M,OAAmB,GAAZ+P,QApJRrnB,IAHLiiB,EAAU,IAAOhO,EAAa,WAC9B2qB,EAAU,IAAO3qB,EAAa,WAEzBjU,EAAI,EAAG,IAAMA,EAAGA,GAAK,IAAK,CAarBA,OAXJ,GAAMA,EAAI,IACZ0K,EAAI6I,UAAY,EAChB7I,EAAIyE,YACJzE,EAAI0E,OAAoB,IAAb6E,EAAmB,GAC9BvJ,EAAI2E,OAAoB,IAAb4E,EAAmB,GAC9BvJ,EAAI6E,YACJ7E,EAAIiJ,UAINjJ,EAAI2J,OACIrU,GACD,KAAA,EACH0K,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAO/O,EAAX,SACAmC,EAAI+W,KAAOQ,EACXvX,EAAIgX,SAAS8d,EAAa,GAAI,EAAG,EAAGvrB,GACpCvJ,EAAI2M,UAAwB,KAAbpD,EAAmB,GAClC,MACG,KAAA,GACHvJ,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAO/O,EAAX,SACAmC,EAAI+W,KAAOmd,EACXl0B,EAAIgX,SAAS8d,EAAa,GAAI,EAAG,EAAGvrB,GACpCvJ,EAAI2M,UAAwB,KAAbpD,EAAmB,GAClC,MACG,KAAA,GACHvJ,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAO/O,EAAX,SACAmC,EAAI+W,KAAOQ,EACXvX,EAAIgX,SAAS8d,EAAa,GAAI,EAAG,EAAGvrB,GACpCvJ,EAAI2M,UAAwB,KAAbpD,EAAmB,GAClC,MACG,KAAA,IACHvJ,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAO/O,EAAX,SACAmC,EAAI+W,KAAOmd,EACXl0B,EAAIgX,SAAS8d,EAAa,GAAI,EAAG,EAAGvrB,GACpCvJ,EAAI2M,UAAwB,KAAbpD,EAAmB,GAClC,MACG,KAAA,IACHvJ,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAO/O,EAAX,SACAmC,EAAI+W,KAAOQ,EACXvX,EAAIgX,SAAS8d,EAAa,GAAI,EAAG,EAAGvrB,GACpCvJ,EAAI2M,UAAwB,KAAbpD,EAAmB,GAClC,MACG,KAAA,IACHvJ,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAO/O,EAAX,SACAmC,EAAI+W,KAAOmd,EACXl0B,EAAIgX,SAAS8d,EAAa,GAAI,EAAG,EAAGvrB,GACpCvJ,EAAI2M,UAAwB,KAAbpD,EAAmB,GAClC,MACG,KAAA,IACHvJ,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAO/O,EAAX,SACAmC,EAAI+W,KAAOQ,EACXvX,EAAIgX,SAAS8d,EAAa,GAAI,EAAG,EAAGvrB,GACpCvJ,EAAI2M,UAAwB,KAAbpD,EAAmB,GAClC,MACG,KAAA,IACHvJ,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAO/O,EAAX,SACAmC,EAAI+W,KAAOmd,EACXl0B,EAAIgX,SAAS8d,EAAa,GAAI,EAAG,EAAGvrB,GACpCvJ,EAAI2M,UAAwB,KAAbpD,EAAmB,GAGtCvJ,EAAI6J,WAEAorB,GAAgB,IAAM3/B,GAAK,OAASA,GAAK,KAAOA,GAAK,OAASA,GAAK,KAAOA,GAAK,QAAUA,GAAK,MAAQA,GAAK,QAAUA,GAAK,MAAQA,GAAK,QAAUA,GAAK,MAAQA,GAAK,QAAUA,GAAK,MAAQA,GAAK,QAAUA,GAAK,MAAQA,GAAK,QAAUA,GAAK,MAAQA,IAEpP0K,EAAI2J,OACJ3J,EAAIyE,YAEAnP,EAAI,GACN0K,EAAI0E,OAAoB,IAAb6E,EAAmB,GAE9BvJ,EAAI0E,OAAoB,IAAb6E,EAAmB,GAEhCvJ,EAAI2E,OAAoB,GAAb4E,EAAkB,GAC7BvJ,EAAI6E,YACJ7E,EAAI6J,UACJ7J,EAAI6I,UAAY,EAChB7I,EAAIgJ,YAAciD,EAAgB5P,YAAYkD,eAC9CS,EAAIiJ,UAENjJ,EAAI4M,OAAmB,IAAZ+P,GA8Df3c,EAAI2M,WAAW1M,GAAUC,GACzBF,EAAI6J,UAgJF6Y,CAAmByS,IA7IA,SAASn1B,GAGtBmS,OAFRnS,EAAI2J,OAEIwI,EAAYva,MACb,IAAA,QAEHoI,EAAIyE,YACJzE,EAAI0E,OAAoB,OAAb6E,EAAqC,QAAdC,GAClCxJ,EAAIkJ,cAA2B,OAAbK,EAAqC,QAAdC,EAAqC,GAAbD,EAAgC,QAAdC,EAAqC,GAAbD,EAAgC,QAAdC,GAC7HxJ,EAAIkJ,cAA2B,GAAbK,EAAgC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GAClIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,GAAdC,GACvIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,GAAdC,EAAgC,QAAbD,EAAqC,GAAdC,EAAgC,QAAbD,EAAqC,GAAdC,GAC7HxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,OAAbD,EAAqC,QAAdC,GACvIxJ,EAAI6E,YACAuwB,IAAAA,EAAyBp1B,EAAI2I,qBAAqB,QAAWY,EAAY,EAAG,QAAWA,EAAY,GACvG6rB,EAAuBxsB,aAAa,EAAG8R,EAAa3d,MAAMwC,gBAC1D61B,EAAuBxsB,aAAa,IAAM8R,EAAa3d,MAAMwC,gBAC7D61B,EAAuBxsB,aAAa,IAAM8R,EAAa5d,OAAOyC,gBAC9D61B,EAAuBxsB,aAAa,EAAG8R,EAAa5d,OAAOyC,gBAC3DS,EAAImF,UAAYiwB,EAChBp1B,EAAIgJ,YAAc0R,EAAa7d,KAAK0C,eACpCS,EAAI6I,UAAY,EAChB7I,EAAI8I,QAAU,SACd9I,EAAI+I,SAAW,QACf/I,EAAIqF,OACJrF,EAAIiJ,SAGJjJ,EAAIyE,YACJzE,EAAI0E,OAAoB,QAAb6E,EAAqC,QAAdC,GAClCxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,GAAbD,EAAgC,QAAdC,EAAqC,GAAbD,EAAgC,QAAdC,GAC7HxJ,EAAIkJ,cAA2B,GAAbK,EAAgC,QAAdC,EAAqC,OAAbD,EAAqC,QAAdC,EAAqC,OAAbD,EAAqC,QAAdC,GAClIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,GAAdC,GACvIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,GAAdC,EAAgC,QAAbD,EAAqC,GAAdC,EAAgC,QAAbD,EAAqC,GAAdC,GAC7HxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GACvIxJ,EAAI6E,YACAwwB,IAAAA,EAAyBr1B,EAAI2I,qBAAqB,QAAWY,EAAY,EAAG,QAAWA,EAAY,GACvG8rB,EAAuBzsB,aAAa,EAAG,WACvCysB,EAAuBzsB,aAAa,IAAM,WAC1CysB,EAAuBzsB,aAAa,IAAM,WAC1CysB,EAAuBzsB,aAAa,EAAG,WACvC5I,EAAImF,UAAYkwB,EAEhBr1B,EAAIgJ,YAD4B,UAEhChJ,EAAI6I,UAAY,EAChB7I,EAAI8I,QAAU,SACd9I,EAAI+I,SAAW,QACf/I,EAAIqF,OACJrF,EAAIiJ,SACJ,MAEG,IAAA,QAEHjJ,EAAIyE,YACJzE,EAAI0E,OAAoB,GAAb6E,EAAgC,QAAdC,GAC7BxJ,EAAIkJ,cAA2B,GAAbK,EAAgC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,GAAdC,GAClIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,OAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,GAAbD,EAAgC,QAAdC,GAClIxJ,EAAIkJ,cAA2B,OAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,OAAdC,EAAqC,QAAbD,EAAqC,GAAdC,GACvIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,GAAbD,EAAgC,QAAdC,EAAqC,GAAbD,EAAgC,QAAdC,GAC7HxJ,EAAI6E,YACAywB,IAAAA,EAAyBt1B,EAAI2I,qBAAqB,QAAWY,EAAY,EAAG,QAAWA,EAAY,GACvG+rB,EAAuB1sB,aAAa,EAAG8R,EAAa3d,MAAMwC,gBAC1D+1B,EAAuB1sB,aAAa,IAAM8R,EAAa3d,MAAMwC,gBAC7D+1B,EAAuB1sB,aAAa,IAAM8R,EAAa5d,OAAOyC,gBAC9D+1B,EAAuB1sB,aAAa,EAAG8R,EAAa5d,OAAOyC,gBAC3DS,EAAImF,UAAYmwB,EAChBt1B,EAAIgJ,YAAc0R,EAAa7d,KAAK0C,eACpCS,EAAI6I,UAAY,EAChB7I,EAAI8I,QAAU,SACd9I,EAAI+I,SAAW,QACf/I,EAAIqF,OACJrF,EAAIiJ,SACJ,MAEG,IAAA,SAEL,QAEEjJ,EAAIyE,YACJzE,EAAI0E,OAAoB,GAAb6E,EAAgC,QAAdC,GAC7BxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,GAAb4E,EAAgC,QAAdC,GAC7BxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,GAAb4E,EAAgC,QAAdC,GAC7BxJ,EAAI6E,YACA0wB,IAAAA,EAAyBv1B,EAAI2I,qBAAqB,QAAWY,EAAY,EAAG,QAAWA,EAAY,GACvGgsB,EAAuB3sB,aAAa,EAAG8R,EAAa3d,MAAMwC,gBAC1Dg2B,EAAuB3sB,aAAa,IAAM8R,EAAa3d,MAAMwC,gBAC7Dg2B,EAAuB3sB,aAAa,IAAM8R,EAAa5d,OAAOyC,gBAC9Dg2B,EAAuB3sB,aAAa,EAAG8R,EAAa5d,OAAOyC,gBAC3DS,EAAImF,UAAYowB,EAChBv1B,EAAIgJ,YAAc0R,EAAa7d,KAAK0C,eACpCS,EAAI6I,UAAY,EAChB7I,EAAI8I,QAAU,SACd9I,EAAI+I,SAAW,QACf/I,EAAIqF,OACJrF,EAAIiJ,SAGJjJ,EAAIyE,YACJzE,EAAI0E,OAAoB,GAAb6E,EAAgC,QAAdC,GAC7BxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,GAAb4E,EAAgC,QAAdC,GAC7BxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,GAAb4E,EAAgC,QAAdC,GAC7BxJ,EAAI6E,YACA2wB,IAAAA,EAAyBx1B,EAAI2I,qBAAqB,QAAWY,EAAY,EAAG,QAAWA,EAAY,GACvGisB,EAAuB5sB,aAAa,EAAG,WACvC4sB,EAAuB5sB,aAAa,IAAM,WAC1C4sB,EAAuB5sB,aAAa,QAAU,WAC9C4sB,EAAuB5sB,aAAa,EAAG,WACvC5I,EAAImF,UAAYqwB,EAEhBx1B,EAAIgJ,YAD2B,UAE/BhJ,EAAI6I,UAAY,EAChB7I,EAAI8I,QAAU,SACd9I,EAAI+I,SAAW,QACf/I,EAAIqF,OACJrF,EAAIiJ,SAGRjJ,EAAI6J,UAuBJ5B,CAAiBiY,GAEbxE,IACwB5D,EAAAA,EAAAA,SAAAA,EAAmB/E,EAAgBxJ,EAAYC,GAAa,EAAM4H,EAAUG,IAItG0R,EAAe,WAEjBtL,EAAiB9V,MAAQqG,EACzByP,EAAiB7V,OAASoG,EAC1B0P,EAAoBD,EAAiBlW,WAAW,MAGhDyzB,EAAWrzB,MAAQqG,EACnBgtB,EAAWpzB,OAASoG,EACpBitB,EAAcD,EAAWzzB,WAAW,MAGpCwe,EAAcpe,MAAQqG,EACtB+X,EAAcne,OAASoG,EACvBgY,EAAiBD,EAAcxe,WAAW,MAG1CoW,EAAiBhW,MAAQqG,EACzB2P,EAAiB/V,OAASoG,EAC1B4P,EAAoBD,EAAiBpW,WAAW,OAoJ3C,OAhJF4X,KAAAA,SAAW,SAAS0K,GAMhB,OALPA,EAAW/K,WAAW+K,GAAY,IAC9Bpd,IAAUod,IACZpd,EAAQod,EACH5K,KAAAA,WAEA,MAGJG,KAAAA,SAAW,WACP3S,OAAAA,GAGJkS,KAAAA,iBAAmB,SAASkL,EAAUpc,GACrCqc,IAEAyR,EAFAzR,EAAcD,EAAW,IACzBhL,EAAQ,KA4BL,OA1BHpS,IAAUqd,SACR3rB,IAAc+e,GAASA,EAAMte,WAC/Bse,EAAMvf,OAGR49B,GAAO,EAAiB9uB,EAAAA,kBAAAA,EAAOqd,IAE7B5M,EADEyc,EACM,IAAI7+B,EAAJ,QAAU,GAAI,GAAIA,EAAMgG,QAAAA,iBAAkB2L,EAAOA,EAAQ8uB,EAAM,GAE/D,IAAIzgC,EAAJ,QAAU,GAAI,GAAIA,EAAMwF,QAAAA,eAAgBmM,EAAOA,EAAQ8uB,EAAM,IAEjExc,gBAAkB,SAASC,GAC/BvS,EAAQuS,EAAMvhB,OAAOX,KAAO,IACvB2hB,IACHA,GAAa,GACII,EAAAA,EAAAA,kBAAAA,EAAMI,WAKvBxR,GAAiC,mBAAdA,IACrByP,EAAMgC,iBAAmBzR,GAG3ByP,EAAM3e,SAED,MAGJqtB,KAAAA,eAAiB,SAASC,GAKtB,OAJP9C,IACA3Z,EAAcyc,EACd3vB,IACK+iB,KAAAA,UACE,MAGJ6M,KAAAA,mBAAqB,SAASC,GAK1B,OAJPhD,IACAhX,EAAkBga,EAClB7vB,IACK+iB,KAAAA,UACE,MAGJ+M,KAAAA,kBAAoB,SAASC,GAKzB,OAJPlD,IACAlQ,EAAiBoT,EACjB/vB,IACK+iB,KAAAA,UACE,MAGJmN,KAAAA,gBAAkB,SAASC,GAKvB,OAJPtD,IACAvI,EAAe6L,EACfnwB,IACK+iB,KAAAA,UACE,MAGJiN,KAAAA,eAAiB,SAASC,GAKtB,OAJPpD,IACA9Q,EAAckU,EACdjwB,IACK+iB,KAAAA,UACE,MAGJuc,KAAAA,gBAAkB,SAASC,GAKvB,OAJP1S,IACA6R,EAAea,EACfv/B,IACK+iB,KAAAA,UACE,MAGJA,KAAAA,QAAU,WACRT,GACHtiB,IAGFkmB,EAAQ3S,OACR2S,EAAQiL,UAAU,EAAG,EAAGjL,EAAQtS,OAAOnI,MAAOya,EAAQtS,OAAOlI,QAE7DzB,EAAQxC,EAAU8I,QAAAA,EAAQgW,EAAY9e,EAAtC,SAEI2c,GAAqBF,IACvBgC,EAAQ3a,UAAUgW,EAAkB,EAAG,GAGrCkc,GACFvX,EAAQ3S,OACR2S,EAAQ3P,UAAU1M,EAASC,GAC3Boc,EAAQ1P,QAAQvM,GAChBic,EAAQ3P,WAAW1M,GAAUC,GACzBsa,GACF8B,EAAQ3a,UAAUuzB,EAAY,EAAG,GAEnC5Y,EAAQzS,YAEJ2Q,GACF8B,EAAQ3a,UAAUuzB,EAAY,EAAG,GAEnC5Y,EAAQ3P,UAAU1M,EAASC,GAC3Boc,EAAQ1P,OAAOvM,GACfic,EAAQ3P,WAAW1M,GAAUC,IAG/Boc,EAAQhI,YAAc,qBACtBgI,EAAQ/H,cAAgB+H,EAAQ9H,cAAgBH,EAChDiI,EAAQ7H,WAA4B,EAAfJ,EAErBiI,EAAQ3a,UAAUse,EAAe,EAAG,GAEpC3D,EAAQzS,UAEJ6R,GACFY,EAAQ3a,UAAUkW,EAAkB,EAAG,GAGzCc,GAAa,GAIVQ,KAAAA,UAEE,MAGM0b,EAAAA,EAAAA,QAAAA,QAAAA;;ACgTAe,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAh4Bf,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,uBACA,EAAA,EAAA,QAAA,2BACA,EAAA,EAAA,QAAA,gCACA,EAAA,EAAA,QAAA,4BACA,EAAA,EAAA,QAAA,gCACA,EAAA,EAAA,QAAA,+BACA,EAAA,EAAA,QAAA,oBACA,EAAA,QAAA,WAYA,EAAA,QAAA,iBA42BeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GA31Bf,IAAIA,EAAgB,SAAS5rB,EAAQkN,GAE/BhP,IA6BA2tB,EACAC,EA9BA5tB,OAAQ7P,KADZ6e,EAAaA,GAAc,IACUhP,KAAO,EAAIgP,EAAWhP,KACzDoB,OAAejR,IAAc6e,EAAW5N,YAAc+Q,EAAY1I,YAAAA,MAAQuF,EAAW5N,YACrFgR,OAAgBjiB,IAAc6e,EAAWoD,cAAsBpD,EAAWoD,aAC1ErO,OAAmB5T,IAAc6e,EAAWjL,gBAAkBsO,EAAgBhN,gBAAAA,UAAY2J,EAAWjL,gBACrGuO,OAAqBniB,IAAc6e,EAAWsD,mBAA2BtD,EAAWsD,kBACpFub,OAAqB19B,IAAc6e,EAAW6e,kBAAoBtb,EAAY/J,YAAAA,MAAQwG,EAAW6e,kBACjGC,OAAsB39B,IAAc6e,EAAW8e,mBAAqBvb,EAAYnI,YAAAA,MAAQ4E,EAAW8e,mBACnGtb,OAAgBriB,IAAc6e,EAAWwD,aAAerf,EAASyS,MAAAA,IAAMoJ,EAAWwD,aAClFub,OAAuB59B,IAAc6e,EAAW+e,oBAAsB56B,EAAS2S,MAAAA,KAAOkJ,EAAW+e,oBACjG7kB,OAAY/Y,IAAc6e,EAAW9F,SAAWuJ,EAAStJ,SAAAA,cAAgB6F,EAAW9F,SACpFG,OAAalZ,IAAc6e,EAAW3F,UAAYqJ,EAAUnJ,UAAAA,OAASyF,EAAW3F,UAChFwB,OAAkB1a,IAAc6e,EAAWnE,eAAiB0I,EAAe/K,eAAAA,MAAQwG,EAAWnE,eAC9F2I,OAAqBrjB,IAAc6e,EAAWwE,mBAA2BxE,EAAWwE,kBACpFoZ,OAAgBz8B,IAAc6e,EAAW4d,aAAe,CAAC,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,MAAQ5d,EAAW4d,aAClHC,OAAuB18B,IAAc6e,EAAW6d,qBAA6B7d,EAAW6d,oBACxFjZ,OAAezjB,IAAc6e,EAAW4E,YAAc,KAAO5E,EAAW4E,YACxEkZ,OAAe38B,IAAc6e,EAAW8d,aAAqB9d,EAAW8d,YACxEkB,OAAmB79B,IAAc6e,EAAWgf,iBAA0Bhf,EAAWgf,gBACjFjB,OAAe58B,IAAc6e,EAAW+d,aAAsB/d,EAAW+d,YACzExmB,OAAYpW,IAAc6e,EAAWzI,SAAWoM,EAAS5L,SAAAA,SAAWiI,EAAWzI,SAC/EqM,OAAcziB,IAAc6e,EAAW4D,YAAoB5D,EAAW4D,WACtEE,OAAe3iB,IAAc6e,EAAW8D,aAAsB9D,EAAW8D,YACzEhX,OAAW3L,IAAc6e,EAAWlT,QAAU,KAAOkT,EAAWlT,QAChEoW,OAAQ/hB,IAAc6e,EAAWkD,KAAO,KAAOlD,EAAWkD,KAC1D+b,OAAmB99B,IAAc6e,EAAWif,gBAAkB,CAAC,SAAU,WAAajf,EAAWif,gBACjGzf,OAAere,IAAc6e,EAAWR,YAAc,GAAKQ,EAAWR,YACtE0f,OAAkB/9B,IAAc6e,EAAWkf,gBAAyBlf,EAAWkf,eAC/E/Z,OAA2BhkB,IAAc6e,EAAWmF,wBAA0B,IAAMnF,EAAWmF,wBAI7Fga,EAAc,EACdC,EAAe,EACf3Z,EAAY5e,EAAhB,WACIw4B,EAAc,KAAKF,YACnBG,EAAe,KAAKF,aACpB7Z,GAAkB5e,EAAtB,QACI6e,EAAa5e,EAAjB,OAEI6a,GAAa,EAGb2D,GAAU,EAAiBtS,EAAAA,kBAAAA,GAElB,IAAT9B,IACFA,EAAOhQ,KAAK+N,IAAIqW,EAAQtS,OAAOnI,MAAOya,EAAQtS,OAAOlI,SAIvDwa,EAAQtS,OAAOnI,MAAQqG,EACvBoU,EAAQtS,OAAOlI,OAASoG,EAEpBqB,IAuBA2L,EAvBA3L,EAAarB,EACbsB,EAActB,EAEdjI,GAAUsJ,EAAa,EACvBrJ,GAAUsJ,EAAc,EAExB8U,GAAgBpmB,KAAKiM,MAAMoF,EAAa,IACxCgO,GAAU+G,GAAgB,MAAQlgB,EAAtC,YACImgB,GAAUD,GAAgB,MAAQngB,EAAtC,YACIsgB,GAAwB,GAAblV,EACXiV,GAA0B,IAAdhV,EACZkV,IAAWnV,EAAakV,IAAY,EACpCgY,GAAyB,IAAdjtB,EACXktB,GAAyB,KAAdltB,EAEXkP,IAAc,EAIdf,IAAmB,EAAazP,EAAAA,cAAAA,EAAMA,GACtC0P,GAAoBD,GAAiBlW,WAAW,MAMhDk1B,IAAsB,EAAazuB,EAAAA,cAAAA,EAAMA,GACzC0uB,GAAuBD,GAAoBl1B,WAAW,MAGtDo1B,IAAuB,EAAa3uB,EAAAA,cAAAA,EAAMA,GAC1C4uB,GAAwBD,GAAqBp1B,WAAW,MAGxDoW,IAAmB,EAAa3P,EAAAA,cAAAA,EAAMA,GACtC4P,GAAoBD,GAAiBpW,WAAW,MAGhD0e,GAAc,SAASxZ,EAAOowB,GAOzBpwB,IANP2V,EAAQ3S,OACR2S,EAAQzF,UAAY,SACpByF,EAAQtT,YAAcyF,EAAS9R,UAC/B2f,EAAQnX,UAAYsJ,EAAS9R,UAGtBgK,GAAS,KACdA,GAAS,KAENuvB,GAAmBvvB,EAAQ,IAC9BA,GAAS,KAGPuvB,GAAmBvvB,EAAQ,MAC7BA,IAAU,IAAMA,IAKhBA,EAFEA,GAAS,GACXA,EAAQ,KAAOzO,KAAKC,MAAMwO,IACZ1D,UAAU0D,EAAMlR,OAAQkR,EAAMlR,OAAS,GAG7C,KADRkR,EAAQ,KAAOzO,KAAKiC,IAAIjC,KAAKC,MAAMwO,KACf1D,UAAU0D,EAAMlR,OAAQkR,EAAMlR,OAAS,GAGzDgZ,IAAaoM,EAAS5L,SAAAA,UAAYR,IAAaoM,EAAS3L,SAAAA,iBAC1DoN,EAAQhI,YAAc,OACtBgI,EAAQ/H,cAA6B,KAAbhL,EACxB+S,EAAQ9H,cAA6B,KAAbjL,EACxB+S,EAAQ7H,WAA0B,KAAblL,GAEvB+S,EAAQvF,KAAQiE,EAAcuD,GAAUhH,GACxC+E,EAAQtF,SAASrQ,EAAQ,IAAU4C,EAAa,EAAe,IAAXkV,IAAkBsY,EAAUN,GAAWC,IAAwB,GAAZlY,GAAkC,IAAhBF,GAAiC,GAAXG,IAE/InC,EAAQzS,WAGNuW,GAAuB,SAASpgB,EAAKvH,EAAOZ,EAAMqL,EAAOmd,GAE3DrgB,EAAI2J,OACJ3J,EAAIgJ,YAAc9F,EAClBlD,EAAImF,UAAYjC,EAChBlD,EAAI6I,UAAyB,KAAbU,EACZ+W,IAAAA,EAAc5D,EAhGR,IAgG6BjkB,EACnC8nB,EAAYD,GAAczoB,EAAOY,IAjG3B,IAiG6CikB,GACvD1c,EAAI2M,UAAU1M,GAASC,IACvBF,EAAI4M,OAAO6P,GACXzc,EAAIyE,YACA4b,GACFrgB,EAAI0E,OAAO,EAAG,GACd1E,EAAImJ,IAAI,EAAG,EAAgB,KAAbI,EAAqBvJ,EAAI6I,UAAY,EAAGyX,EAAYC,GAAW,IAE7EvgB,EAAImJ,IAAI,EAAG,EAAgB,KAAbI,EAAoB+W,EAAYC,GAAW,GAEvDF,GACFrgB,EAAI0E,OAAO,EAAG,GACd1E,EAAIqF,QAEJrF,EAAIiJ,SAGNjJ,EAAI2M,WAAW1M,IAAUC,IACzBF,EAAI6J,WAgQFzT,GAAO,SAAS8gB,GAEdwJ,IAvBuB1gB,EAuBvB0gB,OAAkBroB,KADtB6e,EAAaA,GAAc,IACoByJ,YAAqBzJ,EAAWyJ,WAC3EK,OAAe3oB,IAAc6e,EAAW+J,SAAkB/J,EAAW+J,QACrEC,OAAkB7oB,IAAc6e,EAAWiK,YAAqBjK,EAAWiK,WAQ3ET,GANJhI,IAAc,EAEVgI,GAAkBpG,IACC1C,EAAAA,EAAAA,SAAAA,GAAmBtO,EAAarJ,GAASC,GAASqJ,EAAYC,GAGjFkX,GAAkBlG,EAAmB,CAQnC,IANsB5C,EAAAA,EAAAA,SAAAA,GAAmB3L,EAAiBhM,GAASC,GAASqJ,EAAYC,IAGtEoO,EAAAA,EAAAA,SAAAA,GAAmBkE,EAAa7b,GAASC,GAASqJ,EAAYC,GAGhF,OAASxF,GAAW,EAAIA,EAAQvO,OAAQ,CACtCksB,IAAAA,EAAe3d,EAAQvO,OACxB,GAED2qB,GAAqBxI,GAAmB5T,IADxC2d,GAC8DlpB,MAAOuL,EAAQ2d,GAAc9pB,KAAMmM,EAAQ2d,GAAcze,OAAO,SAEzH,EAAIye,GAIT,GAAA,OAASvH,GAAQ,EAAIA,EAAK3kB,OAAQ,CAChCmsB,IAAAA,EAAYxH,EAAK3kB,OAClB,GAED2qB,GAAqBxI,GAAmBwC,IADxCwH,GACwDnpB,MAAO2hB,EAAKwH,GAAW/pB,KAAMuiB,EAAKwH,GAAW1e,OAAO,SAEvG,EAAI0e,IAjSQ,SAAS5hB,GAC5BkiB,IAOF3K,EAAS2c,EACT5+B,EAAGukB,EAAK5S,EARNib,EAA2B,IAAb3Y,EAChB4Y,EAAiC,IAAb5Y,EAEpB8Y,EAAiC,IAAb9Y,EACpBgZ,EAA0B,GAAbhZ,EACb+Y,EAAgC,IAAb/Y,EACnBytB,EAAoC,IAAbztB,EAYrB,GARJvJ,EAAI6W,UAAY,SAChB7W,EAAI8W,aAAe,SAEnB9W,EAAI2J,OACJ3J,EAAIgJ,YAAciD,EAAgB7P,WAAWmD,eAC7CS,EAAImF,UAAY8G,EAAgB7P,WAAWmD,eAC3CS,EAAI2M,UAAU1M,GAASC,IAElB80B,EAuGE1/B,IAJLiiB,EAAUrf,KAAKiM,MAAM,GAAMoF,GAAc,gBACzC2qB,EAAUh8B,KAAKiM,MAAmB,IAAboF,GAAqB,MAAQnL,EAAlD,YAEA4B,EAAI4M,OAAmB,EAAZ+P,GACNrnB,EAAI,EAAG,KAAOA,EAAGA,GAAK,EAAG,CAGxBy/B,GADJ/0B,EAAI2J,OACAorB,EAEMz/B,OAAAA,GACD,KAAA,IACH0K,EAAI2M,UAAUqqB,EAAsB,GACpCh3B,EAAI4M,OAAO/O,EAAX,SACAmC,EAAI+W,KAAOQ,EACXvX,EAAIgX,SAAS8d,EAAa,GAAI,EAAG,EAAGvS,GACpCviB,EAAI2M,WAAWqqB,EAAsB,GACrC,MACG,KAAA,GACHh3B,EAAI2M,UAAUqqB,EAAsB,GACpCh3B,EAAI4M,OAAO/O,EAAX,SACAmC,EAAI+W,KAAOQ,EACXvX,EAAIgX,SAAS8d,EAAa,GAAI,EAAG,EAAGvS,GACpCviB,EAAI2M,WAAWqqB,EAAsB,GACrC,MACG,KAAA,IACHh3B,EAAI2M,UAAUqqB,EAAsB,GACpCh3B,EAAI4M,OAAO/O,EAAX,SACAmC,EAAI+W,KAAOQ,EACXvX,EAAIgX,SAAS8d,EAAa,GAAI,EAAG,EAAGvS,GACpCviB,EAAI2M,WAAWqqB,EAAsB,GACrC,MACG,KAAA,IACHh3B,EAAI2M,UAAUqqB,EAAsB,GACpCh3B,EAAI4M,OAAO/O,EAAX,SACAmC,EAAI+W,KAAOQ,EACXvX,EAAIgX,SAAS8d,EAAa,GAAI,EAAG,EAAGvS,GACpCviB,EAAI2M,WAAWqqB,EAAsB,GACrC,MAEG,KAAA,EACA,KAAA,GACA,KAAA,GACA,KAAA,IACA,KAAA,IACA,KAAA,IACA,KAAA,IACA,KAAA,IAEH,MAEF,SACO1hC,EAAI,IAAM,IACb0K,EAAI6I,WAAcvT,EAAI,IAAM,EAAK,IAAM,EACvC0K,EAAIyE,YACJzE,EAAI0E,OAAOwd,EAAa,GACxBjb,GAAM3R,EAAI,IAAM,GAAK+sB,EAAoBF,EACzCniB,EAAI2E,OAAOsC,EAAI,GACfjH,EAAI6E,YACJ7E,EAAIiJ,WAEJjJ,EAAI6I,UAAY,IAChB7I,EAAIyE,YACJzE,EAAI0E,OAAOwd,EAAa,GACxBliB,EAAI2E,OAAOwd,EAAmB,GAC9BniB,EAAI6E,YACJ7E,EAAIiJ,SACJ4Q,GAAOvkB,EAAI,IAAM,IACjB0K,EAAI2M,UAAU2V,EAAkB,GAChCtiB,EAAI4M,OAAO/O,EAAX,SACAmC,EAAI+W,KAAOmd,EACXl0B,EAAIgX,SAAU,IAAI/T,UAAU4W,GAAO,KAAOA,EAAM,EAAG,EAAG0I,GACtDviB,EAAI2M,WAAW2V,EAAkB,SAKlChtB,EAAI,IAAM,IACb0K,EAAI6I,WAAcvT,EAAI,IAAM,EAAK,IAAM,EACvC0K,EAAIyE,YACJzE,EAAI0E,OAAOwd,EAAa,GACxBjb,GAAM3R,EAAI,IAAM,GAAK+sB,EAAoBF,EACzCniB,EAAI2E,OAAOsC,EAAI,GACfjH,EAAI6E,YACJ7E,EAAIiJ,WAEJjJ,EAAI6I,UAAY,IAChB7I,EAAIyE,YACJzE,EAAI0E,OAAOwd,EAAa,GACxBliB,EAAI2E,OAAOwd,EAAmB,GAC9BniB,EAAI6E,YACJ7E,EAAIiJ,SACJ4Q,GAAOvkB,EAAI,IAAM,IACb4gC,GAEErc,EAAM,MACRA,IAAQ,IAAMA,IAGlB7Z,EAAI2M,UAAU2V,EAAkB,GAChCtiB,EAAI4M,OAAO/O,EAAX,SACAmC,EAAI+W,KAAOmd,EACXl0B,EAAIgX,SAAS6C,EAAK,EAAG,EAAG0I,GACxBviB,EAAI2M,WAAW2V,EAAkB,IAGrCtiB,EAAI6J,UACJ7J,EAAI4M,OAAmB,EAAZ+P,QApMRrnB,IAPLiiB,EAAU,IAAOhO,EAAa,WAC9B2qB,EAAU,IAAO3qB,EAAa,WAG9BvJ,EAAI6I,UAAY,EAChB7I,EAAIgJ,YAAciD,EAAgB5P,YAAYkD,eAEzCjK,EAAI,EAAG,IAAMA,EAAGA,GAAK,IAAK,CAYrBA,OAVJ,GAAMA,EAAI,IACZ0K,EAAIyE,YACJzE,EAAI0E,OAAoB,IAAb6E,EAAmB,GAC9BvJ,EAAI2E,OAAoB,IAAb4E,EAAmB,GAC9BvJ,EAAI6E,YACJ7E,EAAIiJ,UAINjJ,EAAI2J,OACIrU,GACD,KAAA,EACH0K,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAO/O,EAAX,SACAmC,EAAI+W,KAAOQ,EACXvX,EAAIgX,SAAS8d,EAAa,GAAI,EAAG,GACjC90B,EAAI2M,UAAwB,KAAbpD,EAAmB,GAClC,MACG,KAAA,GACHvJ,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAO/O,EAAX,SACAmC,EAAI+W,KAAOmd,EACXl0B,EAAIgX,SAAS8d,EAAa,GAAI,EAAG,GACjC90B,EAAI2M,UAAwB,KAAbpD,EAAmB,GAClC,MACG,KAAA,GACHvJ,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAO/O,EAAX,SACAmC,EAAI+W,KAAOQ,EACXvX,EAAIgX,SAAS8d,EAAa,GAAI,EAAG,GACjC90B,EAAI2M,UAAwB,KAAbpD,EAAmB,GAClC,MACG,KAAA,IACHvJ,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAO/O,EAAX,SACAmC,EAAI+W,KAAOmd,EACXl0B,EAAIgX,SAAS8d,EAAa,GAAI,EAAG,GACjC90B,EAAI2M,UAAwB,KAAbpD,EAAmB,GAClC,MACG,KAAA,IACHvJ,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAO/O,EAAX,SACAmC,EAAI+W,KAAOQ,EACXvX,EAAIgX,SAAS8d,EAAa,GAAI,EAAG,GACjC90B,EAAI2M,UAAwB,KAAbpD,EAAmB,GAClC,MACG,KAAA,IACHvJ,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAO/O,EAAX,SACAmC,EAAI+W,KAAOmd,EACXl0B,EAAIgX,SAAS8d,EAAa,GAAI,EAAG,GACjC90B,EAAI2M,UAAwB,KAAbpD,EAAmB,GAClC,MACG,KAAA,IACHvJ,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAO/O,EAAX,SACAmC,EAAI+W,KAAOQ,EACXvX,EAAIgX,SAAS8d,EAAa,GAAI,EAAG,GACjC90B,EAAI2M,UAAwB,KAAbpD,EAAmB,GAClC,MACG,KAAA,IACHvJ,EAAI2M,UAAuB,IAAbpD,EAAmB,GACjCvJ,EAAI4M,OAAO/O,EAAX,SACAmC,EAAI+W,KAAOmd,EACXl0B,EAAIgX,SAAS8d,EAAa,GAAI,EAAG,GACjC90B,EAAI2M,UAAwB,KAAbpD,EAAmB,GAGtCvJ,EAAI6J,WAEAorB,GAAgB,IAAM3/B,GAAK,OAASA,GAAK,KAAOA,GAAK,OAASA,GAAK,KAAOA,GAAK,QAAUA,GAAK,MAAQA,GAAK,QAAUA,GAAK,MAAQA,GAAK,QAAUA,GAAK,MAAQA,GAAK,QAAUA,GAAK,MAAQA,GAAK,QAAUA,GAAK,MAAQA,GAAK,QAAUA,GAAK,MAAQA,IAEpP0K,EAAI2J,OACJ3J,EAAIyE,YAEAnP,EAAI,GACN0K,EAAI0E,OAAoB,IAAb6E,EAAmB,GAE9BvJ,EAAI0E,OAAoB,IAAb6E,EAAmB,GAEhCvJ,EAAI2E,OAAoB,GAAb4E,EAAkB,GAC7BvJ,EAAI6E,YACJ7E,EAAI6J,UACJ7J,EAAIiJ,UAENjJ,EAAI4M,OAAmB,IAAZ+P,GAiHf3c,EAAI2M,WAAW1M,IAAUC,IACzBF,EAAI6J,UA+DF6Y,CAAmB9K,IAqBjBsJ,GAlBAR,GAAkBuU,IACNrd,EAAAA,EAAAA,SAAAA,GAAmB3X,GAASC,GAASqJ,EAAYC,EAAayC,GAI1EyU,GAAkB5F,IACpB5F,GAAY,EAAyBuJ,EAAAA,SAAAA,GAAUD,GAAW/P,GAC1DmJ,GAAkBjW,UAAUuT,EAAWwJ,GAAS+X,IAChD7e,GAAkBjW,UAAUuT,EAAWwJ,GAASgY,IAvEvB12B,EAyEX4X,GAxEZue,EAAgB1gC,OAAS,IAC3BuK,EAAI2J,OACJ3J,EAAI6W,UAAY,SAChB7W,EAAI8W,aAAe,SACnB9W,EAAImF,UAAaixB,EAAiB1b,EAAa5d,OAAOyC,eAAiB0M,EAAgB7P,WAAWmD,eAClGS,EAAI+W,KAAO,IAAQxN,EAAa,MAAQnL,EAAxC,YACA4B,EAAIgX,SAASmf,EAAgB,GAAI5sB,EAAa,EAAiB,IAAdC,EAAiC,GAAbD,GACrEvJ,EAAImF,UAAaixB,EAAiBH,EAAoBn5B,OAAOyC,eAAiB0M,EAAgB7P,WAAWmD,eACzGS,EAAIgX,SAASmf,EAAgB,GAAI5sB,EAAa,EAAiB,IAAdC,EAAiC,GAAbD,GACjEmN,EAAYjhB,OAAS,IACvBuK,EAAImF,UAAY8G,EAAgB7P,WAAWmD,eAC3CS,EAAI+W,KAAO,MAASxN,EAAa,MAAQnL,EAAzC,YACA4B,EAAIgX,SAASN,EAAanN,EAAa,EAAiB,GAAdC,EAAgC,GAAbD,MA+D7DyX,KACe8V,EAAAA,EAAAA,SAAAA,GAAuBvtB,EAAYysB,EAAoBC,EAAqBhqB,EAAgB7P,aAC5Fw6B,EAAAA,EAAAA,SAAAA,GAAsBrtB,EAAYwsB,EAAmBrb,EAAczO,EAAgB7P,aAGlG8kB,GAAkBxF,EAAmB,CACnCsH,IAAAA,EAA0C,WAA3B+S,EAAkBn+B,MAAgD,WAA3Bm+B,EAAkBn+B,MAClDkgB,EAAAA,EAAAA,SAAAA,GAAmB/E,EAAgBxJ,EAAYC,EAAawZ,EAAa5R,EAAUG,KAI7G0R,GAAe,SAASC,GAEtBE,IAAAA,OAAmB/qB,KADvB6qB,EAAUA,GAAW,IACwBvC,YAAqBuC,EAAQvC,WACtE4C,OAAgBlrB,IAAc6qB,EAAQjC,SAAkBiC,EAAQjC,QAChEuC,OAAmBnrB,IAAc6qB,EAAQ/B,YAAqB+B,EAAQ/B,WAGtEiC,IACFzL,GAAiB9V,MAAQqG,EACzByP,GAAiB7V,OAASoG,EAC1B0P,GAAoBD,GAAiBlW,WAAW,OAG9C8hB,IACFoT,GAAoB90B,MAAQqG,EAC5ByuB,GAAoB70B,OAASoG,EAC7B0uB,GAAuBD,GAAoBl1B,WAAW,MAEtDo1B,GAAqBh1B,MAAQqG,EAC7B2uB,GAAqB/0B,OAASoG,EAC9B4uB,GAAwBD,GAAqBp1B,WAAW,OAGtD+hB,IACF3L,GAAiBhW,MAAQqG,EACzB2P,GAAiB/V,OAASoG,EAC1B4P,GAAoBD,GAAiBpW,WAAW,QAiW7C,OA5VFw1B,KAAAA,eAAiB,SAASlT,GAUtB,OANPA,EAAW/K,WAAW+K,GAElBsS,KADJtS,EAAwB,MAAbA,EAAmB,IAAMA,EAAW,OAE7CsS,EAActS,EACT5K,KAAAA,WAEA,MAGJ+d,KAAAA,eAAiB,WACbb,OAAAA,GAGJc,KAAAA,gBAAkB,SAASpT,GAUvB,OANPA,EAAW/K,WAAW+K,GAElBuS,KADJvS,EAAwB,MAAbA,EAAmB,IAAMA,EAAW,OAE7CuS,EAAevS,EACV5K,KAAAA,WAEA,MAGJie,KAAAA,gBAAkB,WACdd,OAAAA,GAGJe,KAAAA,uBAAyB,SAAStT,EAAUpc,GAC3Cqc,IAAAA,EAEFyR,EACApR,EAFAtL,EAAQ,KAkDH,OA5CPgL,EAAW/K,WAAW+K,GAGlBsS,KAFJrS,EAA4B,MAAbD,EAAmB,IAAMA,EAAW,YAG7C1rB,IAAcw9B,GAAeA,EAAY/8B,WAC3C+8B,EAAYh+B,OAKD,KAFb49B,GAAO,EAAiBY,EAAAA,kBAAAA,EAAarS,KAGnCK,EAAOhI,EAA0BnkB,KAAKiC,IAAIs7B,GAAQ,IAClDpR,EAAOnsB,KAAKgO,IAAIme,EAAMhI,EAA0B,IAChDwZ,EAAc,IAAI7gC,EAAJ,QAAU,GAAI,GAAIA,EAAMgG,QAAAA,iBAAkBq7B,EAAaA,EAAcZ,EAAMpR,IAC7EpL,gBAAkB,SAASC,GACrCmd,EAAoC,MAAtBnd,EAAMvhB,OAAOX,KAAe,IAAMkiB,EAAMvhB,OAAOX,KAAO,IAC/D2hB,IACHA,GAAa,GACII,EAAAA,EAAAA,kBAAAA,EAAMI,WAI3B0c,EAAYzc,iBAAmB,WAC7Bid,EAAcrS,EACTrL,IACHA,GAAa,GACII,EAAAA,EAAAA,kBAAAA,EAAMI,UAGrBxR,GAAiC,mBAAdA,GACrBA,KAIJkuB,EAAYp9B,UAGZ49B,EAAcrS,EACTrL,IACHA,GAAa,GACII,EAAAA,EAAAA,kBAAAA,EAAMI,YAItB,MAGJme,KAAAA,wBAA0B,SAASvT,EAAUpc,GAC5Cqc,IAAAA,EAEFyR,EAAMpR,EADNtL,EAAQ,KA+CH,OA1CPgL,EAAW/K,WAAW+K,GACtBC,EAA4B,MAAbD,EAAmB,IAAMA,EAAW,IAC/CuS,IAAiBvS,SACf1rB,IAAcy9B,GAAgBA,EAAah9B,WAC7Cg9B,EAAaj+B,OAIF,KADb49B,GAAO,EAAiBa,EAAAA,kBAAAA,EAActS,KAEpCK,EAAOhI,EAA0BnkB,KAAKiC,IAAIs7B,GAAQ,IAClDpR,EAAOnsB,KAAKgO,IAAIme,EAAMhI,EAA0B,IAChDyZ,EAAe,IAAI9gC,EAAJ,QAAU,GAAI,GAAIA,EAAMgG,QAAAA,iBAAkBs7B,EAAcA,EAAeb,EAAMpR,IAC/EpL,gBAAkB,SAASC,GACtCod,EAAqC,MAAtBpd,EAAMvhB,OAAOX,KAAe,IAAMkiB,EAAMvhB,OAAOX,KAAO,IAChE2hB,IACHA,GAAa,GACII,EAAAA,EAAAA,kBAAAA,EAAMI,WAI3B2c,EAAa1c,iBAAmB,WAC9Bkd,EAAetS,EACVrL,IACHA,GAAa,GACII,EAAAA,EAAAA,kBAAAA,EAAMI,UAGrBxR,GAAiC,mBAAdA,GACrBA,KAIJmuB,EAAar9B,UAGb69B,EAAetS,EACVrL,IACHA,GAAa,GACII,EAAAA,EAAAA,kBAAAA,EAAMI,YAItB,MAGJmM,KAAAA,QAAU,SAASC,GASf,OARPnL,EAAOmL,EACPtC,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJqM,KAAAA,WAAa,SAASC,GASlB,OARPzhB,EAAUyhB,EACVxC,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJ2M,KAAAA,eAAiB,SAASC,GAStB,OARPzc,EAAcyc,EACd9C,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJ6M,KAAAA,mBAAqB,SAASC,GAS1B,OARPha,EAAkBga,EAClBhD,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJ+M,KAAAA,kBAAoB,SAASC,GASzB,OARPlD,GAAa,CACX9B,YAAY,IAEdpO,EAAiBoT,EACjB/vB,GAAK,CACH+qB,YAAY,IAEThI,KAAAA,UACE,MAGJmN,KAAAA,gBAAkB,SAASC,GASvB,OARPtD,GAAa,CACXhC,SAAS,IAEXvG,EAAe6L,EACfnwB,GAAK,CACH6qB,SAAS,IAEN9H,KAAAA,UACE,MAGJoe,KAAAA,uBAAyB,SAAShR,GAS9B,OARPtD,GAAa,CACXhC,SAAS,IAEXgV,EAAsB1P,EACtBnwB,GAAK,CACH6qB,SAAS,IAEN9H,KAAAA,UACE,MAGJiN,KAAAA,eAAiB,SAASC,GAWtB,OAVP0P,EAAoB1P,EACpBpD,GAAa,CACXhC,SAAS,EACTE,YAAY,IAEd/qB,GAAK,CACH6qB,SAAS,EACTE,YAAY,IAEThI,KAAAA,UACE,MAGJqe,KAAAA,sBAAwB,SAASnR,GAW7B,OAVP2P,EAAqB3P,EACrBpD,GAAa,CACXhC,SAAS,EACTE,YAAY,IAEd/qB,GAAK,CACH6qB,SAAS,EACTE,YAAY,IAEThI,KAAAA,UACE,MAGJuc,KAAAA,gBAAkB,SAASC,GASvB,OARPb,EAAea,EACf1S,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJ8N,KAAAA,YAAc,SAASC,GASnB,OARPzY,EAAWyY,EACXjE,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJse,KAAAA,mBAAqB,SAASC,GAS1B,OARPvB,EAAkBuB,EAClBzU,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJA,KAAAA,QAAU,WACRT,IACHtiB,GAAK,CACHqqB,OAAO,EACPE,YAAY,EACZE,KAAK,EACLI,SAAS,EACTE,YAAY,IAIhB7E,EAAQiL,UAAU,EAAG,EAAGjL,EAAQtS,OAAOnI,MAAOya,EAAQtS,OAAOlI,SAEzDwY,GAAgBE,IAClB8B,EAAQ3a,UAAUgW,GAAkB,EAAG,GAIrCmD,IACFqF,GAAYkW,GAAa,GACzBlW,GAAYmW,GAAc,IAI5BE,EAAeF,EAAe3Z,EAI1BtI,IAAAA,EAA4B,KAAb9K,EAGnB+S,EAAQ3S,OACR2S,EAAQ3P,UAAU1M,GAASC,IAC3Boc,EAAQ1P,OAAO4pB,GACfla,EAAQ3P,WAAW1M,IAAUC,IAE7Boc,EAAQhI,YAAc,qBACtBgI,EAAQ/H,cAAgB+H,EAAQ9H,cAAgBH,EAChDiI,EAAQ7H,WAA4B,EAAfJ,EAErBiI,EAAQ3a,UAAUk1B,GAAsB,EAAG,GAE3CN,EAAcF,EAAc1Z,EAAY6Z,EACxCla,EAAQ3P,UAAU1M,GAASC,IAC3Boc,EAAQ1P,OAAO2pB,GACfja,EAAQ3P,WAAW1M,IAAUC,IAC7Boc,EAAQ3a,UAAUg1B,GAAqB,EAAG,GAC1Cra,EAAQzS,UAEJ6R,GACFY,EAAQ3a,UAAUkW,GAAkB,EAAG,GAGzCc,GAAa,GAIVQ,KAAAA,UAEE,MAGMyc,EAAAA,EAAAA,QAAAA,QAAAA;;ACpZA+B,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA5ef,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,2BACA,EAAA,EAAA,QAAA,gCACA,EAAA,QAAA,WAWA,EAAA,QAAA,iBA8deA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAvcf,IAAIA,EAAU,SAAS3tB,EAAQkN,GAEzBhP,IAOA0vB,EACAC,EARA3vB,OAAQ7P,KADZ6e,EAAaA,GAAc,IACUhP,KAAO,EAAIgP,EAAWhP,KACzDoB,OAAejR,IAAc6e,EAAW5N,YAAc+Q,EAAY1I,YAAAA,MAAQuF,EAAW5N,YACrFgR,OAAgBjiB,IAAc6e,EAAWoD,cAAsBpD,EAAWoD,aAC1EvH,OAAkB1a,IAAc6e,EAAWnE,eAAiB0I,EAAe/K,eAAAA,MAAQwG,EAAWnE,eAC9F2I,OAAqBrjB,IAAc6e,EAAWwE,mBAA2BxE,EAAWwE,kBACpFhB,OAAgBriB,IAAc6e,EAAWwD,aAAerf,EAASqS,MAAAA,MAAQwJ,EAAWwD,aAIlF/B,GAAa,EACbmf,EAAO,EACPC,EAAQ,EACRC,EAAc59B,EAAK8N,GAAAA,EAAQ,IAC3B+vB,EAAc,EACdC,GAAa,EAGb5b,GAAU,EAAiBtS,EAAAA,kBAAAA,GAElB,IAAT9B,IACFA,EAAOhQ,KAAK+N,IAAIqW,EAAQtS,OAAOnI,MAAOya,EAAQtS,OAAOlI,SAIvDwa,EAAQtS,OAAOnI,MAAQqG,EACvBoU,EAAQtS,OAAOlI,OAASoG,EAEpBqB,IAAAA,EAAarB,EACbsB,EAActB,EAEdjI,EAAUsJ,EAAa,EACvBrJ,EAAUsJ,EAAc,EAExBkP,GAAc,EAIdf,GAAmB,EAAazP,EAAAA,cAAAA,EAAMA,GACtC0P,EAAoBD,EAAiBlW,WAAW,MAGhD02B,GAAc,EAAajwB,EAAAA,cAAAA,EAAMA,EAAO9N,EAA1B,IACdg+B,EAAeD,EAAY12B,WAAW,MAGtCuU,GAAkB,EAAa9N,EAAAA,cAAO,QAAPA,EAAwB,QAAPA,GAChDmwB,EAAmBriB,EAAgBvU,WAAW,MAG9CoW,GAAmB,EAAa3P,EAAAA,cAAAA,EAAMA,GACtC4P,EAAoBD,EAAiBpW,WAAW,MAoLhDrL,EAAO,WACTsiB,GAAc,EAEV4B,IACmB1C,EAAAA,EAAAA,SAAAA,EAAmBtO,EAAarJ,EAASC,EAASqJ,EAAYC,GArLtD,SAASxJ,GACxCA,EAAI2J,OAEA2uB,IAEA93B,EAFA83B,EAAWpwB,EACXqwB,EAAYrwB,EAAO9N,EAAvB,GAIA4F,EAAIyE,YACJzE,EAAIoF,KAAK,EAAG,EAAGkzB,EAAUC,GACzBv4B,EAAI6E,YACA2zB,IAAAA,EAAmBx4B,EAAI2I,qBAAqB,EAAG,EAAG,EAAG4vB,GACzDC,EAAiB5vB,aAAa,EAAG,WACjC4vB,EAAiB5vB,aAAa,GAAK,WACnC4vB,EAAiB5vB,aAAa,GAAK,WACnC4vB,EAAiB5vB,aAAa,EAAG,WACjC5I,EAAImF,UAAYqzB,EAChBx4B,EAAIqF,OAEJrF,EAAI6I,UAAY,EACZ4vB,IAAAA,EAAYF,EAAY,IAAM,EAC9BG,GAAU,EACVC,EAAO,GAEX34B,EAAI6W,UAAY,SAChB7W,EAAI8W,aAAe,SACf+K,IAAAA,EAAsB,IAAXyW,EAGV93B,IAFLR,EAAI+W,KAAO8K,EAAW,MAAQzjB,EAA9B,YACA4B,EAAImF,UAAY,UACX3E,EAAI+3B,EAAY,EAAIE,EAAWj4B,EAAI,EAAGA,GAAKi4B,EAC1CE,GAAQ,KACND,GACF14B,EAAIgX,SAAS2hB,GAAOL,EAAuB,GAAXA,GAAmB,EAAI,EAAG93B,EAAc,KAAX83B,GAC7Dt4B,EAAIgX,SAAS2hB,EAAML,GAAYA,EAAuB,GAAXA,GAAmB,EAAI,EAAG93B,EAAc,KAAX83B,GACxEt4B,EAAIyE,YACJzE,EAAI0E,QAAQ4zB,EAAuB,GAAXA,GAAmB,EAAG93B,GAC9CR,EAAI2E,OAAO2zB,GAAYA,EAAuB,GAAXA,GAAmB,EAAG93B,GACzDR,EAAI6E,YACJ8zB,GAAQ,KAER34B,EAAIyE,YACJzE,EAAI0E,QAAQ4zB,EAAuB,GAAXA,GAAmB,EAAG93B,GAC9CR,EAAI2E,OAAO2zB,GAAYA,EAAuB,GAAXA,GAAmB,EAAG93B,GACzDR,EAAI6E,aAEN7E,EAAIiJ,UAENyvB,IAAW,EAaRl4B,IAXLk4B,GAAU,EACVC,EAAO,GACP34B,EAAIgJ,YAAc,UAClBhJ,EAAI6I,UAAY,IAChB7I,EAAIyE,YACJzE,EAAI0E,OAAO,EAAG6zB,EAAY,GAC1Bv4B,EAAI2E,OAAO2zB,EAAUC,EAAY,GACjCv4B,EAAI6E,YACJ7E,EAAIiJ,SACJjJ,EAAImF,UAAY,UAChBnF,EAAI6I,UAAY,EACXrI,EAAI+3B,EAAY,EAAIE,EAAWj4B,GAAK+3B,EAAW/3B,GAAKi4B,EACnDE,GAAQ,KACND,GACF14B,EAAIgX,UAAU2hB,GAAOL,EAAuB,GAAXA,GAAmB,EAAI,EAAG93B,EAAc,KAAX83B,GAC9Dt4B,EAAIgX,UAAU2hB,EAAML,GAAYA,EAAuB,GAAXA,GAAmB,EAAI,EAAG93B,EAAc,KAAX83B,GACzEt4B,EAAIyE,YACJzE,EAAI0E,QAAQ4zB,EAAuB,GAAXA,GAAmB,EAAG93B,GAC9CR,EAAI2E,OAAO2zB,GAAYA,EAAuB,GAAXA,GAAmB,EAAG93B,GACzDR,EAAI6E,YACJ8zB,GAAQ,KAER34B,EAAIyE,YACJzE,EAAI0E,QAAQ4zB,EAAuB,GAAXA,GAAmB,EAAG93B,GAC9CR,EAAI2E,OAAO2zB,GAAYA,EAAuB,GAAXA,GAAmB,EAAG93B,GACzDR,EAAI6E,aAEN7E,EAAIiJ,UAENyvB,IAAW,EAGb14B,EAAI6J,UAuGJ+uB,CAA2BR,GA7BJ,SAASp4B,GAChCA,EAAI2J,OAEA2uB,IAAAA,EAAwB,QAAb/uB,EACXgvB,EAA0B,QAAd/uB,EAEhBxJ,EAAIyE,YACJzE,EAAI0E,OAAkB,GAAX4zB,EAAgB,GAC3Bt4B,EAAI2E,OAAO,EAAG4zB,GACdv4B,EAAI2E,OAAO2zB,EAAUC,GACrBv4B,EAAI6E,YAEJ7E,EAAImF,UAAYuV,EAAa3d,MAAMwC,eACnCS,EAAIqF,OACJrF,EAAIgJ,YAAc0R,EAAa5d,OAAOyC,eACtCS,EAAIiJ,SAEJjJ,EAAI6J,UAcJgvB,CAAmBR,GAtGY,SAASr4B,GACxCA,EAAI2J,OAEJ3J,EAAImF,UAAYuV,EAAa3d,MAAMwC,eAGnCS,EAAIyE,YACJzE,EAAI0E,OAAoB,QAAb6E,EAAqC,GAAdC,GAClCxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,GAAbD,EAAgC,QAAdC,GAClIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,GAAdC,GACvIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,GAAbD,EAAgC,QAAdC,GAClIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,GAAdC,GACvIxJ,EAAI6E,YACJ7E,EAAI0E,OAAoB,QAAb6E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GACvIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GACvIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GACvIxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GACvIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,OAAbD,EAAqC,QAAdC,GACvIxJ,EAAIkJ,cAA2B,OAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GACvIxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,OAAbD,EAAqC,QAAdC,EAAqC,OAAbD,EAAqC,QAAdC,GACvIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,OAAdC,EAAqC,GAAbD,EAAgC,OAAdC,GAClIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,OAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GACvIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GACvIxJ,EAAI6E,YACJ7E,EAAIqF,OAGAszB,IAKAt4B,EAJAy4B,EAAU,EAAI/6B,EAAlB,WAKKsC,IAJLL,EAAI2M,UAAU1M,EAASC,GACvBF,EAAI4M,QAAQ/O,EAAZ,SACAmC,EAAI2M,WAAW1M,GAAUC,GAEpBG,GAAS,GAAIA,GAAS,GAAIA,GANpB,EAOLA,EAAQ,IAAO,GAAe,IAAVA,GACtBL,EAAIgJ,YAAc0R,EAAa5d,OAAOyC,eACtCS,EAAI6I,UAAY,EAChB7I,EAAIyE,YACJzE,EAAI0E,OAAoB,GAAb6E,EAAgC,QAAdC,GAC7BxJ,EAAI2E,OAAoB,GAAb4E,EAAgC,KAAdC,GAC7BxJ,EAAI6E,YACJ7E,EAAIiJ,UACK5I,EAAQ,IAAO,GACxBL,EAAIgJ,YAAc,UAClBhJ,EAAI6I,UAAY,EAChB7I,EAAIyE,YACJzE,EAAI0E,OAAoB,GAAb6E,EAAgC,QAAdC,GAC7BxJ,EAAI2E,OAAoB,GAAb4E,EAAgC,QAAdC,GAC7BxJ,EAAI6E,YACJ7E,EAAIiJ,WAEJjJ,EAAIgJ,YAAc,UAClBhJ,EAAI6I,UAAY,GAChB7I,EAAIyE,YACJzE,EAAI0E,OAAoB,GAAb6E,EAAgC,QAAdC,GAC7BxJ,EAAI2E,OAAoB,GAAb4E,EAAgC,QAAdC,GAC7BxJ,EAAI6E,YACJ7E,EAAIiJ,UAENjJ,EAAI2M,UAAU1M,EAASC,GACvBF,EAAI4M,OAAOksB,EAAS74B,EAASC,GAC7BF,EAAI2M,WAAW1M,GAAUC,GAG3BF,EAAI6J,UAoCJkvB,CAA2BjhB,GAEvB4D,IACwB5D,EAAAA,EAAAA,SAAAA,EAAmB/E,EAAgBxJ,EAAYC,GAAa,EAAM4H,EAA5F,SAAsGG,EAAtG,UAAiHd,EAAjH,YAIAwS,EAAe,WAEjBtL,EAAiB9V,MAAQqG,EACzByP,EAAiB7V,OAASoG,EAC1B0P,EAAoBD,EAAiBlW,WAAW,MAGhD02B,EAAYt2B,MAAQqG,EACpBiwB,EAAYr2B,OAASoG,EAAO9N,EAA5B,GACAg+B,EAAeD,EAAY12B,WAAW,MAGtCuU,EAAgBnU,MAAe,QAAPqG,EACxB8N,EAAgBlU,OAAgB,QAAPoG,EACzBmwB,EAAmBriB,EAAgBvU,WAAW,MAG9CoW,EAAiBhW,MAAQqG,EACzB2P,EAAiB/V,OAASoG,EAC1B4P,EAAoBD,EAAiBpW,WAAW,OAuL3C,OAnLFu3B,KAAAA,QAAU,SAASC,GAMf,OALPA,EAAUjgB,WAAWigB,GAAW,IAC5BnB,IAASmB,IACXnB,EAAOmB,EACF9f,KAAAA,WAEA,MAGJ+f,KAAAA,QAAU,WACNpB,OAAAA,GAGJqB,KAAAA,gBAAkB,SAASF,EAAStxB,GACnCoR,IAAAA,EAAQ,KAyBL,OAxBPkgB,EAAUjgB,WAAWigB,GAAW,IAC5BnB,IAASmB,SAEP5gC,IAAcu/B,GAAaA,EAAU9+B,WACvC8+B,EAAU//B,QAGZ+/B,EAAY,IAAI5iC,EAAJ,QAAU,GAAI,GAAIA,EAAMgG,QAAAA,iBAAkB88B,EAAMmB,EAAS,IAE3DhgB,gBAAkB,SAASC,GACnC4e,EAAO5e,EAAMvhB,OAAOX,KACf2hB,IACHA,GAAa,GACII,EAAAA,EAAAA,kBAAAA,EAAMI,WAKvBxR,GAAiC,mBAAdA,IACrBiwB,EAAUxe,iBAAmBzR,GAG/BiwB,EAAUn/B,SAEL,MAGJ2gC,KAAAA,SAAW,SAASC,GAwBhB,OArBPA,GAAargB,WAAWqgB,GAAY,IAAMpB,GAAe,IAAO,IAE5DF,IAAUsB,KACZtB,EAAQsB,GACI,IACVtB,EAAQ,IAAMA,EAAQ,IACjBG,GACEc,KAAAA,QAAQlB,EAAO,KAEtBI,GAAa,GACJH,GAAS,IAClBA,GAAgB,GAAKA,EAAZ,GACJG,GACEc,KAAAA,QAAQlB,EAAO,KAEtBI,GAAa,GAEbA,GAAa,EAEV/e,KAAAA,WAEA,MAGJmgB,KAAAA,SAAW,WACPvB,OAAAA,GAGJwB,KAAAA,iBAAmB,SAASF,EAAU1xB,GACrCoR,IAAAA,EAAQ,KAuCL,OAtCPsgB,EAAWrgB,WAAWqgB,GAElBtB,IAAUsB,SACRhhC,IAAcw/B,GAAcA,EAAW/+B,WACzC++B,EAAWhgC,QAEbggC,EAAa,IAAI7iC,EAAJ,QAAU,GAAI,GAAIA,EAAMgG,QAAAA,iBAAkB+8B,EAAOsB,EAAU,IAC7DpgB,gBAAkB,SAASC,IACpC6e,EAAQ7e,EAAMvhB,OAAOX,MACT,IACV+gC,EAAQ,IAAMA,EAAQ,IACjBG,GACEc,KAAAA,QAAQlB,EAAO,KAEtBI,GAAa,GACJH,GAAS,IAClBA,GAAgB,GAAKA,EAAZ,GACJG,GACEc,KAAAA,QAAQlB,EAAO,KAEtBI,GAAa,GAEbA,GAAa,EAEVvf,IACHA,GAAa,GACII,EAAAA,EAAAA,kBAAAA,EAAMI,UAEzBJ,EAAMqgB,SAASlgB,EAAMvhB,OAAOX,OAI1B2Q,GAAiC,mBAAdA,IACrBkwB,EAAWze,iBAAmBzR,GAGhCkwB,EAAWp/B,SAEN,MAGJ+gC,KAAAA,eAAiB,SAASC,GAGtB,OAFPxB,EAAcjf,WAAWygB,GACpBtgB,KAAAA,UACE,MAGJ2M,KAAAA,eAAiB,SAASC,GAKtB,OAJP9C,IACA3Z,EAAcyc,EACd3vB,IACK+iB,KAAAA,UACE,MAGJ+M,KAAAA,kBAAoB,SAASC,GAKzB,OAJPlD,IACAlQ,EAAiBoT,EACjB/vB,IACK+iB,KAAAA,UACE,MAGJA,KAAAA,QAAU,WACRT,GACHtiB,IAGFkmB,EAAQ3S,OACR2S,EAAQiL,UAAU,EAAG,EAAGjL,EAAQtS,OAAOnI,MAAOya,EAAQtS,OAAOlI,QAE7Dwa,EAAQ3a,UAAUgW,EAAkB,EAAG,GAEvC2E,EAAQ3S,OAGR2S,EAAQ7X,YACR6X,EAAQnT,IAAIlJ,EAASC,EAAsB,QAAbqJ,EAAwB,EAAG,EAAGzL,EAA5D,QAAoE,GACpEwe,EAAQzX,YACRyX,EAAQ1S,OAGR0S,EAAQ3P,UAAU1M,EAASC,GAC3Boc,EAAQ1P,QAASkrB,EAAO/5B,EAAT,YACfue,EAAQ3P,WAAW1M,EAAS,GAE5Bqc,EAAQ3P,UAAU,EAAIorB,EAAQC,GAG9B1b,EAAQ3a,UAAUw2B,EAAa,GAAIA,EAAYr2B,OAAS,GAGxDwa,EAAQ3P,UAAU,GAAKorB,EAAQC,EAAc93B,GAC7Coc,EAAQ3a,UAAUqU,EAA+B,GAAbzM,EAAmByM,EAAgBnU,MAAQ,EAAkB,QAAb0H,GACpF+S,EAAQzS,UAERyS,EAAQ3a,UAAUkW,EAAkB,EAAG,GAEvCyE,EAAQzS,WAILsP,KAAAA,UAEE,MAGMwe,EAAAA,EAAAA,QAAAA,QAAAA;;ACvWA9W,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EApIf,IAAA,EAAA,EAAA,QAAA,qBACA,EAAA,QAAA,WAKA,EAAA,QAAA,iBA8HeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GA7Gf,IAAIA,EAAM,SAAS7W,EAAQkN,GAErBhP,IAAAA,OAAQ7P,KADZ6e,EAAaA,GAAc,IACUhP,KAAO,EAAIgP,EAAWhP,KACzD+H,OAAY5X,IAAc6e,EAAWjH,SAAWiL,EAAShL,SAAAA,QAAUgH,EAAWjH,SAE5EuN,GAAc,EACdE,EAAa,EAGbpB,GAAU,EAAiBtS,EAAAA,kBAAAA,GAElB,IAAT9B,IACFA,EAAOhQ,KAAK+N,IAAIqW,EAAQtS,OAAOnI,MAAOya,EAAQtS,OAAOlI,SAIvDwa,EAAQtS,OAAOnI,MAAQqG,EACvBoU,EAAQtS,OAAOlI,OAASoG,EAEpBwQ,IAAAA,GAAc,EAGd0G,EAAcnhB,EAAI6G,IAAAA,cAAc,UACpCsa,EAAYvd,MAAQqG,EACpBkX,EAAYtd,OAASoG,EACjBmX,IAAAA,EAAeD,EAAY3d,WAAW,MAGtC6d,EAAerhB,EAAI6G,IAAAA,cAAc,UACrCwa,EAAazd,MAAQqG,EACrBoX,EAAaxd,OAASoG,EAClBqX,IAAAA,EAAgBD,EAAa7d,WAAW,MAGxCoT,EAAYyK,EAcXoa,KAAAA,UAAY,WAOR,OALL7kB,EADEA,IAAcuK,EACJE,EAEAF,EAEdjG,IACO,MAGJqN,KAAAA,YAAc,SAASmT,GAInB,OAHP1pB,EAAW0pB,EACXjhB,GAAc,EACdS,IACO,MAGJygB,KAAAA,YAAc,SAAS/S,GAOnB,OALLhS,EADIgS,EACQzH,EAEAE,EAEdnG,IACO,MAGJwK,KAAAA,MAAQ,SAASA,GAab,OAZDA,EACCnG,IACHE,EAAamG,YAAY,KAAK6V,UAAW,KACzClc,GAAc,GAGZA,IACFsG,cAAcpG,GACdF,GAAc,EACd3I,EAAYyK,GAGT,MAGLnG,IAAAA,EAAU,WACPT,IAvDLA,GAAc,EAGd2G,EAAakI,UAAU,EAAG,EAAGlI,EAAarV,OAAOnI,MAAOwd,EAAarV,OAAOlI,QAC5Eud,EAAa1d,WAAU,EAAeuG,EAAAA,SAAAA,EAAM,EAAG+H,GAAW,EAAG,GAG7DsP,EAAcgI,UAAU,EAAG,EAAGhI,EAAcvV,OAAOnI,MAAO0d,EAAcvV,OAAOlI,QAC/Eyd,EAAc5d,WAAU,EAAeuG,EAAAA,SAAAA,EAAM,EAAG+H,GAAW,EAAG,IAmD9DqM,EAAQ3S,OACR2S,EAAQiL,UAAU,EAAG,EAAGjL,EAAQtS,OAAOnI,MAAOya,EAAQtS,OAAOlI,QAE7Dwa,EAAQ3a,UAAUkT,EAAW,EAAG,GAEhCyH,EAAQzS,WAKH,OAFPsP,IAEO,MAGM0H,EAAAA,EAAAA,QAAAA,QAAAA;;AComBAgZ,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAxuBf,IAAA,EAAA,EAAA,QAAA,2BACA,EAAA,EAAA,QAAA,gCACA,EAAA,EAAA,QAAA,4BACA,EAAA,EAAA,QAAA,gCACA,EAAA,QAAA,WAOA,EAAA,QAAA,iBA6tBeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GA5sBf,IAAIA,EAAQ,SAAS7vB,EAAQkN,GAEvBhP,IAqBA4xB,EACAC,EACAC,EACAC,EAxBA/xB,OAAQ7P,KADZ6e,EAAaA,GAAc,IACUhP,KAAO,EAAIgP,EAAWhP,KACzDoB,OAAejR,IAAc6e,EAAW5N,YAAc+Q,EAAY1I,YAAAA,MAAQuF,EAAW5N,YACrFgR,OAAgBjiB,IAAc6e,EAAWoD,cAAsBpD,EAAWoD,aAC1EnI,OAAe9Z,IAAc6e,EAAW/E,YAAcsI,EAAY/J,YAAAA,MAAQwG,EAAW/E,YACrFuI,OAAgBriB,IAAc6e,EAAWwD,aAAgBvI,IAAgBsI,EAAY/J,YAAAA,MAAQrV,EAASuT,MAAAA,KAAOvT,EAASsS,MAAAA,MAASuJ,EAAWwD,aAC1IzO,OAAmB5T,IAAc6e,EAAWjL,gBAAmBkG,IAAgBsI,EAAY/J,YAAAA,MAAQ6J,EAAgBtM,gBAAAA,WAAasM,EAAgB9M,gBAAAA,WAAcyJ,EAAWjL,gBACzKuO,OAAqBniB,IAAc6e,EAAWsD,mBAA2BtD,EAAWsD,kBACpFzH,OAAkB1a,IAAc6e,EAAWnE,eAAiB0I,EAAe/K,eAAAA,MAAQwG,EAAWnE,eAC9F2I,OAAqBrjB,IAAc6e,EAAWwE,mBAA2BxE,EAAWwE,kBACpFI,OAAezjB,IAAc6e,EAAW4E,YAAc,KAAO5E,EAAW4E,YACxEoe,OAAe7hC,IAAc6e,EAAWgjB,aAAqBhjB,EAAWgjB,YACxEC,OAAQ9hC,IAAc6e,EAAWijB,KAAO,GAAKjjB,EAAWijB,KACxDC,OAAU/hC,IAAc6e,EAAWkjB,OAAS,EAAIljB,EAAWkjB,OAC3DC,OAAUhiC,IAAc6e,EAAWmjB,OAAS,EAAInjB,EAAWmjB,OAC3DC,OAAyBjiC,IAAc6e,EAAWojB,uBAAgCpjB,EAAWojB,sBAC7FC,OAAsBliC,IAAc6e,EAAWqjB,mBAAqB,EAAIrjB,EAAWqjB,mBACnFC,OAAwBniC,IAAc6e,EAAWsjB,qBAAuB,EAAItjB,EAAWsjB,qBACvFC,OAAwBpiC,IAAc6e,EAAWujB,sBAA8BvjB,EAAWujB,qBAGxFC,EAAU,IAAI7gC,KAKd8gC,EAAgBL,EAAwB,IAAM,IAClDK,EAAgBF,EAAuBE,EAAe,IAElDtd,IAAAA,EAAO,KAMPf,GAAU,EAAiBtS,EAAAA,kBAAAA,GAElB,IAAT9B,IACFA,EAAOhQ,KAAK+N,IAAIqW,EAAQtS,OAAOnI,MAAOya,EAAQtS,OAAOlI,SAIvDwa,EAAQtS,OAAOnI,MAAQqG,EACvBoU,EAAQtS,OAAOlI,OAASoG,EAEpBqB,IAAAA,EAAarB,EACbsB,EAActB,EAEdjI,EAAUsJ,EAAa,EACvBrJ,EAAUsJ,EAAc,EAExBkP,GAAc,EAGdwG,GAAc,EAAahX,EAAAA,cAAAA,EAAMA,GACjCiX,EAAeD,EAAYzd,WAAW,MAGtCkW,GAAmB,EAAazP,EAAAA,cAAAA,EAAMA,GACtC0P,EAAoBD,EAAiBlW,WAAW,MAGhDm5B,GAAa,EAAa1yB,EAAAA,cAAAA,EAAMA,GAChC2yB,EAAcD,EAAWn5B,WAAW,MAGpCq5B,GAAe,EAAa5yB,EAAAA,cAAAA,EAAMA,GAClC6yB,EAAgBD,EAAar5B,WAAW,MAGxCu5B,GAAe,EAAa9yB,EAAAA,cAAAA,EAAMA,GAClC+yB,EAAgBD,EAAav5B,WAAW,MAGxCoW,GAAmB,EAAa3P,EAAAA,cAAAA,EAAMA,GACtC4P,EAAoBD,EAAiBpW,WAAW,MAkQhDy5B,EAAkB,SAASf,EAAMC,EAAQC,GAC3CL,EA9Se,EA8SMK,EAAsBt8B,EAA3C,WACA+7B,EA/Se,EA+SMM,EAAsBr8B,EAA3C,WACAg8B,EAhTe,GAgTKI,EAAOC,EAAS,IAAmB,EAAIr8B,EAA3D,YAGEo9B,EAAW,SAAXA,IACEjB,EACFQ,EAAU,IAAI7gC,MAEd6gC,EAAQU,SAASjB,GACjBO,EAAQW,WAAWjB,GACnBM,EAAQY,WAAWjB,IAGrBA,EAASK,EAAQa,cAAgBjB,EAAwBI,EAAQc,kBAAoB,IAAO,GAI1FrB,EADyB,IAAvBI,EACKG,EAAQe,cAAgBlB,EAExBG,EAAQgB,WAEjBvB,GAAc,IAIZC,EAD2B,IAAzBI,EACOE,EAAQiB,gBAAkBnB,EAE1BE,EAAQkB,cAEN,KACXxB,GAAU,GACVD,KAEEC,EAAS,IACXA,GAAU,GACVD,KAIFe,EAFAf,GAAc,GAEQC,EAAQC,GAE1BH,IACFD,EAAYhhC,WAAWkiC,EAAUR,IAGnCtd,EAAKlE,WAKH/iB,EAAO,SAAS8gB,GAEdsJ,IAAAA,OAAanoB,KADjB6e,EAAaA,GAAc,IACeuJ,OAAgBvJ,EAAWuJ,MACjEC,OAAkBroB,IAAc6e,EAAWyJ,YAAqBzJ,EAAWyJ,WAC3Ekb,OAAgBxjC,IAAc6e,EAAW4kB,UAAmB5kB,EAAW4kB,SACvE5a,OAAkB7oB,IAAc6e,EAAWiK,YAAqBjK,EAAWiK,WAE/EzI,GAAc,EAEV8H,GAAalG,IACM6E,EAAAA,EAAAA,SAAAA,EAAc7V,EAAarJ,EAASC,EAASqJ,EAAYC,GAG5EkX,GAAkBlG,KAEM5C,EAAAA,EAAAA,SAAAA,EAAmB3L,EAAiBhM,EAASC,EAASqJ,EAAYC,IAGtEoO,EAAAA,EAAAA,SAAAA,EAAmBkE,EAAa7b,EAASC,EAASqJ,EAAYC,GAtU/D,SAASxJ,EAAKmI,GACjC4zB,IAAAA,EAGA7Z,EAAa8Z,EAKT7zB,OAJR+Z,EAA2B,KAAb3Y,EACdvJ,EAAI2J,OACJ3J,EAAI2M,UAAU1M,EAASC,GAEfiI,EAAQvQ,MACT,IAAA,QAOEmkC,IAJLC,EAAc9Z,EADmB,QAAb3Y,EAEpBvJ,EAAIgJ,YAAciD,EAAgB7P,WAAWmD,eAC7CS,EAAI6I,UAAyB,QAAbU,EAEXwyB,EAAY,EAAGA,EAAY,IAAKA,GAAa,GAChD/7B,EAAIyE,YACJzE,EAAI0E,OAAOwd,EAAa,GACxBliB,EAAI2E,OAAOq3B,EAAa,GACxBh8B,EAAI6E,YACJ7E,EAAIiJ,SACJjJ,EAAI4M,OAAO,GAAK7O,EAAhB,YAQGg+B,IAHLC,EAAc9Z,EADiB,QAAb3Y,EAElBvJ,EAAI6I,UAAyB,OAAbU,EAEXwyB,EAAY,EAAGA,EAAY,IAAKA,GAAa,GAChD/7B,EAAIyE,YACJzE,EAAI0E,OAAOwd,EAAa,GACxBliB,EAAI2E,OAAOq3B,EAAa,GACxBh8B,EAAI6E,YACJ7E,EAAIiJ,SACJjJ,EAAI4M,OAAO,GAAK7O,EAAhB,YAEF,MAEG,IAAA,QAEL,QAOOg+B,IAJLC,EAAc9Z,EADmB,QAAb3Y,EAEpBvJ,EAAIgJ,YAAciD,EAAgB7P,WAAWmD,eAC7CS,EAAI6I,UAAyB,QAAbU,EAEXwyB,EAAY,EAAGA,EAAY,IAAKA,GAAa,EAChD/7B,EAAIyE,YACJzE,EAAI0E,OAAOwd,EAAa,GACxBliB,EAAI2E,OAAOq3B,EAAa,GACxBh8B,EAAI6E,YACJ7E,EAAIiJ,SACJjJ,EAAI4M,OAAO,EAAI7O,EAAf,YAQGg+B,IAHLC,EAAc9Z,EADiB,QAAb3Y,EAElBvJ,EAAI6I,UAAyB,QAAbU,EAEXwyB,EAAY,EAAGA,EAAY,IAAKA,GAAa,GAChD/7B,EAAIyE,YACJzE,EAAI0E,OAAOwd,EAAa,GACxBliB,EAAI2E,OAAOq3B,EAAa,GACxBh8B,EAAI6E,YACJ7E,EAAIiJ,SACJjJ,EAAI4M,OAAO,GAAK7O,EAAhB,YAINiC,EAAI2M,WAAW1M,GAAUC,GACzBF,EAAI6J,UA6PF6Y,CAAmB9K,EAAmBzF,IAGpC0pB,IA7PgB,SAAS77B,EAAKmI,GAE9BK,IAAAA,EAEIL,OAHRnI,EAAI2J,OAGIxB,EAAQvQ,MACT,IAAA,QACHoI,EAAIyE,YACJzE,EAAI6I,UAAyB,QAAbU,EAChBvJ,EAAI0E,OAAOzE,EAAsB,QAAbsJ,GACpBvJ,EAAI2E,OAAO1E,EAAsB,QAAbsJ,EAAqC,QAAbA,GAC5CvJ,EAAIgJ,YAAc0R,EAAa5d,OAAOyC,eACtCS,EAAI6E,YACJ7E,EAAIiJ,SACJ,MAEG,IAAA,QAEL,QACEjJ,EAAIyE,YACJzE,EAAI0E,OAAoB,QAAb6E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,GAAb4E,EAAgC,QAAdC,GAC7BxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI6E,aACJ2D,EAAOxI,EAAI2I,qBAAkC,QAAbY,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,IACjGZ,aAAa,EAAG8R,EAAazd,UAAUsC,gBAC5CiJ,EAAKI,aAAa,EAAG8R,EAAa3d,MAAMwC,gBACxCS,EAAImF,UAAYqD,EAChBxI,EAAIgJ,YAAc0R,EAAa3d,MAAMwC,eACrCS,EAAIqF,OACJrF,EAAIiJ,SAGRjJ,EAAI6J,UA2NFoyB,CAAgBpB,EAAa1oB,GAxNT,SAASnS,EAAKmI,GAEhCK,IAAAA,EAEIL,OAHRnI,EAAI2J,OAGIxB,EAAQvQ,MACT,IAAA,QACHoI,EAAIyE,YACJzE,EAAI6I,UAAyB,OAAbU,EAChBvJ,EAAI0E,OAAOzE,EAAsB,QAAbsJ,GACpBvJ,EAAI2E,OAAO1E,EAAsB,QAAbsJ,EAAqC,OAAbA,GAC5CvJ,EAAIgJ,YAAc0R,EAAa5d,OAAOyC,eACtCS,EAAI6E,YACJ7E,EAAIiJ,SACJ,MAEG,IAAA,QAEL,QACEjJ,EAAIyE,YACJzE,EAAI0E,OAAoB,QAAb6E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,GAAb4E,EAAgC,QAAdC,GAC7BxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI6E,aACJ2D,EAAOxI,EAAI2I,qBAAkC,QAAbY,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,IACjGZ,aAAa,EAAG8R,EAAazd,UAAUsC,gBAC5CiJ,EAAKI,aAAa,EAAG8R,EAAa3d,MAAMwC,gBACxCS,EAAImF,UAAYqD,EAChBxI,EAAIgJ,YAAc0R,EAAa3d,MAAMwC,eACrCS,EAAIqF,OACJrF,EAAIiJ,SAGRjJ,EAAI6J,UAsLFqyB,CAAkBnB,EAAe5oB,GAnLb,SAASnS,EAAKmI,GAEhCK,IAAAA,EAEIL,OAHRnI,EAAI2J,OAGIxB,EAAQvQ,MACT,IAAA,QAEHoI,EAAI6I,UAAyB,QAAbU,EAChBvJ,EAAIyE,YACJzE,EAAI0E,OAAOzE,EAAsB,OAAbsJ,GACpBvJ,EAAI2E,OAAO1E,EAAsB,OAAbsJ,EAAqC,QAAbA,GAC5CvJ,EAAI6E,YACJ7E,EAAIiJ,SAEJjJ,EAAI6I,UAAyB,QAAbU,EAChBvJ,EAAIyE,YACJzE,EAAI0E,OAAOzE,EAAsB,QAAbsJ,GACpBvJ,EAAI2E,OAAO1E,EAAsB,QAAbsJ,EAAqC,QAAbA,GAC5CvJ,EAAI6E,YACJ7E,EAAIiJ,SAEJjJ,EAAI6I,UAAyB,KAAbU,EAChBvJ,EAAIyE,YACJzE,EAAImJ,IAAIlJ,EAAsB,IAAbsJ,EAAgC,KAAbA,EAAqB,EAAG,EAAGzL,EAA/D,QACAkC,EAAI6E,YACJ7E,EAAIiJ,SACJ,MAEG,IAAA,QAEL,QACEjJ,EAAIyE,YACJzE,EAAI0E,OAAoB,QAAb6E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI6E,aACJ2D,EAAOxI,EAAI2I,qBAAkC,QAAbY,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,IACjGZ,aAAa,EAAGvN,EAASyS,MAAAA,IAAI/Q,MAAMwC,gBACxCiJ,EAAKI,aAAa,IAAMvN,EAASyS,MAAAA,IAAIhR,OAAOyC,gBAC5CiJ,EAAKI,aAAa,EAAGvN,EAASyS,MAAAA,IAAIjR,KAAK0C,gBACvCS,EAAImF,UAAYqD,EAChBxI,EAAIgJ,YAAc3N,EAASyS,MAAAA,IAAIjR,KAAK0C,eACpCS,EAAIqF,OACJrF,EAAIiJ,SAGRjJ,EAAI6J,UAoIFsyB,CAAkBlB,EAAe9oB,IAG/B+O,GAAkBxF,KAtHN,SAAS1b,EAAKmI,GAC1BK,IAAAA,EAIIL,OAFRnI,EAAI2J,OAEIxB,EAAQvQ,MACT,IAAA,QAEHoI,EAAImF,UAAY,UAChBnF,EAAIyE,YACJzE,EAAImJ,IAAIlJ,EAASC,EAAsB,QAAbqJ,EAAwB,EAAG,EAAGzL,EAAxD,QACAkC,EAAI6E,YACJ7E,EAAIqF,OACJ,MAEG,IAAA,QAEL,SAEEmD,EAAOxI,EAAI2I,qBAAqB1I,EAAuB,KAAbsJ,EAAqB,EAAGrJ,EAAuB,KAAbqJ,EAAqB,EAAGtJ,EAAuB,KAAbsJ,EAAqB,EAAGrJ,EAAuB,KAAbqJ,EAAqB,IAChKX,aAAa,EAAG,WACrBJ,EAAKI,aAAa,IAAM,WACxBJ,EAAKI,aAAa,IAAM,WACxBJ,EAAKI,aAAa,GAAK,WACvBJ,EAAKI,aAAa,GAAK,WACvBJ,EAAKI,aAAa,EAAG,WACrB5I,EAAImF,UAAYqD,EAChBxI,EAAIyE,YACJzE,EAAImJ,IAAIlJ,EAASC,EAAsB,KAAbqJ,EAAoB,EAAGzL,EAAjD,QACAkC,EAAI6E,YACJ7E,EAAIqF,OAIRrF,EAAI6J,UAqFFuyB,CAAYtkB,EAAmB3F,IACL2F,EAAAA,EAAAA,SAAAA,EAAmB/E,EAAgBxJ,EAAYC,GAAa,KAItFyZ,GAAe,SAASC,GAEtBC,IAAAA,OAAc9qB,KADlB6qB,EAAUA,GAAW,IACmBzC,OAAgByC,EAAQzC,MAC5D2C,OAAmB/qB,IAAc6qB,EAAQvC,YAAqBuC,EAAQvC,WACtE0b,OAAiBhkC,IAAc6qB,EAAQ4Y,UAAmB5Y,EAAQ4Y,SAClEtY,OAAmBnrB,IAAc6qB,EAAQ/B,YAAqB+B,EAAQ/B,WAEtEgC,IACFjE,EAAYrd,MAAQqG,EACpBgX,EAAYpd,OAASoG,EACrBiX,EAAeD,EAAYzd,WAAW,OAGpC2hB,IACFzL,EAAiB9V,MAAQqG,EACzByP,EAAiB7V,OAASoG,EAC1B0P,EAAoBD,EAAiBlW,WAAW,OAG9C46B,IACFzB,EAAW/4B,MAAQqG,EACnB0yB,EAAW94B,OAASoG,EACpB2yB,EAAcD,EAAWn5B,WAAW,MAEpCq5B,EAAaj5B,MAAQqG,EACrB4yB,EAAah5B,OAASoG,EACtB6yB,EAAgBD,EAAar5B,WAAW,MAExCu5B,EAAan5B,MAAQqG,EACrB8yB,EAAal5B,OAASoG,EACtB+yB,EAAgBD,EAAav5B,WAAW,OAGtC+hB,IACF3L,EAAiBhW,MAAQqG,EACzB2P,EAAiB/V,OAASoG,EAC1B4P,EAAoBD,EAAiBpW,WAAW,QAgQ7C,OA3PF66B,KAAAA,aAAe,WACXpC,OAAAA,GAGJqC,KAAAA,aAAe,SAASxY,GAWpB,OAVPA,IAAaA,EACTmW,IAAgBnW,GAElB+O,aAAamH,GACbC,EAAcnW,IACJmW,GAAenW,IAEzBmW,EAAcnW,EACdoX,KAEK,MAGJqB,KAAAA,QAAU,WACNrC,OAAAA,GAGJsC,KAAAA,QAAU,SAAS1Y,GAOf,OANPA,EAAWnlB,SAASmlB,EAAU,IAAM,GAChCoW,IAASpW,IAEXmX,EADAf,EAAOpW,EACeqW,EAAQC,GACzBlhB,KAAAA,WAEA,MAGJujB,KAAAA,UAAY,WACRtC,OAAAA,GAGJuC,KAAAA,UAAY,SAAS5Y,GAOjB,OANPA,EAAWnlB,SAASmlB,EAAU,IAAM,GAChCqW,IAAWrW,IAEbmX,EAAgBf,EADhBC,EAASrW,EACqBsW,GACzBlhB,KAAAA,WAEA,MAGJyjB,KAAAA,UAAY,WACRvC,OAAAA,GAGJwC,KAAAA,UAAY,SAAS9Y,GAOjB,OANPA,EAAWnlB,SAASmlB,EAAU,IAAM,GAChCsW,IAAWtW,IAEbmX,EAAgBf,EAAMC,EADtBC,EAAStW,GAEJ5K,KAAAA,WAEA,MAGJ2jB,KAAAA,sBAAwB,WACpBvC,OAAAA,GAGJwC,KAAAA,sBAAwB,SAAShZ,GAG7B,OAFPwW,EAAqB37B,SAASmlB,EAAU,IACnC5K,KAAAA,UACE,MAGJ6jB,KAAAA,wBAA0B,WACtBxC,OAAAA,GAGJyC,KAAAA,wBAA0B,SAASlZ,GAG/B,OAFPyW,EAAuB57B,SAASmlB,EAAU,IACrC5K,KAAAA,UACE,MAGJ+jB,KAAAA,wBAA0B,WACtBzC,OAAAA,GAGJ0C,KAAAA,wBAA0B,SAASpZ,GAG/B,OAFP0W,IAAyB1W,EACpB5K,KAAAA,UACE,MAGJikB,KAAAA,yBAA2B,WACvB9C,OAAAA,GAGJ+C,KAAAA,yBAA2B,SAAStZ,GAIhC,OAFP4W,GADAL,IAA0BvW,GACc,IAAM,IAC9C4W,EAAgBF,EAAuBE,EAAe,IAC/C,MAGJ7U,KAAAA,eAAiB,SAASC,GAStB,OARP9C,GAAa,CACXxC,OAAO,IAETnX,EAAcyc,EACd3vB,EAAK,CACHqqB,OAAO,IAEJtH,KAAAA,UACE,MAGJ6M,KAAAA,mBAAqB,SAASC,GAW1B,OAVPhD,GAAa,CACXxC,OAAO,EACPE,YAAY,IAEd1U,EAAkBga,EAClB7vB,EAAK,CACHqqB,OAAO,EACPE,YAAY,IAETxH,KAAAA,UACE,MAGJ+M,KAAAA,kBAAoB,SAASC,GASzB,OARPlD,GAAa,CACX9B,YAAY,IAEdpO,EAAiBoT,EACjB/vB,EAAK,CACH+qB,YAAY,IAEThI,KAAAA,UACE,MAGJiN,KAAAA,eAAiB,SAASC,GAoBtB,OAnBPpD,GAAa,CACXtC,YAAY,EACZQ,YAAY,EACZ2a,UAAU,IAGa,WADzB3pB,EAAckU,GACEzuB,MACd8iB,EAAerf,EAASuT,MAAAA,KACxB3C,EAAkBsO,EAAgBtM,gBAAAA,aAElCyM,EAAerf,EAASsS,MAAAA,MACxB1B,EAAkBsO,EAAgB9M,gBAAAA,YAEpCrX,EAAK,CACHuqB,YAAY,EACZQ,YAAY,EACZ2a,UAAU,IAEP3iB,KAAAA,UACE,MAGJmN,KAAAA,gBAAkB,SAASC,GASvB,OARPtD,GAAa,CACX6Y,UAAU,IAEZphB,EAAe6L,EACfnwB,EAAK,CACH0lC,UAAU,IAEP3iB,KAAAA,UACE,MAGJA,KAAAA,QAAU,WACRT,GACHtiB,EAAK,CACHqqB,OAAO,EACPE,YAAY,EACZmb,UAAU,EACV3a,YAAY,IAKhB7E,EAAQiL,UAAU,EAAG,EAAGjL,EAAQtS,OAAOnI,MAAOya,EAAQtS,OAAOlI,QAGzDwY,GACFgC,EAAQ3a,UAAUud,EAAa,EAAG,GAIhC1E,GACF8B,EAAQ3a,UAAUgW,EAAkB,EAAG,GAKrCtD,IA1XkBrU,EAClBwI,EAyXA6L,EAA4B,KAAb9K,EAInB+S,EAAQ3S,OACR2S,EAAQ3P,UAAU1M,EAASC,GAC3Boc,EAAQ1P,OAAOmtB,GACfzd,EAAQ3P,WAAW1M,GAAUC,GAE7Boc,EAAQhI,YAAc,qBACtBgI,EAAQ/H,cAAgB+H,EAAQ9H,cAAgBH,EAChDiI,EAAQ7H,WAA4B,EAAfJ,EAErBiI,EAAQ3a,UAAUi5B,EAAY,EAAG,GAIjCte,EAAQ3P,UAAU1M,EAASC,GAC3Boc,EAAQ1P,OAAOktB,EAAqBC,GACpCzd,EAAQ3P,WAAW1M,GAAUC,GAC7Boc,EAAQ3a,UAAUm5B,EAAc,EAAG,GACnCxe,EAAQzS,UAEiB,UAArBsI,EAAYva,QAjZMoI,EAkZXsc,GA9YP7X,YACJzE,EAAImJ,IAAIlJ,EAASC,EAAsB,KAAbqJ,EAAoB,EAAGzL,EAAjD,QACAkC,EAAI6E,aACJ2D,EAAOxI,EAAI2I,qBAAqB1I,EAAuB,KAAbsJ,EAAqB,EAAGrJ,EAAuB,KAAbqJ,EAAqB,EAAGtJ,EAAuB,KAAbsJ,EAAqB,EAAGrJ,EAAuB,KAAbqJ,EAAqB,IAChKX,aAAa,EAAG,WACrBJ,EAAKI,aAAa,EAAG,WACrB5I,EAAImF,UAAYqD,EAChBxI,EAAIqF,QA0YAo1B,IAGFne,EAAQ3S,OACR2S,EAAQ3P,UAAU1M,EAASC,GAC3Boc,EAAQ1P,OAAOotB,GACf1d,EAAQ3P,WAAW1M,GAAUC,GAE7Boc,EAAQhI,YAAc,qBACtBgI,EAAQ/H,cAAgB+H,EAAQ9H,cAAgBH,EAChDiI,EAAQ7H,WAA4B,EAAfJ,EAErBiI,EAAQ3a,UAAUq5B,EAAc,EAAG,GACnC1e,EAAQzS,WAIN6R,GACFY,EAAQ3a,UAAUkW,EAAkB,EAAG,IAK3CsjB,IAEO,MAGMtB,EAAAA,EAAAA,QAAAA,QAAAA;;ACrmBAyD,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAnIf,IAAA,EAAA,QAAA,WAOIA,EAAU,SAAStzB,EAAQkN,GAEzBhP,IAAAA,OAAQ7P,KADZ6e,EAAaA,GAAc,IACUhP,KAAO,EAAIgP,EAAWhP,KACzDvB,OAAStO,IAAc6e,EAAWvQ,MAAQ,GAAKuQ,EAAWvQ,MAGxD2V,GAAU,EAAiBtS,EAAAA,kBAAAA,GAGlB,IAAT9B,IACFA,EAAOoU,EAAQtS,OAAOnI,OAGpB0H,IAAAA,EAAarB,EACbsB,EAActR,KAAK+I,KAAY,IAAPiH,GAG5BoU,EAAQtS,OAAOnI,MAAQ0H,EACvB+S,EAAQtS,OAAOlI,OAAS0H,EAuGjB,OArBF6P,KAAAA,SAAW,SAAS0K,GAMhB,OAJHpd,KADJod,EAAYA,EAAW,EAAI,EAAKA,EAAW,IAAM,IAAMA,KAErDpd,EAAQod,EACH5K,KAAAA,WAEA,MAGJG,KAAAA,SAAW,WACP3S,OAAAA,GAGJwS,KAAAA,QAAU,WACbmD,EAAQiL,UAAU,EAAG,EAAGjL,EAAQtS,OAAOnI,MAAOya,EAAQtS,OAAOlI,QA9FtC,SAAS9B,EAAKuJ,EAAYC,EAAa7C,GAC1D6B,IAAAA,EAGJxI,EAAIyE,YACJzE,EAAI0E,OAAoB,KAAb6E,EAAkC,QAAdC,GAC/BxJ,EAAI2E,OAAoB,GAAb4E,EAAgC,QAAdC,GAC7BxJ,EAAI2E,OAAoB,GAAb4E,EAAgC,QAAdC,GAC7BxJ,EAAI2E,OAAoB,KAAb4E,EAAkC,QAAdC,GAC/BxJ,EAAI2E,OAAoB,KAAb4E,EAAkC,QAAdC,GAC/BxJ,EAAI6E,YAEJ7E,EAAIyE,YACJzE,EAAI0E,OAAoB,KAAb6E,EAAoB,GAC/BvJ,EAAI2E,OAAO,EAAG,GACd3E,EAAI2E,OAAO,EAAG6E,GACdxJ,EAAI2E,OAAoB,KAAb4E,EAAoBC,GAC/BxJ,EAAI2E,OAAoB,KAAb4E,EAAkC,QAAdC,GAC/BxJ,EAAIkJ,cAA2B,KAAbK,EAAkC,QAAdC,EAAqC,KAAbD,EAAkC,QAAdC,EAAqC,KAAbD,EAAkC,QAAdC,GAC9HxJ,EAAIkJ,cAAcK,EAA0B,QAAdC,EAAwBD,EAA0B,QAAdC,EAAwBD,EAA0B,QAAdC,GACtGxJ,EAAIkJ,cAAcK,EAA0B,QAAdC,EAAwBD,EAA0B,QAAdC,EAAwBD,EAA0B,QAAdC,GACtGxJ,EAAIkJ,cAAcK,EAA0B,QAAdC,EAAwBD,EAA0B,QAAdC,EAAqC,KAAbD,EAAkC,QAAdC,GAC9GxJ,EAAIkJ,cAA2B,KAAbK,EAAkC,QAAdC,EAAqC,KAAbD,EAAkC,QAAdC,EAAqC,KAAbD,EAAkC,QAAdC,GAC9HxJ,EAAI2E,OAAoB,KAAb4E,EAAoB,GAC/BvJ,EAAI6E,aAEJ2D,EAAOxI,EAAI2I,qBAAqB,EAAG,EAAG,EAAGa,IACpCZ,aAAa,EAAG,WACrBJ,EAAKI,aAAa,EAAG,WACrB5I,EAAImF,UAAYqD,EAChBxI,EAAIqF,OAGJrF,EAAIyE,YACArC,IAAAA,EAAMlK,KAAKgO,IAAiB,KAAbqD,GAAsB5C,EAAQ,KAAMzO,KAAK+I,KAAkB,IAAbsI,IACjEvJ,EAAIoF,KAAkB,KAAbmE,EAAiC,KAAbA,EAAoBnH,EAAmB,QAAdoH,GACtDxJ,EAAI6E,YACA04B,IACAC,EAAgB,CAAC,IAAIn/B,EAAJ,UAAc,IAAK,GAAI,EAAG,GACzCA,IAAAA,EAAJ,UAAc,IAAK,IAAK,GAAI,GACxBA,IAAAA,EAAJ,UAAc,IAAK,IAAK,GAAI,IAE1Bo/B,EAAS,IAAIt7B,EAAJ,gBAAoB,EAAG,IALb,CAAC,EAAG,GAAK,GAK2Bq7B,GAC3Dx9B,EAAImF,UAAYs4B,EAAOp7B,WAAWsE,EAAQ,KAAKnH,cAC/CQ,EAAIqF,OACJrF,EAAIyE,YACJrC,EAAMlK,KAAKgO,IAAI9D,EAAmB,IAAbmH,EAAmB,GACxCvJ,EAAIoF,KAAkB,IAAbmE,EAAgC,IAAbA,EAAmBnH,EAAmB,QAAdoH,GACpDxJ,EAAI6E,YACA64B,IAAAA,EAAqB,CAAC,IAAIr/B,EAAJ,UAAc,IAAK,GAAI,EAAG,GAC9CA,IAAAA,EAAJ,UAAc,IAAK,IAAK,GAAI,GACxBA,IAAAA,EAAJ,UAAc,IAAK,IAAK,IAAK,IAG3Bs/B,EAAsB,CAAC,IAAIt/B,EAAJ,UAAc,IAAK,IAAK,GAAI,GACjDA,IAAAA,EAAJ,UAAc,IAAK,IAAK,IAAK,GACzBA,IAAAA,EAAJ,UAAc,IAAK,IAAK,GAAI,IAE1Bu/B,EAA4B,CAAC,EAAG,GAAK,GACrCC,EAAa,IAAI17B,EAAJ,gBAAoB,EAAG,IAAKy7B,EAA2BF,GACpEI,EAAc,IAAI37B,EAAJ,gBAAoB,EAAG,IAAKy7B,EAA2BD,IACzEn1B,EAAOxI,EAAI2I,qBAAkC,IAAbY,EAAmB,EAAgB,KAAbA,EAAoB,IACrEX,aAAa,EAAGi1B,EAAWx7B,WAAWsE,EAAQ,KAAKnH,eACxDgJ,EAAKI,aAAa,GAAKk1B,EAAYz7B,WAAWsE,EAAQ,KAAKnH,eAC3DgJ,EAAKI,aAAa,EAAGi1B,EAAWx7B,WAAWsE,EAAQ,KAAKnH,eACxDQ,EAAImF,UAAYqD,EAChBxI,EAAIqF,OAGJrF,EAAIyE,YACJzE,EAAIoF,KAAkB,KAAbmE,EAAiC,KAAbA,EAAiC,KAAbA,EAAkC,QAAdC,GACrExJ,EAAI6E,aACJ2D,EAAOxI,EAAI2I,qBAAkC,KAAbY,EAAiC,KAAbA,EAAiC,KAAbA,EAAkC,QAAdC,IACvFZ,aAAa,EAAG,0BACrBJ,EAAKI,aAAa,EAAG,4BACrB5I,EAAImF,UAAYqD,EAChBxI,EAAIqF,OAmBJ04B,CAAmBzhB,EAAS/S,EAAYC,EAAa7C,IAIlDwS,KAAAA,UAEE,MAGMmkB,EAAAA,EAAAA,QAAAA,QAAAA;;ACkcAU,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EArkBf,IAAA,EAAA,EAAA,QAAA,2BACA,EAAA,EAAA,QAAA,gCACA,EAAA,EAAA,QAAA,4BACA,EAAA,EAAA,QAAA,gCACA,EAAA,QAAA,WASA,EAAA,QAAA,iBAwjBeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAviBf,IAAIA,EAAY,SAASh0B,EAAQkN,GAE3BhP,IAYF+xB,EAcA1wB,EAAYC,EACZvJ,EAASC,EAET+9B,EAAkBC,EAAsBC,EAKxCjf,EAAaC,EAGbxH,EAAkBC,EAGlBwmB,EAAoBC,EAGpBC,EAAoBC,EAGpB1mB,EAAkBC,EA9ChB5P,OAAQ7P,KADZ6e,EAAaA,GAAc,IACUhP,KAAO,EAAIgP,EAAWhP,KACzDoB,OAAejR,IAAc6e,EAAW5N,YAAc+Q,EAAY1I,YAAAA,MAAQuF,EAAW5N,YACrFgR,OAAgBjiB,IAAc6e,EAAWoD,cAAsBpD,EAAWoD,aAC1EI,OAAgBriB,IAAc6e,EAAWwD,aAAerf,EAASsS,MAAAA,MAAQuJ,EAAWwD,aACpFzO,OAAmB5T,IAAc6e,EAAWjL,gBAAkBsO,EAAgB9M,gBAAAA,WAAayJ,EAAWjL,gBACtGuO,OAAqBniB,IAAc6e,EAAWsD,mBAA2BtD,EAAWsD,kBACpFzH,OAAkB1a,IAAc6e,EAAWnE,eAAiB0I,EAAe/K,eAAAA,MAAQwG,EAAWnE,eAC9F2I,OAAqBrjB,IAAc6e,EAAWwE,mBAA2BxE,EAAWwE,kBACpFI,OAAezjB,IAAc6e,EAAW4E,YAAc,KAAO5E,EAAW4E,YAExEge,EAAqB,EACrBE,EAAqB,EAGrB3c,EAAO,KAEP5kB,EAAQ,EACR+lC,EAAsB,EACtBC,EAAU,EACVC,EAAU,EACVC,EAAe,EACfC,GAAU,EACVC,GAAM,EAENviB,GAAU,EAAiBtS,EAAAA,kBAAAA,GAO3B0O,GAAc,EAiBdgK,EAAqB,SAAS1iB,EAAK6B,EAAO/C,EAAOggC,EAAYC,EAAkBC,EAAUC,GACnFC,IAeFC,EAAYC,EAAYC,EAIxBrd,EAGArjB,EArBA2gC,EADkBR,EAAaj9B,EACJ,MAAQzD,EADrC,YAEEmkB,EAAqB,IAAR1gB,EAIb09B,EAAgBR,EAAmBl9B,EACnC29B,EAAatnC,KAAKC,MAAM,KAAQ0J,GAChC49B,EAAavnC,KAAKC,MAAM,KAAQ0J,GAChC69B,EAAaxnC,KAAKC,MAAM,KAAQ0J,GAChC89B,EAAa1zB,EAAgB7P,WAAWmD,eACxCqgC,EAAa3zB,EAAgB7P,WAAWmD,eACxCsgC,EAASh+B,EAAQ,EAEjBi+B,EAAiB,GAARj+B,EAETk+B,EAAU,EACVC,EAAgB,EAGhBC,EAAW,EACXC,EAAW,EAEXC,GAAe/lC,EAvBjB,GAwBEgmC,EAAiBtiC,EAAUgB,OAAAA,EAQxBH,IANLqB,EAAI6B,MAAQ7B,EAAI8B,OAASD,EACzB7B,EAAI2J,OACJ3J,EAAI6W,UAAY,SAChB7W,EAAI8W,aAAe,SACnB9W,EAAI+W,KAAOuoB,EAEN3gC,EAAQwhC,EAAane,EAAe,EAAGA,GAAgBljB,EAAQ,EAAGH,GAA0B,GAAjByhC,EAAsBpe,GAAgB,GACpHhiB,EAAI6I,UA9BU,GA+Bdo3B,EAAW/nC,KAAKqC,IAAIoE,GACpBuhC,EAAWhoC,KAAKmoC,IAAI1hC,GAGhBohC,EAAU,GAAM,IAElBZ,EAAa,CAACU,GAAUC,EAASN,GAAcS,EAAWjB,EAAUa,GAAUC,EAASN,GAAcU,EAAWjB,GAChHG,EAAa,CAACS,EAASC,EAASG,EAAWjB,EAAUa,EAASC,EAASI,EAAWjB,GAElFj/B,EAAIgJ,YAAc42B,EAClB5/B,EAAIyE,YACJzE,EAAI0E,OAAOy6B,EAAW,GAAIA,EAAW,IACrCn/B,EAAI2E,OAAOy6B,EAAW,GAAIA,EAAW,IACrCp/B,EAAI6E,YACJ7E,EAAIiJ,UAIU,KAAZ82B,GAA8B,IAAZA,IACpB//B,EAAImF,UAAYw6B,EAChB3/B,EAAI6I,UAlDU,EAmDdu2B,EAAa,CAACS,EAASC,EAASG,EAAWjB,EAAUa,EAASC,EAASI,EAAWjB,GAClFI,EAAY,CAACQ,GAAUC,EAASP,GAAiBU,EAAWjB,EAAUa,GAAUC,EAASP,GAAiBW,EAAWjB,GAG/F,IAAlBe,GACEhe,IAAiBljB,GACc,KAA7B5G,KAAKC,MAAM6pB,IACbhiB,EAAIgX,SAAS9e,KAAKC,MAAM6pB,GAAeqd,EAAU,GAAIA,EAAU,GAAI9c,GAGvEviB,EAAI6I,UA5DO,IA6DXs2B,EAAa,CAACU,GAAUC,EAASJ,GAAcO,EAAWjB,EAAUa,GAAUC,EAASJ,GAAcQ,EAAWjB,GAChHe,EAAgB,IAEhBhgC,EAAI6I,UAjEQ,EAkEZs2B,EAAa,CAACU,GAAUC,EAASL,GAAcQ,EAAWjB,EAAUa,GAAUC,EAASL,GAAcS,EAAWjB,IAIlHj/B,EAAIgJ,YAAc42B,EAClB5/B,EAAIyE,YACJzE,EAAI0E,OAAOy6B,EAAW,GAAIA,EAAW,IACrCn/B,EAAI2E,OAAOy6B,EAAW,GAAIA,EAAW,IACrCp/B,EAAI6E,YACJ7E,EAAIiJ,SAEJ82B,EAAU,EACVlU,EACAmU,KAEFD,IAEF//B,EAAI6J,WA6GNqxB,EAAkB,WAChBsD,GAAsB,IAAI3kC,MAAO/B,UAAYW,EAE7CqhC,GADAE,EA1OW,EA0OWwE,EAAmC,KACd,MAAS,GAEpDC,EAAWD,EAAsB,IAAS,GAC1CE,EAAWF,EAAsB,IAAQ,GACzCG,EAAgBH,EAAuB,KAGzCpoC,EAAO,SAAS8gB,GAEVsJ,IAtHsBxgB,EACtBwI,EAAMxH,EAqHNwf,OAAanoB,KADjB6e,EAAaA,GAAc,IACeuJ,OAAgBvJ,EAAWuJ,MACnEC,OAAkBroB,IAAc6e,EAAWyJ,YAAqBzJ,EAAWyJ,WAC3Ekb,OAAgBxjC,IAAc6e,EAAW4kB,UAAmB5kB,EAAW4kB,SACvE5a,OAAkB7oB,IAAc6e,EAAWiK,YAAqBjK,EAAWiK,WAE7EzI,GAAc,EAEV8H,GAAalG,IACM6E,EAAAA,EAAAA,SAAAA,EAAc7V,EAAarJ,EAASC,EAASqJ,EAAYC,GAG5EkX,GAAkBlG,KAEM5C,EAAAA,EAAAA,SAAAA,EAAmB3L,EAAiBhM,EAASC,EAASqJ,EAAYC,IAGtEoO,EAAAA,EAAAA,SAAAA,EAAmBkE,EAAa7b,EAASC,EAASqJ,EAAYC,GAEpFkZ,EAAmB9K,EAAmBrO,EAAY,GAAI,KAAO,GAAK,EAAG,GACrEmZ,EAAmB9K,EAAmBqmB,EAAkB,GAAI,KAAO,IAAMC,EAAsBC,IAE7FtC,KA3IsB77B,EA4IPu+B,GAzIf50B,OACJ3J,EAAIyE,YACJzE,EAAI0E,OAAoB,QAAb6E,EAAoC,QAAbA,GAClCvJ,EAAI2E,OAAoB,GAAb4E,EAA+B,QAAbA,GAC7BvJ,EAAI2E,OAAoB,QAAb4E,EAAoC,QAAbA,GAClCvJ,EAAIkJ,cAA2B,QAAbK,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,GACrIvJ,EAAIkJ,cAA2B,QAAbK,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,GAAbA,GACrIvJ,EAAIkJ,cAA2B,QAAbK,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,GACrIvJ,EAAIkJ,cAA2B,QAAbK,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,GACrIvJ,EAAI2E,OAAoB,QAAb4E,EAAoC,QAAbA,GAClCvJ,EAAI2E,OAAoB,QAAb4E,EAAoC,QAAbA,GAClCvJ,EAAI2E,OAAoB,QAAb4E,EAAoC,QAAbA,GAClCvJ,EAAIkJ,cAA2B,QAAbK,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,GACrIvJ,EAAIkJ,cAA2B,QAAbK,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,GAAbA,GACrIvJ,EAAIkJ,cAA2B,QAAbK,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,GACrIvJ,EAAIkJ,cAA2B,QAAbK,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,GACrIvJ,EAAI6E,aACJ2D,EAAOxI,EAAI2I,qBAAqB,EAAG,EAAG,EAAgB,QAAbY,IACpCX,aAAa,EAAG8R,EAAa5d,OAAOyC,gBACzCiJ,EAAKI,aAAa,QAAU8R,EAAa5d,OAAOyC,gBAChDiJ,EAAKI,aAAa,GAAK8R,EAAa3d,MAAMwC,gBAC1CiJ,EAAKI,aAAa,QAAU8R,EAAa5d,OAAOyC,gBAChDiJ,EAAKI,aAAa,EAAG8R,EAAa5d,OAAOyC,gBACzCS,EAAImF,UAAYqD,EAChBxI,EAAIgJ,YAAc0R,EAAa7d,KAAK0C,eACpCS,EAAIqF,OACJrF,EAAIiJ,SAEJjJ,EAAIyE,YACJzD,EAAsB,OAAbuI,EAAwB,EACjCvJ,EAAImJ,IAAIlJ,EAASC,EAASc,EAAQ,EAAGlD,EAArC,SACA0K,EAAOxI,EAAI2I,qBAAqB1I,EAAUe,EAAQf,EAAUe,EAAQ,EAAGf,EAAUe,IAC5E4H,aAAa,EAAG,WACrBJ,EAAKI,aAAa,IAAM,WACxBJ,EAAKI,aAAa,IAAM,WACxBJ,EAAKI,aAAa,EAAG,WACrB5I,EAAImF,UAAYqD,EAChBxI,EAAI6E,YACJ7E,EAAIqF,OACJrF,EAAIyE,YACJzD,EAAsB,QAAbuI,EAAwB,EACjCvJ,EAAImJ,IAAIlJ,EAASC,EAASc,EAAQ,EAAGlD,EAArC,SACA0K,EAAOxI,EAAIoJ,qBAAqBnJ,EAASA,EAAS,EAAGA,EAASA,EAASe,IAClE4H,aAAa,EAAG,WACrBJ,EAAKI,aAAa,IAAM,WACxBJ,EAAKI,aAAa,IAAM,WACxBJ,EAAKI,aAAa,GAAK,WACvBJ,EAAKI,aAAa,IAAM,WACxBJ,EAAKI,aAAa,EAAG,WACrB5I,EAAImF,UAAYqD,EAChBxI,EAAI6E,YACJ7E,EAAIqF,OACJrF,EAAI6J,UAGa,SAAS7J,GACtBwI,IAAAA,EAAMxH,EAEVhB,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAI0E,OAAoB,QAAb6E,EAAoC,QAAbA,GAClCvJ,EAAIkJ,cAA2B,QAAbK,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,GACrIvJ,EAAIkJ,cAA2B,QAAbK,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,GACrIvJ,EAAI2E,OAAoB,QAAb4E,EAAoC,QAAbA,GAClCvJ,EAAIkJ,cAA2B,QAAbK,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,GACrIvJ,EAAIkJ,cAA2B,QAAbK,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,GACrIvJ,EAAIkJ,cAA2B,QAAbK,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,GACrIvJ,EAAIkJ,cAA2B,QAAbK,EAAoC,QAAbA,EAAoC,GAAbA,EAA+B,QAAbA,EAAoC,GAAbA,EAA+B,QAAbA,GAC3HvJ,EAAIkJ,cAA2B,GAAbK,EAA+B,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,GAChIvJ,EAAIkJ,cAA2B,QAAbK,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,EAAoC,QAAbA,GACrIvJ,EAAI6E,aACJ2D,EAAOxI,EAAI2I,qBAAqB,EAAG,EAAGY,EAAY,IAC7CX,aAAa,EAAG8R,EAAa5d,OAAOyC,gBACzCiJ,EAAKI,aAAa,QAAU8R,EAAa5d,OAAOyC,gBAChDiJ,EAAKI,aAAa,GAAK8R,EAAa3d,MAAMwC,gBAC1CiJ,EAAKI,aAAa,QAAU8R,EAAa5d,OAAOyC,gBAChDiJ,EAAKI,aAAa,EAAG8R,EAAa5d,OAAOyC,gBACzCS,EAAImF,UAAYqD,EAChBxI,EAAIgJ,YAAc0R,EAAa7d,KAAK0C,eACpCS,EAAIqF,OACJrF,EAAIiJ,SAEJjJ,EAAIyE,YACJzD,EAAsB,QAAbuI,EAAwB,EACjCvJ,EAAImJ,IAAIlJ,EAASk+B,EAAuBF,EAAmB,EAAGj9B,EAAQ,EAAGlD,EAAzE,QACAkC,EAAImF,UAAY,UAChBnF,EAAI6E,YACJ7E,EAAIqF,OACJrF,EAAIyE,YACJzD,EAAsB,QAAbuI,EAAwB,EACjCvJ,EAAImJ,IAAIlJ,EAASk+B,EAAuBF,EAAmB,EAAGj9B,EAAQ,EAAGlD,EAAzE,QACAkC,EAAImF,UAAY,UAChBnF,EAAI6E,YACJ7E,EAAIqF,OACJrF,EAAIyE,YACJzD,EAAsB,QAAbuI,EAAwB,EACjCvJ,EAAImJ,IAAIlJ,EAASk+B,EAAuBF,EAAmB,EAAGj9B,EAAQ,EAAGlD,EAAzE,QACAkC,EAAImF,UAAY,UAChBnF,EAAI6E,YACJ7E,EAAIqF,OACJrF,EAAI6J,UAsCFy2B,CAAiBjC,IAGfnd,GAAkBxF,IACM5D,EAAAA,EAAAA,SAAAA,EAAmB/E,EAAgBxJ,EAAYC,GAAa,IAI1FyZ,EAAe,SAASC,GAElBC,IAAAA,OAAc9qB,KADlB6qB,EAAUA,GAAW,IACmBzC,OAAgByC,EAAQzC,MAC9D2C,OAAmB/qB,IAAc6qB,EAAQvC,YAAqBuC,EAAQvC,WACtE0b,OAAiBhkC,IAAc6qB,EAAQ4Y,UAAmB5Y,EAAQ4Y,SAClEtY,OAAmBnrB,IAAc6qB,EAAQ/B,YAAqB+B,EAAQ/B,WAEpEgC,IACFjE,EAAYrd,MAAQqG,EACpBgX,EAAYpd,OAASoG,EACrBiX,EAAeD,EAAYzd,WAAW,OAGpC2hB,IACFzL,EAAiB9V,MAAQqG,EACzByP,EAAiB7V,OAASoG,EAC1B0P,EAAoBD,EAAiBlW,WAAW,OAG9C46B,IACF+B,EAAmBv8B,MAAQqG,EAC3Bk2B,EAAmBt8B,OAASoG,EAC5Bm2B,EAAsBD,EAAmB38B,WAAW,MAEpD68B,EAAmBz8B,MAAQqG,EAC3Bo2B,EAAmBx8B,OAASoG,EAC5Bq2B,EAAsBD,EAAmB78B,WAAW,OAGlD+hB,IACF3L,EAAiBhW,MAAQqG,EACzB2P,EAAiB/V,OAASoG,EAC1B4P,EAAoBD,EAAiBpW,WAAW,QAIpD05B,EAAW,SAAXA,IACO0D,IACH3D,IACA7d,EAAKlE,WAEHylB,IACF3E,EAAYhhC,WAAWkiC,EAAU,OAwNhC,OAjNFoF,KAAAA,UAAY,WACR3B,OAAAA,GAIJnmC,KAAAA,MAAQ,WAMJ,OALFmmC,IACHA,GAAU,EACVnmC,GAAQ,IAAIoB,MAAO/B,UAAY0mC,EAC/BrD,KAEK,MAIJtjC,KAAAA,KAAO,WAWH,OAVH+mC,IACFA,GAAU,EACV9L,aAAamH,IAGX4E,IACFA,GAAM,EACN3D,IACK/hB,KAAAA,WAEA,MAIJqnB,KAAAA,MAAQ,WASJ,OARH5B,IACFA,GAAU,EACVC,GAAM,EACN/L,aAAamH,IAEfxhC,GAAQ,IAAIoB,MAAO/B,UACnBojC,IACK/hB,KAAAA,UACE,MAIJ0lB,KAAAA,IAAM,WAMF,OALHD,IAAYC,EACdA,GAAM,EACGA,IACTA,GAAM,GAED,MAGJ4B,KAAAA,gBAAkB,WACbhC,OAAAA,EAAU,IAAMC,EAAU,IAAMC,GAGrC7Y,KAAAA,eAAiB,SAASC,GAStB,OARP9C,EAAa,CACXxC,OAAO,IAETnX,EAAcyc,EACd3vB,EAAK,CACHqqB,OAAO,IAEJtH,KAAAA,UACE,MAGJ6M,KAAAA,mBAAqB,SAASC,GAS1B,OARPhD,EAAa,CACXtC,YAAY,IAEd1U,EAAkBga,EAClB7vB,EAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJ+M,KAAAA,kBAAoB,SAASC,GASzB,OARPlD,EAAa,CACX9B,YAAY,IAEdpO,EAAiBoT,EACjB/vB,EAAK,CACH+qB,YAAY,IAEThI,KAAAA,UACE,MAGJmN,KAAAA,gBAAkB,SAASC,GASvB,OARPtD,EAAa,CACX6Y,UAAU,IAEZphB,EAAe6L,EACfnwB,EAAK,CACH0lC,UAAU,IAEP3iB,KAAAA,UACE,MAGJA,KAAAA,QAAU,WACRT,GACHtiB,EAAK,CACHqqB,OAAO,EACPE,YAAY,EACZmb,UAAU,EACV3a,YAAY,IAIhB7E,EAAQiL,UAAU,EAAG,EAAGhe,EAAYC,GAGhC8Q,GACFgC,EAAQ3a,UAAUud,EAAa,EAAG,GAIhC1E,GACF8B,EAAQ3a,UAAUgW,EAAkB,EAAG,GAKrCtD,IAAAA,EAA4B,KAAb9K,EAEfm3B,GAAiB5G,EAAsB,EAAI5hC,KAAKqC,IAAIu/B,EAAqB/7B,EAA9B,aAA8CA,EAA7F,WACI4iC,GAAoB3G,EAAsB,EAAI9hC,KAAKqC,IAAIy/B,EAAqBj8B,EAA9B,aAA8CA,EAAhG,WAIAue,EAAQ3S,OACR2S,EAAQ3P,UAAU1M,EAASk+B,EAAuBF,EAAmB,GACrE3hB,EAAQ1P,OAAO8zB,GACfpkB,EAAQ3P,WAAW1M,IAAWk+B,EAAuBF,EAAmB,IAExE3hB,EAAQhI,YAAc,qBACtBgI,EAAQ/H,cAAgB+H,EAAQ9H,cAAgBH,EAAe,EAC/DiI,EAAQ7H,WAAaJ,EAErBiI,EAAQ3a,UAAUy8B,EAAoB,EAAG,GACzC9hB,EAAQzS,UAIRyS,EAAQ3S,OACR2S,EAAQ3P,UAAU1M,EAASC,GAC3Boc,EAAQ1P,OAAO+zB,GACfrkB,EAAQ3P,WAAW1M,GAAUC,GAE7Boc,EAAQhI,YAAc,qBACtBgI,EAAQ/H,cAAgB+H,EAAQ9H,cAAgBH,EAAe,EAC/DiI,EAAQ7H,WAAaJ,EAErBiI,EAAQ3a,UAAU28B,EAAoB,EAAG,GAEzChiB,EAAQzS,UAGJ6R,GACFY,EAAQ3a,UAAUkW,EAAkB,EAAG,IAK3C3P,EAAiB,IAATA,EAAahQ,KAAK+N,IAAIqW,EAAQtS,OAAOnI,MAAOya,EAAQtS,OAAOlI,QAAUoG,EAG7EoU,EAAQtS,OAAOnI,MAAQqG,EACvBoU,EAAQtS,OAAOlI,OAASoG,EAMxBhI,GAHAsJ,EAActB,GAGU,EAGxBg2B,GAJAj+B,GAHAsJ,EAAarB,GAGU,IAGvB+1B,EAAmB,KAAQ10B,GACyB,EACpD40B,EAAuB,IAAO50B,EAG9B2V,GAAc,EAAahX,EAAAA,cAAAA,EAAMA,GACjCiX,EAAeD,EAAYzd,WAAW,MAGtCkW,GAAmB,EAAazP,EAAAA,cAAAA,EAAMA,GACtC0P,EAAoBD,EAAiBlW,WAAW,MAGhD28B,GAAqB,EAAal2B,EAAAA,cAAAA,EAAMA,GACxCm2B,EAAsBD,EAAmB38B,WAAW,MAGpD68B,GAAqB,EAAap2B,EAAAA,cAAAA,EAAMA,GACxCq2B,EAAsBD,EAAmB78B,WAAW,MAGpDoW,GAAmB,EAAa3P,EAAAA,cAAAA,EAAMA,GACtC4P,EAAoBD,EAAiBpW,WAAW,MAGhDhJ,GAAQ,IAAIoB,MAAO/B,UACnBqjC,IAEO,MAGM6C,EAAAA,EAAAA,QAAAA,QAAAA;;ACeA4C,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EArlBf,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,2BACA,EAAA,EAAA,QAAA,gCACA,EAAA,EAAA,QAAA,4BACA,EAAA,EAAA,QAAA,gCACA,EAAA,EAAA,QAAA,+BACA,EAAA,EAAA,QAAA,qBACA,EAAA,QAAA,WAUA,EAAA,QAAA,iBAokBeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAljBf,IAAIA,EAAY,SAAS52B,EAAQkN,GAG3BhP,IAuBF24B,EAAgBC,EAAiBC,EAEjC3pB,EAEA7N,EAAYC,EACZvJ,EAASC,EACTqX,EAcArC,EA3CEhN,OAAQ7P,KAFZ6e,EAAaA,GAAc,IAEUhP,KAAO,EAAIgP,EAAWhP,KACzDoB,OAAejR,IAAc6e,EAAW5N,YAAc+Q,EAAY1I,YAAAA,MAAQuF,EAAW5N,YACrFgR,OAAgBjiB,IAAc6e,EAAWoD,cAAsBpD,EAAWoD,aAC1ErO,OAAmB5T,IAAc6e,EAAWjL,gBAAkBsO,EAAgBhN,gBAAAA,UAAY2J,EAAWjL,gBACrGuO,OAAqBniB,IAAc6e,EAAWsD,mBAA2BtD,EAAWsD,kBACpF9D,OAAere,IAAc6e,EAAWR,YAAc,GAAKQ,EAAWR,YACtEC,OAActe,IAAc6e,EAAWP,WAAa,GAAKO,EAAWP,WACpEqqB,OAAc3oC,IAAc6e,EAAW8pB,WACvC5vB,OAAY/Y,IAAc6e,EAAW9F,SAAWuJ,EAASrJ,SAAAA,WAAa4F,EAAW9F,SACjFG,OAAalZ,IAAc6e,EAAW3F,UAAYqJ,EAAUjN,UAAAA,MAAQuJ,EAAW3F,UAC/E9C,OAAYpW,IAAc6e,EAAWzI,SAAWoM,EAASlN,SAAAA,MAAQuJ,EAAWzI,SAC5EqM,OAAcziB,IAAc6e,EAAW4D,YAAoB5D,EAAW4D,WACtEE,OAAe3iB,IAAc6e,EAAW8D,aAAsB9D,EAAW8D,YACzEjI,OAAkB1a,IAAc6e,EAAWnE,eAAiB0I,EAAe/K,eAAAA,MAAQwG,EAAWnE,eAC9F2I,OAAqBrjB,IAAc6e,EAAWwE,mBAA2BxE,EAAWwE,kBACpFI,OAAezjB,IAAc6e,EAAW4E,YAAc,KAAO5E,EAAW4E,YAExE/B,EAAW,EACXC,EAAW,GACXrT,EAAQoT,EACRknB,EAAW,EACXC,EAAY,EACZC,EAAa,EAIbxoB,GAAa,EAIb2D,GAAU,EAAiBtS,EAAAA,kBAAAA,GAE3Bo3B,EAAkBhnC,EAhCpB,GAkCEse,GAAc,EAGdwG,GAAc,EAAahX,EAAAA,cAAAA,EAAMA,GACjCiX,EAAeD,EAAYzd,WAAW,MAEtCkW,GAAmB,EAAazP,EAAAA,cAAAA,EAAMA,GACtC0P,EAAoBD,EAAiBlW,WAAW,MAKhD4/B,GAAqB,EAAan5B,EAAAA,cAAAA,EAAMA,GACxCo5B,EAAsBD,EAAmB5/B,WAAW,MAGpD8/B,GAAoB,EAAar5B,EAAAA,cAAAA,EAAMA,GACvCs5B,GAAqBD,EAAkB9/B,WAAW,MAGlDggC,IAAmB,EAAav5B,EAAAA,cAAAA,EAAMA,GACtCw5B,GAAoBD,GAAiBhgC,WAAW,MAGhDoW,IAAmB,EAAa3P,EAAAA,cAAAA,EAAMA,GACtC4P,GAAoBD,GAAiBpW,WAAW,MAIlD6a,EAAQ3S,OAERzB,EAAiB,IAATA,EAAahQ,KAAK+N,IAAIqW,EAAQtS,OAAOnI,MAAOya,EAAQtS,OAAOlI,QAAUoG,EAG7EoU,EAAQtS,OAAOnI,MAAQqG,EACvBoU,EAAQtS,OAAOlI,OAASoG,EAKxBjI,GAHAsJ,EAAarB,GAGU,EACvBhI,GAHAsJ,EAActB,GAGU,EAEpBy5B,IAAAA,KAAiBX,GAA2B,IAAdx3B,EAGlC+N,EAAUrf,KAAKiM,MAAmB,IAAboF,GAAqB,MAAQnL,EAAlD,YAkMIhI,IAAAA,GAAO,SAAS8gB,GAGdsJ,IA9G0BxgB,EAC1BwI,EA6GAgY,OAAanoB,KAFjB6e,EAAaA,GAAc,IAEeuJ,OAAgBvJ,EAAWuJ,MACnEC,OAAkBroB,IAAc6e,EAAWyJ,YAAqBzJ,EAAWyJ,WAC3Ekb,OAAgBxjC,IAAc6e,EAAW4kB,UAAmB5kB,EAAW4kB,SACvE5a,OAAkB7oB,IAAc6e,EAAWiK,YAAqBjK,EAAWiK,WAE7EzI,GAAc,EArBdmoB,EAAkB/iC,EAAD,QAAYkc,EAAWD,GAExCgnB,GADAD,EAAkBD,EAAiB,IACE,GAwBjCrgB,GAAalG,IACM6E,EAAAA,EAAAA,SAAAA,EAAc7V,EAAarJ,EAASC,EAASqJ,EAAYC,GAG5EkX,GAAkBlG,KAEM5C,EAAAA,EAAAA,SAAAA,EAAmB3L,EAAiBhM,EAASC,EAASqJ,EAAYC,IAGtEoO,EAAAA,EAAAA,SAAAA,EAAmBkE,EAAa7b,EAASC,EAASqJ,EAAYC,GA/L/D,SAASxJ,EAAKwc,EAAeolB,EAAQC,EAAQC,EAAQnlB,GACxEolB,IAUFpjC,EACAqjB,EAXE+f,EAAgB7pC,KAAKgO,IAAiB,KAAbqD,EAAoB,GAC/Cy4B,EAAc9pC,KAAKgO,IAAiB,KAAbqD,EAAoB,KAC3Cg2B,EAA6B,IAAbh2B,EAChBk2B,EAA0B,IAAbl2B,EACbm2B,EAA0B,IAAbn2B,EACbu2B,EAAsB,GAAbv2B,EACTw2B,EAAU,EAEVE,EAAW,EACXC,EAAW,EAGXC,GAAeyB,EAAUplB,EAAgB,EAStC7d,IAPLqB,EAAI2J,OACJ3J,EAAI6W,UAAY,SAChB7W,EAAI8W,aAAe,SACnB9W,EAAI+W,KAAOQ,EACXvX,EAAIgJ,YAAciD,EAAgB7P,WAAWmD,eAC7CS,EAAImF,UAAY8G,EAAgB7P,WAAWmD,eAEtCZ,EAAQwhC,EAAane,EAAe,EAAGA,GAAgB,GAAIrjB,GAAqB,GAAZge,EAAiBqF,GAAgB,GACxGie,EAAW/nC,KAAKqC,IAAIoE,GACpBuhC,EAAWhoC,KAAKmoC,IAAI1hC,GAGhBohC,EAAU,GAAM,IAClB//B,EAAI6I,UAAYm5B,EAEhBhiC,EAAIyE,YACJzE,EAAI0E,OAAOzE,GAAW6/B,EAASL,GAAcQ,EAAU//B,GAAW4/B,EAASL,GAAcS,GACzFlgC,EAAI2E,OAAO1E,EAAU6/B,EAASG,EAAU//B,EAAU4/B,EAASI,GAC3DlgC,EAAI6E,YACJ7E,EAAIiJ,UAIU,KAAZ82B,GAA8B,IAAZA,IACpB//B,EAAI6I,UAAYk5B,EAGM,IAAlBvlB,GACEtkB,KAAKC,MAAM6pB,KAAkBhI,GAC/Bha,EAAIgX,SAAS9e,KAAKC,MAAM6pB,GAActiB,WAAYO,GAAW6/B,EAASP,GAAiBU,EAAU//B,GAAW4/B,EAASP,GAAiBW,GAG1IH,EAAU,EAIV//B,EAAIyE,YACJzE,EAAI0E,OAAOzE,GAAW6/B,EAASJ,GAAcO,EAAU//B,GAAW4/B,EAASJ,GAAcQ,GACzFlgC,EAAI2E,OAAO1E,EAAU6/B,EAASG,EAAU//B,EAAU4/B,EAASI,GAC3DlgC,EAAI6E,YACJ7E,EAAIiJ,UAEN82B,IAEF//B,EAAI6J,UAuIF6Y,CAAmB9K,EAAmB,EAAGwpB,EAAiB,EAAG,EAAIP,IAGlDjpB,EAAAA,EAAAA,SAAAA,EAAmBrO,EAAYC,EAAakN,EAAaC,EAAY1K,GAAiB,GAAM,EAAM01B,KAI/GjhB,GAAkB5F,IACpB5F,GAAY,EAAyB3L,EAAAA,SAAa,GAAbA,EAAgC,IAAdC,EAAoBiF,GAC3EmJ,EAAkBjW,UAAUuT,GAAY3L,EAA2B,GAAbA,GAAqB,EAAiB,IAAdC,IAG5EqyB,IAhJ0B77B,EAkJX0hC,IAAmB,GA9IpC1hC,EAAImF,UAAY,qBAChBnF,EAAIgJ,YAAc,wBAElBR,EAAOxI,EAAI2I,qBAAqB,EAAiB,QAAda,EAAwB,EAAiB,QAAdA,IACzDZ,aAAa,EAAG,WACrBJ,EAAKI,aAAa,IAAM,WACxBJ,EAAKI,aAAa,MAAQ,WAC1BJ,EAAKI,aAAa,IAAM,WACxBJ,EAAKI,aAAa,EAAG,WACrB5I,EAAImF,UAAYqD,GAGlBxI,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAI0E,OAAoB,QAAb6E,EAAqC,QAAdC,GAClCxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GACvIxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,GAAb4E,EAAgC,QAAdC,GAC7BxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GACvIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,GAAdC,GACvIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,OAAdC,GACvIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,OAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GACvIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,OAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GACvIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,GAAbD,EAAgC,QAAdC,GAClIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GACvIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,OAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GACvIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,OAAdC,EAAqC,QAAbD,EAAqC,OAAdC,GACvIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,OAAbD,EAAqC,QAAdC,EAAqC,OAAbD,EAAqC,GAAdC,GACvIxJ,EAAIkJ,cAA2B,OAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GACvIxJ,EAAI6E,YACJ7E,EAAIqF,OACJrF,EAAI6J,UAGkB,SAAS7J,GAC3BwI,IAAAA,GAEJA,EAAOxI,EAAI2I,qBAAqB,EAAiB,QAAda,EAAwB,EAAiB,QAAdA,IACzDZ,aAAa,EAAG,WACrBJ,EAAKI,aAAa,IAAM,WACxBJ,EAAKI,aAAa,IAAM,WACxBJ,EAAKI,aAAa,MAAQ,WAC1BJ,EAAKI,aAAa,IAAM,WACxBJ,EAAKI,aAAa,EAAG,WACrB5I,EAAImF,UAAYqD,EAChBxI,EAAIyE,YACJzE,EAAI0E,OAAoB,QAAb6E,EAAqC,QAAdC,GAClCxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GACvIxJ,EAAI2E,OAAoB,GAAb4E,EAAgC,QAAdC,GAC7BxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GACvIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,GAAdC,GACvIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,OAAdC,GACvIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,OAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GACvIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,GAAbD,EAAgC,QAAdC,EAAqC,GAAbD,EAAgC,QAAdC,GAC7HxJ,EAAIkJ,cAA2B,GAAbK,EAAgC,QAAdC,EAAqC,OAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GAClIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,OAAdC,EAAqC,QAAbD,EAAqC,OAAdC,GACvIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,OAAbD,EAAqC,QAAdC,EAAqC,OAAbD,EAAqC,GAAdC,GACvIxJ,EAAIkJ,cAA2B,OAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GACvIxJ,EAAI6E,YACJ7E,EAAIqF,OACJrF,EAAI6J,UAiFFo4B,CAAkBT,IA9EG,SAASxhC,GAChCA,EAAImF,UAAY,UAChBnF,EAAIyE,YACJzE,EAAI0E,OAAoB,QAAb6E,EAAqC,QAAdC,GAClCxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GACvIxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,OAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAI2E,OAAoB,QAAb4E,EAAqC,QAAdC,GAClCxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GACvIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,GAAdC,GACvIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,OAAdC,EAAqC,GAAbD,EAAgC,OAAdC,GAClIxJ,EAAIkJ,cAA2B,QAAbK,EAAqC,OAAdC,EAAqC,OAAbD,EAAqC,QAAdC,EAAqC,OAAbD,EAAqC,GAAdC,GACvIxJ,EAAIkJ,cAA2B,OAAbK,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,EAAqC,QAAbD,EAAqC,QAAdC,GACvIxJ,EAAI6E,YACJ7E,EAAIqF,OA4DF68B,CAAmBZ,IAGjBpgB,GAAkBxF,IACM5D,EAAAA,EAAAA,SAAAA,GAAmB/E,EAAgBxJ,EAAYC,GAAa,EAAM4H,EAAUG,IAItG0R,GAAe,SAASC,GAEtBC,IAAAA,OAAc9qB,KADlB6qB,EAAUA,GAAW,IACmBzC,OAAgByC,EAAQzC,MAC9D2C,OAAmB/qB,IAAc6qB,EAAQvC,YAAqBuC,EAAQvC,WACtE0b,OAAiBhkC,IAAc6qB,EAAQ4Y,UAAmB5Y,EAAQ4Y,SAClEtY,OAAmBnrB,IAAc6qB,EAAQ/B,YAAqB+B,EAAQ/B,WAEpEgC,IACFjE,EAAYrd,MAAQqG,EACpBgX,EAAYpd,OAASoG,EACrBiX,EAAeD,EAAYzd,WAAW,OAGpC2hB,IACFzL,EAAiB9V,MAAQqG,EACzByP,EAAiB7V,OAASoG,EAC1B0P,EAAoBD,EAAiBlW,WAAW,OAG9C46B,IACFoF,GAAiB5/B,MAAQqG,EACzBu5B,GAAiB3/B,OAASoG,EAC1Bw5B,GAAoBD,GAAiBhgC,WAAW,MAEhD8/B,EAAkB1/B,MAAQqG,EAC1Bq5B,EAAkBz/B,OAASoG,EAC3Bs5B,GAAqBD,EAAkB9/B,WAAW,MAElD4/B,EAAmBx/B,MAAQqG,EAC3Bm5B,EAAmBv/B,OAASoG,EAC5Bo5B,EAAsBD,EAAmB5/B,WAAW,OAGlD+hB,IACF3L,GAAiBhW,MAAQqG,EACzB2P,GAAiB/V,OAASoG,EAC1B4P,GAAoBD,GAAiBpW,WAAW,QAmM7C,OA9LF4X,KAAAA,SAAW,SAAS0K,GACvBpd,EAAQqS,WAAW+K,GACd5K,KAAAA,WAGFG,KAAAA,SAAW,WACP3S,OAAAA,GAGJkS,KAAAA,iBAAmB,SAASkL,EAAUpc,GAErCqc,IAEFK,EAFEL,GADJD,EAAW/K,WAAW+K,IACQhK,EAAWA,EAAWgK,EAClDhL,EAAQ,KA0BH,OAvBHpS,IAAUqd,SACR3rB,IAAc+e,GAASA,EAAMte,WAC/Bse,EAAMvf,OAGRwsB,EAAOnsB,KAAKgO,IAAIhO,KAAKiC,IAAIwM,EAAQqd,GAAe,IAAQ,EAAG,IAC3D5M,EAAQ,IAAIpiB,EAAJ,QAAU,GAAI,GAAIA,EAAMgG,QAAAA,iBAAkB2L,EAAOqd,EAAaK,IAEhEpL,gBAAkB,SAASC,GAC/BvS,EAAQuS,EAAMvhB,OAAOX,KAChB2hB,IACHA,GAAa,GACII,EAAAA,EAAAA,kBAAAA,EAAMI,WAKvBxR,GAAiC,mBAAdA,IACrByP,EAAMgC,iBAAmBzR,GAG3ByP,EAAM3e,SAED,MAGJqtB,KAAAA,eAAiB,SAASC,GAStB,OARP9C,GAAa,CACXxC,OAAO,IAETnX,EAAcyc,EACd3vB,GAAK,CACHqqB,OAAO,IAEJtH,KAAAA,UACE,MAGJ6M,KAAAA,mBAAqB,SAASC,GAW1B,OAVPhD,GAAa,CACXtC,YAAY,EACZM,SAAS,IAEXhV,EAAkBga,EAClB7vB,GAAK,CACHuqB,YAAY,EACZM,SAAS,IAEN9H,KAAAA,UACE,MAGJ+M,KAAAA,kBAAoB,SAASC,GASzB,OARPlD,GAAa,CACX9B,YAAY,IAEdpO,EAAiBoT,EACjB/vB,GAAK,CACH+qB,YAAY,IAEThI,KAAAA,UACE,MAGJ8N,KAAAA,YAAc,SAASC,GASnB,OARPzY,EAAWyY,EACXjE,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJ0L,KAAAA,eAAiB,SAASC,GAStB,OARPpO,EAAcoO,EACd7B,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJ4L,KAAAA,cAAgB,SAASC,GASrB,OARPrO,EAAaqO,EACb/B,GAAa,CACXtC,YAAY,IAEdvqB,GAAK,CACHuqB,YAAY,IAETxH,KAAAA,UACE,MAGJA,KAAAA,QAAU,WACRT,GACHtiB,GAAK,CACHqqB,OAAO,EACPE,YAAY,EACZE,KAAK,EACLib,UAAU,EACV3a,YAAY,IAKhB7E,EAAQiL,UAAU,EAAG,EAAGjL,EAAQtS,OAAOnI,MAAOya,EAAQtS,OAAOlI,QAGzDwY,GACFgC,EAAQ3a,UAAUud,EAAa,EAAG,GAIpC5C,EAAQ3a,UAAUgW,EAAkB,EAAG,GAGnCmD,GAraY,SAASnU,GACzB2V,EAAQ3S,OACR2S,EAAQzF,UAAY,QACpByF,EAAQxF,aAAe,SACvBwF,EAAQtT,YAAcyF,EAAS9R,UAC/B2f,EAAQnX,UAAYsJ,EAAS9R,UAEzB8R,IAAaoM,EAAS5L,SAAAA,UAAYR,IAAaoM,EAAS3L,SAAAA,iBAC1DoN,EAAQhI,YAAc,OACtBgI,EAAQ/H,cAA6B,KAAbhL,EACxB+S,EAAQ9H,cAA6B,KAAbjL,EACxB+S,EAAQ7H,WAA0B,KAAblL,GAGrB+S,EAAQvF,KADNiE,EACa9iB,KAAKiM,MAAmB,KAAboF,GAAsB,MAAQpL,EAAxD,YAEejG,KAAKiM,MAAmB,KAAboF,GAAsB,WAAanL,EAA7D,YAEFke,EAAQtF,SAAS9e,KAAKC,MAAMwO,IAAS4C,EAA2B,GAAbA,GAAqB,EAAI,EAAgB,KAAbA,EAAiC,GAAbA,GACnG+S,EAAQzS,UAmZNsW,CAAYxZ,GA9Ods6B,EAAYt6B,EAAQ,IAAQ,IAC5Bu6B,EAAav6B,EAAQ,IAAS,IAC9Bw6B,EAAcx6B,EAAQ,IAAU,IAkP5B0N,IAAAA,EAA4B,KAAb9K,EAAqB,GAExC+S,EAAQ3S,OAGR2S,EAAQ3P,UAAU1M,EAASC,GAC3Boc,EAAQ1P,QAAQu0B,EAAapnB,GAAYgnB,GACzCzkB,EAAQ3P,WAAW1M,GAAUC,GAE7Boc,EAAQhI,YAAc,qBACtBgI,EAAQ/H,cAAgB+H,EAAQ9H,cAAgBH,EAChDiI,EAAQ7H,WAA4B,EAAfJ,EAErBiI,EAAQ3a,UAAU0/B,EAAoB,EAAG,GAEzChtB,EAA4B,KAAb9K,EAAqB,IACpC+S,EAAQ/H,cAAgB+H,EAAQ9H,cAAgBH,EAGhDiI,EAAQ3P,UAAU1M,EAASC,GAC3Boc,EAAQ1P,QAAQs0B,EAAYnnB,GAAY+mB,GAAmBK,EAAapnB,GAAYgnB,GACpFzkB,EAAQ3P,WAAW1M,GAAUC,GAC7Boc,EAAQ3a,UAAU4/B,EAAmB,EAAG,GAExCltB,EAA4B,KAAb9K,EACf+S,EAAQ/H,cAAgB+H,EAAQ9H,cAAgBH,EAGhDiI,EAAQ3P,UAAU1M,EAASC,GAC3Boc,EAAQ1P,QAAQq0B,EAAWlnB,GAAY8mB,GAAkBK,EAAYnnB,GAAY+mB,GACjFxkB,EAAQ3P,WAAW1M,GAAUC,GAC7Boc,EAAQ3a,UAAU8/B,GAAkB,EAAG,GACvCnlB,EAAQzS,UAGJ6R,GACFY,EAAQ3a,UAAUkW,GAAkB,EAAG,GAGzCc,GAAa,GAIVQ,KAAAA,UAEE,MAGMynB,EAAAA,EAAAA,QAAAA,QAAAA;;ACgDAuB,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EApoBf,IAAA,EAAA,QAAA,WAMIA,EAAe,SAASn4B,EAAQkN,GAE9BrV,IAIFugC,EAAY74B,EAAYC,EAJtB3H,OAASxJ,KADb6e,EAAaA,GAAc,IACWrV,MAAQ,EAAIqV,EAAWrV,MAC3DC,OAAUzJ,IAAc6e,EAAWpV,OAAS,EAAIoV,EAAWpV,OAE3Dwa,GAAU,EAAiBtS,EAAAA,kBAAAA,GAE3Bq4B,GAAQ,EACRC,GAAW,EACXC,GAAU,EACV7pB,GAAc,EACd8pB,EAAgBvkC,EAAI6G,IAAAA,cAAc,UAClC29B,EAAaD,EAAc/gC,WAAW,MACtCihC,EAAmBzkC,EAAI6G,IAAAA,cAAc,UACrC69B,EAAgBD,EAAiBjhC,WAAW,MAC5CmhC,EAAgB3kC,EAAI6G,IAAAA,cAAc,UAClC+9B,EAAaD,EAAcnhC,WAAW,MACtCqhC,EAAiB7kC,EAAI6G,IAAAA,cAAc,UACnCi+B,EAAcD,EAAerhC,WAAW,MACxCuhC,EAAoB/kC,EAAI6G,IAAAA,cAAc,UACtCm+B,EAAiBD,EAAkBvhC,WAAW,MAC9CyhC,EAAiBjlC,EAAI6G,IAAAA,cAAc,UACnCq+B,EAAcD,EAAezhC,WAAW,MACxC2hC,EAAkBnlC,EAAI6G,IAAAA,cAAc,UACpCu+B,EAAeD,EAAgB3hC,WAAW,MAC1C6hC,EAAiBrlC,EAAI6G,IAAAA,cAAc,UACnCy+B,EAAcD,EAAe7hC,WAAW,MACxC+hC,EAAcvlC,EAAI6G,IAAAA,cAAc,UAChC2+B,EAAWD,EAAY/hC,WAAW,MAClCiiC,EAAezlC,EAAI6G,IAAAA,cAAc,UACjC6+B,EAAYD,EAAajiC,WAAW,MAIxB,IAAVI,IACFA,EAAQya,EAAQtS,OAAOnI,OAEV,IAAXC,IACFA,EAASwa,EAAQtS,OAAOlI,QAI1Bwa,EAAQtS,OAAOnI,MAAQA,EACvBya,EAAQtS,OAAOlI,OAASA,EAGxByH,EAA0B,SAD1B64B,EAAavgC,EAAkB,QAATC,EAA8B,SAARD,EAAoBC,GAEhE0H,EAAc44B,EAEdI,EAAc3gC,MAAQ0H,EACtBi5B,EAAc1gC,OAAS0H,EAEvBk5B,EAAiB7gC,MAAQ0H,EACzBm5B,EAAiB5gC,OAAS0H,EAE1Bo5B,EAAc/gC,MAAQ0H,EACtBq5B,EAAc9gC,OAAS0H,EAEvBs5B,EAAejhC,MAAQ0H,EACvBu5B,EAAehhC,OAAS0H,EAExBw5B,EAAkBnhC,MAAQ0H,EAC1By5B,EAAkBlhC,OAAS0H,EAE3B05B,EAAerhC,MAAQ0H,EACvB25B,EAAephC,OAAS0H,EAExB45B,EAAgBvhC,MAAQ0H,EACxB65B,EAAgBthC,OAAS0H,EAEzB85B,EAAezhC,MAAQ0H,EACvB+5B,EAAexhC,OAAS0H,EAExBg6B,EAAY3hC,MAAQ0H,EACpBi6B,EAAY1hC,OAAS0H,EAErBk6B,EAAa7hC,MAAQ0H,EACrBm6B,EAAa5hC,OAAS0H,EA8clBo6B,IAAAA,EARK7+B,SAAalD,EAAOC,EAAQkD,GAC/BjE,IAAAA,EAAS9C,EAAI6G,IAAAA,cAAc,UAIxB/D,OAHPA,EAAOc,MAAQA,EACfd,EAAOe,OAASA,EAChBkD,EAAajE,EAAOU,WAAW,OACxBV,EAGSgE,CAAa,EAAG,EAAG,SAAS/E,GAC5CA,EAAI2J,OACJ3J,EAAIgJ,YAAc,qBAClBhJ,EAAIyE,YACJzE,EAAI2E,OAAO,EAAG,EAAG,EAAG,GACpB3E,EAAI2E,OAAO,EAAG,EAAG,EAAG,GACpB3E,EAAIiJ,SACJjJ,EAAI6J,YAGFzT,EAAO,WAtdO,IAAS4J,EACrB6jC,EAAaC,EAsdjBprB,GAAc,GAvdW1Y,EAydbyiC,GAtdR94B,OAEJ3J,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAI0E,OAAO,QAAW6E,EAAY,GAClCvJ,EAAI2E,OAAO4E,EAAa,QAAWA,EAAY,GAC/CvJ,EAAI4E,iBAAiB2E,EAAY,EAAGA,EAAY,QAAWA,GAC3DvJ,EAAI2E,OAAO4E,EAAYC,EAAc,QAAWD,GAChDvJ,EAAI4E,iBAAiB2E,EAAYC,EAAaD,EAAa,QAAWA,EAAYC,GAClFxJ,EAAI2E,OAAO,QAAW4E,EAAYC,GAClCxJ,EAAI4E,iBAAiB,EAAG4E,EAAa,EAAGA,EAAc,QAAWD,GACjEvJ,EAAI2E,OAAO,EAAG,QAAW4E,GACzBvJ,EAAI4E,iBAAiB,EAAG,EAAG,QAAW2E,EAAYC,GAClDxJ,EAAI6E,aACJg/B,EAAc7jC,EAAI2I,qBAAqB,QAAWY,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,IAC5GZ,aAAa,EAAG,sBAC5Bi7B,EAAYj7B,aAAa,IAAM,sBAC/Bi7B,EAAYj7B,aAAa,IAAM,WAC/Bi7B,EAAYj7B,aAAa,IAAM,sBAC/Bi7B,EAAYj7B,aAAa,IAAM,mBAC/Bi7B,EAAYj7B,aAAa,IAAM,WAC/Bi7B,EAAYj7B,aAAa,IAAM,WAC/Bi7B,EAAYj7B,aAAa,EAAG,WAC5B5I,EAAImF,UAAY0+B,EAChB7jC,EAAIqF,OACJrF,EAAI6J,UAEJ7J,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAI0E,OAAO,QAAW6E,EAAa,QAAWA,EAAY,QAAWC,GACrExJ,EAAI2E,OAAO,QAAW4E,EAAa,QAAWA,EAAa,QAAWA,EAAY,QAAWC,GAC7FxJ,EAAI4E,iBAAiB,QAAW2E,EAAa,QAAWA,EAAY,QAAWC,EAAa,QAAWD,EAAa,QAAWA,EAAY,QAAWC,EAAc,QAAWD,GAC/KvJ,EAAI2E,OAAO,QAAW4E,EAAa,QAAWA,EAAY,QAAWC,EAAc,QAAWA,EAAc,QAAWD,GACvHvJ,EAAI4E,iBAAiB,QAAW2E,EAAa,QAAWA,EAAY,QAAWC,EAAc,QAAWA,EAAa,QAAWD,EAAa,QAAWA,EAAa,QAAWA,EAAY,QAAWC,EAAc,QAAWA,GAChOxJ,EAAI2E,OAAO,QAAW4E,EAAa,QAAWA,EAAY,QAAWC,EAAc,QAAWA,GAC9FxJ,EAAI4E,iBAAiB,QAAW2E,EAAY,QAAWC,EAAc,QAAWA,EAAa,QAAWD,EAAY,QAAWC,EAAc,QAAWA,EAAc,QAAWD,GACjLvJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,EAAc,QAAWD,GACtEvJ,EAAI4E,iBAAiB,QAAW2E,EAAY,QAAWC,EAAa,QAAWD,EAAa,QAAWA,EAAY,QAAWC,GAC9HxJ,EAAI6E,aACJi/B,EAAmB9jC,EAAI2I,sBAAsB,QAAWY,GAAa,QAAWC,EAAa,SAAWD,EAAY,QAAWC,IAC9GZ,aAAa,EAAG,WACjCk7B,EAAiBl7B,aAAa,IAAM,WACpCk7B,EAAiBl7B,aAAa,IAAM,WACpCk7B,EAAiBl7B,aAAa,IAAM,WACpCk7B,EAAiBl7B,aAAa,IAAM,WACpCk7B,EAAiBl7B,aAAa,IAAM,WACpCk7B,EAAiBl7B,aAAa,IAAM,WACpCk7B,EAAiBl7B,aAAa,IAAM,WACpCk7B,EAAiBl7B,aAAa,EAAG,WACjC5I,EAAImF,UAAY2+B,EAChB9jC,EAAIqF,OACJrF,EAAI6J,UAEJ7J,EAAI6J,UAGe,SAAS7J,GACxB+jC,IAAAA,EAAqBC,EAAqBC,EAAsBC,EAEpElkC,EAAI2J,OAEJ3J,EAAI2J,OACJ3J,EAAImkC,MAAM,EAAG,GACbnkC,EAAIyE,YACJzE,EAAImJ,IAAI,GAAMI,EAAY,QAAWC,EAAa,QAAWD,EAAY,EAAGzL,EAA5E,QAAoF,IACpFimC,EAAsB/jC,EAAI2I,qBAAqB,EAAG,QAAWa,EAAa,EAAG,QAAWA,IACpEZ,aAAa,EAAG,WACpCm7B,EAAoBn7B,aAAa,IAAM,sBACvCm7B,EAAoBn7B,aAAa,GAAK,sBACtCm7B,EAAoBn7B,aAAa,IAAM,WACvCm7B,EAAoBn7B,aAAa,IAAM,WACvCm7B,EAAoBn7B,aAAa,EAAG,WACpC5I,EAAImF,UAAY4+B,EAChB/jC,EAAIqF,OACJrF,EAAI6J,UAEJ7J,EAAI2J,OACJ3J,EAAImkC,MAAM,SAAU,GACpBnkC,EAAIyE,YACJzE,EAAImJ,IAAI,QAAWI,EAAY,QAAWC,EAAa,QAAWD,EAAY,EAAGzL,EAAjF,QAAyF,IACzFkmC,EAAsBhkC,EAAI2I,qBAAqB,EAAG,OAAWa,EAAa,EAAG,QAAWA,IACpEZ,aAAa,EAAG,WACpCo7B,EAAoBp7B,aAAa,IAAM,WACvCo7B,EAAoBp7B,aAAa,IAAM,WACvCo7B,EAAoBp7B,aAAa,EAAG,WACpC5I,EAAImF,UAAY6+B,EAChBhkC,EAAIqF,OACJrF,EAAI6J,UAEJ7J,EAAI2J,OACJ3J,EAAImkC,MAAM,EAAG,GACbnkC,EAAIyE,YACJzE,EAAImJ,IAAI,GAAMI,EAAY,QAAWC,EAAa,QAAWD,EAAY,EAAGzL,EAA5E,QAAoF,IACpFmmC,EAAuBjkC,EAAIoJ,qBAAqB,GAAMG,EAAY,QAAWC,EAAa,EAAG,GAAMD,EAAY,QAAWC,EAAa,QAAWD,IAC7HX,aAAa,EAAG,WACrCq7B,EAAqBr7B,aAAa,IAAM,WACxCq7B,EAAqBr7B,aAAa,IAAM,mBACxCq7B,EAAqBr7B,aAAa,EAAG,WACrC5I,EAAImF,UAAY8+B,EAChBjkC,EAAIqF,OACJrF,EAAI6J,UAEJ7J,EAAI2J,OACJ3J,EAAImkC,MAAM,EAAG,GACbnkC,EAAIyE,YACJzE,EAAImJ,IAAI,GAAMI,EAAY,QAAWC,EAAa,QAAWD,EAAY,EAAGzL,EAA5E,QAAoF,IACpFomC,EAA4BlkC,EAAI2I,qBAAqB,EAAG,OAAWa,EAAa,EAAG,QAAWA,IACpEZ,aAAa,EAAG,WAC1Cs7B,EAA0Bt7B,aAAa,EAAG,oBAC1C5I,EAAImF,UAAY++B,EAChBlkC,EAAIqF,OACJrF,EAAI6J,UACJ7J,EAAI6J,UAuWJu6B,CAAezB,GApWC,SAAS3iC,GACrBqkC,IAAAA,EAAaC,EAEjBtkC,EAAI2J,OAEJ3J,EAAI2J,OACJ3J,EAAImkC,MAAM,EAAG,GACbnkC,EAAIyE,YACJzE,EAAImJ,IAAI,GAAMI,EAAY,QAAWC,EAAa,OAAWD,EAAY,EAAGzL,EAA5E,QAAoF,IACpFumC,EAAcrkC,EAAIoJ,qBAAqB,GAAMG,EAAY,QAAWC,EAAa,EAAG,GAAMD,EAAY,QAAWC,EAAa,OAAWD,IAC7HX,aAAa,EAAG,qBAC5By7B,EAAYz7B,aAAa,EAAG,iBAC5B5I,EAAImF,UAAYk/B,EAChBrkC,EAAIqF,OACJrF,EAAI6J,UAEJ7J,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAI0E,OAAO,EAAG,QAAW8E,GACzBxJ,EAAIkJ,cAAc,EAAG,QAAWM,EAAa,QAAWD,EAAY,QAAWC,EAAa,GAAMD,EAAY,QAAWC,GACzHxJ,EAAIkJ,cAAc,OAAWK,EAAY,QAAWC,EAAaD,EAAY,QAAWC,EAAaD,EAAY,QAAWC,GAC5HxJ,EAAIkJ,cAAc,QAAWK,EAAY,QAAWC,EAAa,QAAWD,EAAY,OAAWC,EAAa,GAAMD,EAAY,OAAWC,GAC7IxJ,EAAIkJ,cAAc,QAAWK,EAAY,OAAWC,EAAa,QAAWD,EAAY,QAAWC,EAAa,EAAG,QAAWA,GAC9HxJ,EAAI6E,aACJy/B,EAAkBtkC,EAAIoJ,qBAAqB,GAAMG,EAAY,QAAWC,EAAa,EAAG,GAAMD,EAAY,QAAWC,EAAa,QAAWD,IAC7HX,aAAa,EAAG,qBAChC07B,EAAgB17B,aAAa,EAAG,qBAChC5I,EAAImF,UAAYm/B,EAChBtkC,EAAIqF,OACJrF,EAAI6J,UACJ7J,EAAI6J,UAuUJ06B,CAAY1B,GApUK,SAAS7iC,GACtBwkC,IAAAA,EAAcC,EAElBzkC,EAAI2J,OAEJ3J,EAAI2J,OACJ3J,EAAImkC,MAAM,EAAG,GACbnkC,EAAIyE,YACJzE,EAAImJ,IAAI,GAAMI,EAAY,QAAWC,EAAa,OAAWD,EAAY,EAAGzL,EAA5E,QAAoF,IACpF0mC,EAAexkC,EAAIoJ,qBAAqB,GAAMG,EAAY,QAAWC,EAAa,EAAG,GAAMD,EAAY,QAAWC,EAAa,OAAWD,IAC7HX,aAAa,EAAG,yBAC7B47B,EAAa57B,aAAa,EAAG,yBAC7B5I,EAAImF,UAAYq/B,EAChBxkC,EAAIqF,OACJrF,EAAI6J,UAEJ7J,EAAI2J,OACJ3J,EAAImkC,MAAM,EAAG,GACbnkC,EAAIyE,YACJzE,EAAImJ,IAAI,GAAMI,EAAY,QAAWC,EAAa,OAAWD,EAAY,EAAGzL,EAA5E,QAAoF,IACpF2mC,EAA0BzkC,EAAIoJ,qBAAqB,GAAMG,EAAY,QAAWC,EAAa,EAAG,GAAMD,EAAY,QAAWC,EAAa,OAAWD,IAC7HX,aAAa,EAAG,oBACxC67B,EAAwB77B,aAAa,IAAM,oBAC3C67B,EAAwB77B,aAAa,MAAQ,oBAC7C67B,EAAwB77B,aAAa,IAAM,uBAC3C67B,EAAwB77B,aAAa,IAAM,uBAC3C67B,EAAwB77B,aAAa,EAAG,sBACxC5I,EAAImF,UAAYs/B,EAChBzkC,EAAIqF,OACJrF,EAAI6J,UAEJ7J,EAAImF,UAAYnF,EAAI0M,cAAck3B,EAAa,UAC/C5jC,EAAIqF,OAEJrF,EAAI6J,UAmSJ66B,CAAa3B,GAhSO,SAAS/iC,GACzB2kC,IAAAA,EAAsBC,EAAsBC,EAAuBC,EAEvE9kC,EAAI2J,OAEJ3J,EAAI2J,OACJ3J,EAAImkC,MAAM,EAAG,GACbnkC,EAAIyE,YACJzE,EAAImJ,IAAI,GAAMI,EAAY,QAAWC,EAAa,QAAWD,EAAY,EAAGzL,EAA5E,QAAoF,IACpF6mC,EAAuB3kC,EAAI2I,qBAAqB,EAAG,QAAWa,EAAa,EAAG,OAAWA,IACpEZ,aAAa,EAAG,WACrC+7B,EAAqB/7B,aAAa,IAAM,sBACxC+7B,EAAqB/7B,aAAa,GAAK,sBACvC+7B,EAAqB/7B,aAAa,IAAM,WACxC+7B,EAAqB/7B,aAAa,IAAM,WACxC+7B,EAAqB/7B,aAAa,EAAG,WACrC5I,EAAImF,UAAYw/B,EAChB3kC,EAAIqF,OACJrF,EAAI6J,UAEJ7J,EAAI2J,OACJ3J,EAAImkC,MAAM,SAAU,GACpBnkC,EAAIyE,YACJzE,EAAImJ,IAAI,QAAWI,EAAY,QAAWC,EAAa,QAAWD,EAAY,EAAGzL,EAAjF,QAAyF,IACzF8mC,EAAuB5kC,EAAI2I,qBAAqB,EAAG,QAAWa,EAAa,EAAG,OAAWA,IACpEZ,aAAa,EAAG,WACrCg8B,EAAqBh8B,aAAa,IAAM,WACxCg8B,EAAqBh8B,aAAa,IAAM,WACxCg8B,EAAqBh8B,aAAa,EAAG,WACrC5I,EAAImF,UAAYy/B,EAChB5kC,EAAIqF,OACJrF,EAAI6J,UAEJ7J,EAAI2J,OACJ3J,EAAImkC,MAAM,EAAG,GACbnkC,EAAIyE,YACJzE,EAAImJ,IAAI,GAAMI,EAAY,GAAMC,EAAa,QAAWD,EAAY,EAAGzL,EAAvE,QAA+E,IAC/E+mC,EAAwB7kC,EAAIoJ,qBAAqB,GAAMG,EAAY,GAAMC,EAAa,EAAG,GAAMD,EAAY,GAAMC,EAAa,QAAWD,IACnHX,aAAa,EAAG,WACtCi8B,EAAsBj8B,aAAa,IAAM,WACzCi8B,EAAsBj8B,aAAa,IAAM,WACzCi8B,EAAsBj8B,aAAa,EAAG,WACtC5I,EAAImF,UAAY0/B,EAChB7kC,EAAIqF,OACJrF,EAAI6J,UAGJ7J,EAAI2J,OACJ3J,EAAImkC,MAAM,EAAG,GACbnkC,EAAIyE,YACJzE,EAAImJ,IAAI,GAAMI,EAAY,GAAMC,EAAa,QAAWD,EAAY,EAAGzL,EAAvE,QAA+E,IAC/EgnC,EAA6B9kC,EAAI2I,qBAAqB,EAAG,QAAWa,EAAa,EAAG,QAAWA,IACpEZ,aAAa,EAAG,WAC3Ck8B,EAA2Bl8B,aAAa,EAAG,oBAC3C5I,EAAImF,UAAY2/B,EAChB9kC,EAAIqF,OACJrF,EAAI6J,UACJ7J,EAAI6J,UAwOJk7B,CAAgB9B,GArOC,SAASjjC,GACtBglC,IAAAA,EAAcC,EAElBjlC,EAAI2J,OAEJ3J,EAAI2J,OACJ3J,EAAImkC,MAAM,EAAG,GACbnkC,EAAIyE,YACJzE,EAAImJ,IAAI,GAAMI,EAAY,GAAMC,EAAa,OAAWD,EAAY,EAAGzL,EAAvE,QAA+E,IAC/EknC,EAAehlC,EAAIoJ,qBAAqB,GAAMG,EAAY,GAAMC,EAAa,EAAG,GAAMD,EAAY,GAAMC,EAAa,OAAWD,IACnHX,aAAa,EAAG,WAC7Bo8B,EAAap8B,aAAa,EAAG,WAC7B5I,EAAImF,UAAY6/B,EAChBhlC,EAAIqF,OACJrF,EAAI6J,UAEJ7J,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAI0E,OAAO,EAAG,QAAW8E,GACzBxJ,EAAIkJ,cAAc,EAAG,QAAWM,EAAa,QAAWD,EAAY,QAAWC,EAAa,GAAMD,EAAY,QAAWC,GACzHxJ,EAAIkJ,cAAc,OAAWK,EAAY,QAAWC,EAAaD,EAAY,QAAWC,EAAaD,EAAY,GAAMC,GACvHxJ,EAAIkJ,cAAc,QAAWK,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,EAAa,GAAMD,EAAY,QAAWC,GAC7IxJ,EAAIkJ,cAAc,QAAWK,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,EAAa,EAAG,QAAWA,GAC9HxJ,EAAI6E,aACJogC,EAAmBjlC,EAAIoJ,qBAAqB,GAAMG,EAAY,GAAMC,EAAa,EAAG,GAAMD,EAAY,GAAMC,EAAa,QAAWD,IACnHX,aAAa,EAAG,WACjCq8B,EAAiBr8B,aAAa,EAAG,wBACjC5I,EAAImF,UAAY8/B,EAChBjlC,EAAIqF,OACJrF,EAAI6J,UACJ7J,EAAI6J,UAwMJq7B,CAAa/B,GArMK,SAASnjC,GACvBmlC,IAAAA,EAAeC,EAEnBplC,EAAI2J,OAEJ3J,EAAI2J,OACJ3J,EAAImkC,MAAM,EAAG,GACbnkC,EAAIyE,YACJzE,EAAImJ,IAAI,GAAMI,EAAY,GAAMC,EAAa,OAAWD,EAAY,EAAGzL,EAAvE,QAA+E,IAC/EqnC,EAAgBnlC,EAAIoJ,qBAAqB,GAAMG,EAAY,GAAMC,EAAa,EAAG,GAAMD,EAAY,GAAMC,EAAa,OAAWD,IACnHX,aAAa,EAAG,2BAC9Bu8B,EAAcv8B,aAAa,EAAG,2BAC9B5I,EAAImF,UAAYggC,EAChBnlC,EAAIqF,OACJrF,EAAI6J,UAEJ7J,EAAI2J,OACJ3J,EAAImkC,MAAM,EAAG,GACbnkC,EAAIyE,YACJzE,EAAImJ,IAAI,GAAMI,EAAY,GAAMC,EAAa,OAAWD,EAAY,EAAGzL,EAAvE,QAA+E,IAC/EsnC,EAA2BplC,EAAIoJ,qBAAqB,GAAMG,EAAY,GAAMC,EAAa,EAAG,GAAMD,EAAY,GAAMC,EAAa,OAAWD,IACnHX,aAAa,EAAG,oBACzCw8B,EAAyBx8B,aAAa,IAAM,oBAC5Cw8B,EAAyBx8B,aAAa,MAAQ,oBAC9Cw8B,EAAyBx8B,aAAa,IAAM,uBAC5Cw8B,EAAyBx8B,aAAa,IAAM,uBAC5Cw8B,EAAyBx8B,aAAa,EAAG,sBACzC5I,EAAImF,UAAYigC,EAChBplC,EAAIqF,OACJrF,EAAI6J,UAEJ7J,EAAImF,UAAYnF,EAAI0M,cAAck3B,EAAa,UAC/C5jC,EAAIqF,OAEJrF,EAAI6J,UAoKJw7B,CAAchC,GAjKG,SAASrjC,GACtBslC,IAAAA,EAAmBC,EAAmBC,EAAoBC,EAE9DzlC,EAAI2J,OAGJ3J,EAAI2J,OACJ3J,EAAImkC,MAAM,EAAG,GACbnkC,EAAIyE,YACJzE,EAAImJ,IAAI,GAAMI,EAAY,OAAWC,EAAa,QAAWD,EAAY,EAAGzL,EAA5E,QAAoF,IACpFwnC,EAAoBtlC,EAAI2I,qBAAsB,GAAMY,EAAc,QAAWC,EAAgB,GAAYD,EAAe,QAAYC,IAClHZ,aAAa,EAAG,WAClC08B,EAAkB18B,aAAa,IAAM,WACrC08B,EAAkB18B,aAAa,GAAK,WACpC08B,EAAkB18B,aAAa,IAAM,WACrC08B,EAAkB18B,aAAa,IAAM,WACrC08B,EAAkB18B,aAAa,EAAG,WAClC5I,EAAImF,UAAYmgC,EAChBtlC,EAAIqF,OACJrF,EAAI6J,UAGJ7J,EAAI2J,OACJ3J,EAAImkC,MAAM,SAAU,GACpBnkC,EAAIyE,YACJzE,EAAImJ,IAAI,QAAWI,EAAY,QAAWC,EAAa,QAAWD,EAAY,EAAGzL,EAAjF,QAAyF,IACzFynC,EAAoBvlC,EAAI2I,qBAAsB,GAAMY,EAAc,QAAWC,EAAgB,GAAYD,EAAe,QAAYC,IAClHZ,aAAa,EAAG,WAClC28B,EAAkB38B,aAAa,IAAM,WACrC28B,EAAkB38B,aAAa,IAAM,WACrC28B,EAAkB38B,aAAa,EAAG,WAClC5I,EAAImF,UAAYogC,EAChBvlC,EAAIqF,OACJrF,EAAI6J,UAGJ7J,EAAI2J,OACJ3J,EAAImkC,MAAM,EAAG,GACbnkC,EAAIyE,YACJzE,EAAImJ,IAAI,GAAMI,EAAY,QAAWC,EAAa,QAAWD,EAAY,EAAGzL,EAA5E,QAAoF,IACpF0nC,EAAqBxlC,EAAIoJ,qBAAsB,GAAOG,EAAc,QAAYC,EAAc,EAAK,GAAOD,EAAe,QAAYC,EAAc,QAAWD,IAC3IX,aAAa,EAAG,WACnC48B,EAAmB58B,aAAa,IAAM,WACtC48B,EAAmB58B,aAAa,IAAM,WACtC48B,EAAmB58B,aAAa,EAAG,WACnC5I,EAAImF,UAAYqgC,EAChBxlC,EAAIqF,OACJrF,EAAI6J,UAGJ7J,EAAI2J,OACJ3J,EAAImkC,MAAM,EAAG,GACbnkC,EAAIyE,YACJzE,EAAImJ,IAAI,GAAMI,EAAY,QAAWC,EAAa,QAAWD,EAAY,EAAGzL,EAA5E,QAAoF,IACpF2nC,EAA0BzlC,EAAI2I,qBAAsB,GAAMY,EAAc,QAAWC,EAAgB,GAAYD,EAAe,QAAYC,IAClHZ,aAAa,EAAG,WACxC68B,EAAwB78B,aAAa,EAAG,oBACxC5I,EAAImF,UAAYsgC,EAChBzlC,EAAIqF,OACJrF,EAAI6J,UACJ7J,EAAI6J,UAsGJ67B,CAAanC,GAnGC,SAASvjC,GACnB2lC,IAAAA,EAAWC,EAEf5lC,EAAI2J,OAEJ3J,EAAI2J,OACJ3J,EAAImkC,MAAM,EAAG,GACbnkC,EAAIyE,YACJzE,EAAImJ,IAAI,GAAMI,EAAY,QAAWC,EAAa,OAAWD,EAAY,EAAGzL,EAA5E,QAAoF,IACpF6nC,EAAY3lC,EAAIoJ,qBAAqB,GAAMG,EAAY,QAAWC,EAAa,EAAG,GAAMD,EAAY,QAAWC,EAAa,OAAWD,IAC7HX,aAAa,EAAG,WAC1B+8B,EAAU/8B,aAAa,EAAG,WAC1B5I,EAAImF,UAAYwgC,EAChB3lC,EAAIqF,OACJrF,EAAI6J,UAEJ7J,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAI0E,OAAO,EAAG,QAAW8E,GACzBxJ,EAAIkJ,cAAc,EAAG,QAAWM,EAAa,QAAWD,EAAY,QAAWC,EAAa,GAAMD,EAAY,QAAWC,GACzHxJ,EAAIkJ,cAAc,OAAWK,EAAY,QAAWC,EAAaD,EAAY,QAAWC,EAAaD,EAAY,QAAWC,GAC5HxJ,EAAIkJ,cAAc,QAAWK,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,EAAa,GAAMD,EAAY,QAAWC,GAC7IxJ,EAAIkJ,cAAc,QAAWK,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,EAAa,EAAG,QAAWA,GAC9HxJ,EAAI6E,aACJ+gC,EAAgB5lC,EAAIoJ,qBAAqB,GAAMG,EAAY,QAAWC,EAAa,EAAG,GAAMD,EAAY,QAAWC,EAAa,QAAWD,IAC7HX,aAAa,EAAG,WAC9Bg9B,EAAch9B,aAAa,EAAG,sBAC9B5I,EAAImF,UAAYygC,EAChB5lC,EAAIqF,OACJrF,EAAI6J,UAEJ7J,EAAI6J,UAqEJg8B,CAAUpC,GAlEK,SAASzjC,GACpB8lC,IAAAA,EAAYC,EAEhB/lC,EAAI2J,OAEJ3J,EAAI2J,OACJ3J,EAAImkC,MAAM,EAAG,GACbnkC,EAAIyE,YACJzE,EAAImJ,IAAI,GAAMI,EAAY,QAAWC,EAAa,OAAWD,EAAY,EAAGzL,EAA5E,QAAoF,IACpFgoC,EAAa9lC,EAAIoJ,qBAAqB,GAAMG,EAAY,QAAWC,EAAa,EAAG,GAAMD,EAAY,QAAWC,EAAa,OAAWD,IAC7HX,aAAa,EAAG,yBAC3Bk9B,EAAWl9B,aAAa,EAAG,yBAC3B5I,EAAImF,UAAY2gC,EAChB9lC,EAAIqF,OACJrF,EAAI6J,UAEJ7J,EAAI2J,OACJ3J,EAAImkC,MAAM,EAAG,GACbnkC,EAAIyE,YACJzE,EAAImJ,IAAI,GAAMI,EAAY,QAAWC,EAAa,OAAWD,EAAY,EAAGzL,EAA5E,QAAoF,IACpFioC,EAAwB/lC,EAAIoJ,qBAAqB,GAAMG,EAAY,QAAWC,EAAa,EAAG,GAAMD,EAAY,QAAWC,EAAa,OAAWD,IAC7HX,aAAa,EAAG,oBACtCm9B,EAAsBn9B,aAAa,IAAM,oBACzCm9B,EAAsBn9B,aAAa,MAAQ,oBAC3Cm9B,EAAsBn9B,aAAa,IAAM,uBACzCm9B,EAAsBn9B,aAAa,IAAM,uBACzCm9B,EAAsBn9B,aAAa,EAAG,sBACtC5I,EAAImF,UAAY4gC,EAChB/lC,EAAIqF,OACJrF,EAAI6J,UAEJ7J,EAAImF,UAAYnF,EAAI0M,cAAck3B,EAAa,UAC/C5jC,EAAIqF,OAEJrF,EAAI6J,UAiCJm8B,CAAWrC,IA0EN,OAtEFsC,KAAAA,SAAW,SAASpf,GACvBwb,IAAUxb,EACL1N,KAAAA,WAGF+sB,KAAAA,QAAU,WACN7D,OAAAA,GAGJ8D,KAAAA,YAAc,SAAStf,GAC1Byb,IAAazb,EACR1N,KAAAA,WAGFitB,KAAAA,WAAa,WACT9D,OAAAA,GAGJ+D,KAAAA,WAAa,SAASxf,GACzB0b,IAAY1b,EACP1N,KAAAA,WAGFmtB,KAAAA,UAAY,WACR/D,OAAAA,GAGJppB,KAAAA,QAAU,WACRT,GACHtiB,IAGFkmB,EAAQ3S,OACR2S,EAAQiL,UAAU,EAAG,EAAGjL,EAAQtS,OAAOnI,MAAOya,EAAQtS,OAAOlI,QAG7Dwa,EAAQ3a,UAAU6gC,EAAe,EAAG,GAGpClmB,EAAQ3a,UAAU+gC,EAAkB,EAAG,GAEnCH,GACFjmB,EAAQ3a,UAAUihC,EAAe,EAAG,GAGtCtmB,EAAQ3a,UAAUmhC,EAAgB,EAAG,GAGrCxmB,EAAQ3a,UAAUqhC,EAAmB,EAAG,GAEpCV,GACFhmB,EAAQ3a,UAAUuhC,EAAgB,EAAG,GAGvC5mB,EAAQ3a,UAAUyhC,EAAiB,EAAG,GAGtC9mB,EAAQ3a,UAAU2hC,EAAgB,EAAG,GAEjCjB,GACF/lB,EAAQ3a,UAAU6hC,EAAa,EAAG,GAGpClnB,EAAQ3a,UAAU+hC,EAAc,EAAG,GACnCpnB,EAAQzS,WAILsP,KAAAA,UAEE,MAGMgpB,EAAAA,EAAAA,QAAAA,QAAAA;;ACvRAoE,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA7Wf,IAAA,EAAA,QAAA,WAKIA,EAAY,SAASv8B,EAAQkN,GAE3BoF,IAAAA,EAMFpU,EAAMqB,EAAYC,EAJlB3H,OAASxJ,KAHX6e,EAAaA,GAAc,IAGSrV,MAAQ,EAAIqV,EAAWrV,MACzDC,OAAUzJ,IAAc6e,EAAWpV,OAAS,EAAIoV,EAAWpV,OAC3D0kC,OAAanuC,IAAc6e,EAAWsvB,UAAY,UAAYtvB,EAAWsvB,UAGzE9tB,GAAc,EACd+tB,GAAU,EACV9nC,EAAQ,EACR+nC,EAAYzoC,EAAI6G,IAAAA,cAAc,UAC9B6hC,EAASD,EAAUjlC,WAAW,MAC9BmlC,EAAW3oC,EAAI6G,IAAAA,cAAc,UAC7B+hC,EAAQD,EAASnlC,WAAW,MAC5BqlC,EAAa7oC,EAAI6G,IAAAA,cAAc,UAC/BiiC,EAAUD,EAAWrlC,WAAW,MAIlC6a,EAAUpe,SAAS8J,eAAegC,GAAQvI,WAAW,MAGvC,IAAVI,IACFA,EAAQya,EAAQtS,OAAOnI,OAEV,IAAXC,IACFA,EAASwa,EAAQtS,OAAOlI,QAI1Bwa,EAAQtS,OAAOnI,MAAQA,EACvBya,EAAQtS,OAAOlI,OAASA,EAExByH,EADArB,EAAOrG,EAAQC,EAASD,EAAQC,EAEhC0H,EAActB,EAUVjD,IAAAA,EAAiB,SAAS/B,GACxBgC,IAAAA,EATgBrD,EAAOC,EAAQkD,EAC/BjE,EAiBG,MAAA,EADPmE,GAjBoBrD,EAUU,EAVHC,EAUM,EAVEkD,EAUC,SAAShF,GACzCA,EAAImF,UAAYjC,EAChBlD,EAAIyE,YACJzE,EAAIoF,KAAK,EAAG,EAAG,EAAG,GAClBpF,EAAIqF,SAbJtE,EAAS9C,EAAI6G,IAAAA,cAAc,WACxBjD,MAAQA,EACfd,EAAOe,OAASA,EAChBkD,EAAajE,EAAOU,WAAW,OACxBV,GAYkBU,WAAW,MAAM6D,aAAa,EAAG,EAAG,EAAG,GAAG/D,MACjD,GAAI2D,EAAU,GAAIA,EAAU,KAGhDwhC,EAAU7kC,MAAQ0H,EAClBm9B,EAAU5kC,OAAS0H,EAEnBo9B,EAAS/kC,MAAQ0H,EACjBq9B,EAAS9kC,OAAS0H,EAElBs9B,EAAWjlC,MAAQ0H,EACnBu9B,EAAWhlC,OAAS0H,EAEhBw9B,IAmOA5wC,EAAO,WAnOG,IAAS4J,EACjBinC,EAmOJvuB,GAAc,GApOO1Y,EAqOb2mC,GAlOJh9B,OAEJ3J,EAAIunB,UAAU,EAAG,EAAGvnB,EAAIgK,OAAOnI,MAAO7B,EAAIgK,OAAOlI,QAEjD9B,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAI0E,OAAO,QAAW6E,EAAY,QAAWC,GAC7CxJ,EAAIkJ,cAAc,QAAWK,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,GAClJxJ,EAAIkJ,cAAc,QAAWK,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,GAClJxJ,EAAIkJ,cAAc,QAAWK,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,GAClJxJ,EAAIkJ,cAAc,QAAWK,EAAY,QAAWC,EAAa,QAAWD,EAAY,OAAWC,EAAa,GAAMD,EAAY,OAAWC,GAC7IxJ,EAAIkJ,cAAc,QAAWK,EAAY,OAAWC,EAAa,QAAWD,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,GAClJxJ,EAAI6E,aACJoiC,EAAejnC,EAAI2I,qBAAqB,EAAG,QAAWa,EAAa,EAAG,QAAWA,IACpEZ,aAAa,EAAG,WAC7Bq+B,EAAar+B,aAAa,IAAM,WAChCq+B,EAAar+B,aAAa,EAAG,WAC7B5I,EAAImF,UAAY8hC,EAChBjnC,EAAIqF,OACJrF,EAAI8I,QAAU,OACd9I,EAAI+I,SAAW,QACf/I,EAAI6I,UAAY,QAAWU,EAC3BvJ,EAAIgJ,YAAc,UAClBhJ,EAAIiJ,SACJjJ,EAAI6J,UACJ7J,EAAI6J,UAGO,SAAS7J,GAChBknC,IAAAA,EACF3lC,EAAO0D,EAAeuhC,GACtBhoC,EAAM+C,EAAK,GACX9C,EAAQ8C,EAAK,GACb7C,EAAO6C,EAAK,GACZ4lC,GAAM,EAAS3oC,EAAAA,UAAAA,EAAKC,EAAOC,GAE7BsB,EAAI2J,OACJ3J,EAAIunB,UAAU,EAAG,EAAGvnB,EAAIgK,OAAOnI,MAAO7B,EAAIgK,OAAOlI,QACjD9B,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAI0E,OAAO,QAAW6E,EAAY,QAAWC,GAC7CxJ,EAAIkJ,cAAc,QAAWK,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,GAClJxJ,EAAIkJ,cAAc,QAAWK,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,GAClJxJ,EAAIkJ,cAAc,QAAWK,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,GAClJxJ,EAAIkJ,cAAc,QAAWK,EAAY,QAAWC,EAAa,QAAWD,EAAY,OAAWC,EAAa,GAAMD,EAAY,OAAWC,GAC7IxJ,EAAIkJ,cAAc,QAAWK,EAAY,OAAWC,EAAa,QAAWD,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,GAClJxJ,EAAI6E,YAEJqiC,EAAclnC,EAAI2I,qBAAqB,EAAG,QAAWa,EAAa,EAAG,QAAWA,GAE5EhL,IAAQC,GAASA,IAAUC,GAC7BwoC,EAAYt+B,aAAa,EAAG,mBAC5Bs+B,EAAYt+B,aAAa,EAAG,qBAE5Bs+B,EAAYt+B,aAAa,EAAG,OAAkB,IAATu+B,EAAI,GAAW,KAAgB,IAATA,EAAI,GAAW,WAC1ED,EAAYt+B,aAAa,EAAG,OAAkB,IAATu+B,EAAI,GAAW,KAAgB,IAATA,EAAI,GAAW,YAE5EnnC,EAAImF,UAAY+hC,EAGhBlnC,EAAIuU,cAAgB,EACpBvU,EAAIwU,cAAgB,EACpBxU,EAAIyU,WAAa,GACjBzU,EAAIsU,YAAckyB,EAElBxmC,EAAIqF,OAEJrF,EAAI8I,QAAU,OACd9I,EAAI+I,SAAW,QACf/I,EAAI6I,UAAY,QAAWU,EAC3BvJ,EAAIgJ,YAAc,QAAUxK,EAAM,KAAOC,EAAQ,KAAOC,EAAO,SAC/DsB,EAAIiJ,SAEJjJ,EAAI6J,UAEJ7J,EAAI6J,UAwJJu9B,CAAOP,GArJM,SAAS7mC,GAClBqnC,IAAAA,EAAWC,EAASC,EAAUC,EAElCxnC,EAAI2J,OAEJ3J,EAAIunB,UAAU,EAAG,EAAGvnB,EAAIgK,OAAOnI,MAAO7B,EAAIgK,OAAOlI,QAEjD9B,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAI0E,OAAO,QAAW6E,EAAY,QAAWC,GAC7CxJ,EAAIkJ,cAAc,QAAWK,EAAY,QAAWC,EAAa,OAAWD,EAAY,QAAWC,EAAa,GAAMD,EAAY,QAAWC,GAC7IxJ,EAAIkJ,cAAc,QAAWK,EAAY,QAAWC,EAAa,OAAWD,EAAY,QAAWC,EAAa,OAAWD,EAAY,QAAWC,GAClJxJ,EAAIkJ,cAAc,OAAWK,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,EAAa,GAAMD,EAAY,QAAWC,GAC7IxJ,EAAIkJ,cAAc,OAAWK,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,GAClJxJ,EAAI6E,aACJwiC,EAAYrnC,EAAI2I,qBAAqB,EAAG,QAAWa,EAAa,EAAG,QAAWA,IACpEZ,aAAa,EAAG,WAC1By+B,EAAUz+B,aAAa,IAAM,0BAC7By+B,EAAUz+B,aAAa,EAAG,0BAC1B5I,EAAImF,UAAYkiC,EAChBrnC,EAAIqF,OACJrF,EAAI6J,UAGJ7J,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAI0E,OAAO,QAAW6E,EAAY,QAAWC,GAC7CxJ,EAAIkJ,cAAc,QAAWK,EAAY,QAAWC,EAAa,QAAWD,EAAY,OAAWC,EAAa,QAAWD,EAAY,OAAWC,GAClJxJ,EAAIkJ,cAAc,QAAWK,EAAY,OAAWC,EAAa,QAAWD,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,GAClJxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAIkJ,cAAc,QAAWK,EAAY,QAAWC,EAAa,QAAWD,EAAY,OAAWC,EAAa,QAAWD,EAAY,QAAWC,GAClJxJ,EAAIkJ,cAAc,QAAWK,EAAY,QAAWC,EAAa,QAAWD,EAAYC,EAAa,GAAMD,EAAYC,GACvHxJ,EAAIkJ,cAAc,QAAWK,EAAYC,EAAa,QAAWD,EAAYC,EAAa,QAAWD,EAAY,QAAWC,GAC5HxJ,EAAIkJ,cAAc,QAAWK,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,GAClJxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI6E,aACJyiC,EAAUtnC,EAAI2I,qBAAqB,QAAWY,EAAY,OAAWC,EAAa,QAAWD,EAAY,QAAWC,IAC5GZ,aAAa,EAAG,WACxB0+B,EAAQ1+B,aAAa,IAAM,WAC3B0+B,EAAQ1+B,aAAa,IAAM,WAC3B0+B,EAAQ1+B,aAAa,IAAM,WAC3B0+B,EAAQ1+B,aAAa,IAAM,WAC3B0+B,EAAQ1+B,aAAa,GAAK,WAC1B0+B,EAAQ1+B,aAAa,IAAM,WAC3B0+B,EAAQ1+B,aAAa,IAAM,WAC3B0+B,EAAQ1+B,aAAa,IAAM,WAC3B0+B,EAAQ1+B,aAAa,GAAK,WAC1B0+B,EAAQ1+B,aAAa,IAAM,WAC3B0+B,EAAQ1+B,aAAa,EAAG,WACxB5I,EAAImF,UAAYmiC,EAChBtnC,EAAIqF,OACJrF,EAAI6J,UAGJ7J,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAI0E,OAAO,QAAW6E,EAAY,QAAWC,GAC7CxJ,EAAIkJ,cAAc,QAAWK,EAAY,QAAWC,EAAa,QAAWD,EAAY,OAAWC,EAAa,QAAWD,EAAY,OAAWC,GAClJxJ,EAAIkJ,cAAc,QAAWK,EAAY,OAAWC,EAAa,QAAWD,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,GAClJxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAIkJ,cAAc,QAAWK,EAAY,QAAWC,EAAa,QAAWD,EAAY,OAAWC,EAAa,QAAWD,EAAY,QAAWC,GAClJxJ,EAAIkJ,cAAc,QAAWK,EAAY,QAAWC,EAAa,QAAWD,EAAYC,EAAa,GAAMD,EAAYC,GACvHxJ,EAAIkJ,cAAc,QAAWK,EAAYC,EAAa,QAAWD,EAAYC,EAAa,QAAWD,EAAY,QAAWC,GAC5HxJ,EAAIkJ,cAAc,QAAWK,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,GAClJxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI2E,OAAO,QAAW4E,EAAY,QAAWC,GAC7CxJ,EAAI6E,aACJ0iC,EAAWvnC,EAAI2I,qBAAqB,QAAWY,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,IAC5GZ,aAAa,EAAG,sBACzB2+B,EAAS3+B,aAAa,IAAM,uBAC5B2+B,EAAS3+B,aAAa,IAAM,uBAC5B2+B,EAAS3+B,aAAa,EAAG,sBACzB5I,EAAImF,UAAYoiC,EAChBvnC,EAAIqF,OACJrF,EAAI6J,UAGJ7J,EAAI2J,OACJ3J,EAAIyE,YACJzE,EAAI0E,OAAO,QAAW6E,EAAY,QAAWC,GAC7CxJ,EAAIkJ,cAAc,QAAWK,EAAY,OAAWC,EAAa,QAAWD,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,GAClJxJ,EAAIkJ,cAAc,QAAWK,EAAYC,EAAa,QAAWD,EAAYC,EAAa,GAAMD,EAAYC,GAC5GxJ,EAAIkJ,cAAc,QAAWK,EAAYC,EAAa,QAAWD,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,GACvIxJ,EAAIkJ,cAAc,QAAWK,EAAY,QAAWC,EAAa,QAAWD,EAAY,OAAWC,EAAa,QAAWD,EAAY,QAAWC,GAClJxJ,EAAIkJ,cAAc,QAAWK,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,EAAa,GAAMD,EAAY,QAAWC,GAC7IxJ,EAAIkJ,cAAc,QAAWK,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,EAAa,QAAWD,EAAY,QAAWC,GAClJxJ,EAAI6E,aACJ2iC,EAAexnC,EAAI2I,qBAAqB,EAAG,QAAWa,EAAa,EAAGA,IACzDZ,aAAa,EAAG,WAC7B4+B,EAAa5+B,aAAa,IAAM,WAChC4+B,EAAa5+B,aAAa,IAAM,WAChC4+B,EAAa5+B,aAAa,IAAM,WAChC4+B,EAAa5+B,aAAa,EAAG,WAC7B5I,EAAImF,UAAYqiC,EAChBxnC,EAAIqF,OACJrF,EAAI6J,UACJ7J,EAAI6J,UAmBJ49B,CAASV,IA0DJ,OAtDFW,KAAAA,MAAQ,SAAS7gB,GAGb,OAFP4f,IAAY5f,EACP1N,KAAAA,UACE,MAGJwuB,KAAAA,KAAO,WACHlB,OAAAA,GAGJnnC,KAAAA,SAAW,SAASjK,GAGhB,OAFPsJ,EAAQtJ,EACH8jB,KAAAA,UACE,MAGJ9Z,KAAAA,SAAW,WACPV,OAAAA,GAGJipC,KAAAA,aAAe,SAAS1kC,GAIpB,OAHPsjC,EAAYtjC,EACZ9M,IACK+iB,KAAAA,UACE,MAGJ0uB,KAAAA,aAAe,WACXrB,OAAAA,GAIJrtB,KAAAA,QAAU,WApDG,IAASnZ,EAqDpB0Y,GACHtiB,KAtDuB4J,EAyDbsc,GAvDR3S,OAGJ3J,EAAI8nC,aAAa,EAAG,EAAG,EAAG,EAAG,EAAG,GAChC9nC,EAAIunB,UAAU,EAAG,EAAGvnB,EAAIgK,OAAOnI,MAAO7B,EAAIgK,OAAOlI,QAGjD9B,EAAI6J,UAkDJyS,EAAQ3S,OAER2S,EAAQ3a,UAAU+kC,EAAW,EAAG,GAEhCpqB,EAAQyrB,YAAcppC,EAClB8nC,GACFnqB,EAAQ3a,UAAUilC,EAAU,EAAG,GAEjCtqB,EAAQyrB,YAAc,EACtBzrB,EAAQ3a,UAAUmlC,EAAY,EAAG,GACjCxqB,EAAQzS,WAGLsP,KAAAA,UAEE,MAGMotB,EAAAA,EAAAA,QAAAA,QAAAA;;AC7Uf,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,OAAA,eAAA,QAAA,SAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,WAAA,OAAA,eAAA,QAAA,iBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,WAAA,OAAA,eAAA,QAAA,iBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,WAAA,OAAA,eAAA,QAAA,SAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,WAAA,OAAA,eAAA,QAAA,iBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,WAAA,OAAA,eAAA,QAAA,gBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,WAAA,OAAA,eAAA,QAAA,eAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,WAAA,OAAA,eAAA,QAAA,QAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,WAAA,OAAA,eAAA,QAAA,UAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,WAAA,OAAA,eAAA,QAAA,gBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,WAAA,OAAA,eAAA,QAAA,UAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,WAAA,OAAA,eAAA,QAAA,MAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,WAAA,OAAA,eAAA,QAAA,QAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,WAAA,OAAA,eAAA,QAAA,UAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,WAAA,OAAA,eAAA,QAAA,YAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,WAAA,OAAA,eAAA,QAAA,YAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,WAAA,OAAA,eAAA,QAAA,eAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,WAAA,OAAA,eAAA,QAAA,YAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,WAAA,OAAA,eAAA,QAAA,WAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,WAAA,OAAA,eAAA,QAAA,YAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,WAAA,OAAA,eAAA,QAAA,iBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,WAAA,OAAA,eAAA,QAAA,iBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,WAAA,OAAA,eAAA,QAAA,YAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,aAAA,OAAA,eAAA,QAAA,kBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,mBAAA,OAAA,eAAA,QAAA,kBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,mBAAA,OAAA,eAAA,QAAA,WAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,YAAA,OAAA,eAAA,QAAA,uBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,wBAAA,OAAA,eAAA,QAAA,UAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,WAAA,OAAA,eAAA,QAAA,kBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,mBAAA,OAAA,eAAA,QAAA,WAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,YAAA,OAAA,eAAA,QAAA,WAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,SAAA,OAAA,eAAA,QAAA,WAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,YAAA,OAAA,eAAA,QAAA,YAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,aAAA,OAAA,eAAA,QAAA,cAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,eAAA,OAAA,eAAA,QAAA,WAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,YAAA,OAAA,eAAA,QAAA,YAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,aAAA,OAAA,eAAA,QAAA,cAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,eAAA,OAAA,eAAA,QAAA,cAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,eAAA,OAAA,eAAA,QAAA,iBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,kBAAA,OAAA,eAAA,QAAA,oBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,qBAAA,OAAA,eAAA,QAAA,uBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,wBAAA,OAAA,eAAA,QAAA,aAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,cAhCA,IAAA,EAAA,EAAA,QAAA,aACA,EAAA,EAAA,QAAA,qBACA,EAAA,EAAA,QAAA,qBACA,EAAA,EAAA,QAAA,aACA,EAAA,EAAA,QAAA,qBACA,EAAA,EAAA,QAAA,oBACA,EAAA,EAAA,QAAA,mBACA,EAAA,EAAA,QAAA,YACA,EAAA,EAAA,QAAA,cACA,EAAA,EAAA,QAAA,oBACA,EAAA,EAAA,QAAA,cACA,EAAA,EAAA,QAAA,UACA,EAAA,EAAA,QAAA,YACA,EAAA,EAAA,QAAA,cACA,EAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,mBACA,EAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,2BACA,EAAA,EAAA,QAAA,gCACA,EAAA,EAAA,QAAA,gCACA,EAAA,EAAA,QAAA,gCACA,EAAA,QAAA,WASA,EAAA,QAAA,iBAAA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA;;AC9BA,aAFA,IAAA,EAAA,EAAA,QAAA,uBAEA,SAAA,EAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,MAAA,EAAA,IAAA,IAAA,KAAA,EAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,GAAA,CAAA,IAAA,EAAA,OAAA,gBAAA,OAAA,yBAAA,OAAA,yBAAA,EAAA,GAAA,GAAA,EAAA,KAAA,EAAA,IAAA,OAAA,eAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,QAAA,EAAA,EAAAl/B,OAAO2gC,YAAcA","file":"srcdocs.857ddf9c.js","sourceRoot":"../srcdocs","sourcesContent":["/**********************************************************************\nTERMS OF USE - EASING EQUATIONS\nOpen source under the BSD License.\nCopyright (c) 2001 Robert Penner\nJavaScript version copyright (C) 2006 by Philippe Maegerman\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n   * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n   * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n   * Neither the name of the author nor the names of contributors may\nbe used to endorse or promote products derived from this software\nwithout specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n*****************************************/\nfunction Delegate() {}\nDelegate.create = function (o, f) {\n\tvar a = [], i, l = arguments.length;\n\tfor (i = 2; i < l; i++) {\n\t\ta[i - 2] = arguments[i];\n\t}\n\treturn function () {\n\t\tvar aP = [].concat(arguments, a);\n\t\tf.apply(o, aP);\n\t};\n};\n\n/*\nobject:\n  type:Object\n    The object you want to modify. It can be any object, a visual object that you want to animate ( document.body.style ) or an anymous object ( new Object() ).\nproperty:\n  type:String\n    The property that is updated on the target object, it can be empty ('')\neasing:\n  type:Function\n    The easing that will be applied to motion.\nstart:\n  type:Number\n    Start value\nend:\n  type:Number\n    End value\nduration:\n  type:Number\n    Animation duration in seconds\nsuffixe:\n type:String\n   A string to append to the updated property ('%','pt','em' ...).\n*/\n\nvar Tween = function (obj, prop, func, begin, finish, duration, suffixe) {\n\tthis.init(obj, prop, func, begin, finish, duration, suffixe);\n};\nvar t = Tween.prototype;\n\nt.obj = {};\nt.prop = '';\nt.func = function (t, b, c, d) { return c * t / d + b; };\nt.begin = 0;\nt.change = 0;\nt.prevTime = 0;\nt.prevPos = 0;\nt.looping = false;\nt._duration = 0;\nt._time = 0;\nt._pos = 0;\nt._position = 0;\nt._startTime = 0;\nt._finish = 0;\nt.name = '';\nt.suffixe = '';\nt._listeners = [];\nt.setTime = function (t) {\n\tthis.prevTime = this._time;\n\tif (t > this.getDuration()) {\n\t\tif (this.looping) {\n\t\t\tthis.rewind(t - this._duration);\n\t\t\tthis.update();\n\t\t\tthis.broadcastMessage('onMotionLooped', {target: this, type: 'onMotionLooped'});\n\t\t} else {\n\t\t\tthis._time = this._duration;\n\t\t\tthis.update();\n\t\t\tthis.stop();\n\t\t\tthis.broadcastMessage('onMotionFinished', {target: this, type: 'onMotionFinished'});\n\t\t}\n\t} else if (t < 0) {\n\t\tthis.rewind();\n\t\tthis.update();\n\t} else {\n\t\tthis._time = t;\n\t\tthis.update();\n\t}\n};\nt.getTime = function () {\n\treturn this._time;\n};\nt.setDuration = function (d) {\n\tthis._duration = (d === null || d <= 0) ? 100000 : d;\n};\nt.getDuration = function () {\n\treturn this._duration;\n};\nt.setPosition = function (p) {\n\tthis.prevPos = this._pos;\n\tvar a = this.suffixe !== '' ? this.suffixe : '';\n\tthis.obj[this.prop] = Math.round(p) + a;\n\tthis._pos = p;\n\tthis.broadcastMessage('onMotionChanged', {target: this, type: 'onMotionChanged'});\n};\nt.getPosition = function (t) {\n\tif (t === undefined) {\n\t\tt = this._time;\n\t}\n\treturn this.func(t, this.begin, this.change, this._duration);\n};\nt.setFinish = function (f) {\n\tthis.change = f - this.begin;\n};\nt.getFinish = function () {\n\treturn this.begin + this.change;\n};\nt.init = function (obj, prop, func, begin, finish, duration, suffixe) {\n\tif (!arguments.length) {\n\t\treturn;\n\t}\n\tthis._listeners = [];\n\tthis.addListener(this);\n\tif (suffixe) {\n\t\tthis.suffixe = suffixe;\n\t}\n\tthis.obj = obj;\n\tthis.prop = prop;\n\tthis.begin = begin;\n\tthis._pos = begin;\n\tthis.setDuration(duration);\n\tif (func !== null && func !== '') {\n\t\tthis.func = func;\n\t}\n\tthis.setFinish(finish);\n};\nt.start = function () {\n\tthis.rewind();\n\tthis.startEnterFrame();\n\tthis.broadcastMessage('onMotionStarted', {target: this, type: 'onMotionStarted'});\n\t//alert('in');\n};\nt.rewind = function (t) {\n\tthis.stop();\n\tthis._time = (t === undefined) ? 0 : t;\n\tthis.fixTime();\n\tthis.update();\n};\nt.fforward = function () {\n\tthis._time = this._duration;\n\tthis.fixTime();\n\tthis.update();\n};\nt.update = function () {\n\tthis.setPosition(this.getPosition(this._time));\n};\nt.startEnterFrame = function () {\n\tthis.stopEnterFrame();\n\tthis.isPlaying = true;\n\tthis.onEnterFrame();\n};\nt.onEnterFrame = function () {\n\tif (this.isPlaying) {\n\t\tthis.nextFrame();\n\t\t// To get real smooth movement you have to set the timeout to 0 instead of 25\n\t\tsetTimeout(Delegate.create(this, this.onEnterFrame), 25);\n\t}\n};\nt.nextFrame = function () {\n\tthis.setTime((this.getTimer() - this._startTime) / 1000);\n};\nt.stop = function () {\n\tthis.stopEnterFrame();\n\tthis.broadcastMessage('onMotionStopped', {target: this, type: 'onMotionStopped'});\n};\nt.stopEnterFrame = function () {\n\tthis.isPlaying = false;\n};\nt.playing = function () {\n    return this.isPlaying;\n};\nt.continueTo = function (finish, duration) {\n\tthis.begin = this._pos;\n\tthis.setFinish(finish);\n\tif (this._duration !== undefined) {\n\t\tthis.setDuration(duration);\n\t}\n\tthis.start();\n};\nt.resume = function () {\n\tthis.fixTime();\n\tthis.startEnterFrame();\n\tthis.broadcastMessage('onMotionResumed', {target: this, type: 'onMotionResumed'});\n};\nt.yoyo = function () {\n\tthis.continueTo(this.begin, this._time);\n};\nt.addListener = function (o) {\n\tthis.removeListener(o);\n\treturn this._listeners.push(o);\n};\nt.removeListener = function (o) {\n\tvar a = this._listeners,\n\t\ti = a.length;\n\twhile (i--) {\n\t\tif (a[i] === o) {\n\t\t\ta.splice(i, 1);\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n};\nt.broadcastMessage = function () {\n\tvar arr = [], i, e, a = this._listeners,\n\t\tl = a.length;\n\tfor (i = 0; i < arguments.length; i++) {\n\t\tarr.push(arguments[i]);\n\t}\n\te = arr.shift();\n\n\tfor (i = 0; i < l; i++) {\n\t\tif (a[i][e]) {\n\t\t\ta[i][e].apply(a[i], arr);\n\t\t}\n\t}\n};\nt.fixTime = function () {\n\tthis._startTime = this.getTimer() - this._time * 1000;\n};\nt.getTimer = function () {\n\treturn new Date().getTime() - this._time;\n};\nTween.backEaseIn = function (t, b, c, d, a, p) {\n\tvar s = 1.70158;\n\treturn c * (t /= d) * t * ((s + 1) * t - s) + b;\n};\nTween.backEaseOut = function (t, b, c, d, a, p) {\n\tvar s = 1.70158;\n\treturn c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n};\nTween.backEaseInOut = function (t, b, c, d, a, p) {\n\tvar s = 1.70158;\n\tif ((t /= d / 2) < 1) {\n\t\treturn c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;\n\t}\n\treturn c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;\n};\nTween.elasticEaseIn = function (t, b, c, d, a, p) {\n\tvar s;\n\tif (t === 0) {\n\t\treturn b;\n\t}\n\tif ((t /= d) === 1) {\n\t\treturn b + c;\n\t}\n\tif (!p) {\n\t\tp = d * 0.3;\n\t}\n\tif (!a || a < Math.abs(c)) {\n\t\ta = c;\n\t\ts = p / 4;\n\t} else {\n\t\ts = p / (2 * Math.PI) * Math.asin(c / a);\n\t}\n\n\treturn -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n\n};\nTween.elasticEaseOut = function (t, b, c, d, a, p) {\n\tvar s;\n\tif (t === 0) {\n\t\treturn b;\n\t}\n\tif ((t /= d) === 1) {\n\t\treturn b + c;\n\t}\n\tif (!p) {\n\t\tp = d * 0.3;\n\t}\n\tif (!a || a < Math.abs(c)) {\n\t\ta = c;\n\t\ts = p / 4;\n\t} else {\n\t\ts = p / (2 * Math.PI) * Math.asin(c / a);\n\t}\n\treturn (a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b);\n};\nTween.elasticEaseInOut = function (t, b, c, d, a, p) {\n\tvar s;\n\tif (t === 0) {\n\t\treturn b;\n\t}\n\tif ((t /= d / 2) === 2) {\n\t\treturn b + c;\n\t}\n\tif (!p) {\n\t\tp = d * (0.3 * 1.5);\n\t}\n\tif (!a || a < Math.abs(c)) {\n\t\ta = c;\n\t\ts = p / 4;\n\t} else {\n\t\ts = p / (2 * Math.PI) * Math.asin(c / a);\n\t}\n\tif (t < 1) {\n\t\treturn -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n\t}\n\treturn a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * 0.5 + c + b;\n};\nTween.bounceEaseOut = function (t, b, c, d) {\n\tif ((t /= d) < (1 / 2.75)) {\n\t\treturn c * (7.5625 * t * t) + b;\n\t} else if (t < (2 / 2.75)) {\n\t\treturn c * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75) + b;\n\t} else if (t < (2.5 / 2.75)) {\n\t\treturn c * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375) + b;\n\t} else {\n\t\treturn c * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375) + b;\n\t}\n};\nTween.bounceEaseIn = function (t, b, c, d) {\n\treturn c - Tween.bounceEaseOut(d - t, 0, c, d) + b;\n};\nTween.bounceEaseInOut = function (t, b, c, d) {\n\tif (t < d / 2) {\n\t\treturn Tween.bounceEaseIn(t * 2, 0, c, d) * 0.5 + b;\n\t} else {\n\t\treturn Tween.bounceEaseOut(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;\n\t}\n};\nTween.strongEaseInOut = function (t, b, c, d) {\n\treturn c * (t /= d) * t * t * t * t + b;\n};\nTween.regularEaseIn = function (t, b, c, d) {\n\treturn c * (t /= d) * t + b;\n};\nTween.regularEaseOut = function (t, b, c, d) {\n\treturn -c * (t /= d) * (t - 2) + b;\n};\nTween.regularEaseInOut = function (t, b, c, d) {\n\tif ((t /= d / 2) < 1) {\n\t\treturn c / 2 * t * t + b;\n\t}\n\treturn -c / 2 * ((--t) * (t - 2) - 1) + b;\n};\nTween.strongEaseIn = function (t, b, c, d) {\n\treturn c * (t /= d) * t * t * t * t + b;\n};\nTween.strongEaseOut = function (t, b, c, d) {\n\treturn c * ((t = t / d - 1) * t * t * t * t + 1) + b;\n};\nTween.strongEaseInOut = function (t, b, c, d) {\n\tif ((t /= d / 2) < 1) {\n\t\treturn c / 2 * t * t * t * t * t + b;\n\t}\n\treturn c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\n};\n\nexport default Tween;","\nvar BackgroundColorDef;\n(function() {\n  BackgroundColorDef = function(gradientStart, gradientFraction, gradientStop, labelColor, symbolColor, name) {\n    this.gradientStart = gradientStart;\n    this.gradientFraction = gradientFraction;\n    this.gradientStop = gradientStop;\n    this.labelColor = labelColor;\n    this.symbolColor = symbolColor;\n    this.name = name;\n  };\n}());\nexport {BackgroundColorDef};\n\nvar LcdColorDef;\n(function() {\n  LcdColorDef = function(gradientStartColor, gradientFraction1Color, gradientFraction2Color, gradientFraction3Color, gradientStopColor, textColor) {\n    this.gradientStartColor = gradientStartColor;\n    this.gradientFraction1Color = gradientFraction1Color;\n    this.gradientFraction2Color = gradientFraction2Color;\n    this.gradientFraction3Color = gradientFraction3Color;\n    this.gradientStopColor = gradientStopColor;\n    this.textColor = textColor;\n  };\n}());\nexport {LcdColorDef};\n\nvar ColorDef;\n(function() {\n  ColorDef = function(veryDark, dark, medium, light, lighter, veryLight) {\n    this.veryDark = veryDark;\n    this.dark = dark;\n    this.medium = medium;\n    this.light = light;\n    this.lighter = lighter;\n    this.veryLight = veryLight;\n  };\n}());\nexport {ColorDef};\n\nvar LedColorDef;\n(function() {\n  LedColorDef = function(innerColor1_ON, innerColor2_ON, outerColor_ON, coronaColor, innerColor1_OFF, innerColor2_OFF, outerColor_OFF) {\n    this.innerColor1_ON = innerColor1_ON;\n    this.innerColor2_ON = innerColor2_ON;\n    this.outerColor_ON = outerColor_ON;\n    this.coronaColor = coronaColor;\n    this.innerColor1_OFF = innerColor1_OFF;\n    this.innerColor2_OFF = innerColor2_OFF;\n    this.outerColor_OFF = outerColor_OFF;\n  };\n}());\nexport {LedColorDef};\n\nvar GaugeTypeDef;\n(function() {\n  GaugeTypeDef = function(type) {\n    this.type = type;\n  };\n}());\nexport {GaugeTypeDef};\n\nvar OrientationDef;\n(function() {\n  OrientationDef = function(type) {\n    this.type = type;\n  };\n}());\nexport {OrientationDef};\n\nvar KnobTypeDef;\n(function() {\n  KnobTypeDef = function(type) {\n    this.type = type;\n  };\n}());\nexport {KnobTypeDef};\n\nvar KnobStyleDef;\n(function() {\n  KnobStyleDef = function(style) {\n    this.style = style;\n  };\n}());\nexport {KnobStyleDef};\n\nvar FrameDesignDef;\n(function() {\n  FrameDesignDef = function(design) {\n    this.design = design;\n  };\n}());\nexport {FrameDesignDef};\n\nvar PointerTypeDef;\n(function() {\n  PointerTypeDef = function(type) {\n    this.type = type;\n  };\n}());\nexport {PointerTypeDef};\n\nvar ForegroundTypeDef;\n(function() {\n  ForegroundTypeDef = function(type) {\n    this.type = type;\n  };\n}());\nexport {ForegroundTypeDef};\n\nvar LabelNumberFormatDef;\n(function() {\n  LabelNumberFormatDef = function(format) {\n    this.format = format;\n  };\n}());\nexport {LabelNumberFormatDef};\n\nvar TickLabelOrientationDef;\n(function() {\n  TickLabelOrientationDef = function(type) {\n    this.type = type;\n  };\n}());\nexport {TickLabelOrientationDef};\n\nvar TrendStateDef;\n(function() {\n  TrendStateDef = function(state) {\n    this.state = state;\n  };\n}());\nexport {TrendStateDef};\n","\n\nimport {\nColorDef,\n} from \"./constants\";\n\nexport var HALF_PI = Math.PI * 0.5,\nTWO_PI = Math.PI * 2,\nPI = Math.PI,\nRAD_FACTOR = Math.PI / 180,\nDEG_FACTOR = 180 / Math.PI,\ndoc = document,\nlcdFontName = 'LCDMono2Ultra,Arial,Verdana,sans-serif',\nstdFontName = 'Arial,Verdana,sans-serif';\n\nexport var RgbaColor = function(r, g, b, a) {\n  var red, green, blue, alpha;\n\n  if (arguments.length === 1) {\n    // hexadecimal input #112233\n    b = parseInt(r.substr(5, 2), 16);\n    g = parseInt(r.substr(3, 2), 16);\n    r = parseInt(r.substr(1, 2), 16);\n    a = 1;\n  } else if (arguments.length === 3) {\n    a = 1;\n  }\n\n  function validateColors() {\n    red = range(r, 255);\n    green = range(g, 255);\n    blue = range(b, 255);\n    alpha = range(a, 1);\n  }\n\n  validateColors();\n\n  this.getRed = function() {\n    return red;\n  };\n\n  this.setRed = function(r) {\n    red = range(r, 255);\n  };\n\n  this.getGreen = function() {\n    return green;\n  };\n\n  this.setGreen = function(g) {\n    green = range(g, 255);\n  };\n\n  this.getBlue = function() {\n    return blue;\n  };\n\n  this.setBlue = function(b) {\n    blue = range(b, 255);\n  };\n\n  this.getAlpha = function() {\n    return alpha;\n  };\n\n  this.setAlpha = function(a) {\n    alpha = range(a, 1);\n  };\n\n  this.getRgbaColor = function() {\n    return 'rgba(' + red + ', ' + green + ', ' + blue + ', ' + alpha + ')';\n  };\n\n  this.getRgbColor = function() {\n    return 'rgb(' + red + ', ' + green + ', ' + blue + ')';\n  };\n\n  this.getHexColor = function() {\n    return '#' + red.toString(16) + green.toString(16) + blue.toString(16);\n  };\n};\n\nexport var ConicalGradient = function(fractions, colors) {\n  var limit = fractions.length - 1,\n    i;\n\n  // Pre-multipy fractions array into range -PI to PI\n  for (i = 0; i <= limit; i++) {\n    fractions[i] = TWO_PI * fractions[i] - PI;\n  }\n\n  this.fillCircle = function(ctx, centerX, centerY, innerX, outerX) {\n    var angle,\n      radius = Math.ceil(outerX),\n      diameter = radius * 2,\n      pixels, alpha,\n      x, y, dx, dy, dy2, distance,\n      indx, pixColor,\n      buffer, bufferCtx;\n\n    // Original Version using rotated lines\n    /*\n                ctx.save();\n                ctx.lineWidth = 1.5;\n                ctx.translate(centerX, centerY);\n                ctx.rotate(rotationOffset);\n                ctx.translate(-centerX, -centerY);\n                for (i = 0, size = fractions.length - 1; i < size; i++) {\n                    startAngle = TWO_PI * fractions[i];\n                    stopAngle = TWO_PI * fractions[i + 1];\n                    range = stopAngle - startAngle;\n                    startColor = colors[i];\n                    stopColor = colors[i + 1];\n                    for (angle = startAngle; angle < stopAngle; angle += angleStep) {\n                        ctx.beginPath();\n                        ctx.fillStyle = getColorFromFraction(startColor, stopColor, range, (angle - startAngle)).getRgbaColor();\n                        ctx.strokeStyle = ctx.fillStyle;\n                        if (innerX > 0) {\n                            ctx.arc(centerX, centerY, innerX, angle + angleStep, angle, true);\n                        } else {\n                            ctx.moveTo(centerX, centerY);\n                        }\n                        ctx.arc(centerX, centerY, outerX, angle, angle + angleStep);\n                        ctx.fill();\n                        ctx.stroke();\n                    }\n                }\n    */\n    // End - Original Version\n\n    // Create pixel array\n    pixels = ctx.createImageData(diameter, diameter);\n    alpha = 255;\n\n    for (y = 0; y < diameter; y++) {\n      dy = radius - y;\n      dy2 = dy * dy;\n      for (x = 0; x < diameter; x++) {\n        dx = x - radius;\n        distance = Math.sqrt((dx * dx) + dy2);\n        if (distance <= radius && distance >= innerX) { // pixels are transparent by default, so only paint the ones we need\n          angle = Math.atan2(dx, dy);\n          for (i = 0; i < limit; i++) {\n            if (angle >= fractions[i] && angle < fractions[i + 1]) {\n              pixColor = getColorFromFraction(colors[i], colors[i + 1], fractions[i + 1] - fractions[i], angle - fractions[i], true);\n            }\n          }\n          // The pixel array is addressed as 4 elements per pixel [r,g,b,a]\n          indx = ((diameter - y) * diameter * 4) + (x * 4); // plot is 180 rotated from orginal method, so apply a simple invert (diameter - y)\n          pixels.data[indx] = pixColor[0];\n          pixels.data[indx + 1] = pixColor[1];\n          pixels.data[indx + 2] = pixColor[2];\n          pixels.data[indx + 3] = alpha;\n        }\n      }\n    }\n\n    // Create a new buffer to apply the raw data so we can rotate it\n    buffer = createBuffer(diameter, diameter);\n    bufferCtx = buffer.getContext('2d');\n    bufferCtx.putImageData(pixels, 0, 0);\n    // Apply the image buffer\n    ctx.drawImage(buffer, centerX - radius, centerY - radius);\n  };\n\n  this.fillRect = function(ctx, centerX, centerY, width, height, thicknessX, thicknessY) {\n    var angle,\n      width2,\n      height2,\n      pixels, alpha,\n      x, y, dx, dy,\n      indx,\n      pixColor,\n      buffer, bufferCtx;\n\n    width = Math.ceil(width);\n    height = Math.ceil(height);\n    width2 = width / 2;\n    height2 = height / 2;\n    thicknessX = Math.ceil(thicknessX);\n    thicknessY = Math.ceil(thicknessY);\n\n    // Create pixel array\n    pixels = ctx.createImageData(width, height);\n    alpha = 255;\n\n    for (y = 0; y < height; y++) {\n      dy = height2 - y;\n      for (x = 0; x < width; x++) {\n        if (y > thicknessY && y <= height - thicknessY) {\n          // we are in the range where we only draw the sides\n          if (x > thicknessX && x < width - thicknessX) {\n            // we are in the empty 'middle', jump to the next edge\n            x = width - thicknessX;\n          }\n        }\n        dx = x - width2;\n        angle = Math.atan2(dx, dy);\n        for (i = 0; i < limit; i++) {\n          if (angle >= fractions[i] && angle < fractions[i + 1]) {\n            pixColor = getColorFromFraction(colors[i], colors[i + 1], fractions[i + 1] - fractions[i], angle - fractions[i], true);\n          }\n        }\n        // The pixel array is addressed as 4 elements per pixel [r,g,b,a]\n        indx = ((height - y) * width * 4) + (x * 4); // plot is 180 rotated from orginal method, so apply a simple invert (height - y)\n        pixels.data[indx] = pixColor[0];\n        pixels.data[indx + 1] = pixColor[0];\n        pixels.data[indx + 2] = pixColor[0];\n        pixels.data[indx + 3] = alpha;\n      }\n    }\n    // Create a new buffer to apply the raw data so we can clip it when drawing to canvas\n    buffer = createBuffer(width, height);\n    bufferCtx = buffer.getContext('2d');\n    bufferCtx.putImageData(pixels, 0, 0);\n\n    // draw the buffer back to the canvas\n    ctx.drawImage(buffer, centerX - width2, centerY - height2);\n  };\n\n};\n\nexport var GradientWrapper = function(start, end, fractions, colors) {\n\n  this.getColorAt = function(fraction) {\n    var lowerLimit = 0,\n      lowerIndex = 0,\n      upperLimit = 1,\n      upperIndex = 1,\n      i,\n      interpolationFraction;\n\n    fraction = (fraction < 0 ? 0 : (fraction > 1 ? 1 : fraction));\n\n    for (i = 0; i < fractions.length; i++) {\n      if (fractions[i] < fraction && lowerLimit < fractions[i]) {\n        lowerLimit = fractions[i];\n        lowerIndex = i;\n      }\n      if (fractions[i] === fraction) {\n        return colors[i];\n      }\n      if (fractions[i] > fraction && upperLimit >= fractions[i]) {\n        upperLimit = fractions[i];\n        upperIndex = i;\n      }\n    }\n    interpolationFraction = (fraction - lowerLimit) / (upperLimit - lowerLimit);\n    return getColorFromFraction(colors[lowerIndex], colors[upperIndex], 1, interpolationFraction);\n  };\n\n  this.getStart = function() {\n    return start;\n  };\n\n  this.getEnd = function() {\n    return end;\n  };\n};\n\nexport function setAlpha(hex, alpha) {\n  var hexColor = ('#' === hex.charAt(0)) ? hex.substring(1, 7) : hex,\n    red = parseInt((hexColor).substring(0, 2), 16),\n    green = parseInt((hexColor).substring(2, 4), 16),\n    blue = parseInt((hexColor).substring(4, 6), 16),\n    color = 'rgba(' + red + ',' + green + ',' + blue + ',' + alpha + ')';\n\n  return color;\n}\n\nexport function getColorFromFraction(sourceColor, destinationColor, range, fraction, returnRawData) {\n  var INT_TO_FLOAT = 1 / 255,\n    sourceRed = sourceColor.getRed(),\n    sourceGreen = sourceColor.getGreen(),\n    sourceBlue = sourceColor.getBlue(),\n    sourceAlpha = sourceColor.getAlpha(),\n\n    deltaRed = destinationColor.getRed() - sourceRed,\n    deltaGreen = destinationColor.getGreen() - sourceGreen,\n    deltaBlue = destinationColor.getBlue() - sourceBlue,\n    deltaAlpha = destinationColor.getAlpha() * INT_TO_FLOAT - sourceAlpha * INT_TO_FLOAT,\n\n    fractionRed = deltaRed / range * fraction,\n    fractionGreen = deltaGreen / range * fraction,\n    fractionBlue = deltaBlue / range * fraction,\n    fractionAlpha = deltaAlpha / range * fraction;\n\n  returnRawData = returnRawData || false;\n  if (returnRawData) {\n    return [(sourceRed + fractionRed).toFixed(0), (sourceGreen + fractionGreen).toFixed(0), (sourceBlue + fractionBlue).toFixed(0), sourceAlpha + fractionAlpha];\n  } else {\n    return new RgbaColor((sourceRed + fractionRed).toFixed(0), (sourceGreen + fractionGreen).toFixed(0), (sourceBlue + fractionBlue).toFixed(0), sourceAlpha + fractionAlpha);\n  }\n}\n\nexport function section(start, stop, color) {\n  return {\n    start: start,\n    stop: stop,\n    color: color\n  };\n}\n\nMath.log10 = function(value) {\n  return (Math.log(value) / Math.LN10);\n};\n\nexport function calcNiceNumber(range, round) {\n  var exponent = Math.floor(Math.log10(range)), // exponent of range\n    fraction = range / Math.pow(10, exponent), // fractional part of range\n    niceFraction; // nice, rounded fraction\n\n  if (round) {\n    if (1.5 > fraction) {\n      niceFraction = 1;\n    } else if (3 > fraction) {\n      niceFraction = 2;\n    } else if (7 > fraction) {\n      niceFraction = 5;\n    } else {\n      niceFraction = 10;\n    }\n  } else {\n    if (1 >= fraction) {\n      niceFraction = 1;\n    } else if (2 >= fraction) {\n      niceFraction = 2;\n    } else if (5 >= fraction) {\n      niceFraction = 5;\n    } else {\n      niceFraction = 10;\n    }\n  }\n  return niceFraction * Math.pow(10, exponent);\n}\n\nexport function roundedRectangle(ctx, x, y, w, h, radius) {\n  var r = x + w,\n    b = y + h;\n  ctx.beginPath();\n  ctx.moveTo(x + radius, y);\n  ctx.lineTo(r - radius, y);\n  ctx.quadraticCurveTo(r, y, r, y + radius);\n  ctx.lineTo(r, y + h - radius);\n  ctx.quadraticCurveTo(r, b, r - radius, b);\n  ctx.lineTo(x + radius, b);\n  ctx.quadraticCurveTo(x, b, x, b - radius);\n  ctx.lineTo(x, y + radius);\n  ctx.quadraticCurveTo(x, y, x + radius, y);\n  ctx.closePath();\n  //        ctx.stroke();\n}\n\nexport function createBuffer(width, height) {\n  var buffer = doc.createElement('canvas');\n  buffer.width = width;\n  buffer.height = height;\n  return buffer;\n}\n\nexport function drawToBuffer(width, height, drawFunction) {\n  var buffer = doc.createElement('canvas');\n  buffer.width = width;\n  buffer.height = height;\n  drawFunction(buffer.getContext('2d'));\n  return buffer;\n}\n\nexport function getColorValues(color) {\n  var colorData,\n    lookupBuffer = drawToBuffer(1, 1, function(ctx) {\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.rect(0, 0, 1, 1);\n      ctx.fill();\n    });\n  colorData = lookupBuffer.getContext('2d').getImageData(0, 0, 2, 2).data;\n\n  /*\n  for (var i = 0; i < data.length; i += 4) {\n      var red = data[i];       // red\n      var green = data[i + 1]; // green\n      var blue = data[i + 2];  // blue\n      //var alpha = data[i + 3]; // alpha\n      console.log(red + ', ' + green + ', ' + blue);\n  }\n  */\n\n  return [colorData[0], colorData[1], colorData[2], colorData[3]];\n}\n\nexport function customColorDef(color) {\n  var VERY_DARK,\n    DARK,\n    LIGHT,\n    LIGHTER,\n    VERY_LIGHT,\n    values = getColorValues(color),\n    rgbaCol = new RgbaColor(values[0], values[1], values[2], values[3]);\n\n  VERY_DARK = darker(rgbaCol, 0.32);\n  DARK = darker(rgbaCol, 0.62);\n  LIGHT = lighter(rgbaCol, 0.84);\n  LIGHTER = lighter(rgbaCol, 0.94);\n  VERY_LIGHT = lighter(rgbaCol, 1);\n\n  return new ColorDef(VERY_DARK, DARK, rgbaCol, LIGHT, LIGHTER, VERY_LIGHT);\n}\n\nexport function rgbToHsl(red, green, blue) {\n  var min, max, hue, saturation, lightness, delta;\n\n  red /= 255;\n  green /= 255;\n  blue /= 255;\n\n  max = Math.max(red, green, blue);\n  min = Math.min(red, green, blue);\n  lightness = (max + min) / 2;\n\n  if (max === min) {\n    hue = saturation = 0; // achromatic\n  } else {\n    delta = max - min;\n    saturation = lightness > 0.5 ? delta / (2 - max - min) : delta / (max + min);\n    switch (max) {\n      case red:\n        hue = (green - blue) / delta + (green < blue ? 6 : 0);\n        break;\n      case green:\n        hue = (blue - red) / delta + 2;\n        break;\n      case blue:\n        hue = (red - green) / delta + 4;\n        break;\n    }\n    hue /= 6;\n  }\n  return [hue, saturation, lightness];\n}\n\n/* These functions are not currently used\n    function hslToRgb(hue, saturation, lightness) {\n        var red, green, blue, p, q;\n\n        function hue2rgb(p, q, t) {\n            if (t < 0) {\n                t += 1;\n            }\n            if (t > 1) {\n                t -= 1;\n            }\n            if (t < 1 / 6) {\n                return p + (q - p) * 6 * t;\n            }\n            if (t < 1 / 2) {\n                return q;\n            }\n            if (t < 2 / 3) {\n                return p + (q - p) * (2 / 3 - t) * 6;\n            }\n            return p;\n        }\n\n        if (saturation === 0) {\n            red = green = blue = lightness; // achromatic\n        } else {\n            q = (lightness < 0.5 ? lightness * (1 + saturation) : lightness + saturation - lightness * saturation);\n            p = 2 * lightness - q;\n            red = hue2rgb(p, q, hue + 1 / 3);\n            green = hue2rgb(p, q, hue);\n            blue = hue2rgb(p, q, hue - 1 / 3);\n        }\n\n        return [Math.floor(red * 255), Math.floor(green * 255), Math.floor(blue * 255)];\n    }\n\n    function hsbToHsl(hue, saturation, brightness) {\n        var lightness = (brightness - saturation) / 2;\n        lightness = range(lightness, 1);\n        return [hue, saturation, lightness];\n    }\n\n    function hslToHsb(hue, saturation, lightness) {\n        var brightness = (lightness * 2) + saturation;\n        return [hue, saturation, brightness];\n    }\n*/\n\nexport function hsbToRgb(hue, saturation, brightness) {\n  var r, g, b,\n    i = Math.floor(hue * 6),\n    f = hue * 6 - i,\n    p = brightness * (1 - saturation),\n    q = brightness * (1 - f * saturation),\n    t = brightness * (1 - (1 - f) * saturation);\n\n  switch (i % 6) {\n    case 0:\n      r = brightness;\n      g = t;\n      b = p;\n      break;\n    case 1:\n      r = q;\n      g = brightness;\n      b = p;\n      break;\n    case 2:\n      r = p;\n      g = brightness;\n      b = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b = brightness;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b = brightness;\n      break;\n    case 5:\n      r = brightness;\n      g = p;\n      b = q;\n      break;\n  }\n\n  return [Math.floor(r * 255), Math.floor(g * 255), Math.floor(b * 255)];\n}\n\nexport function rgbToHsb(r, g, b) {\n  var min, max, hue, saturation, brightness, delta;\n\n  r = r / 255;\n  g = g / 255;\n  b = b / 255;\n  max = Math.max(r, g, b);\n  min = Math.min(r, g, b);\n  brightness = max;\n  delta = max - min;\n  saturation = max === 0 ? 0 : delta / max;\n\n  if (max === min) {\n    hue = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        hue = (g - b) / delta + (g < b ? 6 : 0);\n        break;\n      case g:\n        hue = (b - r) / delta + 2;\n        break;\n      case b:\n        hue = (r - g) / delta + 4;\n        break;\n    }\n    hue /= 6;\n  }\n  return [hue, saturation, brightness];\n}\n\nexport function range(value, limit) {\n  return (value < 0 ? 0 : (value > limit ? limit : value));\n}\n\nexport function darker(color, fraction) {\n  var red = Math.floor(color.getRed() * (1 - fraction)),\n    green = Math.floor(color.getGreen() * (1 - fraction)),\n    blue = Math.floor(color.getBlue() * (1 - fraction));\n\n  red = range(red, 255);\n  green = range(green, 255);\n  blue = range(blue, 255);\n\n  return new RgbaColor(red, green, blue, color.getAlpha());\n}\n\nexport function lighter(color, fraction) {\n  var red = Math.round(color.getRed() * (1 + fraction)),\n    green = Math.round(color.getGreen() * (1 + fraction)),\n    blue = Math.round(color.getBlue() * (1 + fraction));\n\n  red = range(red, 255);\n  green = range(green, 255);\n  blue = range(blue, 255);\n\n  return new RgbaColor(red, green, blue, color.getAlpha());\n}\n\nexport function wrap(value, lower, upper) {\n  var distance, times;\n  if (upper <= lower) {\n    throw 'Rotary bounds are of negative or zero size';\n  }\n\n  distance = upper - lower;\n  times = Math.floor((value - lower) / distance);\n\n  return value - (times * distance);\n}\n\nexport function getShortestAngle(from, to) {\n  return wrap((to - from), -180, 180);\n}\n\n// shim layer\nexport var requestAnimFrame = (function() {\n  return window.requestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    window.oRequestAnimationFrame ||\n    window.msRequestAnimationFrame ||\n    function(callback) {\n      window.setTimeout(callback, 1000 / 16);\n    };\n}());\n\nexport function getCanvasContext(elementOrId) {\n  var element = (typeof elementOrId === 'string' || elementOrId instanceof String) ?\n    doc.getElementById(elementOrId) : elementOrId;\n  return element.getContext('2d');\n}\n\n/*\n    function blur(ctx, width, height, radius) {\n    // This function is too CPU expensive\n    // leave disabled for now :(\n\n        // Cheap'n'cheerful blur filter, just applies horizontal and vertical blurs\n        // Only works for square canvas's at present\n\n        var j, x, y,      // loop counters\n            i,\n            end,\n            totR, totG, totB, totA,\n            // Create a temporary buffer\n            tempBuffer = createBuffer(width, height),\n            tempCtx = tempBuffer.getContext('2d'),\n            // pixel data\n            inPix, outPix,\n            mul,\n            indx;\n\n        ctx.save();\n\n        for (j = 0; j < 2; j++) {\n            // Get access to the pixel data\n            inPix = ctx.getImageData(0, 0, (j === 0 ? width : height), (j === 0 ? height : width));\n            outPix = ctx.createImageData((j === 0 ? width : height), (j === 0 ? height : width));\n\n            if (j === 0) { // Horizontal blur\n                if (radius >= width) {\n                    radius = width - 1;\n                }\n            } else { // Vertical blur\n                if (radius >= height) {\n                    radius = height - 1;\n                }\n            }\n            mul = 1 / (radius * 2 + 1);\n            indx = 0;\n            for (y = 0, end = (j === 0 ? height : width); y < end; y++) {\n                totR = totG = totB = totA = 0;\n                for (x = 0; x < radius ; x++) {\n                    i = (indx + x) * 4;\n                    totR += inPix.data[i];\n                    totG += inPix.data[i + 1];\n                    totB += inPix.data[i + 2];\n                    totA += inPix.data[i + 3];\n                }\n                for (x = 0; x < (j === 0 ? width : height); x++) {\n                    if (x > radius) {\n                        i = (indx - radius - 1) * 4;\n                        totR -= inPix.data[i];\n                        totG -= inPix.data[i + 1];\n                        totB -= inPix.data[i + 2];\n                        totA -= inPix.data[i + 3];\n                    }\n                    if (x + radius < width) {\n                        i = (indx + radius) * 4;\n                        totR += inPix.data[i];\n                        totG += inPix.data[i + 1];\n                        totB += inPix.data[i + 2];\n                        totA += inPix.data[i + 3];\n                    }\n                    i = indx * 4;\n                    outPix.data[i] = (totR * mul) | 0;\n                    outPix.data[i + 1] = (totG * mul) | 0;\n                    outPix.data[i + 2] = (totB * mul) | 0;\n                    outPix.data[i + 3] = (totA * mul) | 0;\n                    indx++;\n                }\n            }\n            // Write the output pixel data back to the temp buffer\n            tempCtx.clearRect(0, 0, width, height);\n            tempCtx.putImageData(outPix, 0, 0);\n            if (j === 0) {\n                // Clear the input canvas\n                ctx.clearRect(0, 0, width, height);\n                // Rotate image by 90 degrees\n                ctx.translate(width / 2, height / 2);\n                ctx.rotate(HALF_PI);\n                ctx.translate(-width / 2, -height / 2);\n                // Write the buffer back\n                ctx.drawImage(tempBuffer, 0, 0);\n            }\n        }\n        ctx.translate(width / 2, height / 2);\n        ctx.rotate(-PI);\n        ctx.translate(-width / 2, -height / 2);\n        // Clear the input canvas\n        ctx.clearRect(0, 0, width, height);\n        ctx.drawImage(tempBuffer, 0, 0);\n        ctx.restore();\n\n    }\n*/","\nimport {\ncreateBuffer, \nTWO_PI,\n} from \"./tools\";\n\n\nvar drawPointerImage = function(ctx, size, ptrType, ptrColor, lblColor) {\n  var ptrBuffer, ptrCtx,\n    grad, radius,\n    cacheKey = size.toString() + ptrType.type + ptrColor.light.getHexColor() + ptrColor.medium.getHexColor();\n\n  // check if we have already created and cached this buffer, if not create it\n  if (!drawPointerImage.cache[cacheKey]) {\n    // create a pointer buffer\n    ptrBuffer = createBuffer(size, size);\n    ptrCtx = ptrBuffer.getContext('2d');\n\n    switch (ptrType.type) {\n      case 'type2':\n        grad = ptrCtx.createLinearGradient(0, size * 0.471962, 0, size * 0.130841);\n        grad.addColorStop(0, lblColor.getRgbaColor());\n        grad.addColorStop(0.36, lblColor.getRgbaColor());\n        grad.addColorStop(0.361, ptrColor.light.getRgbaColor());\n        grad.addColorStop(1, ptrColor.light.getRgbaColor());\n        ptrCtx.fillStyle = grad;\n        ptrCtx.beginPath();\n        ptrCtx.moveTo(size * 0.518691, size * 0.471962);\n        ptrCtx.lineTo(size * 0.509345, size * 0.462616);\n        ptrCtx.lineTo(size * 0.509345, size * 0.341121);\n        ptrCtx.lineTo(size * 0.504672, size * 0.130841);\n        ptrCtx.lineTo(size * 0.495327, size * 0.130841);\n        ptrCtx.lineTo(size * 0.490654, size * 0.341121);\n        ptrCtx.lineTo(size * 0.490654, size * 0.462616);\n        ptrCtx.lineTo(size * 0.481308, size * 0.471962);\n        ptrCtx.closePath();\n        ptrCtx.fill();\n        break;\n\n      case 'type3':\n        ptrCtx.beginPath();\n        ptrCtx.rect(size * 0.495327, size * 0.130841, size * 0.009345, size * 0.373831);\n        ptrCtx.closePath();\n        ptrCtx.fillStyle = ptrColor.light.getRgbaColor();\n        ptrCtx.fill();\n        break;\n\n      case 'type4':\n        grad = ptrCtx.createLinearGradient(0.467289 * size, 0, 0.528036 * size, 0);\n        grad.addColorStop(0, ptrColor.dark.getRgbaColor());\n        grad.addColorStop(0.51, ptrColor.dark.getRgbaColor());\n        grad.addColorStop(0.52, ptrColor.light.getRgbaColor());\n        grad.addColorStop(1, ptrColor.light.getRgbaColor());\n        ptrCtx.fillStyle = grad;\n        ptrCtx.beginPath();\n        ptrCtx.moveTo(size * 0.5, size * 0.126168);\n        ptrCtx.lineTo(size * 0.514018, size * 0.135514);\n        ptrCtx.lineTo(size * 0.532710, size * 0.5);\n        ptrCtx.lineTo(size * 0.523364, size * 0.602803);\n        ptrCtx.lineTo(size * 0.476635, size * 0.602803);\n        ptrCtx.lineTo(size * 0.467289, size * 0.5);\n        ptrCtx.lineTo(size * 0.485981, size * 0.135514);\n        ptrCtx.lineTo(size * 0.5, size * 0.126168);\n        ptrCtx.closePath();\n        ptrCtx.fill();\n        break;\n\n      case 'type5':\n        grad = ptrCtx.createLinearGradient(0.471962 * size, 0, 0.528036 * size, 0);\n        grad.addColorStop(0, ptrColor.light.getRgbaColor());\n        grad.addColorStop(0.5, ptrColor.light.getRgbaColor());\n        grad.addColorStop(0.5, ptrColor.medium.getRgbaColor());\n        grad.addColorStop(1, ptrColor.medium.getRgbaColor());\n        ptrCtx.fillStyle = grad;\n        ptrCtx.beginPath();\n        ptrCtx.moveTo(size * 0.5, size * 0.495327);\n        ptrCtx.lineTo(size * 0.528037, size * 0.495327);\n        ptrCtx.lineTo(size * 0.5, size * 0.149532);\n        ptrCtx.lineTo(size * 0.471962, size * 0.495327);\n        ptrCtx.lineTo(size * 0.5, size * 0.495327);\n        ptrCtx.closePath();\n        ptrCtx.fill();\n\n        ptrCtx.lineWidth = 1;\n        ptrCtx.lineCap = 'square';\n        ptrCtx.lineJoin = 'miter';\n        ptrCtx.strokeStyle = ptrColor.dark.getRgbaColor();\n        ptrCtx.stroke();\n        break;\n\n      case 'type6':\n        ptrCtx.fillStyle = ptrColor.medium.getRgbaColor();\n        ptrCtx.beginPath();\n        ptrCtx.moveTo(size * 0.481308, size * 0.485981);\n        ptrCtx.lineTo(size * 0.481308, size * 0.392523);\n        ptrCtx.lineTo(size * 0.485981, size * 0.317757);\n        ptrCtx.lineTo(size * 0.495327, size * 0.130841);\n        ptrCtx.lineTo(size * 0.504672, size * 0.130841);\n        ptrCtx.lineTo(size * 0.514018, size * 0.317757);\n        ptrCtx.lineTo(size * 0.518691, size * 0.387850);\n        ptrCtx.lineTo(size * 0.518691, size * 0.485981);\n        ptrCtx.lineTo(size * 0.504672, size * 0.485981);\n        ptrCtx.lineTo(size * 0.504672, size * 0.387850);\n        ptrCtx.lineTo(size * 0.5, size * 0.317757);\n        ptrCtx.lineTo(size * 0.495327, size * 0.392523);\n        ptrCtx.lineTo(size * 0.495327, size * 0.485981);\n        ptrCtx.lineTo(size * 0.481308, size * 0.485981);\n        ptrCtx.closePath();\n        ptrCtx.fill();\n        break;\n\n      case 'type7':\n        grad = ptrCtx.createLinearGradient(0.481308 * size, 0, 0.518691 * size, 0);\n        grad.addColorStop(0, ptrColor.dark.getRgbaColor());\n        grad.addColorStop(1, ptrColor.medium.getRgbaColor());\n        ptrCtx.fillStyle = grad;\n        ptrCtx.beginPath();\n        ptrCtx.moveTo(size * 0.490654, size * 0.130841);\n        ptrCtx.lineTo(size * 0.481308, size * 0.5);\n        ptrCtx.lineTo(size * 0.518691, size * 0.5);\n        ptrCtx.lineTo(size * 0.504672, size * 0.130841);\n        ptrCtx.lineTo(size * 0.490654, size * 0.130841);\n        ptrCtx.closePath();\n        ptrCtx.fill();\n        break;\n\n      case 'type8':\n        grad = ptrCtx.createLinearGradient(0.471962 * size, 0, 0.528036 * size, 0);\n        grad.addColorStop(0, ptrColor.light.getRgbaColor());\n        grad.addColorStop(0.5, ptrColor.light.getRgbaColor());\n        grad.addColorStop(0.5, ptrColor.medium.getRgbaColor());\n        grad.addColorStop(1, ptrColor.medium.getRgbaColor());\n        ptrCtx.fillStyle = grad;\n        ptrCtx.strokeStyle = ptrColor.dark.getRgbaColor();\n        ptrCtx.beginPath();\n        ptrCtx.moveTo(size * 0.5, size * 0.532710);\n        ptrCtx.lineTo(size * 0.532710, size * 0.5);\n        ptrCtx.bezierCurveTo(size * 0.532710, size * 0.5, size * 0.509345, size * 0.457943, size * 0.5, size * 0.149532);\n        ptrCtx.bezierCurveTo(size * 0.490654, size * 0.457943, size * 0.467289, size * 0.5, size * 0.467289, size * 0.5);\n        ptrCtx.lineTo(size * 0.5, size * 0.532710);\n        ptrCtx.closePath();\n        ptrCtx.fill();\n        ptrCtx.stroke();\n        break;\n\n      case 'type9':\n        grad = ptrCtx.createLinearGradient(0.471962 * size, 0, 0.528036 * size, 0);\n        grad.addColorStop(0, 'rgb(50, 50, 50)');\n        grad.addColorStop(0.5, '#666666');\n        grad.addColorStop(1, 'rgb(50, 50, 50)');\n        ptrCtx.fillStyle = grad;\n        ptrCtx.strokeStyle = '#2E2E2E';\n        ptrCtx.beginPath();\n        ptrCtx.moveTo(size * 0.495327, size * 0.233644);\n        ptrCtx.lineTo(size * 0.504672, size * 0.233644);\n        ptrCtx.lineTo(size * 0.514018, size * 0.439252);\n        ptrCtx.lineTo(size * 0.485981, size * 0.439252);\n        ptrCtx.lineTo(size * 0.495327, size * 0.233644);\n        ptrCtx.closePath();\n        ptrCtx.moveTo(size * 0.490654, size * 0.130841);\n        ptrCtx.lineTo(size * 0.471962, size * 0.471962);\n        ptrCtx.lineTo(size * 0.471962, size * 0.528037);\n        ptrCtx.bezierCurveTo(size * 0.471962, size * 0.528037, size * 0.476635, size * 0.602803, size * 0.476635, size * 0.602803);\n        ptrCtx.bezierCurveTo(size * 0.476635, size * 0.607476, size * 0.481308, size * 0.607476, size * 0.5, size * 0.607476);\n        ptrCtx.bezierCurveTo(size * 0.518691, size * 0.607476, size * 0.523364, size * 0.607476, size * 0.523364, size * 0.602803);\n        ptrCtx.bezierCurveTo(size * 0.523364, size * 0.602803, size * 0.528037, size * 0.528037, size * 0.528037, size * 0.528037);\n        ptrCtx.lineTo(size * 0.528037, size * 0.471962);\n        ptrCtx.lineTo(size * 0.509345, size * 0.130841);\n        ptrCtx.lineTo(size * 0.490654, size * 0.130841);\n        ptrCtx.closePath();\n        ptrCtx.fill();\n\n        ptrCtx.beginPath();\n        ptrCtx.moveTo(size * 0.495327, size * 0.219626);\n        ptrCtx.lineTo(size * 0.504672, size * 0.219626);\n        ptrCtx.lineTo(size * 0.504672, size * 0.135514);\n        ptrCtx.lineTo(size * 0.495327, size * 0.135514);\n        ptrCtx.lineTo(size * 0.495327, size * 0.219626);\n        ptrCtx.closePath();\n\n        ptrCtx.fillStyle = ptrColor.medium.getRgbaColor();\n        ptrCtx.fill();\n        break;\n\n      case 'type10':\n        // POINTER_TYPE10\n        ptrCtx.beginPath();\n        ptrCtx.moveTo(size * 0.5, size * 0.149532);\n        ptrCtx.bezierCurveTo(size * 0.5, size * 0.149532, size * 0.443925, size * 0.490654, size * 0.443925, size * 0.5);\n        ptrCtx.bezierCurveTo(size * 0.443925, size * 0.532710, size * 0.467289, size * 0.556074, size * 0.5, size * 0.556074);\n        ptrCtx.bezierCurveTo(size * 0.532710, size * 0.556074, size * 0.556074, size * 0.532710, size * 0.556074, size * 0.5);\n        ptrCtx.bezierCurveTo(size * 0.556074, size * 0.490654, size * 0.5, size * 0.149532, size * 0.5, size * 0.149532);\n        ptrCtx.closePath();\n        grad = ptrCtx.createLinearGradient(0.471962 * size, 0, 0.528036 * size, 0);\n        grad.addColorStop(0, ptrColor.light.getRgbaColor());\n        grad.addColorStop(0.5, ptrColor.light.getRgbaColor());\n        grad.addColorStop(0.5, ptrColor.medium.getRgbaColor());\n        grad.addColorStop(1, ptrColor.medium.getRgbaColor());\n        ptrCtx.fillStyle = grad;\n        ptrCtx.strokeStyle = ptrColor.medium.getRgbaColor();\n        ptrCtx.lineWidth = 1;\n        ptrCtx.lineCap = 'square';\n        ptrCtx.lineJoin = 'miter';\n        ptrCtx.fill();\n        ptrCtx.stroke();\n        break;\n\n      case 'type11':\n        // POINTER_TYPE11\n        ptrCtx.beginPath();\n        ptrCtx.moveTo(0.5 * size, 0.168224 * size);\n        ptrCtx.lineTo(0.485981 * size, 0.5 * size);\n        ptrCtx.bezierCurveTo(0.485981 * size, 0.5 * size, 0.481308 * size, 0.584112 * size, 0.5 * size, 0.584112 * size);\n        ptrCtx.bezierCurveTo(0.514018 * size, 0.584112 * size, 0.509345 * size, 0.5 * size, 0.509345 * size, 0.5 * size);\n        ptrCtx.lineTo(0.5 * size, 0.168224 * size);\n        ptrCtx.closePath();\n        grad = ptrCtx.createLinearGradient(0, 0.168224 * size, 0, 0.584112 * size);\n        grad.addColorStop(0, ptrColor.medium.getRgbaColor());\n        grad.addColorStop(1, ptrColor.dark.getRgbaColor());\n        ptrCtx.fillStyle = grad;\n        ptrCtx.strokeStyle = ptrColor.dark.getRgbaColor();\n        ptrCtx.fill();\n        ptrCtx.stroke();\n        break;\n\n      case 'type12':\n        // POINTER_TYPE12\n        ptrCtx.beginPath();\n        ptrCtx.moveTo(0.5 * size, 0.168224 * size);\n        ptrCtx.lineTo(0.485981 * size, 0.5 * size);\n        ptrCtx.lineTo(0.5 * size, 0.504672 * size);\n        ptrCtx.lineTo(0.509345 * size, 0.5 * size);\n        ptrCtx.lineTo(0.5 * size, 0.168224 * size);\n        ptrCtx.closePath();\n        grad = ptrCtx.createLinearGradient(0, 0.168224 * size, 0, 0.504672 * size);\n        grad.addColorStop(0, ptrColor.medium.getRgbaColor());\n        grad.addColorStop(1, ptrColor.dark.getRgbaColor());\n        ptrCtx.fillStyle = grad;\n        ptrCtx.strokeStyle = ptrColor.dark.getRgbaColor();\n        ptrCtx.fill();\n        ptrCtx.stroke();\n        break;\n\n      case 'type13':\n        // POINTER_TYPE13\n      case 'type14':\n        // POINTER_TYPE14 (same shape as 13)\n        ptrCtx.beginPath();\n        ptrCtx.moveTo(0.485981 * size, 0.168224 * size);\n        ptrCtx.lineTo(0.5 * size, 0.130841 * size);\n        ptrCtx.lineTo(0.509345 * size, 0.168224 * size);\n        ptrCtx.lineTo(0.509345 * size, 0.509345 * size);\n        ptrCtx.lineTo(0.485981 * size, 0.509345 * size);\n        ptrCtx.lineTo(0.485981 * size, 0.168224 * size);\n        ptrCtx.closePath();\n        if (ptrType.type === 'type13') {\n          // TYPE13\n          grad = ptrCtx.createLinearGradient(0, 0.5 * size, 0, 0.130841 * size);\n          grad.addColorStop(0, lblColor.getRgbaColor());\n          grad.addColorStop(0.85, lblColor.getRgbaColor());\n          grad.addColorStop(0.85, ptrColor.medium.getRgbaColor());\n          grad.addColorStop(1, ptrColor.medium.getRgbaColor());\n          ptrCtx.fillStyle = grad;\n        } else {\n          // TYPE14\n          grad = ptrCtx.createLinearGradient(0.485981 * size, 0, 0.509345 * size, 0);\n          grad.addColorStop(0, ptrColor.veryDark.getRgbaColor());\n          grad.addColorStop(0.5, ptrColor.light.getRgbaColor());\n          grad.addColorStop(1, ptrColor.veryDark.getRgbaColor());\n          ptrCtx.fillStyle = grad;\n        }\n        ptrCtx.fill();\n        break;\n\n      case 'type15':\n        // POINTER TYPE15 - Classic with crescent\n      case 'type16':\n        // POINTER TYPE16 - Classic without crescent\n        ptrCtx.beginPath();\n        ptrCtx.moveTo(size * 0.509345, size * 0.457943);\n        ptrCtx.lineTo(size * 0.5015, size * 0.13);\n        ptrCtx.lineTo(size * 0.4985, size * 0.13);\n        ptrCtx.lineTo(size * 0.490654, size * 0.457943);\n        ptrCtx.bezierCurveTo(size * 0.490654, size * 0.457943, size * 0.490654, size * 0.457943, size * 0.490654, size * 0.457943);\n        ptrCtx.bezierCurveTo(size * 0.471962, size * 0.462616, size * 0.457943, size * 0.481308, size * 0.457943, size * 0.5);\n        ptrCtx.bezierCurveTo(size * 0.457943, size * 0.518691, size * 0.471962, size * 0.537383, size * 0.490654, size * 0.542056);\n        ptrCtx.bezierCurveTo(size * 0.490654, size * 0.542056, size * 0.490654, size * 0.542056, size * 0.490654, size * 0.542056);\n        if (ptrType.type === 'type15') {\n          ptrCtx.lineTo(size * 0.490654, size * 0.57);\n          ptrCtx.bezierCurveTo(size * 0.46, size * 0.58, size * 0.46, size * 0.62, size * 0.490654, size * 0.63);\n          ptrCtx.bezierCurveTo(size * 0.47, size * 0.62, size * 0.48, size * 0.59, size * 0.5, size * 0.59);\n          ptrCtx.bezierCurveTo(size * 0.53, size * 0.59, size * 0.52, size * 0.62, size * 0.509345, size * 0.63);\n          ptrCtx.bezierCurveTo(size * 0.54, size * 0.62, size * 0.54, size * 0.58, size * 0.509345, size * 0.57);\n          ptrCtx.lineTo(size * 0.509345, size * 0.57);\n        } else {\n          ptrCtx.lineTo(size * 0.490654, size * 0.621495);\n          ptrCtx.lineTo(size * 0.509345, size * 0.621495);\n        }\n        ptrCtx.lineTo(size * 0.509345, size * 0.542056);\n        ptrCtx.bezierCurveTo(size * 0.509345, size * 0.542056, size * 0.509345, size * 0.542056, size * 0.509345, size * 0.542056);\n        ptrCtx.bezierCurveTo(size * 0.528037, size * 0.537383, size * 0.542056, size * 0.518691, size * 0.542056, size * 0.5);\n        ptrCtx.bezierCurveTo(size * 0.542056, size * 0.481308, size * 0.528037, size * 0.462616, size * 0.509345, size * 0.457943);\n        ptrCtx.bezierCurveTo(size * 0.509345, size * 0.457943, size * 0.509345, size * 0.457943, size * 0.509345, size * 0.457943);\n        ptrCtx.closePath();\n        if (ptrType.type === 'type15') {\n          grad = ptrCtx.createLinearGradient(0, 0, 0, size * 0.63);\n        } else {\n          grad = ptrCtx.createLinearGradient(0, 0, 0, size * 0.621495);\n        }\n        grad.addColorStop(0, ptrColor.medium.getRgbaColor());\n        grad.addColorStop(0.388888, ptrColor.medium.getRgbaColor());\n        grad.addColorStop(0.5, ptrColor.light.getRgbaColor());\n        grad.addColorStop(0.611111, ptrColor.medium.getRgbaColor());\n        grad.addColorStop(1, ptrColor.medium.getRgbaColor());\n        ptrCtx.fillStyle = grad;\n        ptrCtx.strokeStyle = ptrColor.dark.getRgbaColor();\n        ptrCtx.fill();\n        ptrCtx.stroke();\n        // Draw the rings\n        ptrCtx.beginPath();\n        radius = size * 0.065420 / 2;\n        ptrCtx.arc(size * 0.5, size * 0.5, radius, 0, TWO_PI);\n        grad = ptrCtx.createLinearGradient(size * 0.5 - radius, size * 0.5 + radius, 0, size * 0.5 + radius);\n        grad.addColorStop(0, '#e6b35c');\n        grad.addColorStop(0.01, '#e6b35c');\n        grad.addColorStop(0.99, '#c48200');\n        grad.addColorStop(1, '#c48200');\n        ptrCtx.fillStyle = grad;\n        ptrCtx.closePath();\n        ptrCtx.fill();\n        ptrCtx.beginPath();\n        radius = size * 0.046728 / 2;\n        ptrCtx.arc(size * 0.5, size * 0.5, radius, 0, TWO_PI);\n        grad = ptrCtx.createRadialGradient(size * 0.5, size * 0.5, 0, size * 0.5, size * 0.5, radius);\n        grad.addColorStop(0, '#c5c5c5');\n        grad.addColorStop(0.19, '#c5c5c5');\n        grad.addColorStop(0.22, '#000000');\n        grad.addColorStop(0.8, '#000000');\n        grad.addColorStop(0.99, '#707070');\n        grad.addColorStop(1, '#707070');\n        ptrCtx.fillStyle = grad;\n        ptrCtx.closePath();\n        ptrCtx.fill();\n        break;\n\n      case 'type1':\n        /* falls through */\n      default:\n        grad = ptrCtx.createLinearGradient(0, size * 0.471962, 0, size * 0.130841);\n        grad.addColorStop(0, ptrColor.veryDark.getRgbaColor());\n        grad.addColorStop(0.3, ptrColor.medium.getRgbaColor());\n        grad.addColorStop(0.59, ptrColor.medium.getRgbaColor());\n        grad.addColorStop(1, ptrColor.veryDark.getRgbaColor());\n        ptrCtx.fillStyle = grad;\n        ptrCtx.beginPath();\n        ptrCtx.moveTo(size * 0.518691, size * 0.471962);\n        ptrCtx.bezierCurveTo(size * 0.514018, size * 0.457943, size * 0.509345, size * 0.415887, size * 0.509345, size * 0.401869);\n        ptrCtx.bezierCurveTo(size * 0.504672, size * 0.383177, size * 0.5, size * 0.130841, size * 0.5, size * 0.130841);\n        ptrCtx.bezierCurveTo(size * 0.5, size * 0.130841, size * 0.490654, size * 0.383177, size * 0.490654, size * 0.397196);\n        ptrCtx.bezierCurveTo(size * 0.490654, size * 0.415887, size * 0.485981, size * 0.457943, size * 0.481308, size * 0.471962);\n        ptrCtx.bezierCurveTo(size * 0.471962, size * 0.481308, size * 0.467289, size * 0.490654, size * 0.467289, size * 0.5);\n        ptrCtx.bezierCurveTo(size * 0.467289, size * 0.518691, size * 0.481308, size * 0.532710, size * 0.5, size * 0.532710);\n        ptrCtx.bezierCurveTo(size * 0.518691, size * 0.532710, size * 0.532710, size * 0.518691, size * 0.532710, size * 0.5);\n        ptrCtx.bezierCurveTo(size * 0.532710, size * 0.490654, size * 0.528037, size * 0.481308, size * 0.518691, size * 0.471962);\n        ptrCtx.closePath();\n        ptrCtx.fill();\n        break;\n    }\n    // cache buffer\n    drawPointerImage.cache[cacheKey] = ptrBuffer;\n  }\n  ctx.drawImage(drawPointerImage.cache[cacheKey], 0, 0);\n  return this;\n};\ndrawPointerImage.cache = {};\n\nexport default drawPointerImage;","\nimport {\nRgbaColor, \nConicalGradient, \ncreateBuffer, \nTWO_PI,\n} from \"./tools\";\n\nvar drawRadialFrameImage = function(ctx, frameDesign, centerX, centerY, imageWidth, imageHeight) {\n  var radFBuffer, radFCtx,\n    grad, outerX, innerX, fractions, colors,\n    cacheKey = imageWidth.toString() + imageHeight + frameDesign.design;\n\n  // check if we have already created and cached this buffer, if not create it\n  if (!drawRadialFrameImage.cache[cacheKey]) {\n    // Setup buffer\n    radFBuffer = createBuffer(imageWidth, imageHeight);\n    radFCtx = radFBuffer.getContext('2d');\n\n    // outer gray frame\n    radFCtx.fillStyle = '#848484';\n    radFCtx.strokeStyle = 'rgba(132, 132, 132, 0.5)';\n    radFCtx.beginPath();\n    radFCtx.arc(centerX, centerY, imageWidth / 2, 0, TWO_PI, true);\n    radFCtx.closePath();\n    radFCtx.fill();\n    radFCtx.stroke();\n\n    radFCtx.beginPath();\n    radFCtx.arc(centerX, centerY, imageWidth * 0.990654 / 2, 0, TWO_PI, true);\n    radFCtx.closePath();\n\n    // main gradient frame\n    switch (frameDesign.design) {\n      case 'metal':\n        grad = radFCtx.createLinearGradient(0, imageWidth * 0.004672, 0, imageHeight * 0.990654);\n        grad.addColorStop(0, '#fefefe');\n        grad.addColorStop(0.07, 'rgb(210, 210, 210)');\n        grad.addColorStop(0.12, 'rgb(179, 179, 179)');\n        grad.addColorStop(1, 'rgb(213, 213, 213)');\n        radFCtx.fillStyle = grad;\n        radFCtx.fill();\n        break;\n\n      case 'brass':\n        grad = radFCtx.createLinearGradient(0, imageWidth * 0.004672, 0, imageHeight * 0.990654);\n        grad.addColorStop(0, 'rgb(249, 243, 155)');\n        grad.addColorStop(0.05, 'rgb(246, 226, 101)');\n        grad.addColorStop(0.10, 'rgb(240, 225, 132)');\n        grad.addColorStop(0.50, 'rgb(90, 57, 22)');\n        grad.addColorStop(0.90, 'rgb(249, 237, 139)');\n        grad.addColorStop(0.95, 'rgb(243, 226, 108)');\n        grad.addColorStop(1, 'rgb(202, 182, 113)');\n        radFCtx.fillStyle = grad;\n        radFCtx.fill();\n        break;\n\n      case 'steel':\n        grad = radFCtx.createLinearGradient(0, imageWidth * 0.004672, 0, imageHeight * 0.990654);\n        grad.addColorStop(0, 'rgb(231, 237, 237)');\n        grad.addColorStop(0.05, 'rgb(189, 199, 198)');\n        grad.addColorStop(0.10, 'rgb(192, 201, 200)');\n        grad.addColorStop(0.50, 'rgb(23, 31, 33)');\n        grad.addColorStop(0.90, 'rgb(196, 205, 204)');\n        grad.addColorStop(0.95, 'rgb(194, 204, 203)');\n        grad.addColorStop(1, 'rgb(189, 201, 199)');\n        radFCtx.fillStyle = grad;\n        radFCtx.fill();\n        break;\n\n      case 'gold':\n        grad = radFCtx.createLinearGradient(0, imageWidth * 0.004672, 0, imageHeight * 0.990654);\n        grad.addColorStop(0, 'rgb(255, 255, 207)');\n        grad.addColorStop(0.15, 'rgb(255, 237, 96)');\n        grad.addColorStop(0.22, 'rgb(254, 199, 57)');\n        grad.addColorStop(0.3, 'rgb(255, 249, 203)');\n        grad.addColorStop(0.38, 'rgb(255, 199, 64)');\n        grad.addColorStop(0.44, 'rgb(252, 194, 60)');\n        grad.addColorStop(0.51, 'rgb(255, 204, 59)');\n        grad.addColorStop(0.6, 'rgb(213, 134, 29)');\n        grad.addColorStop(0.68, 'rgb(255, 201, 56)');\n        grad.addColorStop(0.75, 'rgb(212, 135, 29)');\n        grad.addColorStop(1, 'rgb(247, 238, 101)');\n        radFCtx.fillStyle = grad;\n        radFCtx.fill();\n        break;\n\n      case 'anthracite':\n        grad = radFCtx.createLinearGradient(0, 0.004672 * imageHeight, 0, 0.995326 * imageHeight);\n        grad.addColorStop(0, 'rgb(118, 117, 135)');\n        grad.addColorStop(0.06, 'rgb(74, 74, 82)');\n        grad.addColorStop(0.12, 'rgb(50, 50, 54)');\n        grad.addColorStop(1, 'rgb(79, 79, 87)');\n        radFCtx.fillStyle = grad;\n        radFCtx.fill();\n        break;\n\n      case 'tiltedGray':\n        grad = radFCtx.createLinearGradient(0.233644 * imageWidth, 0.084112 * imageHeight, 0.81258 * imageWidth, 0.910919 * imageHeight);\n        grad.addColorStop(0, '#ffffff');\n        grad.addColorStop(0.07, 'rgb(210, 210, 210)');\n        grad.addColorStop(0.16, 'rgb(179, 179, 179)');\n        grad.addColorStop(0.33, '#ffffff');\n        grad.addColorStop(0.55, '#c5c5c5');\n        grad.addColorStop(0.79, '#ffffff');\n        grad.addColorStop(1, '#666666');\n        radFCtx.fillStyle = grad;\n        radFCtx.fill();\n        break;\n\n      case 'tiltedBlack':\n        grad = radFCtx.createLinearGradient(0.228971 * imageWidth, 0.079439 * imageHeight, 0.802547 * imageWidth, 0.898591 * imageHeight);\n        grad.addColorStop(0, '#666666');\n        grad.addColorStop(0.21, '#000000');\n        grad.addColorStop(0.47, '#666666');\n        grad.addColorStop(0.99, '#000000');\n        grad.addColorStop(1, '#000000');\n        radFCtx.fillStyle = grad;\n        radFCtx.fill();\n        break;\n\n      case 'glossyMetal':\n        grad = radFCtx.createRadialGradient(0.5 * imageWidth, 0.5 * imageHeight, 0, 0.5 * imageWidth, 0.5 * imageWidth, 0.5 * imageWidth);\n        grad.addColorStop(0, 'rgb(207, 207, 207)');\n        grad.addColorStop(0.96, 'rgb(205, 204, 205)');\n        grad.addColorStop(1, 'rgb(244, 244, 244)');\n        radFCtx.fillStyle = grad;\n        radFCtx.fill();\n        radFCtx.beginPath();\n        radFCtx.arc(0.5 * imageWidth, 0.5 * imageHeight, 0.973962 * imageWidth / 2, 0, TWO_PI);\n        radFCtx.closePath();\n        grad = radFCtx.createLinearGradient(0, imageHeight - 0.971962 * imageHeight, 0, 0.971962 * imageHeight);\n        grad.addColorStop(0, 'rgb(249, 249, 249)');\n        grad.addColorStop(0.23, 'rgb(200, 195, 191)');\n        grad.addColorStop(0.36, '#ffffff');\n        grad.addColorStop(0.59, 'rgb(29, 29, 29)');\n        grad.addColorStop(0.76, 'rgb(200, 194, 192)');\n        grad.addColorStop(1, 'rgb(209, 209, 209)');\n        radFCtx.fillStyle = grad;\n        radFCtx.fill();\n\n        radFCtx.beginPath();\n        radFCtx.arc(0.5 * imageWidth, 0.5 * imageHeight, 0.869158 * imageWidth / 2, 0, TWO_PI);\n        radFCtx.closePath();\n        radFCtx.fillStyle = '#f6f6f6';\n        radFCtx.fill();\n\n        radFCtx.beginPath();\n        radFCtx.arc(0.5 * imageWidth, 0.5 * imageHeight, 0.85 * imageWidth / 2, 0, TWO_PI);\n        radFCtx.closePath();\n        radFCtx.fillStyle = '#333333';\n        radFCtx.fill();\n        break;\n\n      case 'blackMetal':\n        fractions = [0,\n          0.125,\n          0.347222,\n          0.5,\n          0.680555,\n          0.875,\n          1\n        ];\n\n        colors = [new RgbaColor(254, 254, 254, 1),\n          new RgbaColor(0, 0, 0, 1),\n          new RgbaColor(153, 153, 153, 1),\n          new RgbaColor(0, 0, 0, 1),\n          new RgbaColor(153, 153, 153, 1),\n          new RgbaColor(0, 0, 0, 1),\n          new RgbaColor(254, 254, 254, 1)\n        ];\n\n        radFCtx.save();\n        radFCtx.arc(centerX, centerY, imageWidth * 0.990654 / 2, 0, TWO_PI, true);\n        radFCtx.clip();\n        outerX = imageWidth * 0.495327;\n        innerX = imageWidth * 0.420560;\n        grad = new ConicalGradient(fractions, colors);\n        grad.fillCircle(radFCtx, centerX, centerY, innerX, outerX);\n        // fade outer edge\n        radFCtx.strokeStyle = '#848484';\n        radFCtx.strokeStyle = 'rgba(132, 132, 132, 0.8)';\n        radFCtx.beginPath();\n        radFCtx.lineWidth = imageWidth / 90;\n        radFCtx.arc(centerX, centerY, imageWidth / 2, 0, TWO_PI, true);\n        radFCtx.closePath();\n        radFCtx.stroke();\n        radFCtx.restore();\n        break;\n\n      case 'shinyMetal':\n        fractions = [0,\n          0.125,\n          0.25,\n          0.347222,\n          0.5,\n          0.652777,\n          0.75,\n          0.875,\n          1\n        ];\n\n        colors = [new RgbaColor(254, 254, 254, 1),\n          new RgbaColor(210, 210, 210, 1),\n          new RgbaColor(179, 179, 179, 1),\n          new RgbaColor(238, 238, 238, 1),\n          new RgbaColor(160, 160, 160, 1),\n          new RgbaColor(238, 238, 238, 1),\n          new RgbaColor(179, 179, 179, 1),\n          new RgbaColor(210, 210, 210, 1),\n          new RgbaColor(254, 254, 254, 1)\n        ];\n\n        radFCtx.save();\n        radFCtx.arc(centerX, centerY, imageWidth * 0.990654 / 2, 0, TWO_PI, true);\n        radFCtx.clip();\n        outerX = imageWidth * 0.495327;\n        innerX = imageWidth * 0.420560;\n        grad = new ConicalGradient(fractions, colors);\n        grad.fillCircle(radFCtx, centerX, centerY, innerX, outerX);\n        // fade outer edge\n        radFCtx.strokeStyle = '#848484';\n        radFCtx.strokeStyle = 'rgba(132, 132, 132, 0.8)';\n        radFCtx.beginPath();\n        radFCtx.lineWidth = imageWidth / 90;\n        radFCtx.arc(centerX, centerY, imageWidth / 2, 0, TWO_PI, true);\n        radFCtx.closePath();\n        radFCtx.stroke();\n        radFCtx.restore();\n        break;\n\n      case 'chrome':\n        fractions = [0,\n          0.09,\n          0.12,\n          0.16,\n          0.25,\n          0.29,\n          0.33,\n          0.38,\n          0.48,\n          0.52,\n          0.63,\n          0.68,\n          0.8,\n          0.83,\n          0.87,\n          0.97,\n          1\n        ];\n\n        colors = [new RgbaColor(255, 255, 255, 1),\n          new RgbaColor(255, 255, 255, 1),\n          new RgbaColor(136, 136, 138, 1),\n          new RgbaColor(164, 185, 190, 1),\n          new RgbaColor(158, 179, 182, 1),\n          new RgbaColor(112, 112, 112, 1),\n          new RgbaColor(221, 227, 227, 1),\n          new RgbaColor(155, 176, 179, 1),\n          new RgbaColor(156, 176, 177, 1),\n          new RgbaColor(254, 255, 255, 1),\n          new RgbaColor(255, 255, 255, 1),\n          new RgbaColor(156, 180, 180, 1),\n          new RgbaColor(198, 209, 211, 1),\n          new RgbaColor(246, 248, 247, 1),\n          new RgbaColor(204, 216, 216, 1),\n          new RgbaColor(164, 188, 190, 1),\n          new RgbaColor(255, 255, 255, 1)\n        ];\n\n        radFCtx.save();\n        radFCtx.arc(centerX, centerY, imageWidth * 0.990654 / 2, 0, TWO_PI, true);\n        radFCtx.clip();\n        outerX = imageWidth * 0.495327;\n        innerX = imageWidth * 0.420560;\n        grad = new ConicalGradient(fractions, colors);\n        grad.fillCircle(radFCtx, centerX, centerY, innerX, outerX);\n        // fade outer edge\n        radFCtx.strokeStyle = '#848484';\n        radFCtx.strokeStyle = 'rgba(132, 132, 132, 0.8)';\n        radFCtx.beginPath();\n        radFCtx.lineWidth = imageWidth / 90;\n        radFCtx.arc(centerX, centerY, imageWidth / 2, 0, TWO_PI, true);\n        radFCtx.closePath();\n        radFCtx.stroke();\n        radFCtx.restore();\n\n        break;\n    }\n\n    // inner bright frame\n    radFCtx.fillStyle = 'rgb(191, 191, 191)';\n    radFCtx.beginPath();\n    radFCtx.arc(centerX, centerY, imageWidth * 0.841121 / 2, 0, TWO_PI, true);\n    radFCtx.closePath();\n    radFCtx.fill();\n\n    // clip out center so it is transparent if the background is not visible\n    radFCtx.globalCompositeOperation = 'destination-out';\n    // Background ellipse\n    radFCtx.beginPath();\n    radFCtx.arc(centerX, centerY, imageWidth * 0.83 / 2, 0, TWO_PI, true);\n    radFCtx.closePath();\n    radFCtx.fill();\n\n    // cache the buffer\n    drawRadialFrameImage.cache[cacheKey] = radFBuffer;\n  }\n  ctx.drawImage(drawRadialFrameImage.cache[cacheKey], 0, 0);\n  return this;\n};\ndrawRadialFrameImage.cache = {};\n\nexport default drawRadialFrameImage;","\nimport {\ndrawToBuffer, \n} from \"./tools\";\n\nvar carbonBuffer = drawToBuffer(12, 12, function(ctx) {\n  var imageWidth = ctx.canvas.width,\n    imageHeight = ctx.canvas.height,\n    offsetX = 0,\n    offsetY = 0,\n    grad;\n\n  ctx.save();\n\n  // RULB\n  ctx.save();\n  ctx.beginPath();\n  ctx.rect(0, 0, imageWidth * 0.5, imageHeight * 0.5);\n  ctx.closePath();\n  ctx.restore();\n\n  grad = ctx.createLinearGradient(0, offsetY * imageHeight, 0, 0.5 * imageHeight + offsetY * imageHeight);\n  grad.addColorStop(0, 'rgb(35, 35, 35)');\n  grad.addColorStop(1, 'rgb(23, 23, 23)');\n  ctx.fillStyle = grad;\n  ctx.fill();\n\n  // RULF\n  ctx.save();\n  ctx.beginPath();\n  ctx.rect(imageWidth * 0.083333, 0, imageWidth * 0.333333, imageHeight * 0.416666);\n  ctx.closePath();\n  ctx.restore();\n  offsetX = 0.083333;\n  offsetY = 0;\n  grad = ctx.createLinearGradient(0, offsetY * imageHeight, 0, 0.416666 * imageHeight + offsetY * imageHeight);\n  grad.addColorStop(0, 'rgb(38, 38, 38)');\n  grad.addColorStop(1, 'rgb(30, 30, 30)');\n  ctx.fillStyle = grad;\n  ctx.fill();\n\n  // RLRB\n  ctx.save();\n  ctx.beginPath();\n  ctx.rect(imageWidth * 0.5, imageHeight * 0.5, imageWidth * 0.5, imageHeight * 0.5);\n  ctx.closePath();\n  ctx.restore();\n  offsetX = 0.5;\n  offsetY = 0.5;\n  grad = ctx.createLinearGradient(0, offsetY * imageHeight, 0, 0.5 * imageHeight + offsetY * imageHeight);\n  grad.addColorStop(0, 'rgb(35, 35, 35)');\n  grad.addColorStop(1, 'rgb(23, 23, 23)');\n  ctx.fillStyle = grad;\n  ctx.fill();\n\n  // RLRF\n  ctx.save();\n  ctx.beginPath();\n  ctx.rect(imageWidth * 0.583333, imageHeight * 0.5, imageWidth * 0.333333, imageHeight * 0.416666);\n  ctx.closePath();\n  ctx.restore();\n  offsetX = 0.583333;\n  offsetY = 0.5;\n  grad = ctx.createLinearGradient(0, offsetY * imageHeight, 0, 0.416666 * imageHeight + offsetY * imageHeight);\n  grad.addColorStop(0, 'rgb(38, 38, 38)');\n  grad.addColorStop(1, 'rgb(30, 30, 30)');\n  ctx.fillStyle = grad;\n  ctx.fill();\n\n  // RURB\n  ctx.save();\n  ctx.beginPath();\n  ctx.rect(imageWidth * 0.5, 0, imageWidth * 0.5, imageHeight * 0.5);\n  ctx.closePath();\n  ctx.restore();\n  offsetX = 0.5;\n  offsetY = 0;\n  grad = ctx.createLinearGradient(0, offsetY * imageHeight, 0, 0.5 * imageHeight + offsetY * imageHeight);\n  grad.addColorStop(0, '#303030');\n  grad.addColorStop(1, 'rgb(40, 40, 40)');\n  ctx.fillStyle = grad;\n  ctx.fill();\n\n  // RURF\n  ctx.save();\n  ctx.beginPath();\n  ctx.rect(imageWidth * 0.583333, imageHeight * 0.083333, imageWidth * 0.333333, imageHeight * 0.416666);\n  ctx.closePath();\n  ctx.restore();\n  offsetX = 0.583333;\n  offsetY = 0.083333;\n  grad = ctx.createLinearGradient(0, offsetY * imageHeight, 0, 0.416666 * imageHeight + offsetY * imageHeight);\n  grad.addColorStop(0, 'rgb(53, 53, 53)');\n  grad.addColorStop(1, 'rgb(45, 45, 45)');\n  ctx.fillStyle = grad;\n  ctx.fill();\n\n  // RLLB\n  ctx.save();\n  ctx.beginPath();\n  ctx.rect(0, imageHeight * 0.5, imageWidth * 0.5, imageHeight * 0.5);\n  ctx.closePath();\n  ctx.restore();\n  offsetX = 0;\n  offsetY = 0.5;\n  grad = ctx.createLinearGradient(0, offsetY * imageHeight, 0, 0.5 * imageHeight + offsetY * imageHeight);\n  grad.addColorStop(0, '#303030');\n  grad.addColorStop(1, '#282828');\n  ctx.fillStyle = grad;\n  ctx.fill();\n\n  // RLLF\n  ctx.save();\n  ctx.beginPath();\n  ctx.rect(imageWidth * 0.083333, imageHeight * 0.583333, imageWidth * 0.333333, imageHeight * 0.416666);\n  ctx.closePath();\n  ctx.restore();\n  offsetX = 0.083333;\n  offsetY = 0.583333;\n  grad = ctx.createLinearGradient(0, offsetY * imageHeight, 0, 0.416666 * imageHeight + offsetY * imageHeight);\n  grad.addColorStop(0, '#353535');\n  grad.addColorStop(1, '#2d2d2d');\n  ctx.fillStyle = grad;\n  ctx.fill();\n\n  ctx.restore();\n});\n\nexport default carbonBuffer;","\nimport {\ndrawToBuffer, \n} from \"./tools\";\n\nvar punchedSheetBuffer = drawToBuffer(15, 15, function(ctx) {\n  var imageWidth = ctx.canvas.width,\n    imageHeight = ctx.canvas.height,\n    grad;\n\n  ctx.save();\n\n  // BACK\n  ctx.save();\n  ctx.beginPath();\n  ctx.rect(0, 0, imageWidth, imageHeight);\n  ctx.closePath();\n  ctx.restore();\n  ctx.fillStyle = '#1D2123';\n  ctx.fill();\n\n  // ULB\n  ctx.save();\n  ctx.beginPath();\n  ctx.moveTo(0, imageHeight * 0.266666);\n  ctx.bezierCurveTo(0, imageHeight * 0.4, imageWidth * 0.066666, imageHeight * 0.466666, imageWidth * 0.2, imageHeight * 0.466666);\n  ctx.bezierCurveTo(imageWidth * 0.333333, imageHeight * 0.466666, imageWidth * 0.4, imageHeight * 0.4, imageWidth * 0.4, imageHeight * 0.266666);\n  ctx.bezierCurveTo(imageWidth * 0.4, imageHeight * 0.133333, imageWidth * 0.333333, imageHeight * 0.066666, imageWidth * 0.2, imageHeight * 0.066666);\n  ctx.bezierCurveTo(imageWidth * 0.066666, imageHeight * 0.066666, 0, imageHeight * 0.133333, 0, imageHeight * 0.266666);\n  ctx.closePath();\n  grad = ctx.createLinearGradient(0, 0.066666 * imageHeight, 0, 0.466666 * imageHeight);\n  grad.addColorStop(0, '#000000');\n  grad.addColorStop(1, '#444444');\n  ctx.fillStyle = grad;\n  ctx.fill();\n\n  // ULF\n  ctx.save();\n  ctx.beginPath();\n  ctx.moveTo(0, imageHeight * 0.2);\n  ctx.bezierCurveTo(0, imageHeight * 0.333333, imageWidth * 0.066666, imageHeight * 0.4, imageWidth * 0.2, imageHeight * 0.4);\n  ctx.bezierCurveTo(imageWidth * 0.333333, imageHeight * 0.4, imageWidth * 0.4, imageHeight * 0.333333, imageWidth * 0.4, imageHeight * 0.2);\n  ctx.bezierCurveTo(imageWidth * 0.4, imageHeight * 0.066666, imageWidth * 0.333333, 0, imageWidth * 0.2, 0);\n  ctx.bezierCurveTo(imageWidth * 0.066666, 0, 0, imageHeight * 0.066666, 0, imageHeight * 0.2);\n  ctx.closePath();\n  ctx.fillStyle = '#050506';\n  ctx.fill();\n\n  // LRB\n  ctx.save();\n  ctx.beginPath();\n  ctx.moveTo(imageWidth * 0.466666, imageHeight * 0.733333);\n  ctx.bezierCurveTo(imageWidth * 0.466666, imageHeight * 0.866666, imageWidth * 0.533333, imageHeight * 0.933333, imageWidth * 0.666666, imageHeight * 0.933333);\n  ctx.bezierCurveTo(imageWidth * 0.8, imageHeight * 0.933333, imageWidth * 0.866666, imageHeight * 0.866666, imageWidth * 0.866666, imageHeight * 0.733333);\n  ctx.bezierCurveTo(imageWidth * 0.866666, imageHeight * 0.6, imageWidth * 0.8, imageHeight * 0.533333, imageWidth * 0.666666, imageHeight * 0.533333);\n  ctx.bezierCurveTo(imageWidth * 0.533333, imageHeight * 0.533333, imageWidth * 0.466666, imageHeight * 0.6, imageWidth * 0.466666, imageHeight * 0.733333);\n  ctx.closePath();\n  grad = ctx.createLinearGradient(0, 0.533333 * imageHeight, 0, 0.933333 * imageHeight);\n  grad.addColorStop(0, '#000000');\n  grad.addColorStop(1, '#444444');\n  ctx.fillStyle = grad;\n  ctx.fill();\n\n  // LRF\n  ctx.save();\n  ctx.beginPath();\n  ctx.moveTo(imageWidth * 0.466666, imageHeight * 0.666666);\n  ctx.bezierCurveTo(imageWidth * 0.466666, imageHeight * 0.8, imageWidth * 0.533333, imageHeight * 0.866666, imageWidth * 0.666666, imageHeight * 0.866666);\n  ctx.bezierCurveTo(imageWidth * 0.8, imageHeight * 0.866666, imageWidth * 0.866666, imageHeight * 0.8, imageWidth * 0.866666, imageHeight * 0.666666);\n  ctx.bezierCurveTo(imageWidth * 0.866666, imageHeight * 0.533333, imageWidth * 0.8, imageHeight * 0.466666, imageWidth * 0.666666, imageHeight * 0.466666);\n  ctx.bezierCurveTo(imageWidth * 0.533333, imageHeight * 0.466666, imageWidth * 0.466666, imageHeight * 0.533333, imageWidth * 0.466666, imageHeight * 0.666666);\n  ctx.closePath();\n  ctx.fillStyle = '#050506';\n  ctx.fill();\n\n  ctx.restore();\n});\n\nexport default punchedSheetBuffer;","\nimport {\ncreateBuffer, \nPI,\n} from \"./tools\";\n\nvar brushedMetalTexture = function(color, radius, amount, monochrome, shine) {\n\n  this.fill = function(startX, startY, endX, endY) {\n    var i, x, y, // loop counters\n      sinArr,\n      width, height,\n      outCanvas, outCanvasContext, // output canvas\n      inPixels, outPixels, // pixel arrays\n      //alpha = color & 0xff000000;\n      alpha = 255,\n      red = (color >> 16) & 0xff,\n      green = (color >> 8) & 0xff,\n      blue = color & 0xff,\n      n = 0,\n      variation = 255 * amount,\n      totR, totG, totB,\n      indx, tr, tg, tb, f;\n\n    startX = Math.floor(startX);\n    startY = Math.floor(startY);\n    endX = Math.ceil(endX);\n    endY = Math.ceil(endY);\n\n    width = endX - startX;\n    height = endY - startY;\n\n    // Create output canvas\n    outCanvas = createBuffer(width, height);\n    outCanvasContext = outCanvas.getContext('2d');\n\n    // Create pixel arrays\n    inPixels = outCanvasContext.createImageData(width, height);\n    outPixels = outCanvasContext.createImageData(width, height);\n\n    // Precreate sin() values\n    if (shine !== 0) {\n      sinArr = [];\n      for (i = 0; i < width; i++) {\n        sinArr[i] = (255 * shine * Math.sin(i / width * PI)) | 0;\n      }\n    }\n\n    for (y = 0; y < height; y++) {\n      // The pixel array is addressed as 4 elements per pixel [r,g,b,a]\n      if (radius !== 0) {\n        totR = totG = totB = 0;\n      }\n      for (x = 0; x < width; x++) {\n        indx = (y * width * 4) + (x * 4);\n        tr = red;\n        tg = green;\n        tb = blue;\n        if (shine !== 0) {\n          f = sinArr[x];\n          tr += f;\n          tg += f;\n          tb += f;\n        }\n\n        if (monochrome) {\n          n = ((2 * Math.random() - 1) * variation) | 0;\n          inPixels.data[indx] = clamp(tr + n);\n          inPixels.data[indx + 1] = clamp(tg + n);\n          inPixels.data[indx + 2] = clamp(tb + n);\n          inPixels.data[indx + 3] = alpha;\n        } else {\n          inPixels.data[indx] = random(tr, variation);\n          inPixels.data[indx + 1] = random(tg, variation);\n          inPixels.data[indx + 2] = random(tb, variation);\n          inPixels.data[indx + 3] = alpha;\n        }\n      }\n    }\n\n    if (radius > 0) {\n      horizontalBlur(inPixels, outPixels, width, height, radius, alpha);\n      outCanvasContext.putImageData(outPixels, startX, startY);\n    } else {\n      outCanvasContext.putImageData(inPixels, startX, startY);\n    }\n    return outCanvas;\n  };\n\n  function random(x, vari) {\n    x += ((2 * Math.random() - 1) * vari) | 0;\n    return (x < 0 ? 0 : (x > 255 ? 255 : x));\n  }\n\n  function clamp(C) {\n    return (C < 0 ? 0 : (C > 255 ? 255 : C));\n  }\n\n  function horizontalBlur(inPix, outPix, width, height, radius, alpha) {\n    var x, y, // loop counters\n      i, mul, indx,\n      totR, totG, totB;\n\n    if (radius >= width) {\n      radius = width - 1;\n    }\n    mul = 1 / (radius * 2 + 1);\n    indx = 0;\n    for (y = 0; y < height; y++) {\n      totR = totG = totB = 0;\n      for (x = 0; x < radius; x++) {\n        i = (indx + x) * 4;\n        totR += inPix.data[i];\n        totG += inPix.data[i + 1];\n        totB += inPix.data[i + 2];\n      }\n      for (x = 0; x < width; x++) {\n        if (x > radius) {\n          i = (indx - radius - 1) * 4;\n          totR -= inPix.data[i];\n          totG -= inPix.data[i + 1];\n          totB -= inPix.data[i + 2];\n        }\n        if (x + radius < width) {\n          i = (indx + radius) * 4;\n          totR += inPix.data[i];\n          totG += inPix.data[i + 1];\n          totB += inPix.data[i + 2];\n        }\n        i = indx * 4;\n        outPix.data[i] = (totR * mul) | 0;\n        outPix.data[i + 1] = (totG * mul) | 0;\n        outPix.data[i + 2] = (totB * mul) | 0;\n        outPix.data[i + 3] = alpha;\n        indx++;\n      }\n    }\n  }\n\n  return this;\n};\n\nexport default brushedMetalTexture;","\nimport carbonBuffer from \"./carbonBuffer\";\nimport punchedSheetBuffer from \"./punchedSheetBuffer\";\nimport brushedMetalTexture from \"./brushedMetalTexture\";\nimport {\nRgbaColor, \nConicalGradient, \ncreateBuffer, \nTWO_PI,\nRAD_FACTOR,\n} from \"./tools\";\n\nvar drawRadialBackgroundImage = function(ctx, backgroundColor, centerX, centerY, imageWidth, imageHeight) {\n  var radBBuffer, radBCtx,\n    grad, fractions, colors,\n    backgroundOffsetX = imageWidth * 0.831775 / 2,\n    mono, textureColor, texture,\n    radius, turnRadius, stepSize,\n    end, i,\n    cacheKey = imageWidth.toString() + imageHeight + backgroundColor.name;\n\n  // check if we have already created and cached this buffer, if not create it\n  if (!drawRadialBackgroundImage.cache[cacheKey]) {\n    // Setup buffer\n    radBBuffer = createBuffer(imageWidth, imageHeight);\n    radBCtx = radBBuffer.getContext('2d');\n\n    // Background ellipse\n    radBCtx.beginPath();\n    radBCtx.arc(centerX, centerY, backgroundOffsetX, 0, TWO_PI, true);\n    radBCtx.closePath();\n\n    // If the backgroundColor is a texture fill it with the texture instead of the gradient\n    if (backgroundColor.name === 'CARBON' || backgroundColor.name === 'PUNCHED_SHEET' ||\n      backgroundColor.name === 'BRUSHED_METAL' || backgroundColor.name === 'BRUSHED_STAINLESS') {\n\n      if (backgroundColor.name === 'CARBON') {\n        radBCtx.fillStyle = radBCtx.createPattern(carbonBuffer, 'repeat');\n        radBCtx.fill();\n      }\n\n      if (backgroundColor.name === 'PUNCHED_SHEET') {\n        radBCtx.fillStyle = radBCtx.createPattern(punchedSheetBuffer, 'repeat');\n        radBCtx.fill();\n      }\n\n      // Add another inner shadow to make the look more realistic\n      grad = radBCtx.createLinearGradient(backgroundOffsetX, 0, imageWidth - backgroundOffsetX, 0);\n      grad.addColorStop(0, 'rgba(0, 0, 0, 0.25)');\n      grad.addColorStop(0.5, 'rgba(0, 0, 0, 0)');\n      grad.addColorStop(1, 'rgba(0, 0, 0, 0.25)');\n      radBCtx.fillStyle = grad;\n      radBCtx.beginPath();\n      radBCtx.arc(centerX, centerY, backgroundOffsetX, 0, TWO_PI, true);\n      radBCtx.closePath();\n      radBCtx.fill();\n\n      if (backgroundColor.name === 'BRUSHED_METAL' || backgroundColor.name === 'BRUSHED_STAINLESS') {\n        mono = (backgroundColor.name === 'BRUSHED_METAL' ? true : false);\n        textureColor = parseInt(backgroundColor.gradientStop.getHexColor().substr(-6), 16);\n        texture = brushedMetalTexture(textureColor, 5, 0.1, mono, 0.5);\n        radBCtx.fillStyle = radBCtx.createPattern(texture.fill(0, 0, imageWidth, imageHeight), 'no-repeat');\n        radBCtx.fill();\n      }\n    } else if (backgroundColor.name === 'STAINLESS' || backgroundColor.name === 'TURNED') {\n      // Define the fractions of the conical gradient paint\n      fractions = [0,\n        0.03,\n        0.10,\n        0.14,\n        0.24,\n        0.33,\n        0.38,\n        0.5,\n        0.62,\n        0.67,\n        0.76,\n        0.81,\n        0.85,\n        0.97,\n        1\n      ];\n\n      // Define the colors of the conical gradient paint\n      colors = [new RgbaColor('#FDFDFD'),\n        new RgbaColor('#FDFDFD'),\n        new RgbaColor('#B2B2B4'),\n        new RgbaColor('#ACACAE'),\n        new RgbaColor('#FDFDFD'),\n        new RgbaColor('#8E8E8E'),\n        new RgbaColor('#8E8E8E'),\n        new RgbaColor('#FDFDFD'),\n        new RgbaColor('#8E8E8E'),\n        new RgbaColor('#8E8E8E'),\n        new RgbaColor('#FDFDFD'),\n        new RgbaColor('#ACACAE'),\n        new RgbaColor('#B2B2B4'),\n        new RgbaColor('#FDFDFD'),\n        new RgbaColor('#FDFDFD')\n      ];\n\n      grad = new ConicalGradient(fractions, colors);\n      grad.fillCircle(radBCtx, centerX, centerY, 0, backgroundOffsetX);\n\n      if (backgroundColor.name === 'TURNED') {\n        // Define the turning radius\n        radius = backgroundOffsetX;\n        turnRadius = radius * 0.55;\n        // Step size proporational to radius\n        stepSize = RAD_FACTOR * (500 / radius);\n        // Save before we start\n        radBCtx.save();\n        // restrict the turnings to the desired area\n        radBCtx.beginPath();\n        radBCtx.arc(centerX, centerY, radius, 0, TWO_PI);\n        radBCtx.closePath();\n        radBCtx.clip();\n        // set the style for the turnings\n        radBCtx.lineWidth = 0.5;\n        end = TWO_PI - stepSize * 0.3;\n        // Step the engine round'n'round\n        for (i = 0; i < end; i += stepSize) {\n          // draw a 'turn'\n          radBCtx.strokeStyle = 'rgba(240, 240, 255, 0.25)';\n          radBCtx.beginPath();\n          radBCtx.arc(centerX + turnRadius, centerY, turnRadius, 0, TWO_PI);\n          radBCtx.stroke();\n          // rotate the 'piece' a fraction to draw 'shadow'\n          radBCtx.translate(centerX, centerY);\n          radBCtx.rotate(stepSize * 0.3);\n          radBCtx.translate(-centerX, -centerY);\n          // draw a 'turn'\n          radBCtx.strokeStyle = 'rgba(25, 10, 10, 0.1)';\n          radBCtx.beginPath();\n          radBCtx.arc(centerX + turnRadius, centerY, turnRadius, 0, TWO_PI);\n          radBCtx.stroke();\n          // now rotate on to the next 'scribe' position minus the 'fraction'\n          radBCtx.translate(centerX, centerY);\n          radBCtx.rotate(stepSize - stepSize * 0.3);\n          radBCtx.translate(-centerX, -centerY);\n        }\n        // Restore canvas now we are done\n        radBCtx.restore();\n      }\n    } else {\n      grad = radBCtx.createLinearGradient(0, imageWidth * 0.084112, 0, backgroundOffsetX * 2);\n      grad.addColorStop(0, backgroundColor.gradientStart.getRgbaColor());\n      grad.addColorStop(0.4, backgroundColor.gradientFraction.getRgbaColor());\n      grad.addColorStop(1, backgroundColor.gradientStop.getRgbaColor());\n      radBCtx.fillStyle = grad;\n      radBCtx.fill();\n    }\n    // Inner shadow\n    grad = radBCtx.createRadialGradient(centerX, centerY, 0, centerX, centerY, backgroundOffsetX);\n    grad.addColorStop(0, 'rgba(0, 0, 0, 0)');\n    grad.addColorStop(0.7, 'rgba(0, 0, 0, 0)');\n    grad.addColorStop(0.71, 'rgba(0, 0, 0, 0)');\n    grad.addColorStop(0.86, 'rgba(0, 0, 0, 0.03)');\n    grad.addColorStop(0.92, 'rgba(0, 0, 0, 0.07)');\n    grad.addColorStop(0.97, 'rgba(0, 0, 0, 0.15)');\n    grad.addColorStop(1, 'rgba(0, 0, 0, 0.3)');\n    radBCtx.fillStyle = grad;\n\n    radBCtx.beginPath();\n    radBCtx.arc(centerX, centerY, backgroundOffsetX, 0, TWO_PI, true);\n    radBCtx.closePath();\n    radBCtx.fill();\n\n    // cache the buffer\n    drawRadialBackgroundImage.cache[cacheKey] = radBBuffer;\n  }\n  ctx.drawImage(drawRadialBackgroundImage.cache[cacheKey], 0, 0);\n  return this;\n};\ndrawRadialBackgroundImage.cache = {};\n\nexport default drawRadialBackgroundImage;","\nimport {\nTWO_PI,\n} from \"./tools\";\n\nvar drawRadialCustomImage = function(ctx, img, centerX, centerY, imageWidth, imageHeight) {\n  var drawWidth = imageWidth * 0.831775,\n    drawHeight = imageHeight * 0.831775,\n    x = (imageWidth - drawWidth) / 2,\n    y = (imageHeight - drawHeight) / 2;\n\n  if (img !== null && img.height > 0 && img.width > 0) {\n    ctx.save();\n    // Set the clipping area\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, imageWidth * 0.831775 / 2, 0, TWO_PI, true);\n    ctx.clip();\n    // Add the image\n    ctx.drawImage(img, x, y, drawWidth, drawHeight);\n    ctx.restore();\n  }\n  return this;\n};\n\nexport default drawRadialCustomImage;","\nimport {\ncreateBuffer, \nTWO_PI,\n} from \"./tools\";\n\nvar createKnobImage = function(size, knob, style) {\n  var knobBuffer, knobCtx,\n    maxPostCenterX = size / 2,\n    maxPostCenterY = size / 2,\n    grad,\n    cacheKey = size.toString() + knob.type + style.style;\n\n  // check if we have already created and cached this buffer, if not create it\n  if (!createKnobImage.cache[cacheKey]) {\n    knobBuffer = createBuffer(size * 1.18889, size * 1.18889);\n    knobCtx = knobBuffer.getContext('2d');\n\n    switch (knob.type) {\n      case 'metalKnob':\n        // METALKNOB_FRAME\n        knobCtx.beginPath();\n        knobCtx.moveTo(0, size * 0.5);\n        knobCtx.bezierCurveTo(0, size * 0.222222, size * 0.222222, 0, size * 0.5, 0);\n        knobCtx.bezierCurveTo(size * 0.777777, 0, size, size * 0.222222, size, size * 0.5);\n        knobCtx.bezierCurveTo(size, size * 0.777777, size * 0.777777, size, size * 0.5, size);\n        knobCtx.bezierCurveTo(size * 0.222222, size, 0, size * 0.777777, 0, size * 0.5);\n        knobCtx.closePath();\n        grad = knobCtx.createLinearGradient(0, 0, 0, size);\n        grad.addColorStop(0, 'rgb(92, 95, 101)');\n        grad.addColorStop(0.47, 'rgb(46, 49, 53)');\n        grad.addColorStop(1, 'rgb(22, 23, 26)');\n        knobCtx.fillStyle = grad;\n        knobCtx.fill();\n\n        // METALKNOB_MAIN\n        knobCtx.beginPath();\n        knobCtx.moveTo(size * 0.055555, size * 0.5);\n        knobCtx.bezierCurveTo(size * 0.055555, size * 0.277777, size * 0.277777, size * 0.055555, size * 0.5, size * 0.055555);\n        knobCtx.bezierCurveTo(size * 0.722222, size * 0.055555, size * 0.944444, size * 0.277777, size * 0.944444, size * 0.5);\n        knobCtx.bezierCurveTo(size * 0.944444, size * 0.722222, size * 0.722222, size * 0.944444, size * 0.5, size * 0.944444);\n        knobCtx.bezierCurveTo(size * 0.277777, size * 0.944444, size * 0.055555, size * 0.722222, size * 0.055555, size * 0.5);\n        knobCtx.closePath();\n        grad = knobCtx.createLinearGradient(0, 0.055555 * size, 0, 0.944443 * size);\n        switch (style.style) {\n          case 'black':\n            grad.addColorStop(0, 'rgb(43, 42, 47)');\n            grad.addColorStop(1, 'rgb(26, 27, 32)');\n            break;\n\n          case 'brass':\n            grad.addColorStop(0, 'rgb(150, 110, 54)');\n            grad.addColorStop(1, 'rgb(124, 95, 61)');\n            break;\n\n          case 'silver':\n            /* falls through */\n          default:\n            grad.addColorStop(0, 'rgb(204, 204, 204)');\n            grad.addColorStop(1, 'rgb(87, 92, 98)');\n            break;\n        }\n        knobCtx.fillStyle = grad;\n        knobCtx.fill();\n\n        // METALKNOB_LOWERHL\n        knobCtx.beginPath();\n        knobCtx.moveTo(size * 0.777777, size * 0.833333);\n        knobCtx.bezierCurveTo(size * 0.722222, size * 0.722222, size * 0.611111, size * 0.666666, size * 0.5, size * 0.666666);\n        knobCtx.bezierCurveTo(size * 0.388888, size * 0.666666, size * 0.277777, size * 0.722222, size * 0.222222, size * 0.833333);\n        knobCtx.bezierCurveTo(size * 0.277777, size * 0.888888, size * 0.388888, size * 0.944444, size * 0.5, size * 0.944444);\n        knobCtx.bezierCurveTo(size * 0.611111, size * 0.944444, size * 0.722222, size * 0.888888, size * 0.777777, size * 0.833333);\n        knobCtx.closePath();\n        grad = knobCtx.createRadialGradient((0.555555) * size, ((0.944444) * size), 0, ((0.555555) * size), ((0.944444) * size), 0.388888 * size);\n        grad.addColorStop(0, 'rgba(255, 255, 255, 0.6)');\n        grad.addColorStop(1, 'rgba(255, 255, 255, 0)');\n        knobCtx.fillStyle = grad;\n        knobCtx.fill();\n\n        // METALKNOB_UPPERHL\n        knobCtx.beginPath();\n        knobCtx.moveTo(size * 0.944444, size * 0.277777);\n        knobCtx.bezierCurveTo(size * 0.833333, size * 0.111111, size * 0.666666, 0, size * 0.5, 0);\n        knobCtx.bezierCurveTo(size * 0.333333, 0, size * 0.166666, size * 0.111111, size * 0.055555, size * 0.277777);\n        knobCtx.bezierCurveTo(size * 0.166666, size * 0.333333, size * 0.333333, size * 0.388888, size * 0.5, size * 0.388888);\n        knobCtx.bezierCurveTo(size * 0.666666, size * 0.388888, size * 0.833333, size * 0.333333, size * 0.944444, size * 0.277777);\n        knobCtx.closePath();\n        grad = knobCtx.createRadialGradient(0.5 * size, 0, 0, ((0.5) * size), 0, 0.583333 * size);\n        grad.addColorStop(0, 'rgba(255, 255, 255, 0.749019)');\n        grad.addColorStop(1, 'rgba(255, 255, 255, 0)');\n        knobCtx.fillStyle = grad;\n        knobCtx.fill();\n\n        // METALKNOB_INNERFRAME\n        knobCtx.beginPath();\n        knobCtx.moveTo(size * 0.277777, size * 0.555555);\n        knobCtx.bezierCurveTo(size * 0.277777, size * 0.388888, size * 0.388888, size * 0.277777, size * 0.5, size * 0.277777);\n        knobCtx.bezierCurveTo(size * 0.611111, size * 0.277777, size * 0.777777, size * 0.388888, size * 0.777777, size * 0.555555);\n        knobCtx.bezierCurveTo(size * 0.777777, size * 0.666666, size * 0.611111, size * 0.777777, size * 0.5, size * 0.777777);\n        knobCtx.bezierCurveTo(size * 0.388888, size * 0.777777, size * 0.277777, size * 0.666666, size * 0.277777, size * 0.555555);\n        knobCtx.closePath();\n        grad = knobCtx.createLinearGradient(0, 0.277777 * size, 0, 0.722221 * size);\n        grad.addColorStop(0, '#000000');\n        grad.addColorStop(1, 'rgb(204, 204, 204)');\n        knobCtx.fillStyle = grad;\n        knobCtx.fill();\n\n        // METALKNOB_INNERBACKGROUND\n        knobCtx.beginPath();\n        knobCtx.moveTo(size * 0.333333, size * 0.555555);\n        knobCtx.bezierCurveTo(size * 0.333333, size * 0.444444, size * 0.388888, size * 0.333333, size * 0.5, size * 0.333333);\n        knobCtx.bezierCurveTo(size * 0.611111, size * 0.333333, size * 0.722222, size * 0.444444, size * 0.722222, size * 0.555555);\n        knobCtx.bezierCurveTo(size * 0.722222, size * 0.611111, size * 0.611111, size * 0.722222, size * 0.5, size * 0.722222);\n        knobCtx.bezierCurveTo(size * 0.388888, size * 0.722222, size * 0.333333, size * 0.611111, size * 0.333333, size * 0.555555);\n        knobCtx.closePath();\n        grad = knobCtx.createLinearGradient(0, 0.333333 * size, 0, 0.666666 * size);\n        grad.addColorStop(0, 'rgb(10, 9, 1)');\n        grad.addColorStop(1, 'rgb(42, 41, 37)');\n        knobCtx.fillStyle = grad;\n        knobCtx.fill();\n        break;\n\n      case 'standardKnob':\n        grad = knobCtx.createLinearGradient(0, 0, 0, size);\n        grad.addColorStop(0, 'rgb(180, 180, 180)');\n        grad.addColorStop(0.46, 'rgb(63, 63, 63)');\n        grad.addColorStop(1, 'rgb(40, 40, 40)');\n        knobCtx.fillStyle = grad;\n        knobCtx.beginPath();\n        knobCtx.arc(maxPostCenterX, maxPostCenterY, size / 2, 0, TWO_PI, true);\n        knobCtx.closePath();\n        knobCtx.fill();\n        grad = knobCtx.createLinearGradient(0, size - size * 0.77, 0, size - size * 0.77 + size * 0.77);\n        switch (style.style) {\n          case 'black':\n            grad.addColorStop(0, 'rgb(191, 191, 191)');\n            grad.addColorStop(0.5, 'rgb(45, 44, 49)');\n            grad.addColorStop(1, 'rgb(125, 126, 128)');\n            break;\n\n          case 'brass':\n            grad.addColorStop(0, 'rgb(223, 208, 174)');\n            grad.addColorStop(0.5, 'rgb(123, 95, 63)');\n            grad.addColorStop(1, 'rgb(207, 190, 157)');\n            break;\n\n          case 'silver':\n            /* falls through */\n          default:\n            grad.addColorStop(0, 'rgb(215, 215, 215)');\n            grad.addColorStop(0.5, 'rgb(116, 116, 116)');\n            grad.addColorStop(1, 'rgb(215, 215, 215)');\n            break;\n        }\n        knobCtx.fillStyle = grad;\n        knobCtx.beginPath();\n        knobCtx.arc(maxPostCenterX, maxPostCenterY, size * 0.77 / 2, 0, TWO_PI, true);\n        knobCtx.closePath();\n        knobCtx.fill();\n\n        grad = knobCtx.createRadialGradient(maxPostCenterX, maxPostCenterY, 0, maxPostCenterX, maxPostCenterY, size * 0.77 / 2);\n        grad.addColorStop(0, 'rgba(0, 0, 0, 0)');\n        grad.addColorStop(0.75, 'rgba(0, 0, 0, 0)');\n        grad.addColorStop(0.76, 'rgba(0, 0, 0, 0.01)');\n        grad.addColorStop(1, 'rgba(0, 0, 0, 0.2)');\n        knobCtx.fillStyle = grad;\n        knobCtx.beginPath();\n        knobCtx.arc(maxPostCenterX, maxPostCenterY, size * 0.77 / 2, 0, TWO_PI, true);\n        knobCtx.closePath();\n        knobCtx.fill();\n        break;\n    }\n\n    // cache the buffer\n    createKnobImage.cache[cacheKey] = knobBuffer;\n  }\n  return createKnobImage.cache[cacheKey];\n};\ncreateKnobImage.cache = {};\n\nexport default createKnobImage;","\nimport {\nRgbaColor, \n} from \"./tools\";\n\nimport {\nBackgroundColorDef,\nLcdColorDef,\nColorDef,\nLedColorDef,\nGaugeTypeDef,\nOrientationDef,\nKnobTypeDef,\nKnobStyleDef,\nFrameDesignDef,\nPointerTypeDef,\nForegroundTypeDef,\nLabelNumberFormatDef,\nTickLabelOrientationDef,\nTrendStateDef,\n} from \"./constants\";\n\nexport var backgroundColor = {\n  DARK_GRAY: new BackgroundColorDef(new RgbaColor(0, 0, 0, 1), new RgbaColor(51, 51, 51, 1), new RgbaColor(153, 153, 153, 1), new RgbaColor(255, 255, 255, 1), new RgbaColor(180, 180, 180, 1), 'DARK_GRAY'),\n  SATIN_GRAY: new BackgroundColorDef(new RgbaColor(45, 57, 57, 1), new RgbaColor(45, 57, 57, 1), new RgbaColor(45, 57, 57, 1), new RgbaColor(167, 184, 180, 1), new RgbaColor(137, 154, 150, 1), 'SATIN_GRAY'),\n  LIGHT_GRAY: new BackgroundColorDef(new RgbaColor(130, 130, 130, 1), new RgbaColor(181, 181, 181, 1), new RgbaColor(253, 253, 253, 1), new RgbaColor(0, 0, 0, 1), new RgbaColor(80, 80, 80, 1), 'LIGHT_GRAY'),\n  WHITE: new BackgroundColorDef(new RgbaColor(255, 255, 255, 1), new RgbaColor(255, 255, 255, 1), new RgbaColor(255, 255, 255, 1), new RgbaColor(0, 0, 0, 1), new RgbaColor(80, 80, 80, 1), 'WHITE'),\n  BLACK: new BackgroundColorDef(new RgbaColor(0, 0, 0, 1), new RgbaColor(0, 0, 0, 1), new RgbaColor(0, 0, 0, 1), new RgbaColor(255, 255, 255, 1), new RgbaColor(150, 150, 150, 1), 'BLACK'),\n  BEIGE: new BackgroundColorDef(new RgbaColor(178, 172, 150, 1), new RgbaColor(204, 205, 184, 1), new RgbaColor(231, 231, 214, 1), new RgbaColor(0, 0, 0, 1), new RgbaColor(80, 80, 80, 1), 'BEIGE'),\n  BROWN: new BackgroundColorDef(new RgbaColor(245, 225, 193, 1), new RgbaColor(245, 225, 193, 1), new RgbaColor(255, 250, 240, 1), new RgbaColor(109, 73, 47, 1), new RgbaColor(89, 53, 27, 1), 'BROWN'),\n  RED: new BackgroundColorDef(new RgbaColor(198, 93, 95, 1), new RgbaColor(212, 132, 134, 1), new RgbaColor(242, 218, 218, 1), new RgbaColor(0, 0, 0, 1), new RgbaColor(90, 0, 0, 1), 'RED'),\n  GREEN: new BackgroundColorDef(new RgbaColor(65, 120, 40, 1), new RgbaColor(129, 171, 95, 1), new RgbaColor(218, 237, 202, 1), new RgbaColor(0, 0, 0, 1), new RgbaColor(0, 90, 0, 1), 'GREEN'),\n  BLUE: new BackgroundColorDef(new RgbaColor(45, 83, 122, 1), new RgbaColor(115, 144, 170, 1), new RgbaColor(227, 234, 238, 1), new RgbaColor(0, 0, 0, 1), new RgbaColor(0, 0, 90, 1), 'BLUE'),\n  ANTHRACITE: new BackgroundColorDef(new RgbaColor(50, 50, 54, 1), new RgbaColor(47, 47, 51, 1), new RgbaColor(69, 69, 74, 1), new RgbaColor(250, 250, 250, 1), new RgbaColor(180, 180, 180, 1), 'ANTHRACITE'),\n  MUD: new BackgroundColorDef(new RgbaColor(80, 86, 82, 1), new RgbaColor(70, 76, 72, 1), new RgbaColor(57, 62, 58, 1), new RgbaColor(255, 255, 240, 1), new RgbaColor(225, 225, 210, 1), 'MUD'),\n  PUNCHED_SHEET: new BackgroundColorDef(new RgbaColor(50, 50, 54, 1), new RgbaColor(47, 47, 51, 1), new RgbaColor(69, 69, 74, 1), new RgbaColor(255, 255, 255, 1), new RgbaColor(180, 180, 180, 1), 'PUNCHED_SHEET'),\n  CARBON: new BackgroundColorDef(new RgbaColor(50, 50, 54, 1), new RgbaColor(47, 47, 51, 1), new RgbaColor(69, 69, 74, 1), new RgbaColor(255, 255, 255, 1), new RgbaColor(180, 180, 180, 1), 'CARBON'),\n  STAINLESS: new BackgroundColorDef(new RgbaColor(130, 130, 130, 1), new RgbaColor(181, 181, 181, 1), new RgbaColor(253, 253, 253, 1), new RgbaColor(0, 0, 0, 1), new RgbaColor(80, 80, 80, 1), 'STAINLESS'),\n  BRUSHED_METAL: new BackgroundColorDef(new RgbaColor(50, 50, 54, 1), new RgbaColor(47, 47, 51, 1), new RgbaColor(69, 69, 74, 1), new RgbaColor(0, 0, 0, 1), new RgbaColor(80, 80, 80, 1), 'BRUSHED_METAL'),\n  BRUSHED_STAINLESS: new BackgroundColorDef(new RgbaColor(50, 50, 54, 1), new RgbaColor(47, 47, 51, 1), new RgbaColor(110, 110, 112, 1), new RgbaColor(0, 0, 0, 1), new RgbaColor(80, 80, 80, 1), 'BRUSHED_STAINLESS'),\n  TURNED: new BackgroundColorDef(new RgbaColor(130, 130, 130, 1), new RgbaColor(181, 181, 181, 1), new RgbaColor(253, 253, 253, 1), new RgbaColor(0, 0, 0, 1), new RgbaColor(80, 80, 80, 1), 'TURNED')\n};\n\nexport var lcdColor = {\n  BEIGE: new LcdColorDef('#c8c8b1', 'rgb(241, 237, 207)', 'rgb(234, 230, 194)', 'rgb(225, 220, 183)', 'rgb(237, 232, 191)', '#000000'),\n  BLUE: new LcdColorDef('#ffffff', 'rgb(231, 246, 255)', 'rgb(170, 224, 255)', 'rgb(136, 212, 255)', 'rgb(192, 232, 255)', '#124564'),\n  ORANGE: new LcdColorDef('#ffffff', 'rgb(255, 245, 225)', 'rgb(255, 217, 147)', 'rgb(255, 201, 104)', 'rgb(255, 227, 173)', '#503700'),\n  RED: new LcdColorDef('#ffffff', 'rgb(255, 225, 225)', 'rgb(253, 152, 152)', 'rgb(252, 114, 115)', 'rgb(254, 178, 178)', '#4f0c0e'),\n  YELLOW: new LcdColorDef('#ffffff', 'rgb(245, 255, 186)', 'rgb(210, 255, 0)', 'rgb(158, 205, 0)', 'rgb(210, 255, 0)', '#405300'),\n  WHITE: new LcdColorDef('#ffffff', '#ffffff', 'rgb(241, 246, 242)', 'rgb(229, 239, 244)', '#ffffff', '#000000'),\n  GRAY: new LcdColorDef('#414141', 'rgb(117, 117, 117)', 'rgb(87, 87, 87)', '#414141', 'rgb(81, 81, 81)', '#ffffff'),\n  BLACK: new LcdColorDef('#414141', '#666666', '#333333', '#000000', '#333333', '#cccccc'),\n  GREEN: new LcdColorDef('rgb(33, 67, 67)', 'rgb(33, 67, 67)', 'rgb(29, 58, 58)', 'rgb(28, 57, 57)', 'rgb(23, 46, 46)', 'rgba(0, 185, 165, 255)'),\n  BLUE2: new LcdColorDef('rgb(0, 68, 103)', 'rgb(8, 109, 165)', 'rgb(0, 72, 117)', 'rgb(0, 72, 117)', 'rgb(0, 68, 103)', 'rgb(111, 182, 228)'),\n  BLUE_BLACK: new LcdColorDef('rgb(22, 125, 212)', 'rgb(3, 162, 254)', 'rgb(3, 162, 254)', 'rgb(3, 162, 254)', 'rgb(11, 172, 244)', '#000000'),\n  BLUE_DARKBLUE: new LcdColorDef('rgb(18, 33, 88)', 'rgb(18, 33, 88)', 'rgb(19, 30, 90)', 'rgb(17, 31, 94)', 'rgb(21, 25, 90)', 'rgb(23, 99, 221)'),\n  BLUE_GRAY: new LcdColorDef('rgb(135, 174, 255)', 'rgb(101, 159, 255)', 'rgb(44, 93, 255)', 'rgb(27, 65, 254)', 'rgb(12, 50, 255)', '#b2b4ed'),\n  STANDARD: new LcdColorDef('rgb(131, 133, 119)', 'rgb(176, 183, 167)', 'rgb(165, 174, 153)', 'rgb(166, 175, 156)', 'rgb(175, 184, 165)', 'rgb(35, 42, 52)'),\n  STANDARD_GREEN: new LcdColorDef('#ffffff', 'rgb(219, 230, 220)', 'rgb(179, 194, 178)', 'rgb(153, 176, 151)', 'rgb(114, 138, 109)', '#080C06'),\n  BLUE_BLUE: new LcdColorDef('rgb(100, 168, 253)', 'rgb(100, 168, 253)', 'rgb(95, 160, 250)', 'rgb(80, 144, 252)', 'rgb(74, 134, 255)', '#002cbb'),\n  RED_DARKRED: new LcdColorDef('rgb(72, 36, 50)', 'rgb(185, 111, 110)', 'rgb(148, 66, 72)', 'rgb(83, 19, 20)', 'rgb(7, 6, 14)', '#FE8B92'),\n  DARKBLUE: new LcdColorDef('rgb(14, 24, 31)', 'rgb(46, 105, 144)', 'rgb(19, 64, 96)', 'rgb(6, 20, 29)', 'rgb(8, 9, 10)', '#3DB3FF'),\n  LILA: new LcdColorDef('rgb(175, 164, 255)', 'rgb(188, 168, 253)', 'rgb(176, 159, 255)', 'rgb(174, 147, 252)', 'rgb(168, 136, 233)', '#076148'),\n  BLACKRED: new LcdColorDef('rgb(8, 12, 11)', 'rgb(10, 11, 13)', 'rgb(11, 10, 15)', 'rgb(7, 13, 9)', 'rgb(9, 13, 14)', '#B50026'),\n  DARKGREEN: new LcdColorDef('rgb(25, 85, 0)', 'rgb(47, 154, 0)', 'rgb(30, 101, 0)', 'rgb(30, 101, 0)', 'rgb(25, 85, 0)', '#233123'),\n  AMBER: new LcdColorDef('rgb(182, 71, 0)', 'rgb(236, 155, 25)', 'rgb(212, 93, 5)', 'rgb(212, 93, 5)', 'rgb(182, 71, 0)', '#593A0A'),\n  LIGHTBLUE: new LcdColorDef('rgb(125, 146, 184)', 'rgb(197, 212, 231)', 'rgb(138, 155, 194)', 'rgb(138, 155, 194)', 'rgb(125, 146, 184)', '#090051'),\n  SECTIONS: new LcdColorDef('#b2b2b2', '#ffffff', '#c4c4c4', '#c4c4c4', '#b2b2b2', '#000000')\n};\n\nexport var color = {\n  RED: new ColorDef(new RgbaColor(82, 0, 0, 1), new RgbaColor(158, 0, 19, 1), new RgbaColor(213, 0, 25, 1), new RgbaColor(240, 82, 88, 1), new RgbaColor(255, 171, 173, 1), new RgbaColor(255, 217, 218, 1)),\n  GREEN: new ColorDef(new RgbaColor(8, 54, 4, 1), new RgbaColor(0, 107, 14, 1), new RgbaColor(15, 148, 0, 1), new RgbaColor(121, 186, 37, 1), new RgbaColor(190, 231, 141, 1), new RgbaColor(234, 247, 218, 1)),\n  BLUE: new ColorDef(new RgbaColor(0, 11, 68, 1), new RgbaColor(0, 73, 135, 1), new RgbaColor(0, 108, 201, 1), new RgbaColor(0, 141, 242, 1), new RgbaColor(122, 200, 255, 1), new RgbaColor(204, 236, 255, 1)),\n  ORANGE: new ColorDef(new RgbaColor(118, 83, 30, 1), new RgbaColor(215, 67, 0, 1), new RgbaColor(240, 117, 0, 1), new RgbaColor(255, 166, 0, 1), new RgbaColor(255, 255, 128, 1), new RgbaColor(255, 247, 194, 1)),\n  YELLOW: new ColorDef(new RgbaColor(41, 41, 0, 1), new RgbaColor(102, 102, 0, 1), new RgbaColor(177, 165, 0, 1), new RgbaColor(255, 242, 0, 1), new RgbaColor(255, 250, 153, 1), new RgbaColor(255, 252, 204, 1)),\n  CYAN: new ColorDef(new RgbaColor(15, 109, 109, 1), new RgbaColor(0, 109, 144, 1), new RgbaColor(0, 144, 191, 1), new RgbaColor(0, 174, 239, 1), new RgbaColor(153, 223, 249, 1), new RgbaColor(204, 239, 252, 1)),\n  MAGENTA: new ColorDef(new RgbaColor(98, 0, 114, 1), new RgbaColor(128, 24, 72, 1), new RgbaColor(191, 36, 107, 1), new RgbaColor(255, 48, 143, 1), new RgbaColor(255, 172, 210, 1), new RgbaColor(255, 214, 23, 1)),\n  WHITE: new ColorDef(new RgbaColor(210, 210, 210, 1), new RgbaColor(220, 220, 220, 1), new RgbaColor(235, 235, 235, 1), new RgbaColor(255, 255, 255, 1), new RgbaColor(255, 255, 255, 1), new RgbaColor(255, 255, 255, 1)),\n  GRAY: new ColorDef(new RgbaColor(25, 25, 25, 1), new RgbaColor(51, 51, 51, 1), new RgbaColor(76, 76, 76, 1), new RgbaColor(128, 128, 128, 1), new RgbaColor(204, 204, 204, 1), new RgbaColor(243, 243, 243, 1)),\n  BLACK: new ColorDef(new RgbaColor(0, 0, 0, 1), new RgbaColor(5, 5, 5, 1), new RgbaColor(10, 10, 10, 1), new RgbaColor(15, 15, 15, 1), new RgbaColor(20, 20, 20, 1), new RgbaColor(25, 25, 25, 1)),\n  RAITH: new ColorDef(new RgbaColor(0, 32, 65, 1), new RgbaColor(0, 65, 125, 1), new RgbaColor(0, 106, 172, 1), new RgbaColor(130, 180, 214, 1), new RgbaColor(148, 203, 242, 1), new RgbaColor(191, 229, 255, 1)),\n  GREEN_LCD: new ColorDef(new RgbaColor(0, 55, 45, 1), new RgbaColor(15, 109, 93, 1), new RgbaColor(0, 185, 165, 1), new RgbaColor(48, 255, 204, 1), new RgbaColor(153, 255, 227, 1), new RgbaColor(204, 255, 241, 1)),\n  JUG_GREEN: new ColorDef(new RgbaColor(0, 56, 0, 1), new RgbaColor(32, 69, 36, 1), new RgbaColor(50, 161, 0, 1), new RgbaColor(129, 206, 0, 1), new RgbaColor(190, 231, 141, 1), new RgbaColor(234, 247, 218, 1))\n};\n\nexport var ledColor = {\n  RED_LED: new LedColorDef('#FF9A89', '#FF9A89', '#FF3300', '#FF8D70', '#7E1C00', '#7E1C00', '#641B00'),\n  GREEN_LED: new LedColorDef('#9AFF89', '#9AFF89', '#59FF2A', '#A5FF00', '#1C7E00', '#1C7E00', '#1B6400'),\n  BLUE_LED: new LedColorDef('#899AFF', '#899AFF', '#0033FF', '#708DFF', '#001C7E', '#001C7E', '#001B64'),\n  ORANGE_LED: new LedColorDef('#FEA23F', '#FEA23F', '#FD6C00', '#FD6C00', '#592800', '#592800', '#421F00'),\n  YELLOW_LED: new LedColorDef('#FFFF62', '#FFFF62', '#FFFF00', '#FFFF00', '#6B6D00', '#6B6D00', '#515300'),\n  CYAN_LED: new LedColorDef('#00FFFF', '#00FFFF', '#1BC3C3', '#00FFFF', '#083B3B', '#083B3B', '#052727'),\n  MAGENTA_LED: new LedColorDef('#D300FF', '#D300FF', '#8600CB', '#C300FF', '#38004B', '#38004B', '#280035')\n};\n\nexport var gaugeType = {\n  TYPE1: new GaugeTypeDef('type1'),\n  TYPE2: new GaugeTypeDef('type2'),\n  TYPE3: new GaugeTypeDef('type3'),\n  TYPE4: new GaugeTypeDef('type4'),\n  TYPE5: new GaugeTypeDef('type5')\n};\n\nexport var orientation = {\n  NORTH: new OrientationDef('north'),\n  SOUTH: new OrientationDef('south'),\n  EAST: new OrientationDef('east'),\n  WEST: new OrientationDef('west')\n};\n\nexport var knobType = {\n  STANDARD_KNOB: new KnobTypeDef('standardKnob'),\n  METAL_KNOB: new KnobTypeDef('metalKnob')\n};\n\nexport var knobStyle = {\n  BLACK: new KnobStyleDef('black'),\n  BRASS: new KnobStyleDef('brass'),\n  SILVER: new KnobStyleDef('silver')\n};\n\nexport var frameDesign = {\n  BLACK_METAL: new FrameDesignDef('blackMetal'),\n  METAL: new FrameDesignDef('metal'),\n  SHINY_METAL: new FrameDesignDef('shinyMetal'),\n  BRASS: new FrameDesignDef('brass'),\n  STEEL: new FrameDesignDef('steel'),\n  CHROME: new FrameDesignDef('chrome'),\n  GOLD: new FrameDesignDef('gold'),\n  ANTHRACITE: new FrameDesignDef('anthracite'),\n  TILTED_GRAY: new FrameDesignDef('tiltedGray'),\n  TILTED_BLACK: new FrameDesignDef('tiltedBlack'),\n  GLOSSY_METAL: new FrameDesignDef('glossyMetal')\n};\n\nexport var pointerType = {\n  TYPE1: new PointerTypeDef('type1'),\n  TYPE2: new PointerTypeDef('type2'),\n  TYPE3: new PointerTypeDef('type3'),\n  TYPE4: new PointerTypeDef('type4'),\n  TYPE5: new PointerTypeDef('type5'),\n  TYPE6: new PointerTypeDef('type6'),\n  TYPE7: new PointerTypeDef('type7'),\n  TYPE8: new PointerTypeDef('type8'),\n  TYPE9: new PointerTypeDef('type9'),\n  TYPE10: new PointerTypeDef('type10'),\n  TYPE11: new PointerTypeDef('type11'),\n  TYPE12: new PointerTypeDef('type12'),\n  TYPE13: new PointerTypeDef('type13'),\n  TYPE14: new PointerTypeDef('type14'),\n  TYPE15: new PointerTypeDef('type15'),\n  TYPE16: new PointerTypeDef('type16')\n};\n\nexport var foregroundType = {\n  TYPE1: new ForegroundTypeDef('type1'),\n  TYPE2: new ForegroundTypeDef('type2'),\n  TYPE3: new ForegroundTypeDef('type3'),\n  TYPE4: new ForegroundTypeDef('type4'),\n  TYPE5: new ForegroundTypeDef('type5')\n};\n\nexport var labelNumberFormat = {\n  STANDARD: new LabelNumberFormatDef('standard'),\n  FRACTIONAL: new LabelNumberFormatDef('fractional'),\n  SCIENTIFIC: new LabelNumberFormatDef('scientific')\n};\n\nexport var tickLabelOrientation = {\n  NORMAL: new TickLabelOrientationDef('normal'),\n  HORIZONTAL: new TickLabelOrientationDef('horizontal'),\n  TANGENT: new TickLabelOrientationDef('tangent')\n};\n\nexport var trendState = {\n  UP: new TrendStateDef('up'),\n  STEADY: new TrendStateDef('steady'),\n  DOWN: new TrendStateDef('down'),\n  OFF: new TrendStateDef('off')\n};\n","\nimport createKnobImage from \"./createKnobImage\";\nimport {\ncreateBuffer, \n} from \"./tools\";\n\nimport {\n  backgroundColor as BackgroundColor,\n  lcdColor as LcdColor,\n  color as ColorDef,\n  ledColor as LedColor,\n  gaugeType as GaugeType,\n  orientation as Orientation,\n  knobType as KnobType,\n  knobStyle as KnobStyle,\n  frameDesign as FrameDesign,\n  pointerType as PointerType,\n  foregroundType as ForegroundType,\n  labelNumberFormat as LabelNumberFormat,\n  tickLabelOrientation as TickLabelOrientation,\n  trendState as TrendState,\n  } from \"./definitions\";\n\nvar drawRadialForegroundImage = function(ctx, foregroundType, imageWidth, imageHeight, withCenterKnob, knob, style, gaugeType, orientation) {\n  var radFgBuffer, radFgCtx,\n    knobSize = Math.ceil(imageHeight * 0.084112),\n    knobX = imageWidth * 0.5 - knobSize / 2,\n    knobY = imageHeight * 0.5 - knobSize / 2,\n    shadowOffset = imageWidth * 0.008,\n    gradHighlight, gradHighlight2,\n    cacheKey = foregroundType.type + imageWidth + imageHeight + withCenterKnob + (knob !== undefined ? knob.type : '-') +\n    (style !== undefined ? style.style : '-') + (orientation !== undefined ? orientation.type : '-');\n\n  // check if we have already created and cached this buffer, if so return it and exit\n  if (!drawRadialForegroundImage.cache[cacheKey]) {\n    // Setup buffer\n    radFgBuffer = createBuffer(imageWidth, imageHeight);\n    radFgCtx = radFgBuffer.getContext('2d');\n\n    // center post\n    if (withCenterKnob) {\n      // Set the pointer shadow params\n      radFgCtx.shadowColor = 'rgba(0, 0, 0, 0.8)';\n      radFgCtx.shadowOffsetX = radFgCtx.shadowOffsetY = shadowOffset;\n      radFgCtx.shadowBlur = shadowOffset * 2;\n\n      if (gaugeType === GaugeType.TYPE5) {\n        if (Orientation.WEST === orientation) {\n          knobX = imageWidth * 0.733644 - knobSize / 2;\n          radFgCtx.drawImage(createKnobImage(knobSize, knob, style), knobX, knobY);\n        } else if (Orientation.EAST === orientation) {\n          knobX = imageWidth * (1 - 0.733644) - knobSize / 2;\n          radFgCtx.drawImage(createKnobImage(knobSize, knob, style), knobX, knobY);\n        } else {\n          knobY = imageHeight * 0.733644 - knobSize / 2;\n          radFgCtx.drawImage(createKnobImage(knobSize, knob, style), knobX, imageHeight * 0.6857);\n        }\n      } else {\n        radFgCtx.drawImage(createKnobImage(knobSize, knob, style), knobX, knobY);\n      }\n      // Undo shadow drawing\n      radFgCtx.shadowOffsetX = radFgCtx.shadowOffsetY = 0;\n      radFgCtx.shadowBlur = 0;\n    }\n\n    // highlight\n    switch (foregroundType.type) {\n      case 'type2':\n        radFgCtx.beginPath();\n        radFgCtx.moveTo(imageWidth * 0.135514, imageHeight * 0.696261);\n        radFgCtx.bezierCurveTo(imageWidth * 0.214953, imageHeight * 0.588785, imageWidth * 0.317757, imageHeight * 0.5, imageWidth * 0.462616, imageHeight * 0.425233);\n        radFgCtx.bezierCurveTo(imageWidth * 0.612149, imageHeight * 0.345794, imageWidth * 0.733644, imageHeight * 0.317757, imageWidth * 0.873831, imageHeight * 0.322429);\n        radFgCtx.bezierCurveTo(imageWidth * 0.766355, imageHeight * 0.112149, imageWidth * 0.528037, imageHeight * 0.023364, imageWidth * 0.313084, imageHeight * 0.130841);\n        radFgCtx.bezierCurveTo(imageWidth * 0.098130, imageHeight * 0.238317, imageWidth * 0.028037, imageHeight * 0.485981, imageWidth * 0.135514, imageHeight * 0.696261);\n        radFgCtx.closePath();\n        gradHighlight = radFgCtx.createLinearGradient(0.313084 * imageWidth, 0.135514 * imageHeight, 0.495528 * imageWidth, 0.493582 * imageHeight);\n        gradHighlight.addColorStop(0, 'rgba(255, 255, 255, 0.275)');\n        gradHighlight.addColorStop(1, 'rgba(255, 255, 255, 0.015)');\n        break;\n\n      case 'type3':\n        radFgCtx.beginPath();\n        radFgCtx.moveTo(imageWidth * 0.084112, imageHeight * 0.509345);\n        radFgCtx.bezierCurveTo(imageWidth * 0.210280, imageHeight * 0.556074, imageWidth * 0.462616, imageHeight * 0.560747, imageWidth * 0.5, imageHeight * 0.560747);\n        radFgCtx.bezierCurveTo(imageWidth * 0.537383, imageHeight * 0.560747, imageWidth * 0.794392, imageHeight * 0.560747, imageWidth * 0.915887, imageHeight * 0.509345);\n        radFgCtx.bezierCurveTo(imageWidth * 0.915887, imageHeight * 0.275700, imageWidth * 0.738317, imageHeight * 0.084112, imageWidth * 0.5, imageHeight * 0.084112);\n        radFgCtx.bezierCurveTo(imageWidth * 0.261682, imageHeight * 0.084112, imageWidth * 0.084112, imageHeight * 0.275700, imageWidth * 0.084112, imageHeight * 0.509345);\n        radFgCtx.closePath();\n        gradHighlight = radFgCtx.createLinearGradient(0, 0.093457 * imageHeight, 0, 0.556073 * imageHeight);\n        gradHighlight.addColorStop(0, 'rgba(255, 255, 255, 0.275)');\n        gradHighlight.addColorStop(1, 'rgba(255, 255, 255, 0.015)');\n        break;\n\n      case 'type4':\n        radFgCtx.beginPath();\n        radFgCtx.moveTo(imageWidth * 0.677570, imageHeight * 0.242990);\n        radFgCtx.bezierCurveTo(imageWidth * 0.771028, imageHeight * 0.308411, imageWidth * 0.822429, imageHeight * 0.411214, imageWidth * 0.813084, imageHeight * 0.528037);\n        radFgCtx.bezierCurveTo(imageWidth * 0.799065, imageHeight * 0.654205, imageWidth * 0.719626, imageHeight * 0.757009, imageWidth * 0.593457, imageHeight * 0.799065);\n        radFgCtx.bezierCurveTo(imageWidth * 0.485981, imageHeight * 0.831775, imageWidth * 0.369158, imageHeight * 0.808411, imageWidth * 0.285046, imageHeight * 0.728971);\n        radFgCtx.bezierCurveTo(imageWidth * 0.275700, imageHeight * 0.719626, imageWidth * 0.252336, imageHeight * 0.714953, imageWidth * 0.233644, imageHeight * 0.728971);\n        radFgCtx.bezierCurveTo(imageWidth * 0.214953, imageHeight * 0.747663, imageWidth * 0.219626, imageHeight * 0.771028, imageWidth * 0.228971, imageHeight * 0.775700);\n        radFgCtx.bezierCurveTo(imageWidth * 0.331775, imageHeight * 0.878504, imageWidth * 0.476635, imageHeight * 0.915887, imageWidth * 0.616822, imageHeight * 0.869158);\n        radFgCtx.bezierCurveTo(imageWidth * 0.771028, imageHeight * 0.822429, imageWidth * 0.873831, imageHeight * 0.691588, imageWidth * 0.887850, imageHeight * 0.532710);\n        radFgCtx.bezierCurveTo(imageWidth * 0.897196, imageHeight * 0.387850, imageWidth * 0.836448, imageHeight * 0.257009, imageWidth * 0.719626, imageHeight * 0.182242);\n        radFgCtx.bezierCurveTo(imageWidth * 0.705607, imageHeight * 0.172897, imageWidth * 0.682242, imageHeight * 0.163551, imageWidth * 0.663551, imageHeight * 0.186915);\n        radFgCtx.bezierCurveTo(imageWidth * 0.654205, imageHeight * 0.205607, imageWidth * 0.668224, imageHeight * 0.238317, imageWidth * 0.677570, imageHeight * 0.242990);\n        radFgCtx.closePath();\n        gradHighlight = radFgCtx.createRadialGradient((0.5) * imageWidth, ((0.5) * imageHeight), 0, ((0.5) * imageWidth), ((0.5) * imageHeight), 0.387850 * imageWidth);\n        gradHighlight.addColorStop(0, 'rgba(255, 255, 255, 0)');\n        gradHighlight.addColorStop(0.82, 'rgba(255, 255, 255, 0)');\n        gradHighlight.addColorStop(0.83, 'rgba(255, 255, 255, 0)');\n        gradHighlight.addColorStop(1, 'rgba(255, 255, 255, 0.15)');\n\n        radFgCtx.beginPath();\n        radFgCtx.moveTo(imageWidth * 0.261682, imageHeight * 0.224299);\n        radFgCtx.bezierCurveTo(imageWidth * 0.285046, imageHeight * 0.238317, imageWidth * 0.252336, imageHeight * 0.285046, imageWidth * 0.242990, imageHeight * 0.317757);\n        radFgCtx.bezierCurveTo(imageWidth * 0.242990, imageHeight * 0.350467, imageWidth * 0.271028, imageHeight * 0.383177, imageWidth * 0.271028, imageHeight * 0.397196);\n        radFgCtx.bezierCurveTo(imageWidth * 0.275700, imageHeight * 0.415887, imageWidth * 0.261682, imageHeight * 0.457943, imageWidth * 0.238317, imageHeight * 0.509345);\n        radFgCtx.bezierCurveTo(imageWidth * 0.224299, imageHeight * 0.542056, imageWidth * 0.177570, imageHeight * 0.612149, imageWidth * 0.158878, imageHeight * 0.612149);\n        radFgCtx.bezierCurveTo(imageWidth * 0.144859, imageHeight * 0.612149, imageWidth * 0.088785, imageHeight * 0.546728, imageWidth * 0.130841, imageHeight * 0.369158);\n        radFgCtx.bezierCurveTo(imageWidth * 0.140186, imageHeight * 0.336448, imageWidth * 0.214953, imageHeight * 0.200934, imageWidth * 0.261682, imageHeight * 0.224299);\n        radFgCtx.closePath();\n        gradHighlight2 = radFgCtx.createLinearGradient(0.130841 * imageWidth, 0.369158 * imageHeight, 0.273839 * imageWidth, 0.412877 * imageHeight);\n        gradHighlight2.addColorStop(0, 'rgba(255, 255, 255, 0.275)');\n        gradHighlight2.addColorStop(1, 'rgba(255, 255, 255, 0.015)');\n        radFgCtx.fillStyle = gradHighlight2;\n        radFgCtx.fill();\n        break;\n\n      case 'type5':\n        radFgCtx.beginPath();\n        radFgCtx.moveTo(imageWidth * 0.084112, imageHeight * 0.5);\n        radFgCtx.bezierCurveTo(imageWidth * 0.084112, imageHeight * 0.271028, imageWidth * 0.271028, imageHeight * 0.084112, imageWidth * 0.5, imageHeight * 0.084112);\n        radFgCtx.bezierCurveTo(imageWidth * 0.700934, imageHeight * 0.084112, imageWidth * 0.864485, imageHeight * 0.224299, imageWidth * 0.906542, imageHeight * 0.411214);\n        radFgCtx.bezierCurveTo(imageWidth * 0.911214, imageHeight * 0.439252, imageWidth * 0.911214, imageHeight * 0.518691, imageWidth * 0.845794, imageHeight * 0.537383);\n        radFgCtx.bezierCurveTo(imageWidth * 0.794392, imageHeight * 0.546728, imageWidth * 0.551401, imageHeight * 0.411214, imageWidth * 0.392523, imageHeight * 0.457943);\n        radFgCtx.bezierCurveTo(imageWidth * 0.168224, imageHeight * 0.509345, imageWidth * 0.135514, imageHeight * 0.775700, imageWidth * 0.093457, imageHeight * 0.593457);\n        radFgCtx.bezierCurveTo(imageWidth * 0.088785, imageHeight * 0.560747, imageWidth * 0.084112, imageHeight * 0.532710, imageWidth * 0.084112, imageHeight * 0.5);\n        radFgCtx.closePath();\n        gradHighlight = radFgCtx.createLinearGradient(0, 0.084112 * imageHeight, 0, 0.644859 * imageHeight);\n        gradHighlight.addColorStop(0, 'rgba(255, 255, 255, 0.275)');\n        gradHighlight.addColorStop(1, 'rgba(255, 255, 255, 0.015)');\n        break;\n\n      case 'type1':\n        /* falls through */\n      default:\n        radFgCtx.beginPath();\n        radFgCtx.moveTo(imageWidth * 0.084112, imageHeight * 0.509345);\n        radFgCtx.bezierCurveTo(imageWidth * 0.205607, imageHeight * 0.448598, imageWidth * 0.336448, imageHeight * 0.415887, imageWidth * 0.5, imageHeight * 0.415887);\n        radFgCtx.bezierCurveTo(imageWidth * 0.672897, imageHeight * 0.415887, imageWidth * 0.789719, imageHeight * 0.443925, imageWidth * 0.915887, imageHeight * 0.509345);\n        radFgCtx.bezierCurveTo(imageWidth * 0.915887, imageHeight * 0.275700, imageWidth * 0.738317, imageHeight * 0.084112, imageWidth * 0.5, imageHeight * 0.084112);\n        radFgCtx.bezierCurveTo(imageWidth * 0.261682, imageHeight * 0.084112, imageWidth * 0.084112, imageHeight * 0.275700, imageWidth * 0.084112, imageHeight * 0.509345);\n        radFgCtx.closePath();\n        gradHighlight = radFgCtx.createLinearGradient(0, 0.088785 * imageHeight, 0, 0.490654 * imageHeight);\n        gradHighlight.addColorStop(0, 'rgba(255, 255, 255, 0.275)');\n        gradHighlight.addColorStop(1, 'rgba(255, 255, 255, 0.015)');\n        break;\n    }\n    radFgCtx.fillStyle = gradHighlight;\n    radFgCtx.fill();\n\n    // cache the buffer\n    drawRadialForegroundImage.cache[cacheKey] = radFgBuffer;\n  }\n  ctx.drawImage(drawRadialForegroundImage.cache[cacheKey], 0, 0);\n  return this;\n};\ndrawRadialForegroundImage.cache = {};\n\nexport default drawRadialForegroundImage;\n","\nimport {\nsetAlpha, \ncreateBuffer, \nTWO_PI,\n} from \"./tools\";\n\nvar createLedImage = function(size, state, ledColor) {\n  var ledBuffer, ledCtx,\n    // Bug in Chrome browser, radialGradients do not draw correctly if the center is not an integer value\n    ledCenterX = 2 * Math.round(size / 4),\n    ledCenterY = 2 * Math.round(size / 4),\n    grad,\n    cacheKey = size.toString() + state + ledColor.outerColor_ON;\n\n  // check if we have already created and cached this buffer, if not create it\n  if (!createLedImage.cache[cacheKey]) {\n    ledBuffer = createBuffer(size, size);\n    ledCtx = ledBuffer.getContext('2d');\n\n    switch (state) {\n      case 0: // LED OFF\n        // OFF Gradient\n        grad = ledCtx.createRadialGradient(ledCenterX, ledCenterY, 0, ledCenterX, ledCenterY, size * 0.5 / 2);\n        grad.addColorStop(0, ledColor.innerColor1_OFF);\n        grad.addColorStop(0.2, ledColor.innerColor2_OFF);\n        grad.addColorStop(1, ledColor.outerColor_OFF);\n        ledCtx.fillStyle = grad;\n\n        ledCtx.beginPath();\n        ledCtx.arc(ledCenterX, ledCenterY, size * 0.5 / 2, 0, TWO_PI, true);\n        ledCtx.closePath();\n        ledCtx.fill();\n\n        // InnerShadow\n        grad = ledCtx.createRadialGradient(ledCenterX, ledCenterY, 0, ledCenterX, ledCenterY, size * 0.5 / 2);\n        grad.addColorStop(0, 'rgba(0, 0, 0, 0)');\n        grad.addColorStop(0.8, 'rgba(0, 0, 0, 0)');\n        grad.addColorStop(1, 'rgba(0, 0, 0, 0.4)');\n        ledCtx.fillStyle = grad;\n\n        ledCtx.beginPath();\n        ledCtx.arc(ledCenterX, ledCenterY, size * 0.5 / 2, 0, TWO_PI, true);\n        ledCtx.closePath();\n        ledCtx.fill();\n\n        // LightReflex\n        grad = ledCtx.createLinearGradient(0, 0.35 * size, 0, 0.35 * size + 0.15 * size);\n        grad.addColorStop(0, 'rgba(255, 255, 255, 0.4)');\n        grad.addColorStop(1, 'rgba(255, 255, 255, 0)');\n        ledCtx.fillStyle = grad;\n\n        ledCtx.beginPath();\n        ledCtx.arc(ledCenterX, 0.35 * size + 0.2 * size / 2, size * 0.2, 0, TWO_PI, true);\n        ledCtx.closePath();\n        ledCtx.fill();\n        break;\n\n      case 1: // LED ON\n        // ON Gradient\n        grad = ledCtx.createRadialGradient(ledCenterX, ledCenterY, 0, ledCenterX, ledCenterY, size * 0.5 / 2);\n        grad.addColorStop(0, ledColor.innerColor1_ON);\n        grad.addColorStop(0.2, ledColor.innerColor2_ON);\n        grad.addColorStop(1, ledColor.outerColor_ON);\n        ledCtx.fillStyle = grad;\n\n        ledCtx.beginPath();\n        ledCtx.arc(ledCenterX, ledCenterY, size * 0.5 / 2, 0, TWO_PI, true);\n        ledCtx.closePath();\n        ledCtx.fill();\n\n        // InnerShadow\n        grad = ledCtx.createRadialGradient(ledCenterX, ledCenterY, 0, ledCenterX, ledCenterY, size * 0.5 / 2);\n        grad.addColorStop(0, 'rgba(0, 0, 0, 0)');\n        grad.addColorStop(0.8, 'rgba(0, 0, 0, 0)');\n        grad.addColorStop(1, 'rgba(0, 0, 0, 0.4)');\n        ledCtx.fillStyle = grad;\n\n        ledCtx.beginPath();\n        ledCtx.arc(ledCenterX, ledCenterY, size * 0.5 / 2, 0, TWO_PI, true);\n        ledCtx.closePath();\n        ledCtx.fill();\n\n        // LightReflex\n        grad = ledCtx.createLinearGradient(0, 0.35 * size, 0, 0.35 * size + 0.15 * size);\n        grad.addColorStop(0, 'rgba(255, 255, 255, 0.4)');\n        grad.addColorStop(1, 'rgba(255, 255, 255, 0)');\n        ledCtx.fillStyle = grad;\n\n        ledCtx.beginPath();\n        ledCtx.arc(ledCenterX, 0.35 * size + 0.2 * size / 2, size * 0.2, 0, TWO_PI, true);\n        ledCtx.closePath();\n        ledCtx.fill();\n\n        // Corona\n        grad = ledCtx.createRadialGradient(ledCenterX, ledCenterY, 0, ledCenterX, ledCenterY, size / 2);\n        grad.addColorStop(0, setAlpha(ledColor.coronaColor, 0));\n        grad.addColorStop(0.6, setAlpha(ledColor.coronaColor, 0.4));\n        grad.addColorStop(0.7, setAlpha(ledColor.coronaColor, 0.25));\n        grad.addColorStop(0.8, setAlpha(ledColor.coronaColor, 0.15));\n        grad.addColorStop(0.85, setAlpha(ledColor.coronaColor, 0.05));\n        grad.addColorStop(1, setAlpha(ledColor.coronaColor, 0));\n        ledCtx.fillStyle = grad;\n\n        ledCtx.beginPath();\n        ledCtx.arc(ledCenterX, ledCenterY, size / 2, 0, TWO_PI, true);\n        ledCtx.closePath();\n        ledCtx.fill();\n        break;\n    }\n    // cache the buffer\n    createLedImage.cache[cacheKey] = ledBuffer;\n  }\n  return createLedImage.cache[cacheKey];\n};\ncreateLedImage.cache = {};\n\nexport default createLedImage;","\nimport {\nroundedRectangle, \ncreateBuffer, \n} from \"./tools\";\n\nvar createLcdBackgroundImage = function(width, height, lcdColor) {\n  var lcdBuffer, lcdCtx,\n    xB = 0,\n    yB = 0,\n    wB = width,\n    hB = height,\n    rB = Math.min(width, height) * 0.095,\n    grad,\n    xF = 1,\n    yF = 1,\n    wF = width - 2,\n    hF = height - 2,\n    rF = rB - 1,\n    cacheKey = width.toString() + height + JSON.stringify(lcdColor);\n\n  // check if we have already created and cached this buffer, if not create it\n  if (!createLcdBackgroundImage.cache[cacheKey]) {\n    lcdBuffer = createBuffer(width, height);\n    lcdCtx = lcdBuffer.getContext('2d');\n    // background\n    grad = lcdCtx.createLinearGradient(0, yB, 0, yB + hB);\n    grad.addColorStop(0, '#4c4c4c');\n    grad.addColorStop(0.08, '#666666');\n    grad.addColorStop(0.92, '#666666');\n    grad.addColorStop(1, '#e6e6e6');\n    lcdCtx.fillStyle = grad;\n    roundedRectangle(lcdCtx, xB, yB, wB, hB, rB);\n    lcdCtx.fill();\n\n    // foreground\n    grad = lcdCtx.createLinearGradient(0, yF, 0, yF + hF);\n    grad.addColorStop(0, lcdColor.gradientStartColor);\n    grad.addColorStop(0.03, lcdColor.gradientFraction1Color);\n    grad.addColorStop(0.49, lcdColor.gradientFraction2Color);\n    grad.addColorStop(0.5, lcdColor.gradientFraction3Color);\n    grad.addColorStop(1, lcdColor.gradientStopColor);\n    lcdCtx.fillStyle = grad;\n    roundedRectangle(lcdCtx, xF, yF, wF, hF, rF);\n    lcdCtx.fill();\n    // cache the buffer\n    createLcdBackgroundImage.cache[cacheKey] = lcdBuffer;\n  }\n  return createLcdBackgroundImage.cache[cacheKey];\n};\ncreateLcdBackgroundImage.cache = {};\n\nexport default createLcdBackgroundImage;","\nimport {\ndoc,\n} from \"./tools\";\n\nvar createMeasuredValueImage = function(size, indicatorColor, radial, vertical) {\n  var indicatorBuffer, indicatorCtx,\n    cacheKey = size.toString() + indicatorColor + radial + vertical;\n\n  // check if we have already created and cached this buffer, if so return it and exit\n  if (!createMeasuredValueImage.cache[cacheKey]) {\n    indicatorBuffer = doc.createElement('canvas');\n    indicatorCtx = indicatorBuffer.getContext('2d');\n    indicatorBuffer.width = size;\n    indicatorBuffer.height = size;\n    indicatorCtx.fillStyle = indicatorColor;\n    if (radial) {\n      indicatorCtx.beginPath();\n      indicatorCtx.moveTo(size * 0.5, size);\n      indicatorCtx.lineTo(0, 0);\n      indicatorCtx.lineTo(size, 0);\n      indicatorCtx.closePath();\n      indicatorCtx.fill();\n    } else {\n      if (vertical) {\n        indicatorCtx.beginPath();\n        indicatorCtx.moveTo(size, size * 0.5);\n        indicatorCtx.lineTo(0, 0);\n        indicatorCtx.lineTo(0, size);\n        indicatorCtx.closePath();\n        indicatorCtx.fill();\n      } else {\n        indicatorCtx.beginPath();\n        indicatorCtx.moveTo(size * 0.5, 0);\n        indicatorCtx.lineTo(size, size);\n        indicatorCtx.lineTo(0, size);\n        indicatorCtx.closePath();\n        indicatorCtx.fill();\n      }\n    }\n    // cache the buffer\n    createMeasuredValueImage.cache[cacheKey] = indicatorBuffer;\n  }\n  return createMeasuredValueImage.cache[cacheKey];\n};\ncreateMeasuredValueImage.cache = {};\n\nexport default createMeasuredValueImage;","\nimport {\nsetAlpha, \ncreateBuffer, \nTWO_PI,\n} from \"./tools\";\n\nvar createTrendIndicator = function(width, onSection, colors) {\n  var height = width * 2,\n    trendBuffer, trendCtx,\n    fill,\n    cacheKey = onSection.state + width + JSON.stringify(colors),\n\n    drawUpArrow = function() {\n      // draw up arrow (red)\n      var ledColor = colors[0];\n\n      if (onSection.state === 'up') {\n        fill = trendCtx.createRadialGradient(0.5 * width, 0.2 * height, 0, 0.5 * width, 0.2 * height, 0.5 * width);\n        fill.addColorStop(0, ledColor.innerColor1_ON);\n        fill.addColorStop(0.2, ledColor.innerColor2_ON);\n        fill.addColorStop(1, ledColor.outerColor_ON);\n      } else {\n        fill = trendCtx.createLinearGradient(0, 0, 0, 0.5 * height);\n        fill.addColorStop(0, '#323232');\n        fill.addColorStop(1, '#5c5c5c');\n      }\n      trendCtx.fillStyle = fill;\n      trendCtx.beginPath();\n      trendCtx.moveTo(0.5 * width, 0);\n      trendCtx.lineTo(width, 0.2 * height);\n      trendCtx.lineTo(0.752 * width, 0.2 * height);\n      trendCtx.lineTo(0.752 * width, 0.37 * height);\n      trendCtx.lineTo(0.252 * width, 0.37 * height);\n      trendCtx.lineTo(0.252 * width, 0.2 * height);\n      trendCtx.lineTo(0, 0.2 * height);\n      trendCtx.closePath();\n      trendCtx.fill();\n      if (onSection.state !== 'up') {\n        // Inner shadow\n        trendCtx.strokeStyle = 'rgba(0, 0, 0, 0.4)';\n        trendCtx.beginPath();\n        trendCtx.moveTo(0, 0.2 * height);\n        trendCtx.lineTo(0.5 * width, 0);\n        trendCtx.lineTo(width, 0.2 * height);\n        trendCtx.moveTo(0.252 * width, 0.2 * height);\n        trendCtx.lineTo(0.252 * width, 0.37 * height);\n        trendCtx.stroke();\n        // Inner highlight\n        trendCtx.strokeStyle = 'rgba(255, 255, 255, 0.3)';\n        trendCtx.beginPath();\n        trendCtx.moveTo(0.252 * width, 0.37 * height);\n        trendCtx.lineTo(0.752 * width, 0.37 * height);\n        trendCtx.lineTo(0.752 * width, 0.2 * height);\n        trendCtx.lineTo(width, 0.2 * height);\n        trendCtx.stroke();\n      } else {\n        // draw halo\n        fill = trendCtx.createRadialGradient(0.5 * width, 0.2 * height, 0, 0.5 * width, 0.2 * height, 0.7 * width);\n        fill.addColorStop(0, setAlpha(ledColor.coronaColor, 0));\n        fill.addColorStop(0.5, setAlpha(ledColor.coronaColor, 0.3));\n        fill.addColorStop(0.7, setAlpha(ledColor.coronaColor, 0.2));\n        fill.addColorStop(0.8, setAlpha(ledColor.coronaColor, 0.1));\n        fill.addColorStop(0.85, setAlpha(ledColor.coronaColor, 0.05));\n        fill.addColorStop(1, setAlpha(ledColor.coronaColor, 0));\n        trendCtx.fillStyle = fill;\n\n        trendCtx.beginPath();\n        trendCtx.arc(0.5 * width, 0.2 * height, 0.7 * width, 0, TWO_PI, true);\n        trendCtx.closePath();\n        trendCtx.fill();\n      }\n    },\n\n    drawEquals = function() {\n      // draw equal symbol\n      var ledColor = colors[1];\n\n      trendCtx.beginPath();\n      if (onSection.state === 'steady') {\n        fill = ledColor.outerColor_ON;\n        trendCtx.fillStyle = fill;\n        trendCtx.rect(0.128 * width, 0.41 * height, 0.744 * width, 0.074 * height);\n        trendCtx.rect(0.128 * width, 0.516 * height, 0.744 * width, 0.074 * height);\n        trendCtx.closePath();\n        trendCtx.fill();\n      } else {\n        fill = trendCtx.createLinearGradient(0, 0.41 * height, 0, 0.41 * height + 0.074 * height);\n        fill.addColorStop(0, '#323232');\n        fill.addColorStop(1, '#5c5c5c');\n        trendCtx.fillStyle = fill;\n        trendCtx.rect(0.128 * width, 0.41 * height, 0.744 * width, 0.074 * height);\n        trendCtx.closePath();\n        trendCtx.fill();\n        fill = trendCtx.createLinearGradient(0, 0.516 * height, 0, 0.516 * height + 0.074 * height);\n        fill.addColorStop(0, '#323232');\n        fill.addColorStop(1, '#5c5c5c');\n        trendCtx.fillStyle = fill;\n        trendCtx.rect(0.128 * width, 0.516 * height, 0.744 * width, 0.074 * height);\n        trendCtx.closePath();\n        trendCtx.fill();\n      }\n      if (onSection.state !== 'steady') {\n        // inner shadow\n        trendCtx.strokeStyle = 'rgba(0, 0, 0, 0.4)';\n        trendCtx.beginPath();\n        trendCtx.moveTo(0.128 * width, 0.41 * height + 0.074 * height);\n        trendCtx.lineTo(0.128 * width, 0.41 * height);\n        trendCtx.lineTo(0.128 * width + 0.744 * width, 0.41 * height);\n        trendCtx.stroke();\n        trendCtx.beginPath();\n        trendCtx.moveTo(0.128 * width, 0.516 * height + 0.074 * height);\n        trendCtx.lineTo(0.128 * width, 0.516 * height);\n        trendCtx.lineTo(0.128 * width + 0.744 * width, 0.516 * height);\n        trendCtx.stroke();\n        // inner highlight\n        trendCtx.strokeStyle = 'rgba(255, 255, 255, 0.3)';\n        trendCtx.beginPath();\n        trendCtx.moveTo(0.128 * width + 0.744 * width, 0.41 * height);\n        trendCtx.lineTo(0.128 * width + 0.744 * width, 0.41 * height + 0.074 * height);\n        trendCtx.lineTo(0.128 * width, 0.41 * height + 0.074 * height);\n        trendCtx.stroke();\n        trendCtx.beginPath();\n        trendCtx.moveTo(0.128 * width + 0.744 * width, 0.516 * height);\n        trendCtx.lineTo(0.128 * width + 0.744 * width, 0.516 * height + 0.074 * height);\n        trendCtx.lineTo(0.128 * width, 0.516 * height + 0.074 * height);\n        trendCtx.stroke();\n      } else {\n        // draw halo\n        fill = trendCtx.createRadialGradient(0.5 * width, 0.5 * height, 0, 0.5 * width, 0.5 * height, 0.7 * width);\n        fill.addColorStop(0, setAlpha(ledColor.coronaColor, 0));\n        fill.addColorStop(0.5, setAlpha(ledColor.coronaColor, 0.3));\n        fill.addColorStop(0.7, setAlpha(ledColor.coronaColor, 0.2));\n        fill.addColorStop(0.8, setAlpha(ledColor.coronaColor, 0.1));\n        fill.addColorStop(0.85, setAlpha(ledColor.coronaColor, 0.05));\n        fill.addColorStop(1, setAlpha(ledColor.coronaColor, 0));\n        trendCtx.fillStyle = fill;\n        trendCtx.beginPath();\n        trendCtx.arc(0.5 * width, 0.5 * height, 0.7 * width, 0, TWO_PI, true);\n        trendCtx.closePath();\n        trendCtx.fill();\n      }\n    },\n\n    drawDownArrow = function() {\n      // draw down arrow\n      var ledColor = colors[2];\n      if (onSection.state === 'down') {\n        fill = trendCtx.createRadialGradient(0.5 * width, 0.8 * height, 0, 0.5 * width, 0.8 * height, 0.5 * width);\n        fill.addColorStop(0, ledColor.innerColor1_ON);\n        fill.addColorStop(0.2, ledColor.innerColor2_ON);\n        fill.addColorStop(1, ledColor.outerColor_ON);\n      } else {\n        fill = trendCtx.createLinearGradient(0, 0.63 * height, 0, height);\n        fill.addColorStop(0, '#323232');\n        fill.addColorStop(1, '#5c5c5c');\n      }\n      trendCtx.beginPath();\n      trendCtx.fillStyle = fill;\n      trendCtx.moveTo(0.5 * width, height);\n      trendCtx.lineTo(width, 0.8 * height);\n      trendCtx.lineTo(0.725 * width, 0.8 * height);\n      trendCtx.lineTo(0.725 * width, 0.63 * height);\n      trendCtx.lineTo(0.252 * width, 0.63 * height);\n      trendCtx.lineTo(0.252 * width, 0.8 * height);\n      trendCtx.lineTo(0, 0.8 * height);\n      trendCtx.closePath();\n      trendCtx.fill();\n      if (onSection.state !== 'down') {\n        // Inner shadow\n        trendCtx.strokeStyle = 'rgba(0, 0, 0, 0.4)';\n        trendCtx.beginPath();\n        trendCtx.moveTo(0, 0.8 * height);\n        trendCtx.lineTo(0.252 * width, 0.8 * height);\n        trendCtx.moveTo(0.252 * width, 0.63 * height);\n        trendCtx.lineTo(0.752 * width, 0.63 * height);\n        trendCtx.stroke();\n        trendCtx.beginPath();\n        trendCtx.moveTo(0.752 * width, 0.8 * height);\n        trendCtx.lineTo(width, 0.8 * height);\n        trendCtx.stroke();\n        // Inner highlight\n        trendCtx.strokeStyle = 'rgba(255, 255, 255, 0.3)';\n        trendCtx.beginPath();\n        trendCtx.moveTo(0, 0.8 * height);\n        trendCtx.lineTo(0.5 * width, height);\n        trendCtx.lineTo(width, 0.8 * height);\n        trendCtx.stroke();\n        trendCtx.beginPath();\n        trendCtx.moveTo(0.752 * width, 0.8 * height);\n        trendCtx.lineTo(0.752 * width, 0.63 * height);\n        trendCtx.stroke();\n      } else {\n        // draw halo\n        fill = trendCtx.createRadialGradient(0.5 * width, 0.8 * height, 0, 0.5 * width, 0.8 * height, 0.7 * width);\n        fill.addColorStop(0, setAlpha(ledColor.coronaColor, 0));\n        fill.addColorStop(0.5, setAlpha(ledColor.coronaColor, 0.3));\n        fill.addColorStop(0.7, setAlpha(ledColor.coronaColor, 0.2));\n        fill.addColorStop(0.8, setAlpha(ledColor.coronaColor, 0.1));\n        fill.addColorStop(0.85, setAlpha(ledColor.coronaColor, 0.05));\n        fill.addColorStop(1, setAlpha(ledColor.coronaColor, 0));\n        trendCtx.fillStyle = fill;\n        trendCtx.beginPath();\n        trendCtx.arc(0.5 * width, 0.8 * height, 0.7 * width, 0, TWO_PI, true);\n        trendCtx.closePath();\n        trendCtx.fill();\n      }\n    };\n\n  // Check if we have already cached this indicator, if not create it\n  if (!createTrendIndicator.cache[cacheKey]) {\n    // create oversized buffer for the glow\n    trendBuffer = createBuffer(width * 2, width * 4);\n    trendCtx = trendBuffer.getContext('2d');\n    trendCtx.translate(width * 0.5, width * 0.5);\n    // Must draw the active section last so the 'glow' is on top\n    switch (onSection.state) {\n      case 'up':\n        drawDownArrow();\n        drawEquals();\n        drawUpArrow();\n        break;\n      case 'steady':\n        drawDownArrow();\n        drawUpArrow();\n        drawEquals();\n        break;\n      case 'down':\n        /* falls through */\n      default:\n        drawUpArrow();\n        drawEquals();\n        drawDownArrow();\n        break;\n    }\n    // cache the buffer\n    createTrendIndicator.cache[cacheKey] = trendBuffer;\n  }\n  return createTrendIndicator.cache[cacheKey];\n};\ncreateTrendIndicator.cache = {};\n\nexport default createTrendIndicator;","\nimport {\nstdFontName,\n} from \"./tools\";\n\nimport {\n  backgroundColor as BackgroundColor,\n  lcdColor as LcdColor,\n  color as ColorDef,\n  ledColor as LedColor,\n  gaugeType as GaugeType,\n  orientation as Orientation,\n  knobType as KnobType,\n  knobStyle as KnobStyle,\n  frameDesign as FrameDesign,\n  pointerType as PointerType,\n  foregroundType as ForegroundType,\n  labelNumberFormat as LabelNumberFormat,\n  tickLabelOrientation as TickLabelOrientation,\n  trendState as TrendState,\n  } from \"./definitions\";\n\nvar drawTitleImage = function(ctx, imageWidth, imageHeight, titleString, unitString, backgroundColor, vertical, radial, altPos, gaugeType) {\n  gaugeType = (undefined === gaugeType ? gaugeType = GaugeType.TYPE1 : gaugeType);\n  ctx.save();\n  ctx.textAlign = (radial ? 'center' : 'left');\n  ctx.textBaseline = 'middle';\n  ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();\n  ctx.fillStyle = backgroundColor.labelColor.getRgbaColor();\n\n  if (radial) {\n    ctx.font = 0.046728 * imageWidth + 'px ' + stdFontName;\n    ctx.fillText(titleString, imageWidth / 2, imageHeight * 0.3, imageWidth * 0.3);\n    ctx.fillText(unitString, imageWidth / 2, imageHeight * 0.38, imageWidth * 0.3);\n  } else {\n    // linear\n    if (vertical) {\n      ctx.font = 0.1 * imageWidth + 'px ' + stdFontName;\n      ctx.save();\n      ctx.translate(0.671428 * imageWidth, 0.1375 * imageHeight);\n      ctx.rotate(1.570796);\n      ctx.fillText(titleString, 0, 0);\n      ctx.translate(-0.671428 * imageWidth, -0.1375 * imageHeight);\n      ctx.restore();\n      ctx.font = 0.071428 * imageWidth + 'px ' + stdFontName;\n      if (altPos) {\n        // LCD visible\n        if (gaugeType.type === 'type2') {\n          ctx.textAlign = 'right';\n          ctx.fillText(unitString, 0.36 * imageWidth, imageHeight * 0.79, imageWidth * 0.25);\n        } else {\n          ctx.fillText(unitString, 0.63 * imageWidth, imageHeight * 0.85, imageWidth * 0.2);\n        }\n      } else {\n        // LCD hidden\n        ctx.textAlign = 'center';\n        if (gaugeType.type === 'type2') {\n          ctx.fillText(unitString, imageWidth / 2, imageHeight * 0.92, imageWidth * 0.2);\n        } else {\n          ctx.fillText(unitString, imageWidth / 2, imageHeight * 0.89, imageWidth * 0.2);\n        }\n      }\n    } else { //linear horizontal\n      ctx.font = 0.035 * imageWidth + 'px ' + stdFontName;\n      ctx.fillText(titleString, imageWidth * 0.15, imageHeight * 0.25, imageWidth * 0.3);\n      ctx.font = 0.025 * imageWidth + 'px ' + stdFontName;\n      ctx.fillText(unitString, imageWidth * 0.0625, imageHeight * 0.7, imageWidth * 0.07);\n    }\n  }\n  ctx.restore();\n};\n\nexport default drawTitleImage;\n","import Tween from \"./tween.js\";\nimport {\ncreateBuffer, \nrequestAnimFrame, \ngetCanvasContext,\nTWO_PI,\nRAD_FACTOR,\n} from \"./tools\";\n\nvar odometer = function(canvas, parameters) {\n  parameters = parameters || {};\n\n  // parameters\n  var _context = (undefined === parameters._context ? null : parameters._context),\n    height = (undefined === parameters.height ? 0 : parameters.height),\n    digits = (undefined === parameters.digits ? 6 : parameters.digits),\n    decimals = (undefined === parameters.decimals ? 1 : parameters.decimals),\n    decimalBackColor = (undefined === parameters.decimalBackColor ? '#F0F0F0' : parameters.decimalBackColor),\n    decimalForeColor = (undefined === parameters.decimalForeColor ? '#F01010' : parameters.decimalForeColor),\n    font = (undefined === parameters.font ? 'sans-serif' : parameters.font),\n    value = (undefined === parameters.value ? 0 : parameters.value),\n    valueBackColor = (undefined === parameters.valueBackColor ? '#050505' : parameters.valueBackColor),\n    valueForeColor = (undefined === parameters.valueForeColor ? '#F8F8F8' : parameters.valueForeColor),\n    wobbleFactor = (undefined === parameters.wobbleFactor ? 0.07 : parameters.wobbleFactor),\n    //\n    initialized = false,\n    tween, ctx,\n    repainting = false,\n    digitHeight, digitWidth, stdFont,\n    width, columnHeight, verticalSpace, zeroOffset,\n    wobble = [],\n    //buffers\n    backgroundBuffer, backgroundContext,\n    foregroundBuffer, foregroundContext,\n    digitBuffer, digitContext,\n    decimalBuffer, decimalContext;\n  // End of variables\n\n  // Get the canvas context and clear it\n  if (_context) {\n    ctx = _context;\n  } else {\n    ctx = getCanvasContext(canvas);\n  }\n\n  // Has a height been specified?\n  if (height === 0) {\n    height = ctx.canvas.height;\n  }\n\n  // Cannot display negative values yet\n  if (value < 0) {\n    value = 0;\n  }\n\n  digitHeight = Math.floor(height * 0.85);\n  stdFont = '600 ' + digitHeight + 'px ' + font;\n\n  digitWidth = Math.floor(height * 0.68);\n  width = digitWidth * (digits + decimals);\n  columnHeight = digitHeight * 11;\n  verticalSpace = columnHeight / 12;\n  zeroOffset = verticalSpace * 0.81;\n\n  // Resize and clear the main context\n  ctx.canvas.width = width;\n  ctx.canvas.height = height;\n\n  // Create buffers\n  backgroundBuffer = createBuffer(width, height);\n  backgroundContext = backgroundBuffer.getContext('2d');\n\n  foregroundBuffer = createBuffer(width, height);\n  foregroundContext = foregroundBuffer.getContext('2d');\n\n  digitBuffer = createBuffer(digitWidth, columnHeight * 1.1);\n  digitContext = digitBuffer.getContext('2d');\n\n  decimalBuffer = createBuffer(digitWidth, columnHeight * 1.1);\n  decimalContext = decimalBuffer.getContext('2d');\n\n  function init() {\n    var grad, i;\n\n    initialized = true;\n\n    // Create the foreground\n    foregroundContext.rect(0, 0, width, height);\n    grad = foregroundContext.createLinearGradient(0, 0, 0, height);\n    grad.addColorStop(0, 'rgba(0, 0, 0, 1)');\n    grad.addColorStop(0.1, 'rgba(0, 0, 0, 0.4)');\n    grad.addColorStop(0.33, 'rgba(255, 255, 255, 0.45)');\n    grad.addColorStop(0.46, 'rgba(255, 255, 255, 0)');\n    grad.addColorStop(0.9, 'rgba(0, 0, 0, 0.4)');\n    grad.addColorStop(1, 'rgba(0, 0, 0, 1)');\n    foregroundContext.fillStyle = grad;\n    foregroundContext.fill();\n\n    // Create a digit column\n    // background\n    digitContext.rect(0, 0, digitWidth, columnHeight * 1.1);\n    digitContext.fillStyle = valueBackColor;\n    digitContext.fill();\n    // edges\n    digitContext.strokeStyle = '#f0f0f0';\n    digitContext.lineWidth = '1px'; //height * 0.1 + 'px';\n    digitContext.moveTo(0, 0);\n    digitContext.lineTo(0, columnHeight * 1.1);\n    digitContext.stroke();\n    digitContext.strokeStyle = '#202020';\n    digitContext.moveTo(digitWidth, 0);\n    digitContext.lineTo(digitWidth, columnHeight * 1.1);\n    digitContext.stroke();\n    // numerals\n    digitContext.textAlign = 'center';\n    digitContext.textBaseline = 'middle';\n    digitContext.font = stdFont;\n    digitContext.fillStyle = valueForeColor;\n    // put the digits 901234567890 vertically into the buffer\n    for (i = 9; i < 21; i++) {\n      digitContext.fillText(i % 10, digitWidth * 0.5, verticalSpace * (i - 9) + verticalSpace / 2);\n    }\n\n    // Create a decimal column\n    if (decimals > 0) {\n      // background\n      decimalContext.rect(0, 0, digitWidth, columnHeight * 1.1);\n      decimalContext.fillStyle = decimalBackColor;\n      decimalContext.fill();\n      // edges\n      decimalContext.strokeStyle = '#f0f0f0';\n      decimalContext.lineWidth = '1px'; //height * 0.1 + 'px';\n      decimalContext.moveTo(0, 0);\n      decimalContext.lineTo(0, columnHeight * 1.1);\n      decimalContext.stroke();\n      decimalContext.strokeStyle = '#202020';\n      decimalContext.moveTo(digitWidth, 0);\n      decimalContext.lineTo(digitWidth, columnHeight * 1.1);\n      decimalContext.stroke();\n      // numerals\n      decimalContext.textAlign = 'center';\n      decimalContext.textBaseline = 'middle';\n      decimalContext.font = stdFont;\n      decimalContext.fillStyle = decimalForeColor;\n      // put the digits 901234567890 vertically into the buffer\n      for (i = 9; i < 21; i++) {\n        decimalContext.fillText(i % 10, digitWidth * 0.5, verticalSpace * (i - 9) + verticalSpace / 2);\n      }\n    }\n    // wobble factors\n    for (i = 0; i < (digits + decimals); i++) {\n      wobble[i] = Math.random() * wobbleFactor * height - wobbleFactor * height / 2;\n    }\n\n  }\n\n  function drawDigits() {\n    var pos = 1,\n      val = value,\n      i, num, numb, frac, prevNum;\n\n    // do not use Math.pow() - rounding errors!\n    for (i = 0; i < decimals; i++) {\n      val *= 10;\n    }\n\n    numb = Math.floor(val);\n    frac = val - numb;\n    numb = String(numb);\n    prevNum = 9;\n\n    for (i = 0; i < decimals + digits; i++) {\n      num = +numb.substring(numb.length - i - 1, numb.length - i) || 0;\n      if (prevNum !== 9) {\n        frac = 0;\n      }\n      if (i < decimals) {\n        backgroundContext.drawImage(decimalBuffer, width - digitWidth * pos, -(verticalSpace * (num + frac) + zeroOffset + wobble[i]));\n      } else {\n        backgroundContext.drawImage(digitBuffer, width - digitWidth * pos, -(verticalSpace * (num + frac) + zeroOffset + wobble[i]));\n      }\n      pos++;\n      prevNum = num;\n    }\n  }\n\n  this.setValueAnimated = function(newVal, callback) {\n    var gauge = this;\n    newVal = parseFloat(newVal);\n\n    if (newVal < 0) {\n      newVal = 0;\n    }\n    if (value !== newVal) {\n      if (undefined !== tween && tween.isPlaying) {\n        tween.stop();\n      }\n\n      tween = new Tween({}, '', Tween.strongEaseOut, value, newVal, 2);\n      tween.onMotionChanged = function(event) {\n        value = event.target._pos;\n        if (!repainting) {\n          repainting = true;\n          requestAnimFrame(gauge.repaint);\n        }\n      };\n\n      // do we have a callback function to process?\n      if (callback && typeof(callback) === \"function\") {\n        tween.onMotionFinished = callback;\n      }\n\n      tween.start();\n    }\n    this.repaint();\n    return this;\n  };\n\n  this.setValue = function(newVal) {\n    value = parseFloat(newVal);\n    if (value < 0) {\n      value = 0;\n    }\n    this.repaint();\n    return this;\n  };\n\n  this.getValue = function() {\n    return value;\n  };\n\n  this.repaint = function() {\n    if (!initialized) {\n      init();\n    }\n\n    // draw digits\n    drawDigits();\n\n    // draw the foreground\n    backgroundContext.drawImage(foregroundBuffer, 0, 0);\n\n    // paint back to the main context\n    ctx.drawImage(backgroundBuffer, 0, 0);\n\n    repainting = false;\n  };\n\n  this.repaint();\n};\n\nexport default odometer;\n","import Tween from \"./tween.js\";\nimport drawPointerImage from \"./drawPointerImage\";\nimport drawRadialFrameImage from \"./drawRadialFrameImage\";\nimport drawRadialBackgroundImage from \"./drawRadialBackgroundImage\";\nimport drawRadialCustomImage from \"./drawRadialCustomImage\";\nimport drawRadialForegroundImage from \"./drawRadialForegroundImage\";\nimport createKnobImage from \"./createKnobImage\";\nimport createLedImage from \"./createLedImage\";\nimport createLcdBackgroundImage from \"./createLcdBackgroundImage\";\nimport createMeasuredValueImage from \"./createMeasuredValueImage\";\nimport createTrendIndicator from \"./createTrendIndicator\";\nimport drawTitleImage from \"./drawTitleImage\";\nimport {\ncalcNiceNumber, \ncreateBuffer, \nrequestAnimFrame, \ngetCanvasContext,\nHALF_PI,\nTWO_PI,\nPI,\nRAD_FACTOR,\ndoc,\nlcdFontName,\nstdFontName,\n} from \"./tools\";\n\nimport {\n  backgroundColor as BackgroundColor,\n  lcdColor as LcdColor,\n  color as ColorDef,\n  ledColor as LedColor,\n  gaugeType as GaugeType,\n  orientation as Orientation,\n  knobType as KnobType,\n  knobStyle as KnobStyle,\n  frameDesign as FrameDesign,\n  pointerType as PointerType,\n  foregroundType as ForegroundType,\n  labelNumberFormat as LabelNumberFormat,\n  tickLabelOrientation as TickLabelOrientation,\n  trendState as TrendState,\n  } from \"./definitions\";\n\nimport Odometer from './odometer';\n\nvar radial = function(canvas, parameters) {\n  parameters = parameters || {};\n  var gaugeType = (undefined === parameters.gaugeType ? GaugeType.TYPE4 : parameters.gaugeType),\n    size = (undefined === parameters.size ? 0 : parameters.size),\n    minValue = (undefined === parameters.minValue ? 0 : parameters.minValue),\n    maxValue = (undefined === parameters.maxValue ? (minValue + 100) : parameters.maxValue),\n    niceScale = (undefined === parameters.niceScale ? true : parameters.niceScale),\n    threshold = (undefined === parameters.threshold ? (maxValue - minValue) / 2 + minValue : parameters.threshold),\n    thresholdRising = (undefined === parameters.thresholdRising ? true : parameters.thresholdRising),\n    section = (undefined === parameters.section ? null : parameters.section),\n    area = (undefined === parameters.area ? null : parameters.area),\n    titleString = (undefined === parameters.titleString ? '' : parameters.titleString),\n    unitString = (undefined === parameters.unitString ? '' : parameters.unitString),\n    frameDesign = (undefined === parameters.frameDesign ? FrameDesign.METAL : parameters.frameDesign),\n    frameVisible = (undefined === parameters.frameVisible ? true : parameters.frameVisible),\n    backgroundColor = (undefined === parameters.backgroundColor ? BackgroundColor.DARK_GRAY : parameters.backgroundColor),\n    backgroundVisible = (undefined === parameters.backgroundVisible ? true : parameters.backgroundVisible),\n    pointerType = (undefined === parameters.pointerType ? PointerType.TYPE1 : parameters.pointerType),\n    pointerColor = (undefined === parameters.pointerColor ? ColorDef.RED : parameters.pointerColor),\n    knobType = (undefined === parameters.knobType ? KnobType.STANDARD_KNOB : parameters.knobType),\n    knobStyle = (undefined === parameters.knobStyle ? KnobStyle.SILVER : parameters.knobStyle),\n    lcdColor = (undefined === parameters.lcdColor ? LcdColor.STANDARD : parameters.lcdColor),\n    lcdVisible = (undefined === parameters.lcdVisible ? true : parameters.lcdVisible),\n    lcdDecimals = (undefined === parameters.lcdDecimals ? 2 : parameters.lcdDecimals),\n    digitalFont = (undefined === parameters.digitalFont ? false : parameters.digitalFont),\n    fractionalScaleDecimals = (undefined === parameters.fractionalScaleDecimals ? 1 : parameters.fractionalScaleDecimals),\n    ledColor = (undefined === parameters.ledColor ? LedColor.RED_LED : parameters.ledColor),\n    ledVisible = (undefined === parameters.ledVisible ? true : parameters.ledVisible),\n    userLedColor = (undefined === parameters.userLedColor ? LedColor.GREEN_LED : parameters.userLedColor),\n    userLedVisible = (undefined === parameters.userLedVisible ? false : parameters.userLedVisible),\n    thresholdVisible = (undefined === parameters.thresholdVisible ? true : parameters.thresholdVisible),\n    minMeasuredValueVisible = (undefined === parameters.minMeasuredValueVisible ? false : parameters.minMeasuredValueVisible),\n    maxMeasuredValueVisible = (undefined === parameters.maxMeasuredValueVisible ? false : parameters.maxMeasuredValueVisible),\n    foregroundType = (undefined === parameters.foregroundType ? ForegroundType.TYPE1 : parameters.foregroundType),\n    foregroundVisible = (undefined === parameters.foregroundVisible ? true : parameters.foregroundVisible),\n    labelNumberFormat = (undefined === parameters.labelNumberFormat ? LabelNumberFormat.STANDARD : parameters.labelNumberFormat),\n    playAlarm = (undefined === parameters.playAlarm ? false : parameters.playAlarm),\n    alarmSound = (undefined === parameters.alarmSound ? false : parameters.alarmSound),\n    customLayer = (undefined === parameters.customLayer ? null : parameters.customLayer),\n    tickLabelOrientation = (undefined === parameters.tickLabelOrientation ? (gaugeType === GaugeType.TYPE1 ? TickLabelOrientation.TANGENT : TickLabelOrientation.NORMAL) : parameters.tickLabelOrientation),\n    trendVisible = (undefined === parameters.trendVisible ? false : parameters.trendVisible),\n    trendColors = (undefined === parameters.trendColors ? [LedColor.RED_LED, LedColor.GREEN_LED, LedColor.CYAN_LED] : parameters.trendColors),\n    useOdometer = (undefined === parameters.useOdometer ? false : parameters.useOdometer),\n    odometerParams = (undefined === parameters.odometerParams ? {} : parameters.odometerParams),\n    odometerUseValue = (undefined === parameters.odometerUseValue ? false : parameters.odometerUseValue),\n    fullScaleDeflectionTime = (undefined === parameters.fullScaleDeflectionTime ? 2.5 : parameters.fullScaleDeflectionTime);\n\n  // Get the canvas context and clear it\n  var mainCtx = getCanvasContext(canvas);\n  // Has a size been specified?\n  if (size === 0) {\n    size = Math.min(mainCtx.canvas.width, mainCtx.canvas.height);\n  }\n\n  // Set the size - also clears the canvas\n  mainCtx.canvas.width = size;\n  mainCtx.canvas.height = size;\n\n  // Create audio tag for alarm sound\n  var audioElement;\n  if (playAlarm && alarmSound !== false) {\n    audioElement = doc.createElement('audio');\n    audioElement.setAttribute('src', alarmSound);\n    audioElement.setAttribute('preload', 'auto');\n  }\n\n  var value = minValue;\n  var odoValue = minValue;\n  var self = this;\n\n  // Properties\n  var minMeasuredValue = maxValue;\n  var maxMeasuredValue = minValue;\n\n  var ledBlinking = false;\n  var userLedBlinking = false;\n\n  var ledTimerId = 0;\n  var userLedTimerId = 0;\n  var tween;\n  var repainting = false;\n\n  var trendIndicator = TrendState.OFF;\n  var trendSize = size * 0.06;\n  var trendPosX = size * 0.29;\n  var trendPosY = size * 0.36;\n\n  // GaugeType specific private variables\n  var freeAreaAngle;\n  var rotationOffset;\n  var tickmarkOffset;\n  var angleRange;\n  var angleStep;\n\n  var angle = rotationOffset + (value - minValue) * angleStep;\n\n  var imageWidth = size;\n  var imageHeight = size;\n\n  var centerX = imageWidth / 2;\n  var centerY = imageHeight / 2;\n\n  // Misc\n  var ledSize = size * 0.093457;\n  var ledPosX = 0.6 * imageWidth;\n  var ledPosY = 0.4 * imageHeight;\n  var userLedPosX = gaugeType === GaugeType.TYPE3 ? 0.6 * imageWidth : centerX - ledSize / 2;\n  var userLedPosY = gaugeType === GaugeType.TYPE3 ? 0.72 * imageHeight : 0.75 * imageHeight;\n  var lcdFontHeight = Math.floor(imageWidth / 10);\n  var stdFont = lcdFontHeight + 'px ' + stdFontName;\n  var lcdFont = lcdFontHeight + 'px ' + lcdFontName;\n  var lcdHeight = imageHeight * 0.13;\n  var lcdWidth = imageWidth * 0.4;\n  var lcdPosX = (imageWidth - lcdWidth) / 2;\n  var lcdPosY = imageHeight * 0.57;\n  var odoPosX, odoPosY = imageHeight * 0.61;\n  var shadowOffset = imageWidth * 0.006;\n\n  // Constants\n  var initialized = false;\n\n  // Tickmark specific private variables\n  var niceMinValue = minValue;\n  var niceMaxValue = maxValue;\n  var niceRange = maxValue - minValue;\n  var range = niceMaxValue - niceMinValue;\n  var minorTickSpacing = 0;\n  var majorTickSpacing = 0;\n  var maxNoOfMinorTicks = 10;\n  var maxNoOfMajorTicks = 10;\n\n  // Method to calculate nice values for min, max and range for the tickmarks\n  var calculate = function calculate() {\n    if (niceScale) {\n      niceRange = calcNiceNumber(maxValue - minValue, false);\n      majorTickSpacing = calcNiceNumber(niceRange / (maxNoOfMajorTicks - 1), true);\n      niceMinValue = Math.floor(minValue / majorTickSpacing) * majorTickSpacing;\n      niceMaxValue = Math.ceil(maxValue / majorTickSpacing) * majorTickSpacing;\n      minorTickSpacing = calcNiceNumber(majorTickSpacing / (maxNoOfMinorTicks - 1), true);\n      minValue = niceMinValue;\n      maxValue = niceMaxValue;\n      range = maxValue - minValue;\n    } else {\n      niceRange = (maxValue - minValue);\n      niceMinValue = minValue;\n      niceMaxValue = maxValue;\n      range = niceRange;\n      majorTickSpacing = calcNiceNumber(niceRange / (maxNoOfMajorTicks - 1), true);\n      minorTickSpacing = calcNiceNumber(majorTickSpacing / (maxNoOfMinorTicks - 1), true);\n    }\n    // Make sure values are still in range\n    value = value < minValue ? minValue : value > maxValue ? maxValue : value;\n    minMeasuredValue = minMeasuredValue < minValue ? minValue : minMeasuredValue > maxValue ? maxValue : minMeasuredValue;\n    maxMeasuredValue = maxMeasuredValue < minValue ? minValue : maxMeasuredValue > maxValue ? maxValue : maxMeasuredValue;\n    threshold = threshold < minValue ? minValue : threshold > maxValue ? maxValue : threshold;\n\n    switch (gaugeType.type) {\n      case 'type1':\n        freeAreaAngle = 0;\n        rotationOffset = PI;\n        tickmarkOffset = HALF_PI;\n        angleRange = HALF_PI;\n        angleStep = angleRange / range;\n        break;\n\n      case 'type2':\n        freeAreaAngle = 0;\n        rotationOffset = PI;\n        tickmarkOffset = HALF_PI;\n        angleRange = PI;\n        angleStep = angleRange / range;\n        break;\n\n      case 'type3':\n        freeAreaAngle = 0;\n        rotationOffset = HALF_PI;\n        tickmarkOffset = 0;\n        angleRange = 1.5 * PI;\n        angleStep = angleRange / range;\n        break;\n\n      case 'type4':\n        /* falls through */\n      default:\n        freeAreaAngle = 60 * RAD_FACTOR;\n        rotationOffset = HALF_PI + (freeAreaAngle / 2);\n        tickmarkOffset = 0;\n        angleRange = TWO_PI - freeAreaAngle;\n        angleStep = angleRange / range;\n        break;\n    }\n    angle = rotationOffset + (value - minValue) * angleStep;\n  };\n\n  // **************   Buffer creation  ********************\n  // Buffer for the frame\n  var frameBuffer = createBuffer(size, size);\n  var frameContext = frameBuffer.getContext('2d');\n\n  // Buffer for the background\n  var backgroundBuffer = createBuffer(size, size);\n  var backgroundContext = backgroundBuffer.getContext('2d');\n\n  var lcdBuffer;\n\n  // Buffer for led on painting code\n  var ledBufferOn = createBuffer(ledSize, ledSize);\n  var ledContextOn = ledBufferOn.getContext('2d');\n\n  // Buffer for led off painting code\n  var ledBufferOff = createBuffer(ledSize, ledSize);\n  var ledContextOff = ledBufferOff.getContext('2d');\n\n  // Buffer for current led painting code\n  var ledBuffer = ledBufferOff;\n\n  // Buffer for user led on painting code\n  var userLedBufferOn = createBuffer(ledSize, ledSize);\n  var userLedContextOn = userLedBufferOn.getContext('2d');\n\n  // Buffer for user led off painting code\n  var userLedBufferOff = createBuffer(ledSize, ledSize);\n  var userLedContextOff = userLedBufferOff.getContext('2d');\n\n  // Buffer for current user led painting code\n  var userLedBuffer = userLedBufferOff;\n\n  // Buffer for the minMeasuredValue indicator\n  var minMeasuredValueBuffer = createBuffer(Math.ceil(size * 0.028037), Math.ceil(size * 0.028037));\n  var minMeasuredValueCtx = minMeasuredValueBuffer.getContext('2d');\n\n  // Buffer for the maxMeasuredValue indicator\n  var maxMeasuredValueBuffer = createBuffer(Math.ceil(size * 0.028037), Math.ceil(size * 0.028037));\n  var maxMeasuredValueCtx = maxMeasuredValueBuffer.getContext('2d');\n\n  // Buffer for pointer image painting code\n  var pointerBuffer = createBuffer(size, size);\n  var pointerContext = pointerBuffer.getContext('2d');\n\n  // Buffer for static foreground painting code\n  var foregroundBuffer = createBuffer(size, size);\n  var foregroundContext = foregroundBuffer.getContext('2d');\n\n  // Buffers for trend indicators\n  var trendUpBuffer, trendSteadyBuffer, trendDownBuffer, trendOffBuffer;\n\n  // Buffer for odometer\n  var odoGauge, odoBuffer, odoContext;\n  if (useOdometer && lcdVisible) {\n    odoBuffer = createBuffer(10, 10); // size doesn't matter, it will get reset by odometer code\n    odoContext = odoBuffer.getContext('2d');\n  }\n\n  // **************   Image creation  ********************\n  var drawLcdText = function(ctx, value) {\n    ctx.restore();\n    ctx.save();\n    ctx.textAlign = 'right';\n    ctx.strokeStyle = lcdColor.textColor;\n    ctx.fillStyle = lcdColor.textColor;\n\n    if (lcdColor === LcdColor.STANDARD || lcdColor === LcdColor.STANDARD_GREEN) {\n      ctx.shadowColor = 'gray';\n      ctx.shadowOffsetX = imageWidth * 0.007;\n      ctx.shadowOffsetY = imageWidth * 0.007;\n      ctx.shadowBlur = imageWidth * 0.007;\n    }\n    if (digitalFont) {\n      ctx.font = lcdFont;\n    } else {\n      ctx.font = stdFont;\n    }\n    ctx.fillText(value.toFixed(lcdDecimals), lcdPosX + lcdWidth - lcdWidth * 0.05, lcdPosY + lcdHeight * 0.5 + lcdFontHeight * 0.38, lcdWidth * 0.9);\n\n    ctx.restore();\n  };\n\n  var drawPostsImage = function(ctx) {\n    ctx.save();\n\n    if ('type1' === gaugeType.type) {\n      // Draw max center top post\n      ctx.drawImage(createKnobImage(Math.ceil(imageHeight * 0.037383), KnobType.STANDARD_KNOB, knobStyle), imageWidth * 0.523364, imageHeight * 0.130841);\n    }\n\n    if ('type1' === gaugeType.type || 'type2' === gaugeType.type) {\n      // Draw min left post\n      ctx.drawImage(createKnobImage(Math.ceil(imageHeight * 0.037383), KnobType.STANDARD_KNOB, knobStyle), imageWidth * 0.130841, imageHeight * 0.514018);\n    }\n\n    if ('type2' === gaugeType.type || 'type3' === gaugeType.type) {\n      // Draw max right post\n      ctx.drawImage(createKnobImage(Math.ceil(imageHeight * 0.037383), KnobType.STANDARD_KNOB, knobStyle), imageWidth * 0.831775, imageHeight * 0.514018);\n    }\n\n    if ('type3' === gaugeType.type) {\n      // Draw min center bottom post\n      ctx.drawImage(createKnobImage(Math.ceil(imageHeight * 0.037383), KnobType.STANDARD_KNOB, knobStyle), imageWidth * 0.523364, imageHeight * 0.831775);\n    }\n\n    if ('type4' === gaugeType.type) {\n      // Min post\n      ctx.drawImage(createKnobImage(Math.ceil(imageHeight * 0.037383), KnobType.STANDARD_KNOB, knobStyle), imageWidth * 0.336448, imageHeight * 0.803738);\n\n      // Max post\n      ctx.drawImage(createKnobImage(Math.ceil(imageHeight * 0.037383), KnobType.STANDARD_KNOB, knobStyle), imageWidth * 0.626168, imageHeight * 0.803738);\n    }\n\n    ctx.restore();\n\n  };\n\n  var createThresholdImage = function() {\n    var thresholdBuffer = doc.createElement('canvas');\n    thresholdBuffer.width = Math.ceil(size * 0.046728);\n    thresholdBuffer.height = Math.ceil(thresholdBuffer.width * 0.9);\n    var thresholdCtx = thresholdBuffer.getContext('2d');\n\n    thresholdCtx.save();\n    var gradThreshold = thresholdCtx.createLinearGradient(0, 0.1, 0, thresholdBuffer.height * 0.9);\n    gradThreshold.addColorStop(0, '#520000');\n    gradThreshold.addColorStop(0.3, '#fc1d00');\n    gradThreshold.addColorStop(0.59, '#fc1d00');\n    gradThreshold.addColorStop(1, '#520000');\n    thresholdCtx.fillStyle = gradThreshold;\n\n    thresholdCtx.beginPath();\n    thresholdCtx.moveTo(thresholdBuffer.width * 0.5, 0.1);\n    thresholdCtx.lineTo(thresholdBuffer.width * 0.9, thresholdBuffer.height * 0.9);\n    thresholdCtx.lineTo(thresholdBuffer.width * 0.1, thresholdBuffer.height * 0.9);\n    thresholdCtx.lineTo(thresholdBuffer.width * 0.5, 0.1);\n    thresholdCtx.closePath();\n\n    thresholdCtx.fill();\n    thresholdCtx.strokeStyle = '#FFFFFF';\n    thresholdCtx.stroke();\n\n    thresholdCtx.restore();\n\n    return thresholdBuffer;\n  };\n\n  var drawAreaSectionImage = function(ctx, start, stop, color, filled) {\n    if (start < minValue) {\n      start = minValue;\n    } else if (start > maxValue) {\n      start = maxValue;\n    }\n    if (stop < minValue) {\n      stop = minValue;\n    } else if (stop > maxValue) {\n      stop = maxValue;\n    }\n    if (start >= stop) {\n      return;\n    }\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.fillStyle = color;\n    ctx.lineWidth = imageWidth * 0.035;\n    var startAngle = (angleRange / range * start - angleRange / range * minValue);\n    var stopAngle = startAngle + (stop - start) / (range / angleRange);\n    ctx.translate(centerX, centerY);\n    ctx.rotate(rotationOffset);\n    ctx.beginPath();\n    if (filled) {\n      ctx.moveTo(0, 0);\n      ctx.arc(0, 0, imageWidth * 0.365 - ctx.lineWidth / 2, startAngle, stopAngle, false);\n    } else {\n      ctx.arc(0, 0, imageWidth * 0.365, startAngle, stopAngle, false);\n    }\n    if (filled) {\n      ctx.moveTo(0, 0);\n      ctx.fill();\n    } else {\n      ctx.stroke();\n    }\n\n    ctx.translate(-centerX, -centerY);\n    ctx.restore();\n  };\n\n  var drawTickmarksImage = function(ctx, labelNumberFormat) {\n    var fontSize = Math.ceil(imageWidth * 0.04),\n      alpha = rotationOffset, // Tracks total rotation\n      rotationStep = angleStep * minorTickSpacing,\n      textRotationAngle,\n      valueCounter = minValue,\n      majorTickCounter = maxNoOfMinorTicks - 1,\n      OUTER_POINT = imageWidth * 0.38,\n      MAJOR_INNER_POINT = imageWidth * 0.35,\n      MED_INNER_POINT = imageWidth * 0.355,\n      MINOR_INNER_POINT = imageWidth * 0.36,\n      TEXT_TRANSLATE_X = imageWidth * 0.3,\n      TEXT_WIDTH = imageWidth * 0.1,\n      HALF_MAX_NO_OF_MINOR_TICKS = maxNoOfMinorTicks / 2,\n      MAX_VALUE_ROUNDED = parseFloat(maxValue.toFixed(2)),\n      i;\n\n    backgroundColor.labelColor.setAlpha(1);\n    ctx.save();\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.font = fontSize + 'px ' + stdFontName;\n    ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();\n    ctx.fillStyle = backgroundColor.labelColor.getRgbaColor();\n    ctx.translate(centerX, centerY);\n    ctx.rotate(rotationOffset);\n\n    if (gaugeType.type === 'type1' || gaugeType.type === 'type2') {\n      TEXT_WIDTH = imageWidth * 0.04;\n    }\n\n    for (i = minValue; parseFloat(i.toFixed(2)) <= MAX_VALUE_ROUNDED; i += minorTickSpacing) {\n      textRotationAngle = rotationStep + HALF_PI;\n      majorTickCounter++;\n      // Draw major tickmarks\n      if (majorTickCounter === maxNoOfMinorTicks) {\n        ctx.lineWidth = 1.5;\n        ctx.beginPath();\n        ctx.moveTo(OUTER_POINT, 0);\n        ctx.lineTo(MAJOR_INNER_POINT, 0);\n        ctx.closePath();\n        ctx.stroke();\n        ctx.save();\n        ctx.translate(TEXT_TRANSLATE_X, 0);\n\n        switch (tickLabelOrientation.type) {\n          case 'horizontal':\n            textRotationAngle = -alpha;\n            break;\n\n          case 'tangent':\n            textRotationAngle = (alpha <= HALF_PI + PI ? PI : 0);\n            break;\n\n          case 'normal':\n            /* falls through */\n          default:\n            textRotationAngle = HALF_PI;\n            break;\n        }\n        ctx.rotate(textRotationAngle);\n\n        switch (labelNumberFormat.format) {\n          case 'fractional':\n            ctx.fillText((valueCounter.toFixed(fractionalScaleDecimals)), 0, 0, TEXT_WIDTH);\n            break;\n\n          case 'scientific':\n            ctx.fillText((valueCounter.toPrecision(2)), 0, 0, TEXT_WIDTH);\n            break;\n\n          case 'standard':\n            /* falls through */\n          default:\n            ctx.fillText((valueCounter.toFixed(0)), 0, 0, TEXT_WIDTH);\n            break;\n        }\n        ctx.translate(-TEXT_TRANSLATE_X, 0);\n        ctx.restore();\n\n        valueCounter += majorTickSpacing;\n        majorTickCounter = 0;\n        ctx.rotate(rotationStep);\n        alpha += rotationStep;\n        continue;\n      }\n\n      // Draw tickmark every minor tickmark spacing\n      if (0 === maxNoOfMinorTicks % 2 && majorTickCounter === (HALF_MAX_NO_OF_MINOR_TICKS)) {\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        ctx.moveTo(OUTER_POINT, 0);\n        ctx.lineTo(MED_INNER_POINT, 0);\n        ctx.closePath();\n        ctx.stroke();\n      } else {\n        ctx.lineWidth = 0.5;\n        ctx.beginPath();\n        ctx.moveTo(OUTER_POINT, 0);\n        ctx.lineTo(MINOR_INNER_POINT, 0);\n        ctx.closePath();\n        ctx.stroke();\n      }\n      ctx.rotate(rotationStep);\n      alpha += rotationStep;\n    }\n\n    /*\n     // Logarithmic scale\n     var tmp = 0.1;\n     var minValueLog10 = 0.1;\n     var maxValueLog10 = parseInt(Math.pow(10, Math.ceil(Math.log10(maxValue))));\n     var drawLabel = true;\n     angleStep = angleRange / (maxValueLog10 - minValueLog10)\n     for (var scaleFactor = minValueLog10 ; scaleFactor <= maxValueLog10 ; scaleFactor *= 10)\n     {\n     for (var i = parseFloat((1 * scaleFactor).toFixed(1)) ; i < parseFloat((10 * scaleFactor).toFixed(1)) ; i += scaleFactor)\n     {\n     textRotationAngle =+ rotationStep + HALF_PI;\n\n     if(drawLabel)\n     {\n     ctx.lineWidth = 1.5;\n     ctx.beginPath();\n     ctx.moveTo(imageWidth * 0.38,0);\n     ctx.lineTo(imageWidth * 0.35,0);\n     ctx.closePath();\n     ctx.stroke();\n     ctx.save();\n     ctx.translate(imageWidth * 0.31, 0);\n     ctx.rotate(textRotationAngle);\n     ctx.fillText(parseFloat((i).toFixed(1)), 0, 0, imageWidth * 0.0375);\n     ctx.translate(-imageWidth * 0.31, 0);\n     ctx.restore();\n     drawLabel = false;\n     }\n     else\n     {\n     ctx.lineWidth = 0.5;\n     ctx.beginPath();\n     ctx.moveTo(imageWidth * 0.38,0);\n     ctx.lineTo(imageWidth * 0.36,0);\n     ctx.closePath();\n     ctx.stroke();\n     }\n     //doc.write('log10 scale value: ' + parseFloat((i).toFixed(1)) + '<br>');\n     //Math.log10(parseFloat((i).toFixed(1)));\n\n     ctx.rotate(rotationStep);\n     }\n     tmp = 0.1;\n     drawLabel = true;\n     }\n     */\n\n    ctx.translate(-centerX, -centerY);\n    ctx.restore();\n  };\n\n  // **************   Initialization  ********************\n  // Draw all static painting code to background\n  var init = function(parameters) {\n    parameters = parameters || {};\n    var drawFrame = (undefined === parameters.frame ? false : parameters.frame);\n    var drawBackground = (undefined === parameters.background ? false : parameters.background);\n    var drawLed = (undefined === parameters.led ? false : parameters.led);\n    var drawUserLed = (undefined === parameters.userLed ? false : parameters.userLed);\n    var drawPointer = (undefined === parameters.pointer ? false : parameters.pointer);\n    var drawForeground = (undefined === parameters.foreground ? false : parameters.foreground);\n    var drawTrend = (undefined === parameters.trend ? false : parameters.trend);\n    var drawOdo = (undefined === parameters.odo ? false : parameters.odo);\n\n    initialized = true;\n\n    // Calculate the current min and max values and the range\n    calculate();\n\n    // Create frame in frame buffer (backgroundBuffer)\n    if (drawFrame && frameVisible) {\n      drawRadialFrameImage(frameContext, frameDesign, centerX, centerY, imageWidth, imageHeight);\n    }\n\n    // Create background in background buffer (backgroundBuffer)\n    if (drawBackground && backgroundVisible) {\n      drawRadialBackgroundImage(backgroundContext, backgroundColor, centerX, centerY, imageWidth, imageHeight);\n\n      // Create custom layer in background buffer (backgroundBuffer)\n      drawRadialCustomImage(backgroundContext, customLayer, centerX, centerY, imageWidth, imageHeight);\n    }\n\n    if (drawLed) {\n      // Draw LED ON in ledBuffer_ON\n      ledContextOn.drawImage(createLedImage(Math.ceil(size * 0.093457), 1, ledColor), 0, 0);\n\n      // Draw LED OFF in ledBuffer_OFF\n      ledContextOff.drawImage(createLedImage(Math.ceil(size * 0.093457), 0, ledColor), 0, 0);\n    }\n\n    if (drawUserLed) {\n      // Draw user LED ON in userLedBuffer_ON\n      userLedContextOn.drawImage(createLedImage(Math.ceil(size * 0.093457), 1, userLedColor), 0, 0);\n\n      // Draw user LED OFF in userLedBuffer_OFF\n      userLedContextOff.drawImage(createLedImage(Math.ceil(size * 0.093457), 0, userLedColor), 0, 0);\n    }\n\n    // Draw min measured value indicator in minMeasuredValueBuffer\n    if (minMeasuredValueVisible) {\n      minMeasuredValueCtx.drawImage(createMeasuredValueImage(Math.ceil(size * 0.028037), ColorDef.BLUE.dark.getRgbaColor(), true, true), 0, 0);\n    }\n\n    // Draw max measured value indicator in maxMeasuredValueBuffer\n    if (maxMeasuredValueVisible) {\n      maxMeasuredValueCtx.drawImage(createMeasuredValueImage(Math.ceil(size * 0.028037), ColorDef.RED.medium.getRgbaColor(), true), 0, 0);\n    }\n\n    // Create alignment posts in background buffer (backgroundBuffer)\n    if (drawBackground && backgroundVisible) {\n      drawPostsImage(backgroundContext);\n\n      // Create section in background buffer (backgroundBuffer)\n      if (null !== section && 0 < section.length) {\n        var sectionIndex = section.length;\n        do {\n          sectionIndex--;\n          drawAreaSectionImage(backgroundContext, section[sectionIndex].start, section[sectionIndex].stop, section[sectionIndex].color, false);\n        }\n        while (0 < sectionIndex);\n      }\n\n      // Create area in background buffer (backgroundBuffer)\n      if (null !== area && 0 < area.length) {\n        var areaIndex = area.length;\n        do {\n          areaIndex--;\n          drawAreaSectionImage(backgroundContext, area[areaIndex].start, area[areaIndex].stop, area[areaIndex].color, true);\n        }\n        while (0 < areaIndex);\n      }\n\n      // Create tickmarks in background buffer (backgroundBuffer)\n      drawTickmarksImage(backgroundContext, labelNumberFormat);\n\n      // Create title in background buffer (backgroundBuffer)\n      drawTitleImage(backgroundContext, imageWidth, imageHeight, titleString, unitString, backgroundColor, true, true);\n    }\n\n    // Draw threshold image to background context\n    if (drawBackground && thresholdVisible) {\n      backgroundContext.save();\n      backgroundContext.translate(centerX, centerY);\n      backgroundContext.rotate(rotationOffset + (threshold - minValue) * angleStep + HALF_PI);\n      backgroundContext.translate(-centerX, -centerY);\n      backgroundContext.drawImage(createThresholdImage(), imageWidth * 0.475, imageHeight * 0.13);\n      backgroundContext.translate(centerX, centerY);\n      backgroundContext.restore();\n    }\n\n    // Create lcd background if selected in background buffer (backgroundBuffer)\n    if (drawBackground && lcdVisible) {\n      if (useOdometer && drawOdo) {\n        odoGauge = new Odometer('', {\n          _context: odoContext,\n          height: size * 0.075,\n          decimals: odometerParams.decimals,\n          digits: (odometerParams.digits === undefined ? 5 : odometerParams.digits),\n          valueForeColor: odometerParams.valueForeColor,\n          valueBackColor: odometerParams.valueBackColor,\n          decimalForeColor: odometerParams.decimalForeColor,\n          decimalBackColor: odometerParams.decimalBackColor,\n          font: odometerParams.font,\n          value: value\n        });\n        odoPosX = (imageWidth - odoBuffer.width) / 2;\n      } else if (!useOdometer) {\n        lcdBuffer = createLcdBackgroundImage(lcdWidth, lcdHeight, lcdColor);\n        backgroundContext.drawImage(lcdBuffer, lcdPosX, lcdPosY);\n      }\n    }\n\n    // Create pointer image in pointer buffer (contentBuffer)\n    if (drawPointer) {\n      drawPointerImage(pointerContext, imageWidth, pointerType, pointerColor, backgroundColor.labelColor);\n    }\n\n    // Create foreground in foreground buffer (foregroundBuffer)\n    if (drawForeground && foregroundVisible) {\n      var knobVisible = (pointerType.type === 'type15' || pointerType.type === 'type16' ? false : true);\n      drawRadialForegroundImage(foregroundContext, foregroundType, imageWidth, imageHeight, knobVisible, knobType, knobStyle, gaugeType);\n    }\n\n    // Create the trend indicator buffers\n    if (drawTrend && trendVisible) {\n      trendUpBuffer = createTrendIndicator(trendSize, TrendState.UP, trendColors);\n      trendSteadyBuffer = createTrendIndicator(trendSize, TrendState.STEADY, trendColors);\n      trendDownBuffer = createTrendIndicator(trendSize, TrendState.DOWN, trendColors);\n      trendOffBuffer = createTrendIndicator(trendSize, TrendState.OFF, trendColors);\n    }\n  };\n\n  var resetBuffers = function(buffers) {\n    buffers = buffers || {};\n    var resetFrame = (undefined === buffers.frame ? false : buffers.frame);\n    var resetBackground = (undefined === buffers.background ? false : buffers.background);\n    var resetLed = (undefined === buffers.led ? false : buffers.led);\n    var resetUserLed = (undefined === buffers.userLed ? false : buffers.userLed);\n    var resetPointer = (undefined === buffers.pointer ? false : buffers.pointer);\n    var resetForeground = (undefined === buffers.foreground ? false : buffers.foreground);\n\n    if (resetFrame) {\n      frameBuffer.width = size;\n      frameBuffer.height = size;\n      frameContext = frameBuffer.getContext('2d');\n    }\n\n    if (resetBackground) {\n      backgroundBuffer.width = size;\n      backgroundBuffer.height = size;\n      backgroundContext = backgroundBuffer.getContext('2d');\n    }\n\n    if (resetLed) {\n      ledBufferOn.width = Math.ceil(size * 0.093457);\n      ledBufferOn.height = Math.ceil(size * 0.093457);\n      ledContextOn = ledBufferOn.getContext('2d');\n\n      ledBufferOff.width = Math.ceil(size * 0.093457);\n      ledBufferOff.height = Math.ceil(size * 0.093457);\n      ledContextOff = ledBufferOff.getContext('2d');\n\n      // Buffer for current led painting code\n      ledBuffer = ledBufferOff;\n    }\n\n    if (resetUserLed) {\n      userLedBufferOn.width = Math.ceil(size * 0.093457);\n      userLedBufferOn.height = Math.ceil(size * 0.093457);\n      userLedContextOn = userLedBufferOn.getContext('2d');\n\n      userLedBufferOff.width = Math.ceil(size * 0.093457);\n      userLedBufferOff.height = Math.ceil(size * 0.093457);\n      userLedContextOff = userLedBufferOff.getContext('2d');\n\n      // Buffer for current user led painting code\n      userLedBuffer = userLedBufferOff;\n    }\n\n    if (resetPointer) {\n      pointerBuffer.width = size;\n      pointerBuffer.height = size;\n      pointerContext = pointerBuffer.getContext('2d');\n    }\n\n    if (resetForeground) {\n      foregroundBuffer.width = size;\n      foregroundBuffer.height = size;\n      foregroundContext = foregroundBuffer.getContext('2d');\n    }\n  };\n\n  var toggleAndRepaintLed = function() {\n    if (ledVisible) {\n      if (ledBuffer === ledBufferOn) {\n        ledBuffer = ledBufferOff;\n      } else {\n        ledBuffer = ledBufferOn;\n      }\n      if (!repainting) {\n        repainting = true;\n        requestAnimFrame(self.repaint);\n      }\n    }\n  };\n\n  var toggleAndRepaintUserLed = function() {\n    if (userLedVisible) {\n      if (userLedBuffer === userLedBufferOn) {\n        userLedBuffer = userLedBufferOff;\n      } else {\n        userLedBuffer = userLedBufferOn;\n      }\n      if (!repainting) {\n        repainting = true;\n        requestAnimFrame(self.repaint);\n      }\n    }\n  };\n\n  var blink = function(blinking) {\n    if (blinking) {\n      ledTimerId = setInterval(toggleAndRepaintLed, 1000);\n    } else {\n      clearInterval(ledTimerId);\n      ledBuffer = ledBufferOff;\n    }\n  };\n\n  var blinkUser = function(blinking) {\n    if (blinking) {\n      userLedTimerId = setInterval(toggleAndRepaintUserLed, 1000);\n    } else {\n      clearInterval(userLedTimerId);\n      userLedBuffer = userLedBufferOff;\n    }\n  };\n\n  //************************************ Public methods **************************************\n  this.setValue = function(newValue) {\n    newValue = parseFloat(newValue);\n    var targetValue = newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue);\n    if (value !== targetValue) {\n      value = targetValue;\n\n      if (value > maxMeasuredValue) {\n        maxMeasuredValue = value;\n      }\n      if (value < minMeasuredValue) {\n        minMeasuredValue = value;\n      }\n\n      if ((value >= threshold && !ledBlinking && thresholdRising) ||\n        (value <= threshold && !ledBlinking && !thresholdRising)) {\n        ledBlinking = true;\n        blink(ledBlinking);\n        if (playAlarm) {\n          audioElement.play();\n        }\n      } else if ((value < threshold && ledBlinking && thresholdRising) ||\n        (value > threshold && ledBlinking && !thresholdRising)) {\n        ledBlinking = false;\n        blink(ledBlinking);\n        if (playAlarm) {\n          audioElement.pause();\n        }\n      }\n      this.repaint();\n    }\n    return this;\n  };\n\n  this.getValue = function() {\n    return value;\n  };\n\n  this.setOdoValue = function(newValue) {\n    newValue = parseFloat(newValue);\n    var targetValue = (newValue < 0 ? 0 : newValue);\n    if (odoValue !== targetValue) {\n      odoValue = targetValue;\n      this.repaint();\n    }\n    return this;\n  };\n\n  this.getOdoValue = function() {\n    return odoValue;\n  };\n\n  this.setValueAnimated = function(newValue, callback) {\n    newValue = parseFloat(newValue);\n    var targetValue = (newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue)),\n      gauge = this,\n      time;\n\n    if (value !== targetValue) {\n      if (undefined !== tween && tween.isPlaying) {\n        tween.stop();\n      }\n      time = fullScaleDeflectionTime * Math.abs(targetValue - value) / (maxValue - minValue);\n      time = Math.max(time, fullScaleDeflectionTime / 5);\n      tween = new Tween({}, '', Tween.regularEaseInOut, value, targetValue, time);\n      //tween = new Tween({}, '', Tween.regularEaseInOut, value, targetValue, 1);\n      //tween = new Tween(new Object(), '', Tween.strongEaseInOut, value, targetValue, 1);\n\n      tween.onMotionChanged = function(event) {\n        value = event.target._pos;\n\n        if ((value >= threshold && !ledBlinking && thresholdRising) ||\n          (value <= threshold && !ledBlinking && !thresholdRising)) {\n          ledBlinking = true;\n          blink(ledBlinking);\n          if (playAlarm) {\n            audioElement.play();\n          }\n        } else if ((value < threshold && ledBlinking && thresholdRising) ||\n          (value > threshold && ledBlinking && !thresholdRising)) {\n          ledBlinking = false;\n          blink(ledBlinking);\n          if (playAlarm) {\n            audioElement.pause();\n          }\n        }\n\n        if (value > maxMeasuredValue) {\n          maxMeasuredValue = value;\n        }\n        if (value < minMeasuredValue) {\n          minMeasuredValue = value;\n        }\n        if (!repainting) {\n          repainting = true;\n          requestAnimFrame(gauge.repaint);\n        }\n      };\n\n      // do we have a callback function to process?\n      if (callback && typeof(callback) === \"function\") {\n        tween.onMotionFinished = callback;\n      }\n\n      tween.start();\n    }\n    return this;\n  };\n\n  this.resetMinMeasuredValue = function() {\n    minMeasuredValue = value;\n    this.repaint();\n  };\n\n  this.resetMaxMeasuredValue = function() {\n    maxMeasuredValue = value;\n    this.repaint();\n    return this;\n  };\n\n  this.setMinMeasuredValueVisible = function(visible) {\n    minMeasuredValueVisible = !!visible;\n    this.repaint();\n    return this;\n  };\n\n  this.setMaxMeasuredValueVisible = function(visible) {\n    maxMeasuredValueVisible = !!visible;\n    this.repaint();\n    return this;\n  };\n\n  this.setMaxMeasuredValue = function(newValue) {\n    newValue = parseFloat(newValue);\n    var targetValue = newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue);\n    maxMeasuredValue = targetValue;\n    this.repaint();\n    return this;\n  };\n\n  this.setMinMeasuredValue = function(newValue) {\n    newValue = parseFloat(newValue);\n    var targetValue = newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue);\n    minMeasuredValue = targetValue;\n    this.repaint();\n    return this;\n  };\n\n  this.setTitleString = function(title) {\n    titleString = title;\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setUnitString = function(unit) {\n    unitString = unit;\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setMinValue = function(newValue) {\n    minValue = parseFloat(newValue);\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.getMinValue = function() {\n    return minValue;\n  };\n\n  this.setMaxValue = function(newValue) {\n    maxValue = parseFloat(newValue);\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.getMaxValue = function() {\n    return maxValue;\n  };\n\n  this.setThreshold = function(newValue) {\n    newValue = parseFloat(newValue);\n    var targetValue = newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue);\n    threshold = targetValue;\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setArea = function(areaVal) {\n    area = areaVal;\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setSection = function(areaSec) {\n    section = areaSec;\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setThresholdVisible = function(visible) {\n    thresholdVisible = !!visible;\n    this.repaint();\n    return this;\n  };\n\n  this.setThresholdRising = function(rising) {\n    thresholdRising = !!rising;\n    // reset existing threshold alerts\n    ledBlinking = !ledBlinking;\n    blink(ledBlinking);\n    this.repaint();\n    return this;\n  };\n\n  this.setLcdDecimals = function(decimals) {\n    lcdDecimals = parseInt(decimals, 10);\n    this.repaint();\n    return this;\n  };\n\n  this.setFrameDesign = function(newFrameDesign) {\n    resetBuffers({\n      frame: true\n    });\n    frameDesign = newFrameDesign;\n    init({\n      frame: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setBackgroundColor = function(newBackgroundColor) {\n    resetBuffers({\n      background: true,\n      pointer: (pointerType.type === 'type2' || pointerType.type === 'type13' ? true : false) // type2 & 13 depend on background\n    });\n    backgroundColor = newBackgroundColor;\n    init({\n      background: true, // type2 & 13 depend on background\n      pointer: (pointerType.type === 'type2' || pointerType.type === 'type13' ? true : false)\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setForegroundType = function(newForegroundType) {\n    resetBuffers({\n      foreground: true\n    });\n    foregroundType = newForegroundType;\n    init({\n      foreground: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setPointerType = function(newPointerType) {\n    resetBuffers({\n      pointer: true,\n      foreground: true\n    });\n    pointerType = newPointerType;\n    init({\n      pointer: true,\n      foreground: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setPointerColor = function(newPointerColor) {\n    resetBuffers({\n      pointer: true\n    });\n    pointerColor = newPointerColor;\n    init({\n      pointer: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setLedColor = function(newLedColor) {\n    resetBuffers({\n      led: true\n    });\n    ledColor = newLedColor;\n    init({\n      led: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setUserLedColor = function(newLedColor) {\n    resetBuffers({\n      userLed: true\n    });\n    userLedColor = newLedColor;\n    init({\n      userLed: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.toggleUserLed = function() {\n    if (userLedBuffer === userLedBufferOn) {\n      userLedBuffer = userLedBufferOff;\n    } else {\n      userLedBuffer = userLedBufferOn;\n    }\n    this.repaint();\n    return this;\n  };\n\n  this.setUserLedOnOff = function(on) {\n    if (true === on) {\n      userLedBuffer = userLedBufferOn;\n    } else {\n      userLedBuffer = userLedBufferOff;\n    }\n    this.repaint();\n    return this;\n  };\n\n  this.blinkUserLed = function(blink) {\n    if (blink) {\n      if (!userLedBlinking) {\n        blinkUser(true);\n        userLedBlinking = true;\n      }\n    } else {\n      if (userLedBlinking) {\n        clearInterval(userLedTimerId);\n        userLedBlinking = false;\n      }\n    }\n    return this;\n  };\n\n  this.setLedVisible = function(visible) {\n    ledVisible = !!visible;\n    this.repaint();\n    return this;\n  };\n\n  this.setUserLedVisible = function(visible) {\n    userLedVisible = !!visible;\n    this.repaint();\n    return this;\n  };\n\n  this.setLcdColor = function(newLcdColor) {\n    lcdColor = newLcdColor;\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setTrend = function(newValue) {\n    trendIndicator = newValue;\n    this.repaint();\n    return this;\n  };\n\n  this.setTrendVisible = function(visible) {\n    trendVisible = !!visible;\n    this.repaint();\n    return this;\n  };\n\n  this.setFractionalScaleDecimals = function(decimals) {\n    fractionalScaleDecimals = parseInt(decimals, 10);\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setLabelNumberFormat = function(format) {\n    labelNumberFormat = format;\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.repaint = function() {\n    if (!initialized) {\n      init({\n        frame: true,\n        background: true,\n        led: true,\n        userLed: true,\n        pointer: true,\n        trend: true,\n        foreground: true,\n        odo: true\n      });\n    }\n    mainCtx.clearRect(0, 0, size, size);\n\n    // Draw frame\n    if (frameVisible) {\n      mainCtx.drawImage(frameBuffer, 0, 0);\n    }\n\n    // Draw buffered image to visible canvas\n    mainCtx.drawImage(backgroundBuffer, 0, 0);\n\n    // Draw lcd display\n    if (lcdVisible) {\n      if (useOdometer) {\n        odoGauge.setValue(odometerUseValue ? value : odoValue);\n        mainCtx.drawImage(odoBuffer, odoPosX, odoPosY);\n      } else {\n        drawLcdText(mainCtx, value);\n      }\n    }\n\n    // Draw led\n    if (ledVisible) {\n      mainCtx.drawImage(ledBuffer, ledPosX, ledPosY);\n    }\n\n    // Draw user led\n    if (userLedVisible) {\n      mainCtx.drawImage(userLedBuffer, userLedPosX, userLedPosY);\n    }\n\n    // Draw the trend indicator\n    if (trendVisible) {\n      switch (trendIndicator.state) {\n        case 'up':\n          mainCtx.drawImage(trendUpBuffer, trendPosX, trendPosY);\n          break;\n        case 'steady':\n          mainCtx.drawImage(trendSteadyBuffer, trendPosX, trendPosY);\n          break;\n        case 'down':\n          mainCtx.drawImage(trendDownBuffer, trendPosX, trendPosY);\n          break;\n        case 'off':\n          mainCtx.drawImage(trendOffBuffer, trendPosX, trendPosY);\n          break;\n      }\n    }\n\n    // Draw min measured value indicator\n    if (minMeasuredValueVisible) {\n      mainCtx.save();\n      mainCtx.translate(centerX, centerY);\n      mainCtx.rotate(rotationOffset + HALF_PI + (minMeasuredValue - minValue) * angleStep);\n      mainCtx.translate(-centerX, -centerY);\n      mainCtx.drawImage(minMeasuredValueBuffer, mainCtx.canvas.width * 0.4865, mainCtx.canvas.height * 0.105);\n      mainCtx.restore();\n    }\n\n    // Draw max measured value indicator\n    if (maxMeasuredValueVisible) {\n      mainCtx.save();\n      mainCtx.translate(centerX, centerY);\n      mainCtx.rotate(rotationOffset + HALF_PI + (maxMeasuredValue - minValue) * angleStep);\n      mainCtx.translate(-centerX, -centerY);\n      mainCtx.drawImage(maxMeasuredValueBuffer, mainCtx.canvas.width * 0.4865, mainCtx.canvas.height * 0.105);\n      mainCtx.restore();\n    }\n\n    angle = rotationOffset + HALF_PI + (value - minValue) * angleStep;\n\n    // Define rotation center\n    mainCtx.save();\n    mainCtx.translate(centerX, centerY);\n    mainCtx.rotate(angle);\n    mainCtx.translate(-centerX, -centerY);\n    // Set the pointer shadow params\n    mainCtx.shadowColor = 'rgba(0, 0, 0, 0.8)';\n    mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset;\n    mainCtx.shadowBlur = shadowOffset * 2;\n    // Draw the pointer\n    mainCtx.drawImage(pointerBuffer, 0, 0);\n    // Undo the translations & shadow settings\n    mainCtx.restore();\n\n    // Draw foreground\n    if (foregroundVisible) {\n      mainCtx.drawImage(foregroundBuffer, 0, 0);\n    }\n\n    repainting = false;\n  };\n\n  // Visualize the component\n  this.repaint();\n\n  return this;\n};\n\nexport default radial;\n","import Tween from \"./tween.js\";\nimport drawRadialFrameImage from \"./drawRadialFrameImage\";\nimport drawRadialBackgroundImage from \"./drawRadialBackgroundImage\";\nimport drawRadialCustomImage from \"./drawRadialCustomImage\";\nimport drawRadialForegroundImage from \"./drawRadialForegroundImage\";\nimport createLedImage from \"./createLedImage\";\nimport createLcdBackgroundImage from \"./createLcdBackgroundImage\";\nimport createTrendIndicator from \"./createTrendIndicator\";\nimport drawTitleImage from \"./drawTitleImage\";\nimport {\ncalcNiceNumber, \ncreateBuffer, \ncustomColorDef, \nrequestAnimFrame, \ngetCanvasContext,\nHALF_PI,\nTWO_PI,\nPI,\nRAD_FACTOR,\nDEG_FACTOR,\ndoc,\nlcdFontName,\nstdFontName,\n} from \"./tools\";\n\nimport {\n  backgroundColor as BackgroundColor,\n  lcdColor as LcdColor,\n  color as ColorDef,\n  ledColor as LedColor,\n  gaugeType as GaugeType,\n  orientation as Orientation,\n  knobType as KnobType,\n  knobStyle as KnobStyle,\n  frameDesign as FrameDesign,\n  pointerType as PointerType,\n  foregroundType as ForegroundType,\n  labelNumberFormat as LabelNumberFormat,\n  tickLabelOrientation as TickLabelOrientation,\n  trendState as TrendState,\n  } from \"./definitions\";\n\nvar radialBargraph = function(canvas, parameters) {\n  parameters = parameters || {};\n  var gaugeType = (undefined === parameters.gaugeType ? GaugeType.TYPE4 : parameters.gaugeType),\n    size = (undefined === parameters.size ? 0 : parameters.size),\n    minValue = (undefined === parameters.minValue ? 0 : parameters.minValue),\n    maxValue = (undefined === parameters.maxValue ? (minValue + 100) : parameters.maxValue),\n    niceScale = (undefined === parameters.niceScale ? true : parameters.niceScale),\n    threshold = (undefined === parameters.threshold ? (maxValue - minValue) / 2 + minValue : parameters.threshold),\n    thresholdRising = (undefined === parameters.thresholdRising ? true : parameters.thresholdRising),\n    section = (undefined === parameters.section ? null : parameters.section),\n    useSectionColors = (undefined === parameters.useSectionColors ? false : parameters.useSectionColors),\n    titleString = (undefined === parameters.titleString ? '' : parameters.titleString),\n    unitString = (undefined === parameters.unitString ? '' : parameters.unitString),\n    frameDesign = (undefined === parameters.frameDesign ? FrameDesign.METAL : parameters.frameDesign),\n    frameVisible = (undefined === parameters.frameVisible ? true : parameters.frameVisible),\n    backgroundColor = (undefined === parameters.backgroundColor ? BackgroundColor.DARK_GRAY : parameters.backgroundColor),\n    backgroundVisible = (undefined === parameters.backgroundVisible ? true : parameters.backgroundVisible),\n    valueColor = (undefined === parameters.valueColor ? ColorDef.RED : parameters.valueColor),\n    lcdColor = (undefined === parameters.lcdColor ? LcdColor.STANDARD : parameters.lcdColor),\n    lcdVisible = (undefined === parameters.lcdVisible ? true : parameters.lcdVisible),\n    lcdDecimals = (undefined === parameters.lcdDecimals ? 2 : parameters.lcdDecimals),\n    digitalFont = (undefined === parameters.digitalFont ? false : parameters.digitalFont),\n    fractionalScaleDecimals = (undefined === parameters.fractionalScaleDecimals ? 1 : parameters.fractionalScaleDecimals),\n    customLayer = (undefined === parameters.customLayer ? null : parameters.customLayer),\n    ledColor = (undefined === parameters.ledColor ? LedColor.RED_LED : parameters.ledColor),\n    ledVisible = (undefined === parameters.ledVisible ? true : parameters.ledVisible),\n    userLedColor = (undefined === parameters.userLedColor ? LedColor.GREEN_LED : parameters.userLedColor),\n    userLedVisible = (undefined === parameters.userLedVisible ? false : parameters.userLedVisible),\n    labelNumberFormat = (undefined === parameters.labelNumberFormat ? LabelNumberFormat.STANDARD : parameters.labelNumberFormat),\n    foregroundType = (undefined === parameters.foregroundType ? ForegroundType.TYPE1 : parameters.foregroundType),\n    foregroundVisible = (undefined === parameters.foregroundVisible ? true : parameters.foregroundVisible),\n    playAlarm = (undefined === parameters.playAlarm ? false : parameters.playAlarm),\n    alarmSound = (undefined === parameters.alarmSound ? false : parameters.alarmSound),\n    valueGradient = (undefined === parameters.valueGradient ? null : parameters.valueGradient),\n    useValueGradient = (undefined === parameters.useValueGradient ? false : parameters.useValueGradient),\n    tickLabelOrientation = (undefined === parameters.tickLabelOrientation ? (gaugeType === GaugeType.TYPE1 ? TickLabelOrientation.TANGENT : TickLabelOrientation.NORMAL) : parameters.tickLabelOrientation),\n    trendVisible = (undefined === parameters.trendVisible ? false : parameters.trendVisible),\n    trendColors = (undefined === parameters.trendColors ? [LedColor.RED_LED, LedColor.GREEN_LED, LedColor.CYAN_LED] : parameters.trendColors),\n    fullScaleDeflectionTime = (undefined === parameters.fullScaleDeflectionTime ? 2.5 : parameters.fullScaleDeflectionTime);\n\n  // Get the canvas context and clear it\n  var mainCtx = getCanvasContext(canvas);\n  // Has a size been specified?\n  if (size === 0) {\n    size = Math.min(mainCtx.canvas.width, mainCtx.canvas.height);\n  }\n\n  // Set the size - also clears the canvas\n  mainCtx.canvas.width = size;\n  mainCtx.canvas.height = size;\n\n  // Create audio tag for alarm sound\n  if (playAlarm && alarmSound !== false) {\n    var audioElement = doc.createElement('audio');\n    audioElement.setAttribute('src', alarmSound);\n    audioElement.setAttribute('preload', 'auto');\n  }\n\n  var value = minValue;\n  var minMeasuredValue = minValue;\n  var maxMeasuredValue = maxValue;\n  var range = maxValue - minValue;\n  var ledBlinking = false;\n  var ledTimerId = 0;\n  var userLedBlinking = false;\n  var userLedTimerId = 0;\n  var tween;\n  var self = this;\n  var repainting = false;\n\n  // GaugeType specific private variables\n  var freeAreaAngle;\n  var rotationOffset;\n  var bargraphOffset;\n  var tickmarkOffset;\n  var angleRange;\n  var degAngleRange;\n  var angleStep;\n  var angle;\n\n  var sectionAngles = [];\n  var isSectionsVisible = false;\n  var isGradientVisible = false;\n\n  var imageWidth = size;\n  var imageHeight = size;\n\n  var centerX = imageWidth / 2;\n  var centerY = imageHeight / 2;\n\n  // Misc\n  var lcdFontHeight = Math.floor(imageWidth / 10);\n  var stdFont = lcdFontHeight + 'px ' + stdFontName;\n  var lcdFont = lcdFontHeight + 'px ' + lcdFontName;\n  var lcdHeight = imageHeight * 0.13;\n  var lcdWidth = imageWidth * 0.4;\n  var lcdPosX = (imageWidth - lcdWidth) / 2;\n  var lcdPosY = imageHeight / 2 - lcdHeight / 2;\n\n  // Constants\n  var ACTIVE_LED_POS_X = imageWidth * 0.116822;\n  var ACTIVE_LED_POS_Y = imageWidth * 0.485981;\n  var LED_SIZE = Math.ceil(size * 0.093457);\n  //var LED_POS_X = imageWidth * 0.453271;\n  var LED_POS_X = imageWidth * 0.53;\n  var LED_POS_Y = imageHeight * 0.61;\n  var USER_LED_POS_X = gaugeType === GaugeType.TYPE3 ? 0.7 * imageWidth : centerX - LED_SIZE / 2;\n  var USER_LED_POS_Y = gaugeType === GaugeType.TYPE3 ? 0.61 * imageHeight : 0.75 * imageHeight;\n\n  var trendIndicator = TrendState.OFF;\n  var trendSize = size * 0.06;\n  var trendPosX = size * 0.38;\n  var trendPosY = size * 0.57;\n\n  switch (gaugeType.type) {\n    case 'type1':\n      freeAreaAngle = 0;\n      rotationOffset = PI;\n      bargraphOffset = 0;\n      tickmarkOffset = HALF_PI;\n      angleRange = HALF_PI;\n      degAngleRange = angleRange * DEG_FACTOR;\n      angleStep = angleRange / range;\n      break;\n\n    case 'type2':\n      freeAreaAngle = 0;\n      rotationOffset = PI;\n      bargraphOffset = 0;\n      tickmarkOffset = HALF_PI;\n      angleRange = PI;\n      degAngleRange = angleRange * DEG_FACTOR;\n      angleStep = angleRange / range;\n      break;\n\n    case 'type3':\n      freeAreaAngle = 0;\n      rotationOffset = HALF_PI;\n      bargraphOffset = -HALF_PI;\n      tickmarkOffset = 0;\n      angleRange = 1.5 * PI;\n      degAngleRange = angleRange * DEG_FACTOR;\n      angleStep = angleRange / range;\n      break;\n\n    case 'type4':\n      /* falls through */\n    default:\n      freeAreaAngle = 60 * RAD_FACTOR;\n      rotationOffset = HALF_PI + (freeAreaAngle / 2);\n      bargraphOffset = -TWO_PI / 6;\n      tickmarkOffset = 0;\n      angleRange = TWO_PI - freeAreaAngle;\n      degAngleRange = angleRange * DEG_FACTOR;\n      angleStep = angleRange / range;\n      break;\n  }\n\n  // Buffer for the frame\n  var frameBuffer = createBuffer(size, size);\n  var frameContext = frameBuffer.getContext('2d');\n\n  // Buffer for static background painting code\n  var backgroundBuffer = createBuffer(size, size);\n  var backgroundContext = backgroundBuffer.getContext('2d');\n\n  var lcdBuffer;\n\n  // Buffer for active bargraph led\n  var activeLedBuffer = createBuffer(Math.ceil(size * 0.060747), Math.ceil(size * 0.023364));\n  var activeLedContext = activeLedBuffer.getContext('2d');\n\n  // Buffer for led on painting code\n  var ledBufferOn = createBuffer(LED_SIZE, LED_SIZE);\n  var ledContextOn = ledBufferOn.getContext('2d');\n\n  // Buffer for led off painting code\n  var ledBufferOff = createBuffer(LED_SIZE, LED_SIZE);\n  var ledContextOff = ledBufferOff.getContext('2d');\n\n  // Buffer for current led painting code\n  var ledBuffer = ledBufferOff;\n\n  // Buffer for user led on painting code\n  var userLedBufferOn = createBuffer(LED_SIZE, LED_SIZE);\n  var userLedContextOn = userLedBufferOn.getContext('2d');\n\n  // Buffer for user led off painting code\n  var userLedBufferOff = createBuffer(LED_SIZE, LED_SIZE);\n  var userLedContextOff = userLedBufferOff.getContext('2d');\n\n  // Buffer for current user led painting code\n  var userLedBuffer = userLedBufferOff;\n  // Buffer for the background of the led\n  var ledBackground;\n\n  // Buffer for static foreground painting code\n  var foregroundBuffer = createBuffer(size, size);\n  var foregroundContext = foregroundBuffer.getContext('2d');\n\n  // Buffers for trend indicators\n  var trendUpBuffer, trendSteadyBuffer, trendDownBuffer, trendOffBuffer;\n\n  var initialized = false;\n\n  // Tickmark specific private variables\n  var niceMinValue = minValue;\n  var niceMaxValue = maxValue;\n  var niceRange = maxValue - minValue;\n  range = niceMaxValue - niceMinValue;\n  var minorTickSpacing = 0;\n  var majorTickSpacing = 0;\n  var maxNoOfMinorTicks = 10;\n  var maxNoOfMajorTicks = 10;\n\n  // Method to calculate nice values for min, max and range for the tickmarks\n  var calculate = function calculate() {\n    if (niceScale) {\n      niceRange = calcNiceNumber(maxValue - minValue, false);\n      majorTickSpacing = calcNiceNumber(niceRange / (maxNoOfMajorTicks - 1), true);\n      niceMinValue = Math.floor(minValue / majorTickSpacing) * majorTickSpacing;\n      niceMaxValue = Math.ceil(maxValue / majorTickSpacing) * majorTickSpacing;\n      minorTickSpacing = calcNiceNumber(majorTickSpacing / (maxNoOfMinorTicks - 1), true);\n      minValue = niceMinValue;\n      maxValue = niceMaxValue;\n      range = maxValue - minValue;\n    } else {\n      niceRange = (maxValue - minValue);\n      niceMinValue = minValue;\n      niceMaxValue = maxValue;\n      range = niceRange;\n      //minorTickSpacing = 1;\n      //majorTickSpacing = 10;\n      majorTickSpacing = calcNiceNumber(niceRange / (maxNoOfMajorTicks - 1), true);\n      minorTickSpacing = calcNiceNumber(majorTickSpacing / (maxNoOfMinorTicks - 1), true);\n    }\n    // Make sure values are still in range\n    value = value < minValue ? minValue : value > maxValue ? maxValue : value;\n    minMeasuredValue = minMeasuredValue < minValue ? minValue : minMeasuredValue > maxValue ? maxValue : minMeasuredValue;\n    maxMeasuredValue = maxMeasuredValue < minValue ? minValue : maxMeasuredValue > maxValue ? maxValue : maxMeasuredValue;\n    threshold = threshold < minValue ? minValue : threshold > maxValue ? maxValue : threshold;\n\n    switch (gaugeType.type) {\n      case 'type1':\n        freeAreaAngle = 0;\n        rotationOffset = PI;\n        tickmarkOffset = HALF_PI;\n        angleRange = HALF_PI;\n        angleStep = angleRange / range;\n        break;\n\n      case 'type2':\n        freeAreaAngle = 0;\n        rotationOffset = PI;\n        tickmarkOffset = HALF_PI;\n        angleRange = PI;\n        angleStep = angleRange / range;\n        break;\n\n      case 'type3':\n        freeAreaAngle = 0;\n        rotationOffset = HALF_PI;\n        tickmarkOffset = 0;\n        angleRange = 1.5 * PI;\n        angleStep = angleRange / range;\n        break;\n\n      case 'type4': // fall through\n        /* falls through */\n      default:\n        freeAreaAngle = 60 * RAD_FACTOR;\n        rotationOffset = HALF_PI + (freeAreaAngle / 2);\n        tickmarkOffset = 0;\n        angleRange = TWO_PI - freeAreaAngle;\n        angleStep = angleRange / range;\n        break;\n    }\n    angle = rotationOffset + (value - minValue) * angleStep;\n  };\n\n  //********************************* Private methods *********************************\n  // Draw all static painting code to background\n  var init = function(parameters) {\n    parameters = parameters || {};\n    var drawFrame = (undefined === parameters.frame ? false : parameters.frame);\n    var drawBackground = (undefined === parameters.background ? false : parameters.background);\n    var drawLed = (undefined === parameters.led ? false : parameters.led);\n    var drawUserLed = (undefined === parameters.userLed ? false : parameters.userLed);\n    var drawValue = (undefined === parameters.value ? false : parameters.value);\n    var drawForeground = (undefined === parameters.foreground ? false : parameters.foreground);\n    var drawTrend = (undefined === parameters.trend ? false : parameters.trend);\n\n    initialized = true;\n\n    calculate();\n\n    // Create frame in frame buffer (frameBuffer)\n    if (drawFrame && frameVisible) {\n      drawRadialFrameImage(frameContext, frameDesign, centerX, centerY, imageWidth, imageHeight);\n    }\n\n    // Create background in background buffer (backgroundBuffer)\n    if (drawBackground && backgroundVisible) {\n      drawRadialBackgroundImage(backgroundContext, backgroundColor, centerX, centerY, imageWidth, imageHeight);\n\n      // Create custom layer in background buffer (backgroundBuffer)\n      drawRadialCustomImage(backgroundContext, customLayer, centerX, centerY, imageWidth, imageHeight);\n    }\n\n    if (drawLed) {\n      // Draw LED ON in ledBuffer_ON\n      ledContextOn.drawImage(createLedImage(LED_SIZE, 1, ledColor), 0, 0);\n\n      // Draw LED OFF in ledBuffer_OFF\n      ledContextOff.drawImage(createLedImage(LED_SIZE, 0, ledColor), 0, 0);\n\n      // Buffer the background of the led for blinking\n      ledBackground = backgroundContext.getImageData(LED_POS_X, LED_POS_Y, LED_SIZE, LED_SIZE);\n    }\n\n    if (drawUserLed) {\n      // Draw user LED ON in userLedBuffer_ON\n      userLedContextOn.drawImage(createLedImage(Math.ceil(LED_SIZE), 1, userLedColor), 0, 0);\n\n      // Draw user LED OFF in userLedBuffer_OFF\n      userLedContextOff.drawImage(createLedImage(Math.ceil(LED_SIZE), 0, userLedColor), 0, 0);\n    }\n\n    if (drawBackground) {\n      // Create bargraphtrack in background buffer (backgroundBuffer)\n      drawBargraphTrackImage(backgroundContext);\n    }\n\n    // Create tickmarks in background buffer (backgroundBuffer)\n    if (drawBackground && backgroundVisible) {\n      drawTickmarksImage(backgroundContext, labelNumberFormat);\n\n      // Create title in background buffer (backgroundBuffer)\n      drawTitleImage(backgroundContext, imageWidth, imageHeight, titleString, unitString, backgroundColor, true, true);\n    }\n\n    // Create lcd background if selected in background buffer (backgroundBuffer)\n    if (drawBackground && lcdVisible) {\n      lcdBuffer = createLcdBackgroundImage(lcdWidth, lcdHeight, lcdColor);\n      backgroundContext.drawImage(lcdBuffer, lcdPosX, lcdPosY);\n    }\n\n    // Convert Section values into angles\n    isSectionsVisible = false;\n    if (useSectionColors && null !== section && 0 < section.length) {\n      isSectionsVisible = true;\n      var sectionIndex = section.length;\n      sectionAngles = [];\n      do {\n        sectionIndex--;\n        sectionAngles.push({\n          start: (((section[sectionIndex].start + Math.abs(minValue)) / (maxValue - minValue)) * degAngleRange),\n          stop: (((section[sectionIndex].stop + Math.abs(minValue)) / (maxValue - minValue)) * degAngleRange),\n          color: customColorDef(section[sectionIndex].color)\n        });\n      } while (0 < sectionIndex);\n    }\n\n    // Use a gradient for the valueColor?\n    isGradientVisible = false;\n    if (useValueGradient && valueGradient !== null) {\n      // force section colors off!\n      isSectionsVisible = false;\n      isGradientVisible = true;\n    }\n\n    // Create an image of an active led in active led buffer (activeLedBuffer)\n    if (drawValue) {\n      drawActiveLed(activeLedContext, valueColor);\n    }\n\n    // Create foreground in foreground buffer (foregroundBuffer)\n    if (drawForeground && foregroundVisible) {\n      drawRadialForegroundImage(foregroundContext, foregroundType, imageWidth, imageHeight, false);\n    }\n\n    // Create the trend indicator buffers\n    if (drawTrend && trendVisible) {\n      trendUpBuffer = createTrendIndicator(trendSize, TrendState.UP, trendColors);\n      trendSteadyBuffer = createTrendIndicator(trendSize, TrendState.STEADY, trendColors);\n      trendDownBuffer = createTrendIndicator(trendSize, TrendState.DOWN, trendColors);\n      trendOffBuffer = createTrendIndicator(trendSize, TrendState.OFF, trendColors);\n    }\n  };\n\n  var resetBuffers = function(buffers) {\n    buffers = buffers || {};\n    var resetFrame = (undefined === buffers.frame ? false : buffers.frame);\n    var resetBackground = (undefined === buffers.background ? false : buffers.background);\n    var resetLed = (undefined === buffers.led ? false : buffers.led);\n    var resetUserLed = (undefined === buffers.userLed ? false : buffers.userLed);\n    var resetValue = (undefined === buffers.value ? false : buffers.value);\n    var resetForeground = (undefined === buffers.foreground ? false : buffers.foreground);\n\n    // Buffer for the frame\n    if (resetFrame) {\n      frameBuffer.width = size;\n      frameBuffer.height = size;\n      frameContext = frameBuffer.getContext('2d');\n    }\n\n    // Buffer for static background painting code\n    if (resetBackground) {\n      backgroundBuffer.width = size;\n      backgroundBuffer.height = size;\n      backgroundContext = backgroundBuffer.getContext('2d');\n    }\n\n    // Buffer for active bargraph led\n    if (resetValue) {\n      activeLedBuffer.width = Math.ceil(size * 0.060747);\n      activeLedBuffer.height = Math.ceil(size * 0.023364);\n      activeLedContext = activeLedBuffer.getContext('2d');\n    }\n\n    if (resetLed) {\n      // Buffer for led on painting code\n      ledBufferOn.width = Math.ceil(LED_SIZE);\n      ledBufferOn.height = Math.ceil(LED_SIZE);\n      ledContextOn = ledBufferOn.getContext('2d');\n\n      // Buffer for led off painting code\n      ledBufferOff.width = Math.ceil(LED_SIZE);\n      ledBufferOff.height = Math.ceil(LED_SIZE);\n      ledContextOff = ledBufferOff.getContext('2d');\n\n      // Buffer for current led painting code\n      ledBuffer = ledBufferOff;\n    }\n\n    if (resetUserLed) {\n      userLedBufferOn.width = Math.ceil(LED_SIZE);\n      userLedBufferOn.height = Math.ceil(LED_SIZE);\n      userLedContextOn = userLedBufferOn.getContext('2d');\n\n      userLedBufferOff.width = Math.ceil(LED_SIZE);\n      userLedBufferOff.height = Math.ceil(LED_SIZE);\n      userLedContextOff = userLedBufferOff.getContext('2d');\n\n      // Buffer for current user led painting code\n      userLedBuffer = userLedBufferOff;\n    }\n\n    // Buffer for static foreground painting code\n    if (resetForeground) {\n      foregroundBuffer.width = size;\n      foregroundBuffer.height = size;\n      foregroundContext = foregroundBuffer.getContext('2d');\n    }\n  };\n\n  var drawBargraphTrackImage = function(ctx) {\n\n    ctx.save();\n\n    // Bargraphtrack\n\n    // Frame\n    ctx.save();\n    ctx.lineWidth = size * 0.085;\n    ctx.beginPath();\n    ctx.translate(centerX, centerY);\n    ctx.rotate(rotationOffset - 4 * RAD_FACTOR);\n    ctx.translate(-centerX, -centerY);\n    ctx.arc(centerX, centerY, imageWidth * 0.355140, 0, angleRange + 8 * RAD_FACTOR, false);\n    ctx.rotate(-rotationOffset);\n    var ledTrackFrameGradient = ctx.createLinearGradient(0, 0.107476 * imageHeight, 0, 0.897195 * imageHeight);\n    ledTrackFrameGradient.addColorStop(0, '#000000');\n    ledTrackFrameGradient.addColorStop(0.22, '#333333');\n    ledTrackFrameGradient.addColorStop(0.76, '#333333');\n    ledTrackFrameGradient.addColorStop(1, '#cccccc');\n    ctx.strokeStyle = ledTrackFrameGradient;\n    ctx.stroke();\n    ctx.restore();\n\n    // Main\n    ctx.save();\n    ctx.lineWidth = size * 0.075;\n    ctx.beginPath();\n    ctx.translate(centerX, centerY);\n    ctx.rotate(rotationOffset - 4 * RAD_FACTOR);\n    ctx.translate(-centerX, -centerY);\n    ctx.arc(centerX, centerY, imageWidth * 0.355140, 0, angleRange + 8 * RAD_FACTOR, false);\n    ctx.rotate(-rotationOffset);\n    var ledTrackMainGradient = ctx.createLinearGradient(0, 0.112149 * imageHeight, 0, 0.892523 * imageHeight);\n    ledTrackMainGradient.addColorStop(0, '#111111');\n    ledTrackMainGradient.addColorStop(1, '#333333');\n    ctx.strokeStyle = ledTrackMainGradient;\n    ctx.stroke();\n    ctx.restore();\n\n    // Draw inactive leds\n    var ledCenterX = (imageWidth * 0.116822 + imageWidth * 0.060747) / 2;\n    var ledCenterY = (imageWidth * 0.485981 + imageWidth * 0.023364) / 2;\n    var ledOffGradient = ctx.createRadialGradient(ledCenterX, ledCenterY, 0, ledCenterX, ledCenterY, 0.030373 * imageWidth);\n    ledOffGradient.addColorStop(0, '#3c3c3c');\n    ledOffGradient.addColorStop(1, '#323232');\n    var angle = 0;\n    for (angle = 0; angle <= degAngleRange; angle += 5) {\n      ctx.save();\n      ctx.translate(centerX, centerY);\n      ctx.rotate((angle * RAD_FACTOR) + bargraphOffset);\n      ctx.translate(-centerX, -centerY);\n      ctx.beginPath();\n      ctx.rect(imageWidth * 0.116822, imageWidth * 0.485981, imageWidth * 0.060747, imageWidth * 0.023364);\n      ctx.closePath();\n      ctx.fillStyle = ledOffGradient;\n      ctx.fill();\n      ctx.restore();\n    }\n\n    ctx.restore();\n  };\n\n  var drawActiveLed = function(ctx, color) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    ctx.closePath();\n    var ledCenterX = (ctx.canvas.width / 2);\n    var ledCenterY = (ctx.canvas.height / 2);\n    var ledGradient = mainCtx.createRadialGradient(ledCenterX, ledCenterY, 0, ledCenterX, ledCenterY, ctx.canvas.width / 2);\n    ledGradient.addColorStop(0, color.light.getRgbaColor());\n    ledGradient.addColorStop(1, color.dark.getRgbaColor());\n    ctx.fillStyle = ledGradient;\n    ctx.fill();\n    ctx.restore();\n  };\n\n  var drawLcdText = function(ctx, value) {\n\n    ctx.save();\n    ctx.textAlign = 'right';\n    ctx.strokeStyle = lcdColor.textColor;\n    ctx.fillStyle = lcdColor.textColor;\n\n    if (lcdColor === LcdColor.STANDARD || lcdColor === LcdColor.STANDARD_GREEN) {\n      ctx.shadowColor = 'gray';\n      ctx.shadowOffsetX = imageWidth * 0.007;\n      ctx.shadowOffsetY = imageWidth * 0.007;\n      ctx.shadowBlur = imageWidth * 0.007;\n    }\n\n    if (digitalFont) {\n      ctx.font = lcdFont;\n    } else {\n      ctx.font = stdFont;\n    }\n    ctx.fillText(value.toFixed(lcdDecimals), lcdPosX + lcdWidth - lcdWidth * 0.05, lcdPosY + lcdHeight * 0.5 + lcdFontHeight * 0.38, lcdWidth * 0.9);\n\n    ctx.restore();\n  };\n\n  var drawTickmarksImage = function(ctx, labelNumberFormat) {\n    var alpha = rotationOffset, // Tracks total rotation\n      rotationStep = angleStep * minorTickSpacing,\n      textRotationAngle,\n      fontSize = Math.ceil(imageWidth * 0.04),\n      valueCounter = minValue,\n      majorTickCounter = maxNoOfMinorTicks - 1,\n      TEXT_TRANSLATE_X = imageWidth * 0.28,\n      TEXT_WIDTH = imageWidth * 0.1,\n      MAX_VALUE_ROUNDED = parseFloat(maxValue.toFixed(2)),\n      i;\n\n    backgroundColor.labelColor.setAlpha(1);\n    ctx.save();\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.font = fontSize + 'px ' + stdFontName;\n    ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();\n    ctx.fillStyle = backgroundColor.labelColor.getRgbaColor();\n    ctx.translate(centerX, centerY);\n    ctx.rotate(rotationOffset);\n\n    if (gaugeType.type === 'type1' || gaugeType.type === 'type2') {\n      TEXT_WIDTH = imageWidth * 0.0375;\n    }\n\n    for (i = minValue; parseFloat(i.toFixed(2)) <= MAX_VALUE_ROUNDED; i += minorTickSpacing) {\n      textRotationAngle = +rotationStep + HALF_PI;\n      majorTickCounter++;\n      // Draw major tickmarks\n      if (majorTickCounter === maxNoOfMinorTicks) {\n        ctx.save();\n        ctx.translate(TEXT_TRANSLATE_X, 0);\n\n        switch (tickLabelOrientation.type) {\n          case 'horizontal':\n            textRotationAngle = -alpha;\n            break;\n\n          case 'tangent':\n            textRotationAngle = (alpha <= HALF_PI + PI ? PI : 0);\n            break;\n\n          case 'normal':\n            /* falls through */\n          default:\n            textRotationAngle = HALF_PI;\n            break;\n        }\n        ctx.rotate(textRotationAngle);\n\n        switch (labelNumberFormat.format) {\n          case 'fractional':\n            ctx.fillText((valueCounter.toFixed(fractionalScaleDecimals)), 0, 0, TEXT_WIDTH);\n            break;\n\n          case 'scientific':\n            ctx.fillText((valueCounter.toPrecision(2)), 0, 0, TEXT_WIDTH);\n            break;\n\n          case 'standard':\n            /* falls through */\n          default:\n            ctx.fillText((valueCounter.toFixed(0)), 0, 0, TEXT_WIDTH);\n            break;\n        }\n        ctx.translate(-TEXT_TRANSLATE_X, 0);\n        ctx.restore();\n\n        valueCounter += majorTickSpacing;\n        majorTickCounter = 0;\n        ctx.rotate(rotationStep);\n        alpha += rotationStep;\n        continue;\n      }\n      ctx.rotate(rotationStep);\n      alpha += rotationStep;\n    }\n\n    ctx.translate(-centerX, -centerY);\n    ctx.restore();\n  };\n\n  var blink = function(blinking) {\n    if (blinking) {\n      ledTimerId = setInterval(toggleAndRepaintLed, 1000);\n    } else {\n      clearInterval(ledTimerId);\n      ledBuffer = ledBufferOff;\n    }\n  };\n\n  var blinkUser = function(blinking) {\n    if (blinking) {\n      userLedTimerId = setInterval(toggleAndRepaintUserLed, 1000);\n    } else {\n      clearInterval(userLedTimerId);\n      userLedBuffer = userLedBufferOff;\n    }\n  };\n\n  var toggleAndRepaintLed = function() {\n    if (ledVisible) {\n      if (ledBuffer === ledBufferOn) {\n        ledBuffer = ledBufferOff;\n      } else {\n        ledBuffer = ledBufferOn;\n      }\n      if (!repainting) {\n        repainting = true;\n        requestAnimFrame(self.repaint);\n      }\n    }\n  };\n\n  var toggleAndRepaintUserLed = function() {\n    if (userLedVisible) {\n      if (userLedBuffer === userLedBufferOn) {\n        userLedBuffer = userLedBufferOff;\n      } else {\n        userLedBuffer = userLedBufferOn;\n      }\n      if (!repainting) {\n        repainting = true;\n        requestAnimFrame(self.repaint);\n      }\n    }\n  };\n\n  //********************************* Public methods *********************************\n  this.setValue = function(newValue) {\n    newValue = parseFloat(newValue);\n    var targetValue = (newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue));\n    if (value !== targetValue) {\n      value = targetValue;\n      if ((value >= threshold && !ledBlinking && thresholdRising) ||\n        (value <= threshold && !ledBlinking && !thresholdRising)) {\n        ledBlinking = true;\n        blink(ledBlinking);\n        if (playAlarm) {\n          audioElement.play();\n        }\n      } else if ((value < threshold && ledBlinking && thresholdRising) ||\n        (value > threshold && ledBlinking && !thresholdRising)) {\n        ledBlinking = false;\n        blink(ledBlinking);\n        if (playAlarm) {\n          audioElement.pause();\n        }\n      }\n      this.repaint();\n    }\n    return this;\n  };\n\n  this.getValue = function() {\n    return value;\n  };\n\n  this.setValueAnimated = function(newValue, callback) {\n    newValue = parseFloat(newValue);\n    var targetValue = (newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue)),\n      gauge = this,\n      time;\n\n    if (value !== targetValue) {\n      if (undefined !== tween && tween.isPlaying) {\n        tween.stop();\n      }\n\n      time = fullScaleDeflectionTime * Math.abs(targetValue - value) / (maxValue - minValue);\n      time = Math.max(time, fullScaleDeflectionTime / 5);\n      tween = new Tween({}, '', Tween.regularEaseInOut, value, targetValue, time);\n      //tween = new Tween({}, '', Tween.regularEaseInOut, value, targetValue, 1);\n      //tween = new Tween(new Object(), '', Tween.strongEaseInOut, this.value, targetValue, 1);\n      tween.onMotionChanged = function(event) {\n        value = event.target._pos;\n\n        if ((value >= threshold && !ledBlinking && thresholdRising) ||\n          (value <= threshold && !ledBlinking && !thresholdRising)) {\n          ledBlinking = true;\n          blink(ledBlinking);\n          if (playAlarm) {\n            audioElement.play();\n          }\n        } else if ((value < threshold && ledBlinking && thresholdRising) ||\n          (value > threshold && ledBlinking && !thresholdRising)) {\n          ledBlinking = false;\n          blink(ledBlinking);\n          if (playAlarm) {\n            audioElement.pause();\n          }\n        }\n        if (!repainting) {\n          repainting = true;\n          requestAnimFrame(gauge.repaint);\n        }\n      };\n\n      // do we have a callback function to process?\n      if (callback && typeof(callback) === \"function\") {\n        tween.onMotionFinished = callback;\n      }\n\n      tween.start();\n    }\n    return this;\n  };\n\n  this.setFrameDesign = function(newFrameDesign) {\n    resetBuffers({\n      frame: true\n    });\n    frameDesign = newFrameDesign;\n    init({\n      frame: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setBackgroundColor = function(newBackgroundColor) {\n    resetBuffers({\n      background: true,\n      led: true\n    });\n    backgroundColor = newBackgroundColor;\n    init({\n      background: true,\n      led: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setForegroundType = function(newForegroundType) {\n    resetBuffers({\n      foreground: true\n    });\n    foregroundType = newForegroundType;\n    init({\n      foreground: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setValueColor = function(newValueColor) {\n    resetBuffers({\n      value: true\n    });\n    valueColor = newValueColor;\n    init({\n      value: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setLedColor = function(newLedColor) {\n    resetBuffers({\n      led: true\n    });\n    ledColor = newLedColor;\n    init({\n      led: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setUserLedColor = function(newLedColor) {\n    resetBuffers({\n      userLed: true\n    });\n    userLedColor = newLedColor;\n    init({\n      userLed: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.toggleUserLed = function() {\n    if (userLedBuffer === userLedBufferOn) {\n      userLedBuffer = userLedBufferOff;\n    } else {\n      userLedBuffer = userLedBufferOn;\n    }\n    this.repaint();\n    return this;\n  };\n\n  this.setUserLedOnOff = function(on) {\n    if (true === on) {\n      userLedBuffer = userLedBufferOn;\n    } else {\n      userLedBuffer = userLedBufferOff;\n    }\n    this.repaint();\n    return this;\n  };\n\n  this.blinkUserLed = function(blink) {\n    if (blink) {\n      if (!userLedBlinking) {\n        blinkUser(true);\n        userLedBlinking = true;\n      }\n    } else {\n      if (userLedBlinking) {\n        clearInterval(userLedTimerId);\n        userLedBlinking = false;\n      }\n    }\n    return this;\n  };\n\n  this.setLedVisible = function(visible) {\n    ledVisible = !!visible;\n    this.repaint();\n    return this;\n  };\n\n  this.setUserLedVisible = function(visible) {\n    userLedVisible = !!visible;\n    this.repaint();\n    return this;\n  };\n\n  this.setLcdColor = function(newLcdColor) {\n    lcdColor = newLcdColor;\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setLcdDecimals = function(decimals) {\n    lcdDecimals = parseInt(decimals, 10);\n    this.repaint();\n    return this;\n  };\n\n  this.setSection = function(areaSec) {\n    section = areaSec;\n    init();\n    this.repaint();\n    return this;\n  };\n\n  this.setSectionActive = function(value) {\n    useSectionColors = value;\n    init();\n    this.repaint();\n    return this;\n  };\n\n  this.setGradient = function(grad) {\n    valueGradient = grad;\n    init();\n    this.repaint();\n    return this;\n  };\n\n  this.setGradientActive = function(value) {\n    useValueGradient = value;\n    init();\n    this.repaint();\n    return this;\n  };\n\n  this.setMinValue = function(newValue) {\n    minValue = newValue;\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.getMinValue = function() {\n    return minValue;\n  };\n\n  this.setMaxValue = function(newValue) {\n    maxValue = newValue;\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.getMaxValue = function() {\n    return maxValue;\n  };\n\n  this.setThreshold = function(newValue) {\n    newValue = parseFloat(newValue);\n    var targetValue = newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue);\n    threshold = targetValue;\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setThresholdRising = function(rising) {\n    thresholdRising = !!rising;\n    // reset existing threshold alerts\n    ledBlinking = !ledBlinking;\n    blink(ledBlinking);\n    this.repaint();\n    return this;\n  };\n\n  this.setTitleString = function(title) {\n    titleString = title;\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setUnitString = function(unit) {\n    unitString = unit;\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setTrend = function(newValue) {\n    trendIndicator = newValue;\n    this.repaint();\n    return this;\n  };\n\n  this.setTrendVisible = function(visible) {\n    trendVisible = !!visible;\n    this.repaint();\n    return this;\n  };\n\n  this.setFractionalScaleDecimals = function(decimals) {\n    fractionalScaleDecimals = parseInt(decimals, 10);\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n  };\n\n  this.setLabelNumberFormat = function(format) {\n    labelNumberFormat = format;\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.repaint = function() {\n    var activeLedAngle = ((value - minValue) / (maxValue - minValue)) * degAngleRange,\n      activeLedColor,\n      lastActiveLedColor = valueColor,\n      angle, i,\n      currentValue,\n      gradRange,\n      fraction;\n\n    if (!initialized) {\n      init({\n        frame: true,\n        background: true,\n        led: true,\n        userLed: true,\n        value: true,\n        trend: true,\n        foreground: true\n      });\n    }\n\n    mainCtx.clearRect(0, 0, size, size);\n\n    // Draw frame image\n    if (frameVisible) {\n      mainCtx.drawImage(frameBuffer, 0, 0);\n    }\n\n    // Draw buffered image to visible canvas\n    mainCtx.drawImage(backgroundBuffer, 0, 0);\n\n    // Draw active leds\n    for (angle = 0; angle <= activeLedAngle; angle += 5) {\n      //check for LED color\n      activeLedColor = valueColor;\n      // Use a gradient for value colors?\n      if (isGradientVisible) {\n        // Convert angle back to value\n        currentValue = minValue + (angle / degAngleRange) * (maxValue - minValue);\n        gradRange = valueGradient.getEnd() - valueGradient.getStart();\n        fraction = (currentValue - minValue) / gradRange;\n        fraction = Math.max(Math.min(fraction, 1), 0);\n        activeLedColor = customColorDef(valueGradient.getColorAt(fraction).getRgbaColor());\n      } else if (isSectionsVisible) {\n        for (i = 0; i < sectionAngles.length; i++) {\n          if (angle >= sectionAngles[i].start && angle < sectionAngles[i].stop) {\n            activeLedColor = sectionAngles[i].color;\n            break;\n          }\n        }\n      }\n      // Has LED color changed? If so redraw the buffer\n      if (lastActiveLedColor.medium.getHexColor() !== activeLedColor.medium.getHexColor()) {\n        drawActiveLed(activeLedContext, activeLedColor);\n        lastActiveLedColor = activeLedColor;\n      }\n      mainCtx.save();\n      mainCtx.translate(centerX, centerY);\n      mainCtx.rotate((angle * RAD_FACTOR) + bargraphOffset);\n      mainCtx.translate(-centerX, -centerY);\n      mainCtx.drawImage(activeLedBuffer, ACTIVE_LED_POS_X, ACTIVE_LED_POS_Y);\n      mainCtx.restore();\n    }\n\n    // Draw lcd display\n    if (lcdVisible) {\n      drawLcdText(mainCtx, value);\n    }\n\n    // Draw led\n    if (ledVisible) {\n      mainCtx.drawImage(ledBuffer, LED_POS_X, LED_POS_Y);\n    }\n\n    // Draw user led\n    if (userLedVisible) {\n      mainCtx.drawImage(userLedBuffer, USER_LED_POS_X, USER_LED_POS_Y);\n    }\n\n    // Draw the trend indicator\n    if (trendVisible) {\n      switch (trendIndicator.state) {\n        case 'up':\n          mainCtx.drawImage(trendUpBuffer, trendPosX, trendPosY);\n          break;\n        case 'steady':\n          mainCtx.drawImage(trendSteadyBuffer, trendPosX, trendPosY);\n          break;\n        case 'down':\n          mainCtx.drawImage(trendDownBuffer, trendPosX, trendPosY);\n          break;\n        case 'off':\n          mainCtx.drawImage(trendOffBuffer, trendPosX, trendPosY);\n          break;\n      }\n    }\n\n    // Draw foreground\n    if (foregroundVisible) {\n      mainCtx.drawImage(foregroundBuffer, 0, 0);\n    }\n\n    repainting = false;\n  };\n\n  // Visualize the component\n  this.repaint();\n\n  return this;\n};\n\nexport default radialBargraph;\n","import Tween from \"./tween.js\";\nimport drawPointerImage from \"./drawPointerImage\";\nimport drawRadialFrameImage from \"./drawRadialFrameImage\";\nimport drawRadialBackgroundImage from \"./drawRadialBackgroundImage\";\nimport drawRadialForegroundImage from \"./drawRadialForegroundImage\";\nimport createKnobImage from \"./createKnobImage\";\nimport createLedImage from \"./createLedImage\";\nimport createMeasuredValueImage from \"./createMeasuredValueImage\";\nimport {\ncalcNiceNumber, \ncreateBuffer, \nrequestAnimFrame, \ngetCanvasContext,\nHALF_PI,\nPI,\ndoc,\nstdFontName,\n} from \"./tools\";\n\nimport {\n  backgroundColor as BackgroundColor,\n  lcdColor as LcdColor,\n  color as ColorDef,\n  ledColor as LedColor,\n  gaugeType as GaugeType,\n  orientation as Orientation,\n  knobType as KnobType,\n  knobStyle as KnobStyle,\n  frameDesign as FrameDesign,\n  pointerType as PointerType,\n  foregroundType as ForegroundType,\n  labelNumberFormat as LabelNumberFormat,\n  tickLabelOrientation as TickLabelOrientation,\n  trendState as TrendState,\n  } from \"./definitions\";\n\nvar radialVertical = function(canvas, parameters) {\n  parameters = parameters || {};\n  var orientation = (undefined === parameters.orientation ? Orientation.NORTH : parameters.orientation),\n    size = (undefined === parameters.size ? 0 : parameters.size),\n    minValue = (undefined === parameters.minValue ? 0 : parameters.minValue),\n    maxValue = (undefined === parameters.maxValue ? (minValue + 100) : parameters.maxValue),\n    niceScale = (undefined === parameters.niceScale ? true : parameters.niceScale),\n    threshold = (undefined === parameters.threshold ? (maxValue - minValue) / 2 + minValue : parameters.threshold),\n    section = (undefined === parameters.section ? null : parameters.section),\n    area = (undefined === parameters.area ? null : parameters.area),\n    titleString = (undefined === parameters.titleString ? '' : parameters.titleString),\n    unitString = (undefined === parameters.unitString ? '' : parameters.unitString),\n    frameDesign = (undefined === parameters.frameDesign ? FrameDesign.METAL : parameters.frameDesign),\n    frameVisible = (undefined === parameters.frameVisible ? true : parameters.frameVisible),\n    backgroundColor = (undefined === parameters.backgroundColor ? BackgroundColor.DARK_GRAY : parameters.backgroundColor),\n    backgroundVisible = (undefined === parameters.backgroundVisible ? true : parameters.backgroundVisible),\n    pointerType = (undefined === parameters.pointerType ? PointerType.TYPE1 : parameters.pointerType),\n    pointerColor = (undefined === parameters.pointerColor ? ColorDef.RED : parameters.pointerColor),\n    knobType = (undefined === parameters.knobType ? KnobType.STANDARD_KNOB : parameters.knobType),\n    knobStyle = (undefined === parameters.knobStyle ? KnobStyle.SILVER : parameters.knobStyle),\n    ledColor = (undefined === parameters.ledColor ? LedColor.RED_LED : parameters.ledColor),\n    ledVisible = (undefined === parameters.ledVisible ? true : parameters.ledVisible),\n    thresholdVisible = (undefined === parameters.thresholdVisible ? true : parameters.thresholdVisible),\n    thresholdRising = (undefined === parameters.thresholdRising ? true : parameters.thresholdRising),\n    minMeasuredValueVisible = (undefined === parameters.minMeasuredValueVisible ? false : parameters.minMeasuredValueVisible),\n    maxMeasuredValueVisible = (undefined === parameters.maxMeasuredValueVisible ? false : parameters.maxMeasuredValueVisible),\n    foregroundType = (undefined === parameters.foregroundType ? ForegroundType.TYPE1 : parameters.foregroundType),\n    foregroundVisible = (undefined === parameters.foregroundVisible ? true : parameters.foregroundVisible),\n    labelNumberFormat = (undefined === parameters.labelNumberFormat ? LabelNumberFormat.STANDARD : parameters.labelNumberFormat),\n    playAlarm = (undefined === parameters.playAlarm ? false : parameters.playAlarm),\n    alarmSound = (undefined === parameters.alarmSound ? false : parameters.alarmSound),\n    fullScaleDeflectionTime = (undefined === parameters.fullScaleDeflectionTime ? 2.5 : parameters.fullScaleDeflectionTime);\n\n  // Get the canvas context and clear it\n  var mainCtx = getCanvasContext(canvas);\n  // Has a size been specified?\n  if (size === 0) {\n    size = Math.min(mainCtx.canvas.width, mainCtx.canvas.height);\n  }\n\n  // Set the size - also clears the canvas\n  mainCtx.canvas.width = size;\n  mainCtx.canvas.height = size;\n\n  // Create audio tag for alarm sound\n  if (playAlarm && alarmSound !== false) {\n    var audioElement = doc.createElement('audio');\n    audioElement.setAttribute('src', alarmSound);\n    audioElement.setAttribute('preload', 'auto');\n  }\n  var gaugeType = GaugeType.TYPE5;\n\n  var self = this;\n  var value = minValue;\n\n  // Properties\n  var minMeasuredValue = maxValue;\n  var maxMeasuredValue = minValue;\n  var imageWidth = size;\n  var imageHeight = size;\n\n  var ledBlinking = false;\n\n  var ledTimerId = 0;\n  var tween;\n  var repainting = false;\n\n  // Tickmark specific private variables\n  var niceMinValue = minValue;\n  var niceMaxValue = maxValue;\n  var niceRange = maxValue - minValue;\n  var range = niceMaxValue - niceMinValue;\n  var minorTickSpacing = 0;\n  var majorTickSpacing = 0;\n  var maxNoOfMinorTicks = 10;\n  var maxNoOfMajorTicks = 10;\n\n  var freeAreaAngle = 0;\n  var rotationOffset = 1.25 * PI;\n  var tickmarkOffset = 1.25 * PI;\n  var angleRange = HALF_PI;\n  var angleStep = angleRange / range;\n  var shadowOffset = imageWidth * 0.006;\n  var pointerOffset = imageWidth * 1.17 / 2;\n\n  var initialized = false;\n\n  var angle = rotationOffset + (value - minValue) * angleStep;\n\n  var centerX = imageWidth / 2;\n  var centerY = imageHeight * 0.733644;\n\n  // Misc\n  var ledPosX = 0.455 * imageWidth;\n  var ledPosY = 0.51 * imageHeight;\n\n  // Method to calculate nice values for min, max and range for the tickmarks\n  var calculate = function calculate() {\n    if (niceScale) {\n      niceRange = calcNiceNumber(maxValue - minValue, false);\n      majorTickSpacing = calcNiceNumber(niceRange / (maxNoOfMajorTicks - 1), true);\n      niceMinValue = Math.floor(minValue / majorTickSpacing) * majorTickSpacing;\n      niceMaxValue = Math.ceil(maxValue / majorTickSpacing) * majorTickSpacing;\n      minorTickSpacing = calcNiceNumber(majorTickSpacing / (maxNoOfMinorTicks - 1), true);\n      minValue = niceMinValue;\n      maxValue = niceMaxValue;\n      range = maxValue - minValue;\n    } else {\n      niceRange = (maxValue - minValue);\n      niceMinValue = minValue;\n      niceMaxValue = maxValue;\n      range = niceRange;\n      minorTickSpacing = 1;\n      majorTickSpacing = 10;\n    }\n    // Make sure values are still in range\n    value = value < minValue ? minValue : value > maxValue ? maxValue : value;\n    minMeasuredValue = minMeasuredValue < minValue ? minValue : minMeasuredValue > maxValue ? maxValue : minMeasuredValue;\n    maxMeasuredValue = maxMeasuredValue < minValue ? minValue : maxMeasuredValue > maxValue ? maxValue : maxMeasuredValue;\n    threshold = threshold < minValue ? minValue : threshold > maxValue ? maxValue : threshold;\n\n    freeAreaAngle = 0;\n    rotationOffset = 1.25 * PI;\n    tickmarkOffset = 1.25 * PI;\n    angleRange = HALF_PI;\n    angleStep = angleRange / range;\n\n    angle = rotationOffset + (value - minValue) * angleStep;\n  };\n\n  // **************   Buffer creation  ********************\n  // Buffer for the frame\n  var frameBuffer = createBuffer(size, size);\n  var frameContext = frameBuffer.getContext('2d');\n\n  // Buffer for the background\n  var backgroundBuffer = createBuffer(size, size);\n  var backgroundContext = backgroundBuffer.getContext('2d');\n\n  // Buffer for led on painting code\n  var ledBufferOn = createBuffer(size * 0.093457, size * 0.093457);\n  var ledContextOn = ledBufferOn.getContext('2d');\n\n  // Buffer for led off painting code\n  var ledBufferOff = createBuffer(size * 0.093457, size * 0.093457);\n  var ledContextOff = ledBufferOff.getContext('2d');\n\n  // Buffer for current led painting code\n  var ledBuffer = ledBufferOff;\n\n  // Buffer for the minMeasuredValue indicator\n  var minMeasuredValueBuffer = createBuffer(Math.ceil(size * 0.028037), Math.ceil(size * 0.028037));\n  var minMeasuredValueCtx = minMeasuredValueBuffer.getContext('2d');\n\n  // Buffer for the maxMeasuredValue indicator\n  var maxMeasuredValueBuffer = createBuffer(Math.ceil(size * 0.028037), Math.ceil(size * 0.028037));\n  var maxMeasuredValueCtx = maxMeasuredValueBuffer.getContext('2d');\n\n  // Buffer for pointer image painting code\n  var pointerBuffer = createBuffer(size, size);\n  var pointerContext = pointerBuffer.getContext('2d');\n\n  // Buffer for static foreground painting code\n  var foregroundBuffer = createBuffer(size, size);\n  var foregroundContext = foregroundBuffer.getContext('2d');\n\n  // **************   Image creation  ********************\n  var drawPostsImage = function(ctx) {\n    if ('type5' === gaugeType.type) {\n      ctx.save();\n      if (orientation.type === 'west') {\n        // Min post\n        ctx.drawImage(createKnobImage(Math.ceil(imageHeight * 0.037383), KnobType.STANDARD_KNOB, knobStyle), imageWidth * 0.44, imageHeight * 0.80);\n        // Max post\n        ctx.drawImage(createKnobImage(Math.ceil(imageHeight * 0.037383), KnobType.STANDARD_KNOB, knobStyle), imageWidth * 0.44, imageHeight * 0.16);\n      } else if (orientation.type === 'east') {\n        // Min post\n        ctx.drawImage(createKnobImage(Math.ceil(imageHeight * 0.037383), KnobType.STANDARD_KNOB, knobStyle), imageWidth * 0.52, imageHeight * 0.80);\n        // Max post\n        ctx.drawImage(createKnobImage(Math.ceil(imageHeight * 0.037383), KnobType.STANDARD_KNOB, knobStyle), imageWidth * 0.52, imageHeight * 0.16);\n      } else {\n        // Min post\n        ctx.drawImage(createKnobImage(Math.ceil(imageHeight * 0.037383), KnobType.STANDARD_KNOB, knobStyle), imageWidth * 0.2 - imageHeight * 0.037383, imageHeight * 0.446666);\n        // Max post\n        ctx.drawImage(createKnobImage(Math.ceil(imageHeight * 0.037383), KnobType.STANDARD_KNOB, knobStyle), imageWidth * 0.8, imageHeight * 0.446666);\n      }\n      ctx.restore();\n    }\n  };\n\n  var createThresholdImage = function() {\n    var thresholdBuffer = doc.createElement('canvas');\n    thresholdBuffer.width = Math.ceil(size * 0.046728);\n    thresholdBuffer.height = Math.ceil(thresholdBuffer.width * 0.9);\n    var thresholdCtx = thresholdBuffer.getContext('2d');\n\n    thresholdCtx.save();\n    var gradThreshold = thresholdCtx.createLinearGradient(0, 0.1, 0, thresholdBuffer.height * 0.9);\n    gradThreshold.addColorStop(0, '#520000');\n    gradThreshold.addColorStop(0.3, '#fc1d00');\n    gradThreshold.addColorStop(0.59, '#fc1d00');\n    gradThreshold.addColorStop(1, '#520000');\n    thresholdCtx.fillStyle = gradThreshold;\n\n    thresholdCtx.beginPath();\n    thresholdCtx.moveTo(thresholdBuffer.width * 0.5, 0.1);\n    thresholdCtx.lineTo(thresholdBuffer.width * 0.9, thresholdBuffer.height * 0.9);\n    thresholdCtx.lineTo(thresholdBuffer.width * 0.1, thresholdBuffer.height * 0.9);\n    thresholdCtx.lineTo(thresholdBuffer.width * 0.5, 0.1);\n    thresholdCtx.closePath();\n\n    thresholdCtx.fill();\n    thresholdCtx.strokeStyle = '#FFFFFF';\n    thresholdCtx.stroke();\n\n    thresholdCtx.restore();\n\n    return thresholdBuffer;\n  };\n\n  var drawAreaSectionImage = function(ctx, start, stop, color, filled) {\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.fillStyle = color;\n    ctx.lineWidth = imageWidth * 0.035;\n    var startAngle = (angleRange / range * start - angleRange / range * minValue);\n    var stopAngle = startAngle + (stop - start) / (range / angleRange);\n    ctx.translate(centerX, centerY);\n    ctx.rotate(rotationOffset);\n    ctx.beginPath();\n    if (filled) {\n      ctx.moveTo(0, 0);\n      ctx.arc(0, 0, imageWidth * 0.365 - ctx.lineWidth / 2, startAngle, stopAngle, false);\n    } else {\n      ctx.arc(0, 0, imageWidth * 0.365, startAngle, stopAngle, false);\n    }\n    if (filled) {\n      ctx.moveTo(0, 0);\n      ctx.fill();\n    } else {\n      ctx.stroke();\n    }\n\n    ctx.translate(-centerX, -centerY);\n    ctx.restore();\n  };\n\n  var drawTitleImage = function(ctx) {\n    var titleWidth, unitWidth;\n    ctx.save();\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();\n    ctx.fillStyle = backgroundColor.labelColor.getRgbaColor();\n\n    ctx.font = 0.046728 * imageWidth + 'px ' + stdFontName;\n    titleWidth = ctx.measureText(titleString).width;\n    ctx.fillText(titleString, (imageWidth - titleWidth) / 2, imageHeight * 0.4, imageWidth * 0.3);\n    unitWidth = ctx.measureText(unitString).width;\n    ctx.fillText(unitString, (imageWidth - unitWidth) / 2, imageHeight * 0.47, imageWidth * 0.2);\n\n    ctx.restore();\n  };\n\n  var drawTickmarksImage = function(ctx, labelNumberFormat) {\n    backgroundColor.labelColor.setAlpha(1);\n    ctx.save();\n\n    if (Orientation.WEST === orientation) {\n      ctx.translate(centerX, centerX);\n      ctx.rotate(-HALF_PI);\n      ctx.translate(-centerX, -centerX);\n    }\n    if (Orientation.EAST === orientation) {\n      ctx.translate(centerX, centerX);\n      ctx.rotate(HALF_PI);\n      ctx.translate(-centerX, -centerX);\n    }\n\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    var fontSize = Math.ceil(imageWidth * 0.04);\n    ctx.font = fontSize + 'px ' + stdFontName;\n    ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();\n    ctx.fillStyle = backgroundColor.labelColor.getRgbaColor();\n    ctx.translate(centerX, centerY);\n    ctx.rotate(rotationOffset);\n    var rotationStep = angleStep * minorTickSpacing;\n    var textRotationAngle;\n\n    var valueCounter = minValue;\n    var majorTickCounter = maxNoOfMinorTicks - 1;\n\n    var OUTER_POINT = imageWidth * 0.44;\n    var MAJOR_INNER_POINT = imageWidth * 0.41;\n    var MED_INNER_POINT = imageWidth * 0.415;\n    var MINOR_INNER_POINT = imageWidth * 0.42;\n    var TEXT_TRANSLATE_X = imageWidth * 0.48;\n    var TEXT_WIDTH = imageWidth * 0.04;\n    var HALF_MAX_NO_OF_MINOR_TICKS = maxNoOfMinorTicks / 2;\n    var MAX_VALUE_ROUNDED = parseFloat(maxValue.toFixed(2));\n    var i;\n\n    for (i = minValue; parseFloat(i.toFixed(2)) <= MAX_VALUE_ROUNDED; i += minorTickSpacing) {\n      textRotationAngle = +rotationStep + HALF_PI;\n      majorTickCounter++;\n      // Draw major tickmarks\n      if (majorTickCounter === maxNoOfMinorTicks) {\n        ctx.lineWidth = 1.5;\n        ctx.beginPath();\n        ctx.moveTo(OUTER_POINT, 0);\n        ctx.lineTo(MAJOR_INNER_POINT, 0);\n        ctx.closePath();\n        ctx.stroke();\n        ctx.save();\n        ctx.translate(TEXT_TRANSLATE_X, 0);\n        ctx.rotate(textRotationAngle);\n        switch (labelNumberFormat.format) {\n          case 'fractional':\n            ctx.fillText((valueCounter.toFixed(2)), 0, 0, TEXT_WIDTH);\n            break;\n\n          case 'scientific':\n            ctx.fillText((valueCounter.toPrecision(2)), 0, 0, TEXT_WIDTH);\n            break;\n\n          case 'standard':\n            /* falls through */\n          default:\n            ctx.fillText((valueCounter.toFixed(0)), 0, 0, TEXT_WIDTH);\n            break;\n        }\n        ctx.translate(-TEXT_TRANSLATE_X, 0);\n        ctx.restore();\n\n        valueCounter += majorTickSpacing;\n        majorTickCounter = 0;\n        ctx.rotate(rotationStep);\n        continue;\n      }\n\n      // Draw tickmark every minor tickmark spacing\n      if (0 === maxNoOfMinorTicks % 2 && majorTickCounter === (HALF_MAX_NO_OF_MINOR_TICKS)) {\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        ctx.moveTo(OUTER_POINT, 0);\n        ctx.lineTo(MED_INNER_POINT, 0);\n        ctx.closePath();\n        ctx.stroke();\n      } else {\n        ctx.lineWidth = 0.5;\n        ctx.beginPath();\n        ctx.moveTo(OUTER_POINT, 0);\n        ctx.lineTo(MINOR_INNER_POINT, 0);\n        ctx.closePath();\n        ctx.stroke();\n      }\n      ctx.rotate(rotationStep);\n    }\n\n    /*\n     // Logarithmic scale\n     var tmp = 0.1;\n     var minValueLog10 = 0.1;\n     var maxValueLog10 = parseInt(Math.pow(10, Math.ceil(Math.log10(maxValue))));\n     var drawLabel = true;\n     angleStep = angleRange / (maxValueLog10 - minValueLog10)\n     for (var scaleFactor = minValueLog10 ; scaleFactor <= maxValueLog10 ; scaleFactor *= 10)\n     {\n     for (var i = parseFloat((1 * scaleFactor).toFixed(1)) ; i < parseFloat((10 * scaleFactor).toFixed(1)) ; i += scaleFactor)\n     {\n     textRotationAngle =+ rotationStep + HALF_PI;\n\n     if(drawLabel)\n     {\n     ctx.lineWidth = 1.5;\n     ctx.beginPath();\n     ctx.moveTo(imageWidth * 0.38,0);\n     ctx.lineTo(imageWidth * 0.35,0);\n     ctx.closePath();\n     ctx.stroke();\n     ctx.save();\n     ctx.translate(imageWidth * 0.31, 0);\n     ctx.rotate(textRotationAngle);\n     ctx.fillText(parseFloat((i).toFixed(1)), 0, 0, imageWidth * 0.0375);\n     ctx.translate(-imageWidth * 0.31, 0);\n     ctx.restore();\n     drawLabel = false;\n     }\n     else\n     {\n     ctx.lineWidth = 0.5;\n     ctx.beginPath();\n     ctx.moveTo(imageWidth * 0.38,0);\n     ctx.lineTo(imageWidth * 0.36,0);\n     ctx.closePath();\n     ctx.stroke();\n     }\n     //doc.write('log10 scale value: ' + parseFloat((i).toFixed(1)) + '<br>');\n     //Math.log10(parseFloat((i).toFixed(1)));\n\n     ctx.rotate(rotationStep);\n     }\n     tmp = 0.1;\n     drawLabel = true;\n     }\n     */\n\n    ctx.translate(-centerX, -centerY);\n    ctx.restore();\n  };\n\n  // **************   Initialization  ********************\n  // Draw all static painting code to background\n  var init = function(parameters) {\n    parameters = parameters || {};\n    var drawFrame = (undefined === parameters.frame ? false : parameters.frame);\n    var drawBackground = (undefined === parameters.background ? false : parameters.background);\n    var drawLed = (undefined === parameters.led ? false : parameters.led);\n    var drawPointer = (undefined === parameters.pointer ? false : parameters.pointer);\n    var drawForeground = (undefined === parameters.foreground ? false : parameters.foreground);\n\n    initialized = true;\n\n    // Calculate the current min and max values and the range\n    calculate();\n\n    // Create frame in frame buffer (backgroundBuffer)\n    if (drawFrame && frameVisible) {\n      drawRadialFrameImage(frameContext, frameDesign, centerX, size / 2, imageWidth, imageHeight);\n    }\n\n    // Create background in background buffer (backgroundBuffer)\n    if (drawBackground && backgroundVisible) {\n      drawRadialBackgroundImage(backgroundContext, backgroundColor, centerX, size / 2, imageWidth, imageHeight);\n    }\n\n    // Draw LED ON in ledBuffer_ON\n    if (drawLed) {\n      ledContextOn.drawImage(createLedImage(Math.ceil(size * 0.093457), 1, ledColor), 0, 0);\n\n      // Draw LED ON in ledBuffer_OFF\n      ledContextOff.drawImage(createLedImage(Math.ceil(size * 0.093457), 0, ledColor), 0, 0);\n    }\n\n    // Draw min measured value indicator in minMeasuredValueBuffer\n    if (minMeasuredValueVisible) {\n      minMeasuredValueCtx.drawImage(createMeasuredValueImage(Math.ceil(size * 0.028037), ColorDef.BLUE.dark.getRgbaColor(), true, true), 0, 0);\n      minMeasuredValueCtx.restore();\n    }\n\n    // Draw max measured value indicator in maxMeasuredValueBuffer\n    if (maxMeasuredValueVisible) {\n      maxMeasuredValueCtx.drawImage(createMeasuredValueImage(Math.ceil(size * 0.028037), ColorDef.RED.medium.getRgbaColor(), true), 0, 0);\n      maxMeasuredValueCtx.restore();\n    }\n\n    // Create alignment posts in background buffer (backgroundBuffer)\n    if (drawBackground && backgroundVisible) {\n      drawPostsImage(backgroundContext);\n\n      // Create section in background buffer (backgroundBuffer)\n      if (null !== section && 0 < section.length) {\n        backgroundContext.save();\n        if (Orientation.WEST === orientation) {\n          backgroundContext.translate(centerX, centerX);\n          backgroundContext.rotate(-HALF_PI);\n          backgroundContext.translate(-centerX, -centerX);\n        } else if (Orientation.EAST === orientation) {\n          backgroundContext.translate(centerX, centerX);\n          backgroundContext.rotate(HALF_PI);\n          backgroundContext.translate(-centerX, -centerX);\n        }\n        var sectionIndex = section.length;\n        do {\n          sectionIndex--;\n          drawAreaSectionImage(backgroundContext, section[sectionIndex].start, section[sectionIndex].stop, section[sectionIndex].color, false);\n        }\n        while (0 < sectionIndex);\n        backgroundContext.restore();\n      }\n\n      // Create area in background buffer (backgroundBuffer)\n      if (null !== area && 0 < area.length) {\n        if (Orientation.WEST === orientation) {\n          backgroundContext.translate(centerX, centerX);\n          backgroundContext.rotate(-HALF_PI);\n          backgroundContext.translate(-centerX, -centerX);\n        }\n        if (Orientation.EAST === orientation) {\n          backgroundContext.translate(centerX, centerX);\n          backgroundContext.rotate(HALF_PI);\n          backgroundContext.translate(-centerX, -centerX);\n        }\n        var areaIndex = area.length;\n        do {\n          areaIndex--;\n          drawAreaSectionImage(backgroundContext, area[areaIndex].start, area[areaIndex].stop, area[areaIndex].color, true);\n        }\n        while (0 < areaIndex);\n        backgroundContext.restore();\n      }\n\n      // Create tickmarks in background buffer (backgroundBuffer)\n      drawTickmarksImage(backgroundContext, labelNumberFormat);\n\n      // Create title in background buffer (backgroundBuffer)\n      drawTitleImage(backgroundContext);\n    }\n\n    // Draw threshold image to background context\n    if (thresholdVisible) {\n      backgroundContext.save();\n      if (Orientation.WEST === orientation) {\n        backgroundContext.translate(centerX, centerX);\n        backgroundContext.rotate(-HALF_PI);\n        backgroundContext.translate(-centerX, -centerX);\n      }\n      if (Orientation.EAST === orientation) {\n        backgroundContext.translate(centerX, centerX);\n        backgroundContext.rotate(HALF_PI);\n        backgroundContext.translate(-centerX, -centerX);\n      }\n      backgroundContext.translate(centerX, centerY);\n      backgroundContext.rotate(rotationOffset + (threshold - minValue) * angleStep + HALF_PI);\n      backgroundContext.translate(-centerX, -centerY);\n      backgroundContext.drawImage(createThresholdImage(), imageWidth * 0.475, imageHeight * 0.32);\n      backgroundContext.restore();\n    }\n\n    // Create pointer image in pointer buffer (contentBuffer)\n    if (drawPointer) {\n      drawPointerImage(pointerContext, imageWidth * 1.17, pointerType, pointerColor, backgroundColor.labelColor);\n\n    }\n\n    // Create foreground in foreground buffer (foregroundBuffer)\n    if (drawForeground && foregroundVisible) {\n      var knobVisible = (pointerType.type === 'type15' || pointerType.type === 'type16' ? false : true);\n      drawRadialForegroundImage(foregroundContext, foregroundType, imageWidth, imageHeight, knobVisible, knobType, knobStyle, gaugeType, orientation);\n    }\n  };\n\n  var resetBuffers = function(buffers) {\n    buffers = buffers || {};\n    var resetFrame = (undefined === buffers.frame ? false : buffers.frame);\n    var resetBackground = (undefined === buffers.background ? false : buffers.background);\n    var resetLed = (undefined === buffers.led ? false : buffers.led);\n    var resetPointer = (undefined === buffers.pointer ? false : buffers.pointer);\n    var resetForeground = (undefined === buffers.foreground ? false : buffers.foreground);\n\n    if (resetFrame) {\n      frameBuffer.width = size;\n      frameBuffer.height = size;\n      frameContext = frameBuffer.getContext('2d');\n    }\n\n    if (resetBackground) {\n      backgroundBuffer.width = size;\n      backgroundBuffer.height = size;\n      backgroundContext = backgroundBuffer.getContext('2d');\n    }\n\n    if (resetLed) {\n      ledBufferOn.width = Math.ceil(size * 0.093457);\n      ledBufferOn.height = Math.ceil(size * 0.093457);\n      ledContextOn = ledBufferOn.getContext('2d');\n\n      ledBufferOff.width = Math.ceil(size * 0.093457);\n      ledBufferOff.height = Math.ceil(size * 0.093457);\n      ledContextOff = ledBufferOff.getContext('2d');\n\n      // Buffer for current led painting code\n      ledBuffer = ledBufferOff;\n    }\n\n    if (resetPointer) {\n      pointerBuffer.width = size;\n      pointerBuffer.height = size;\n      pointerContext = pointerBuffer.getContext('2d');\n    }\n\n    if (resetForeground) {\n      foregroundBuffer.width = size;\n      foregroundBuffer.height = size;\n      foregroundContext = foregroundBuffer.getContext('2d');\n    }\n  };\n\n  var blink = function(blinking) {\n    if (blinking) {\n      ledTimerId = setInterval(toggleAndRepaintLed, 1000);\n    } else {\n      clearInterval(ledTimerId);\n      ledBuffer = ledBufferOff;\n    }\n  };\n\n  var toggleAndRepaintLed = function() {\n    if (ledVisible) {\n      if (ledBuffer === ledBufferOn) {\n        ledBuffer = ledBufferOff;\n      } else {\n        ledBuffer = ledBufferOn;\n      }\n      if (!repainting) {\n        repainting = true;\n        requestAnimFrame(self.repaint);\n      }\n    }\n  };\n\n  //************************************ Public methods **************************************\n  this.setValue = function(newValue) {\n    newValue = parseFloat(newValue);\n    var targetValue = (newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue));\n    if (value !== targetValue) {\n      value = targetValue;\n\n      if (value > maxMeasuredValue) {\n        maxMeasuredValue = value;\n      }\n      if (value < minMeasuredValue) {\n        minMeasuredValue = value;\n      }\n\n      if ((value >= threshold && !ledBlinking && thresholdRising) ||\n        (value <= threshold && !ledBlinking && !thresholdRising)) {\n        ledBlinking = true;\n        blink(ledBlinking);\n        if (playAlarm) {\n          audioElement.play();\n        }\n      } else if ((value < threshold && ledBlinking && thresholdRising) ||\n        (value > threshold && ledBlinking && !thresholdRising)) {\n        ledBlinking = false;\n        blink(ledBlinking);\n        if (playAlarm) {\n          audioElement.pause();\n        }\n      }\n\n      this.repaint();\n    }\n    return this;\n  };\n\n  this.getValue = function() {\n    return value;\n  };\n\n  this.setValueAnimated = function(newValue, callback) {\n    newValue = parseFloat(newValue);\n    var targetValue = (newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue)),\n      gauge = this,\n      time;\n\n    if (value !== targetValue) {\n      if (undefined !== tween && tween.isPlaying) {\n        tween.stop();\n      }\n\n      time = fullScaleDeflectionTime * Math.abs(targetValue - value) / (maxValue - minValue);\n      time = Math.max(time, fullScaleDeflectionTime / 5);\n      tween = new Tween({}, '', Tween.regularEaseInOut, value, targetValue, time);\n      //tween = new Tween({}, '', Tween.regularEaseInOut, value, targetValue, 1);\n      //tween = new Tween(new Object(), '', Tween.strongEaseInOut, value, targetValue, 1);\n      tween.onMotionChanged = function(event) {\n        value = event.target._pos;\n\n        if ((value >= threshold && !ledBlinking && thresholdRising) ||\n          (value <= threshold && !ledBlinking && !thresholdRising)) {\n          ledBlinking = true;\n          blink(ledBlinking);\n          if (playAlarm) {\n            audioElement.play();\n          }\n        } else if ((value < threshold && ledBlinking && thresholdRising) ||\n          (value > threshold && ledBlinking && !thresholdRising)) {\n          ledBlinking = false;\n          blink(ledBlinking);\n          if (playAlarm) {\n            audioElement.pause();\n          }\n        }\n\n        if (value > maxMeasuredValue) {\n          maxMeasuredValue = value;\n        }\n        if (value < minMeasuredValue) {\n          minMeasuredValue = value;\n        }\n\n        if (!repainting) {\n          repainting = true;\n          requestAnimFrame(gauge.repaint);\n        }\n      };\n\n      // do we have a callback function to process?\n      if (callback && typeof(callback) === \"function\") {\n        tween.onMotionFinished = callback;\n      }\n\n      tween.start();\n    }\n    return this;\n  };\n\n  this.setMinValue = function(newValue) {\n    minValue = parseFloat(newValue);\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.getMinValue = function() {\n    return minValue;\n  };\n\n  this.setMaxValue = function(newValue) {\n    maxValue = parseFloat(newValue);\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.getMaxValue = function() {\n    return maxValue;\n  };\n\n  this.setMaxMeasuredValue = function(newValue) {\n    newValue = parseFloat(newValue);\n    var targetValue = newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue);\n    maxMeasuredValue = targetValue;\n    this.repaint();\n    return this;\n  };\n\n  this.setMinMeasuredValue = function(newValue) {\n    newValue = parseFloat(newValue);\n    var targetValue = newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue);\n    minMeasuredValue = targetValue;\n    this.repaint();\n    return this;\n  };\n\n  this.resetMinMeasuredValue = function() {\n    minMeasuredValue = value;\n    this.repaint();\n    return this;\n  };\n\n  this.resetMaxMeasuredValue = function() {\n    maxMeasuredValue = value;\n    this.repaint();\n    return this;\n  };\n\n  this.setMinMeasuredValueVisible = function(visible) {\n    minMeasuredValueVisible = !!visible;\n    this.repaint();\n    return this;\n  };\n\n  this.setMaxMeasuredValueVisible = function(visible) {\n    maxMeasuredValueVisible = !!visible;\n    this.repaint();\n    return this;\n  };\n\n  this.setThresholdVisible = function(visible) {\n    thresholdVisible = !!visible;\n    this.repaint();\n    return this;\n  };\n\n  this.setThresholdRising = function(rising) {\n    thresholdRising = !!rising;\n    // reset existing threshold alerts\n    ledBlinking = !ledBlinking;\n    blink(ledBlinking);\n    this.repaint();\n    return this;\n  };\n\n  this.setFrameDesign = function(newFrameDesign) {\n    resetBuffers({\n      frame: true\n    });\n    frameDesign = newFrameDesign;\n    init({\n      frame: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setBackgroundColor = function(newBackgroundColor) {\n    resetBuffers({\n      background: true,\n      pointer: (pointerType.type === 'type2' || pointerType.type === 'type13' ? true : false) // type2 & 13 depend on background\n    });\n    backgroundColor = newBackgroundColor;\n    init({\n      background: true,\n      pointer: (pointerType.type === 'type2' || pointerType.type === 'type13' ? true : false) // type2 & 13 depend on background\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setForegroundType = function(newForegroundType) {\n    resetBuffers({\n      foreground: true\n    });\n    foregroundType = newForegroundType;\n    init({\n      foreground: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setPointerType = function(newPointerType) {\n    resetBuffers({\n      pointer: true,\n      foreground: true // Required as type15 does not need a knob\n    });\n    pointerType = newPointerType;\n    init({\n      pointer: true,\n      foreground: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setPointerColor = function(newPointerColor) {\n    resetBuffers({\n      pointer: true\n    });\n    pointerColor = newPointerColor;\n    init({\n      pointer: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setLedColor = function(newLedColor) {\n    resetBuffers({\n      led: true\n    });\n    ledColor = newLedColor;\n    init({\n      led: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setLedVisible = function(visible) {\n    ledVisible = !!visible;\n    this.repaint();\n    return this;\n  };\n\n  this.repaint = function() {\n    if (!initialized) {\n      init({\n        frame: true,\n        background: true,\n        led: true,\n        pointer: true,\n        foreground: true\n      });\n    }\n\n    mainCtx.clearRect(0, 0, size, size);\n    mainCtx.save();\n\n    // Draw frame\n    if (frameVisible) {\n      mainCtx.drawImage(frameBuffer, 0, 0);\n    }\n\n    // Draw buffered image to visible canvas\n    mainCtx.drawImage(backgroundBuffer, 0, 0);\n\n    // Draw led\n    if (ledVisible) {\n      mainCtx.drawImage(ledBuffer, ledPosX, ledPosY);\n    }\n\n    if (Orientation.WEST === orientation) {\n      mainCtx.translate(centerX, centerX);\n      mainCtx.rotate(-HALF_PI);\n      mainCtx.translate(-centerX, -centerX);\n    }\n    if (Orientation.EAST === orientation) {\n      mainCtx.translate(centerX, centerX);\n      mainCtx.rotate(HALF_PI);\n      mainCtx.translate(-centerX, -centerX);\n    }\n\n    // Draw min measured value indicator\n    if (minMeasuredValueVisible) {\n      mainCtx.save();\n      mainCtx.translate(centerX, centerY);\n      mainCtx.rotate(rotationOffset + HALF_PI + (minMeasuredValue - minValue) * angleStep);\n      mainCtx.translate(-centerX, -centerY);\n      mainCtx.drawImage(minMeasuredValueBuffer, mainCtx.canvas.width * 0.4865, mainCtx.canvas.height * 0.27);\n      mainCtx.restore();\n    }\n\n    // Draw max measured value indicator\n    if (maxMeasuredValueVisible) {\n      mainCtx.save();\n      mainCtx.translate(centerX, centerY);\n      mainCtx.rotate(rotationOffset + HALF_PI + (maxMeasuredValue - minValue) * angleStep);\n      mainCtx.translate(-centerX, -centerY);\n      mainCtx.drawImage(maxMeasuredValueBuffer, mainCtx.canvas.width * 0.4865, mainCtx.canvas.height * 0.27);\n      mainCtx.restore();\n    }\n\n    angle = rotationOffset + HALF_PI + (value - minValue) * angleStep;\n\n    // Define rotation center\n    mainCtx.save();\n    mainCtx.translate(centerX, centerY);\n    mainCtx.rotate(angle);\n    // Set the pointer shadow params\n    mainCtx.shadowColor = 'rgba(0, 0, 0, 0.8)';\n    mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset;\n    mainCtx.shadowBlur = shadowOffset * 2;\n    // Draw pointer\n    mainCtx.translate(-pointerOffset, -pointerOffset);\n    mainCtx.drawImage(pointerBuffer, 0, 0);\n    // Undo the translations & shadow settings\n    mainCtx.restore();\n\n    // Draw foreground\n    if (foregroundVisible) {\n      if (Orientation.WEST === orientation) {\n        mainCtx.translate(centerX, centerX);\n        mainCtx.rotate(HALF_PI);\n        mainCtx.translate(-centerX, -centerX);\n      } else if (Orientation.EAST === orientation) {\n        mainCtx.translate(centerX, centerX);\n        mainCtx.rotate(-HALF_PI);\n        mainCtx.translate(-centerX, -centerX);\n      }\n      mainCtx.drawImage(foregroundBuffer, 0, 0);\n    }\n    mainCtx.restore();\n\n    repainting = false;\n  };\n\n  // Visualize the component\n  this.repaint();\n\n  return this;\n};\n\nexport default radialVertical;\n","\nimport carbonBuffer from \"./carbonBuffer\";\nimport punchedSheetBuffer from \"./punchedSheetBuffer\";\nimport brushedMetalTexture from \"./brushedMetalTexture\";\nimport {\nRgbaColor, \nConicalGradient, \nroundedRectangle, \ncreateBuffer, \nTWO_PI,\n} from \"./tools\";\n\nvar drawLinearBackgroundImage = function(ctx, backgroundColor, imageWidth, imageHeight, vertical) {\n  var i, end, grad, fractions, colors,\n    frameWidth,\n    linBBuffer, linBCtx, linBColor,\n    radius,\n    turnRadius, centerX, centerY, stepSize,\n    mono, textureColor, texture,\n    cacheKey = imageWidth.toString() + imageHeight + vertical + backgroundColor.name;\n\n  // check if we have already created and cached this buffer, if not create it\n  if (!drawLinearBackgroundImage.cache[cacheKey]) {\n    frameWidth = Math.sqrt(imageWidth * imageWidth + imageHeight * imageHeight) * 0.04;\n    frameWidth = Math.ceil(Math.min(frameWidth, (vertical ? imageWidth : imageHeight) * 0.1)) - 1;\n\n    var CORNER_RADIUS = Math.floor((vertical ? imageWidth : imageHeight) * 0.028571);\n    // Setup buffer\n    linBBuffer = createBuffer(imageWidth, imageHeight);\n    linBCtx = linBBuffer.getContext('2d');\n    linBColor = backgroundColor;\n    linBCtx.lineWidth = 0;\n\n    roundedRectangle(linBCtx, frameWidth, frameWidth, imageWidth - frameWidth * 2, imageHeight - frameWidth * 2, CORNER_RADIUS);\n\n    // If the backgroundColor is a texture fill it with the texture instead of the gradient\n    if (backgroundColor.name === 'CARBON' || backgroundColor.name === 'PUNCHED_SHEET' ||\n      backgroundColor.name === 'STAINLESS' || backgroundColor.name === 'BRUSHED_METAL' ||\n      backgroundColor.name === 'BRUSHED_STAINLESS' || backgroundColor.name === 'TURNED') {\n      if (backgroundColor.name === 'CARBON') {\n        linBCtx.fillStyle = linBCtx.createPattern(carbonBuffer, 'repeat');\n        linBCtx.fill();\n      }\n\n      if (backgroundColor.name === 'PUNCHED_SHEET') {\n        linBCtx.fillStyle = linBCtx.createPattern(punchedSheetBuffer, 'repeat');\n        linBCtx.fill();\n      }\n\n      if (backgroundColor.name === 'STAINLESS' || backgroundColor.name === 'TURNED') {\n        // Define the fraction of the conical gradient paint\n        fractions = [0,\n          0.03,\n          0.10,\n          0.14,\n          0.24,\n          0.33,\n          0.38,\n          0.5,\n          0.62,\n          0.67,\n          0.76,\n          0.81,\n          0.85,\n          0.97,\n          1\n        ];\n\n        // Define the colors of the conical gradient paint\n        colors = [new RgbaColor('#FDFDFD'),\n          new RgbaColor('#FDFDFD'),\n          new RgbaColor('#B2B2B4'),\n          new RgbaColor('#ACACAE'),\n          new RgbaColor('#FDFDFD'),\n          new RgbaColor('#8E8E8E'),\n          new RgbaColor('#8E8E8E'),\n          new RgbaColor('#FDFDFD'),\n          new RgbaColor('#8E8E8E'),\n          new RgbaColor('#8E8E8E'),\n          new RgbaColor('#FDFDFD'),\n          new RgbaColor('#ACACAE'),\n          new RgbaColor('#B2B2B4'),\n          new RgbaColor('#FDFDFD'),\n          new RgbaColor('#FDFDFD')\n        ];\n        grad = new ConicalGradient(fractions, colors);\n        // Set a clip as we will be drawing outside the required area\n        linBCtx.clip();\n        grad.fillRect(linBCtx, imageWidth / 2, imageHeight / 2, imageWidth - frameWidth * 2, imageHeight - frameWidth * 2, imageWidth / 2, imageHeight / 2);\n        // Add an additional inner shadow to fade out brightness at the top\n        grad = linBCtx.createLinearGradient(0, frameWidth, 0, imageHeight - frameWidth * 2);\n        grad.addColorStop(0, 'rgba(0, 0, 0, 0.25)');\n        grad.addColorStop(0.1, 'rgba(0, 0, 0, 0.05)');\n        grad.addColorStop(1, 'rgba(0, 0, 0, 0)');\n        linBCtx.fillStyle = grad;\n        linBCtx.fill();\n\n        if (backgroundColor.name === 'TURNED') {\n          // Define the turning radius\n          radius = Math.sqrt((imageWidth - frameWidth * 2) * (imageWidth - frameWidth * 2) + (imageHeight - frameWidth * 2) * (imageHeight - frameWidth * 2)) / 2;\n          turnRadius = radius * 0.55;\n          centerX = imageWidth / 2;\n          centerY = imageHeight / 2;\n          // Step size proporational to radius\n          stepSize = TWO_PI / 360 * (400 / radius);\n\n          // Save before we start\n          linBCtx.save();\n\n          // Set a clip as we will be drawing outside the required area\n          roundedRectangle(linBCtx, frameWidth, frameWidth, imageWidth - frameWidth * 2, imageHeight - frameWidth * 2, CORNER_RADIUS);\n          linBCtx.clip();\n\n          // set the style for the turnings\n          linBCtx.lineWidth = 0.5;\n          end = TWO_PI - stepSize * 0.3;\n          // Step the engine round'n'round\n          for (i = 0; i < end; i += stepSize) {\n            // draw a 'turn'\n            linBCtx.strokeStyle = 'rgba(240, 240, 255, 0.25)';\n            linBCtx.beginPath();\n            linBCtx.arc(centerX + turnRadius, centerY, turnRadius, 0, TWO_PI);\n            linBCtx.stroke();\n            // rotate the 'piece'\n            linBCtx.translate(centerX, centerY);\n            linBCtx.rotate(stepSize * 0.3);\n            linBCtx.translate(-centerX, -centerY);\n            // draw a 'turn'\n            linBCtx.strokeStyle = 'rgba(25, 10, 10, 0.1)';\n            linBCtx.beginPath();\n            linBCtx.arc(centerX + turnRadius, centerY, turnRadius, 0, TWO_PI);\n            linBCtx.stroke();\n            linBCtx.translate(centerX, centerY);\n            linBCtx.rotate(-stepSize * 0.3);\n            linBCtx.translate(-centerX, -centerY);\n\n            // rotate the 'piece'\n            linBCtx.translate(centerX, centerY);\n            linBCtx.rotate(stepSize);\n            linBCtx.translate(-centerX, -centerY);\n          }\n          // Restore canvas now we are done\n          linBCtx.restore();\n        }\n      }\n      // Add an additional inner shadow to make the look more realistic\n      grad = linBCtx.createLinearGradient(frameWidth, frameWidth, imageWidth - frameWidth * 2, imageHeight - frameWidth * 2);\n      grad.addColorStop(0, 'rgba(0, 0, 0, 0.25)');\n      grad.addColorStop(0.5, 'rgba(0, 0, 0, 0)');\n      grad.addColorStop(1, 'rgba(0, 0, 0, 0.25)');\n      linBCtx.fillStyle = grad;\n      roundedRectangle(linBCtx, frameWidth, frameWidth, imageWidth - frameWidth * 2, imageHeight - frameWidth * 2, CORNER_RADIUS);\n      linBCtx.fill();\n\n      if (backgroundColor.name === 'BRUSHED_METAL' || backgroundColor.name === 'BRUSHED_STAINLESS') {\n        mono = (backgroundColor.name === 'BRUSHED_METAL' ? true : false);\n        textureColor = parseInt(backgroundColor.gradientStop.getHexColor().substr(-6), 16);\n        texture = brushedMetalTexture(textureColor, 5, 0.1, mono, 0.5);\n        linBCtx.fillStyle = linBCtx.createPattern(texture.fill(0, 0, imageWidth, imageHeight), 'no-repeat');\n        linBCtx.fill();\n      }\n    } else {\n      grad = linBCtx.createLinearGradient(0, frameWidth, 0, imageHeight - frameWidth * 2);\n      grad.addColorStop(0, backgroundColor.gradientStart.getRgbaColor());\n      grad.addColorStop(0.4, backgroundColor.gradientFraction.getRgbaColor());\n      grad.addColorStop(1, backgroundColor.gradientStop.getRgbaColor());\n      linBCtx.fillStyle = grad;\n      linBCtx.fill();\n    }\n    // Add a simple inner shadow\n    colors = ['rgba(0, 0, 0, 0.30)',\n      'rgba(0, 0, 0, 0.20)',\n      'rgba(0, 0, 0, 0.13)',\n      'rgba(0, 0, 0, 0.09)',\n      'rgba(0, 0, 0, 0.06)',\n      'rgba(0, 0, 0, 0.04)',\n      'rgba(0, 0, 0, 0.03)'\n    ];\n    for (i = 0; i < 7; i++) {\n      linBCtx.strokeStyle = colors[i];\n      roundedRectangle(linBCtx, frameWidth + i, frameWidth + i, imageWidth - frameWidth * 2 - (2 * i), imageHeight - frameWidth * 2 - (2 * i), CORNER_RADIUS);\n      linBCtx.stroke();\n    }\n    // cache the buffer\n    drawLinearBackgroundImage.cache[cacheKey] = linBBuffer;\n  }\n  ctx.drawImage(drawLinearBackgroundImage.cache[cacheKey], 0, 0);\n  return this;\n};\ndrawLinearBackgroundImage.cache = {};\n\nexport default drawLinearBackgroundImage;","\nimport {\ncreateBuffer, \n} from \"./tools\";\n\n\nvar drawLinearForegroundImage = function(ctx, imageWidth, imageHeight, vertical) {\n  var linFgBuffer, linFgCtx,\n    foregroundGradient,\n    frameWidth, fgOffset, fgOffset2,\n    cacheKey = imageWidth.toString() + imageHeight + vertical;\n\n  // check if we have already created and cached this buffer, if not create it\n  if (!drawLinearForegroundImage.cache[cacheKey]) {\n    // Setup buffer\n    linFgBuffer = createBuffer(imageWidth, imageHeight);\n    linFgCtx = linFgBuffer.getContext('2d');\n\n    frameWidth = Math.sqrt(imageWidth * imageWidth + imageHeight * imageHeight) * 0.04;\n    frameWidth = Math.min(frameWidth, (vertical ? imageWidth : imageHeight) * 0.1);\n    fgOffset = frameWidth * 1.3;\n    fgOffset2 = fgOffset * 1.33;\n\n    linFgCtx.beginPath();\n    linFgCtx.moveTo(fgOffset, imageHeight - fgOffset);\n    linFgCtx.lineTo(imageWidth - fgOffset, imageHeight - fgOffset);\n    linFgCtx.bezierCurveTo(imageWidth - fgOffset, imageHeight - fgOffset, imageWidth - fgOffset2, imageHeight * 0.7, imageWidth - fgOffset2, imageHeight * 0.5);\n    linFgCtx.bezierCurveTo(imageWidth - fgOffset2, fgOffset2, imageWidth - fgOffset, fgOffset, imageWidth - frameWidth, fgOffset);\n    linFgCtx.lineTo(fgOffset, fgOffset);\n    linFgCtx.bezierCurveTo(fgOffset, fgOffset, fgOffset2, imageHeight * 0.285714, fgOffset2, imageHeight * 0.5);\n    linFgCtx.bezierCurveTo(fgOffset2, imageHeight * 0.7, fgOffset, imageHeight - fgOffset, frameWidth, imageHeight - fgOffset);\n    linFgCtx.closePath();\n\n    foregroundGradient = linFgCtx.createLinearGradient(0, (imageHeight - frameWidth), 0, frameWidth);\n    foregroundGradient.addColorStop(0, 'rgba(255, 255, 255, 0)');\n    foregroundGradient.addColorStop(0.06, 'rgba(255, 255, 255, 0)');\n    foregroundGradient.addColorStop(0.07, 'rgba(255, 255, 255, 0)');\n    foregroundGradient.addColorStop(0.12, 'rgba(255, 255, 255, 0)');\n    foregroundGradient.addColorStop(0.17, 'rgba(255, 255, 255, 0.013546)');\n    foregroundGradient.addColorStop(0.1701, 'rgba(255, 255, 255, 0)');\n    foregroundGradient.addColorStop(0.79, 'rgba(255, 255, 255, 0)');\n    foregroundGradient.addColorStop(0.8, 'rgba(255, 255, 255, 0)');\n    foregroundGradient.addColorStop(0.84, 'rgba(255, 255, 255, 0.082217)');\n    foregroundGradient.addColorStop(0.93, 'rgba(255, 255, 255, 0.288702)');\n    foregroundGradient.addColorStop(0.94, 'rgba(255, 255, 255, 0.298039)');\n    foregroundGradient.addColorStop(0.96, 'rgba(255, 255, 255, 0.119213)');\n    foregroundGradient.addColorStop(0.97, 'rgba(255, 255, 255, 0)');\n    foregroundGradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\n    linFgCtx.fillStyle = foregroundGradient;\n    linFgCtx.fill();\n\n    // cache the buffer\n    drawLinearForegroundImage.cache[cacheKey] = linFgBuffer;\n  }\n  ctx.drawImage(drawLinearForegroundImage.cache[cacheKey], 0, 0);\n  return this;\n};\ndrawLinearForegroundImage.cache = {};\n\nexport default drawLinearForegroundImage;","\nimport {\nRgbaColor, \nConicalGradient, \nroundedRectangle, \ncreateBuffer, \n} from \"./tools\";\n\nvar drawLinearFrameImage = function(ctx, frameDesign, imageWidth, imageHeight, vertical) {\n  var frameWidth,\n    linFBuffer, linFCtx,\n    OUTER_FRAME_CORNER_RADIUS,\n    FRAME_MAIN_CORNER_RADIUS,\n    SUBTRACT_CORNER_RADIUS,\n    grad,\n    fractions = [],\n    colors = [],\n    cacheKey = imageWidth.toString() + imageHeight + frameDesign.design + vertical;\n\n  // check if we have already created and cached this buffer, if not create it\n  if (!drawLinearFrameImage.cache[cacheKey]) {\n    frameWidth = Math.sqrt(imageWidth * imageWidth + imageHeight * imageHeight) * 0.04;\n    frameWidth = Math.ceil(Math.min(frameWidth, (vertical ? imageWidth : imageHeight) * 0.1));\n\n    // Setup buffer\n    linFBuffer = createBuffer(imageWidth, imageHeight);\n    linFCtx = linFBuffer.getContext('2d');\n\n    // Calculate corner radii\n    if (vertical) {\n      OUTER_FRAME_CORNER_RADIUS = Math.ceil(imageWidth * 0.05);\n      FRAME_MAIN_CORNER_RADIUS = OUTER_FRAME_CORNER_RADIUS - 1;\n      SUBTRACT_CORNER_RADIUS = Math.floor(imageWidth * 0.028571);\n    } else {\n      OUTER_FRAME_CORNER_RADIUS = Math.ceil(imageHeight * 0.05);\n      FRAME_MAIN_CORNER_RADIUS = OUTER_FRAME_CORNER_RADIUS - 1;\n      SUBTRACT_CORNER_RADIUS = Math.floor(imageHeight * 0.028571);\n    }\n\n    roundedRectangle(linFCtx, 0, 0, imageWidth, imageHeight, OUTER_FRAME_CORNER_RADIUS);\n    linFCtx.fillStyle = '#838383';\n    linFCtx.fill();\n\n    roundedRectangle(linFCtx, 1, 1, imageWidth - 2, imageHeight - 2, FRAME_MAIN_CORNER_RADIUS);\n\n    // main gradient frame\n    switch (frameDesign.design) {\n      case 'metal':\n        grad = linFCtx.createLinearGradient(0, imageWidth * 0.004672, 0, imageHeight * 0.990654);\n        grad.addColorStop(0, '#fefefe');\n        grad.addColorStop(0.07, 'rgb(210, 210, 210)');\n        grad.addColorStop(0.12, 'rgb(179, 179, 179)');\n        grad.addColorStop(1, 'rgb(213, 213, 213)');\n        linFCtx.fillStyle = grad;\n        linFCtx.fill();\n        break;\n\n      case 'brass':\n        grad = linFCtx.createLinearGradient(0, imageWidth * 0.004672, 0, imageHeight * 0.990654);\n        grad.addColorStop(0, 'rgb(249, 243, 155)');\n        grad.addColorStop(0.05, 'rgb(246, 226, 101)');\n        grad.addColorStop(0.10, 'rgb(240, 225, 132)');\n        grad.addColorStop(0.50, 'rgb(90, 57, 22)');\n        grad.addColorStop(0.90, 'rgb(249, 237, 139)');\n        grad.addColorStop(0.95, 'rgb(243, 226, 108)');\n        grad.addColorStop(1, 'rgb(202, 182, 113)');\n        linFCtx.fillStyle = grad;\n        linFCtx.fill();\n        break;\n\n      case 'steel':\n        grad = linFCtx.createLinearGradient(0, imageWidth * 0.004672, 0, imageHeight * 0.990654);\n        grad.addColorStop(0, 'rgb(231, 237, 237)');\n        grad.addColorStop(0.05, 'rgb(189, 199, 198)');\n        grad.addColorStop(0.10, 'rgb(192, 201, 200)');\n        grad.addColorStop(0.50, 'rgb(23, 31, 33)');\n        grad.addColorStop(0.90, 'rgb(196, 205, 204)');\n        grad.addColorStop(0.95, 'rgb(194, 204, 203)');\n        grad.addColorStop(1, 'rgb(189, 201, 199)');\n        linFCtx.fillStyle = grad;\n        linFCtx.fill();\n        break;\n\n      case 'gold':\n        grad = linFCtx.createLinearGradient(0, imageWidth * 0.004672, 0, imageHeight * 0.990654);\n        grad.addColorStop(0, 'rgb(255, 255, 207)');\n        grad.addColorStop(0.15, 'rgb(255, 237, 96)');\n        grad.addColorStop(0.22, 'rgb(254, 199, 57)');\n        grad.addColorStop(0.3, 'rgb(255, 249, 203)');\n        grad.addColorStop(0.38, 'rgb(255, 199, 64)');\n        grad.addColorStop(0.44, 'rgb(252, 194, 60)');\n        grad.addColorStop(0.51, 'rgb(255, 204, 59)');\n        grad.addColorStop(0.6, 'rgb(213, 134, 29)');\n        grad.addColorStop(0.68, 'rgb(255, 201, 56)');\n        grad.addColorStop(0.75, 'rgb(212, 135, 29)');\n        grad.addColorStop(1, 'rgb(247, 238, 101)');\n        linFCtx.fillStyle = grad;\n        linFCtx.fill();\n        break;\n\n      case 'anthracite':\n        grad = linFCtx.createLinearGradient(0, 0.004672 * imageHeight, 0, 0.995326 * imageHeight);\n        grad.addColorStop(0, 'rgb(118, 117, 135)');\n        grad.addColorStop(0.06, 'rgb(74, 74, 82)');\n        grad.addColorStop(0.12, 'rgb(50, 50, 54)');\n        grad.addColorStop(1, 'rgb(79, 79, 87)');\n        linFCtx.fillStyle = grad;\n        linFCtx.fill();\n        break;\n\n      case 'tiltedGray':\n        grad = linFCtx.createLinearGradient(0.233644 * imageWidth, 0.084112 * imageHeight, 0.81258 * imageWidth, 0.910919 * imageHeight);\n        grad.addColorStop(0, '#ffffff');\n        grad.addColorStop(0.07, 'rgb(210, 210, 210)');\n        grad.addColorStop(0.16, 'rgb(179, 179, 179)');\n        grad.addColorStop(0.33, '#ffffff');\n        grad.addColorStop(0.55, '#c5c5c5');\n        grad.addColorStop(0.79, '#ffffff');\n        grad.addColorStop(1, '#666666');\n        linFCtx.fillStyle = grad;\n        linFCtx.fill();\n        break;\n\n      case 'tiltedBlack':\n        grad = linFCtx.createLinearGradient(0.228971 * imageWidth, 0.079439 * imageHeight, 0.802547 * imageWidth, 0.898591 * imageHeight);\n        grad.addColorStop(0, '#666666');\n        grad.addColorStop(0.21, '#000000');\n        grad.addColorStop(0.47, '#666666');\n        grad.addColorStop(0.99, '#000000');\n        grad.addColorStop(1, '#000000');\n        linFCtx.fillStyle = grad;\n        linFCtx.fill();\n        break;\n\n      case 'glossyMetal':\n        // The smaller side is important for the contour gradient\n        // Java version uses a contour gradient for the outer frame rim\n        // but this is only 1 pixel wide, so a plain color fill is essentially\n        // the same.\n        /*\n                    var frameMainFractions4 = [\n                                                0,\n                                                (imageWidth >= imageHeight ? 32 / imageHeight : 32 / imageWidth) * 0.04,\n                                                1\n                                                ];\n                    var frameMainColors4 = [\n                                            new RgbaColor(244, 244, 244, 1),\n                                            new RgbaColor(207, 207, 207, 1),\n                                            new RgbaColor(207, 207, 207, 1)\n                                            ];\n                    var frameMainGradient4 = new contourGradient(linFCtx, 0, 0, imageWidth,  imageHeight, frameMainFractions4, frameMainColors4);\n                    // Outer frame rim\n                    roundedRectangle(linFCtx, 1, 1, imageWidth-2, imageHeight-2, OUTER_FRAME_CORNER_RADIUS);\n                    linFCtx.clip();\n                    frameMainGradient4.paintContext();\n        */\n        // Outer frame rim\n        //                roundedRectangle(linFCtx, 1, 1, imageWidth-2, imageHeight-2, OUTER_FRAME_CORNER_RADIUS);\n        //                linFCtx.clip();\n        //                linFCtx.fillStyle = '#cfcfcf';\n        //                linFCtx.fill();\n\n        // Main frame\n        //                roundedRectangle(linFCtx, 2, 2, imageWidth - 4, imageHeight - 4, FRAME_MAIN_CORNER_RADIUS);\n        //                linFCtx.clip();\n        roundedRectangle(linFCtx, 1, 1, imageWidth - 2, imageHeight - 2, OUTER_FRAME_CORNER_RADIUS);\n        linFCtx.clip();\n        grad = linFCtx.createLinearGradient(0, 1, 0, imageHeight - 2);\n        // The fractions from the Java version of linear gauge\n        /*\n                    grad.addColorStop(0, 'rgb(249, 249, 249)');\n                    grad.addColorStop(0.1, 'rgb(200, 195, 191)');\n                    grad.addColorStop(0.26, '#ffffff');\n                    grad.addColorStop(0.73, 'rgb(29, 29, 29)');\n                    grad.addColorStop(1, 'rgb(209, 209, 209)');\n        */\n        // Modified fractions from the radial gauge - looks better imho\n        grad.addColorStop(0, 'rgb(249, 249, 249)');\n        grad.addColorStop(0.2, 'rgb(200, 195, 191)');\n        grad.addColorStop(0.3, '#ffffff');\n        grad.addColorStop(0.6, 'rgb(29, 29, 29)');\n        grad.addColorStop(0.8, 'rgb(200, 194, 192)');\n        grad.addColorStop(1, 'rgb(209, 209, 209)');\n        linFCtx.fillStyle = grad;\n        linFCtx.fill();\n\n        // Inner frame bright\n        roundedRectangle(linFCtx, frameWidth - 2, frameWidth - 2, imageWidth - (frameWidth - 2) * 2, imageHeight - (frameWidth - 2) * 2, SUBTRACT_CORNER_RADIUS);\n        linFCtx.clip();\n        linFCtx.fillStyle = '#f6f6f6';\n        linFCtx.fill();\n\n        // Inner frame dark\n        roundedRectangle(linFCtx, frameWidth - 1, frameWidth - 1, imageWidth - (frameWidth - 1) * 2, imageHeight - (frameWidth - 1) * 2, SUBTRACT_CORNER_RADIUS);\n        linFCtx.clip();\n        linFCtx.fillStyle = '#333333';\n        //                linFCtx.fill();\n        break;\n\n      case 'blackMetal':\n        fractions = [0,\n          0.125,\n          0.347222,\n          0.5,\n          0.680555,\n          0.875,\n          1\n        ];\n\n        colors = [new RgbaColor('#FFFFFF'),\n          new RgbaColor('#000000'),\n          new RgbaColor('#999999'),\n          new RgbaColor('#000000'),\n          new RgbaColor('#999999'),\n          new RgbaColor('#000000'),\n          new RgbaColor('#FFFFFF')\n        ];\n        // Set the clip\n        linFCtx.beginPath();\n        roundedRectangle(linFCtx, 1, 1, imageWidth - 2, imageHeight - 2, OUTER_FRAME_CORNER_RADIUS);\n        linFCtx.closePath();\n        linFCtx.clip();\n        grad = new ConicalGradient(fractions, colors);\n        grad.fillRect(linFCtx, imageWidth / 2, imageHeight / 2, imageWidth, imageHeight, frameWidth, frameWidth);\n        break;\n\n      case 'shinyMetal':\n        fractions = [0,\n          0.125,\n          0.25,\n          0.347222,\n          0.5,\n          0.652777,\n          0.75,\n          0.875,\n          1\n        ];\n\n        colors = [new RgbaColor('#FFFFFF'),\n          new RgbaColor('#D2D2D2'),\n          new RgbaColor('#B3B3B3'),\n          new RgbaColor('#EEEEEE'),\n          new RgbaColor('#A0A0A0'),\n          new RgbaColor('#EEEEEE'),\n          new RgbaColor('#B3B3B3'),\n          new RgbaColor('#D2D2D2'),\n          new RgbaColor('#FFFFFF')\n        ];\n        // Set the clip\n        linFCtx.beginPath();\n        roundedRectangle(linFCtx, 1, 1, imageWidth - 2, imageHeight - 2, OUTER_FRAME_CORNER_RADIUS);\n        linFCtx.closePath();\n        linFCtx.clip();\n        grad = new ConicalGradient(fractions, colors);\n        grad.fillRect(linFCtx, imageWidth / 2, imageHeight / 2, imageWidth, imageHeight, frameWidth, frameWidth);\n        break;\n\n      case 'chrome':\n        fractions = [0,\n          0.09,\n          0.12,\n          0.16,\n          0.25,\n          0.29,\n          0.33,\n          0.38,\n          0.48,\n          0.52,\n          0.63,\n          0.68,\n          0.8,\n          0.83,\n          0.87,\n          0.97,\n          1\n        ];\n\n        colors = [new RgbaColor('#FFFFFF'),\n          new RgbaColor('#FFFFFF'),\n          new RgbaColor('#888890'),\n          new RgbaColor('#A4B9BE'),\n          new RgbaColor('#9EB3B6'),\n          new RgbaColor('#707070'),\n          new RgbaColor('#DDE3E3'),\n          new RgbaColor('#9BB0B3'),\n          new RgbaColor('#9CB0B1'),\n          new RgbaColor('#FEFFFF'),\n          new RgbaColor('#FFFFFF'),\n          new RgbaColor('#9CB4B4'),\n          new RgbaColor('#C6D1D3'),\n          new RgbaColor('#F6F8F7'),\n          new RgbaColor('#CCD8D8'),\n          new RgbaColor('#A4BCBE'),\n          new RgbaColor('#FFFFFF')\n        ];\n        // Set the clip\n        linFCtx.beginPath();\n        roundedRectangle(linFCtx, 1, 1, imageWidth - 2, imageHeight - 2, OUTER_FRAME_CORNER_RADIUS);\n        linFCtx.closePath();\n        linFCtx.clip();\n        grad = new ConicalGradient(fractions, colors);\n        grad.fillRect(linFCtx, imageWidth / 2, imageHeight / 2, imageWidth, imageHeight, frameWidth, frameWidth);\n        break;\n    }\n\n    roundedRectangle(linFCtx, frameWidth, frameWidth, imageWidth - (frameWidth) * 2, imageHeight - (frameWidth) * 2, SUBTRACT_CORNER_RADIUS);\n    linFCtx.fillStyle = 'rgb(192, 192, 192)';\n\n    // clip out the center of the frame for transparent backgrounds\n    linFCtx.globalCompositeOperation = 'destination-out';\n    roundedRectangle(linFCtx, frameWidth, frameWidth, imageWidth - frameWidth * 2, imageHeight - frameWidth * 2, SUBTRACT_CORNER_RADIUS);\n    linFCtx.fill();\n\n    // cache the buffer\n    drawLinearFrameImage.cache[cacheKey] = linFBuffer;\n  }\n  ctx.drawImage(drawLinearFrameImage.cache[cacheKey], 0, 0);\n  return this;\n};\ndrawLinearFrameImage.cache = {};\n\nexport default drawLinearFrameImage;","import Tween from \"./tween.js\";\nimport drawLinearBackgroundImage from \"./drawLinearBackgroundImage\";\nimport drawLinearForegroundImage from \"./drawLinearForegroundImage\";\nimport drawLinearFrameImage from \"./drawLinearFrameImage\";\nimport createLedImage from \"./createLedImage\";\nimport createLcdBackgroundImage from \"./createLcdBackgroundImage\";\nimport createMeasuredValueImage from \"./createMeasuredValueImage\";\nimport drawTitleImage from \"./drawTitleImage\";\nimport {\ncalcNiceNumber, \ncreateBuffer, \nrequestAnimFrame, \ngetCanvasContext,\nHALF_PI,\ndoc,\nlcdFontName,\nstdFontName,\n} from \"./tools\";\n\nimport {\n  backgroundColor as BackgroundColor,\n  lcdColor as LcdColor,\n  color as ColorDef,\n  ledColor as LedColor,\n  gaugeType as GaugeType,\n  orientation as Orientation,\n  knobType as KnobType,\n  knobStyle as KnobStyle,\n  frameDesign as FrameDesign,\n  pointerType as PointerType,\n  foregroundType as ForegroundType,\n  labelNumberFormat as LabelNumberFormat,\n  tickLabelOrientation as TickLabelOrientation,\n  trendState as TrendState,\n  } from \"./definitions\";\n\nvar linear = function(canvas, parameters) {\n  parameters = parameters || {};\n  var gaugeType = (undefined === parameters.gaugeType ? GaugeType.TYPE1 : parameters.gaugeType),\n    width = (undefined === parameters.width ? 0 : parameters.width),\n    height = (undefined === parameters.height ? 0 : parameters.height),\n    minValue = (undefined === parameters.minValue ? 0 : parameters.minValue),\n    maxValue = (undefined === parameters.maxValue ? (minValue + 100) : parameters.maxValue),\n    niceScale = (undefined === parameters.niceScale ? true : parameters.niceScale),\n    threshold = (undefined === parameters.threshold ? (maxValue - minValue) / 2 + minValue : parameters.threshold),\n    titleString = (undefined === parameters.titleString ? '' : parameters.titleString),\n    unitString = (undefined === parameters.unitString ? '' : parameters.unitString),\n    frameDesign = (undefined === parameters.frameDesign ? FrameDesign.METAL : parameters.frameDesign),\n    frameVisible = (undefined === parameters.frameVisible ? true : parameters.frameVisible),\n    backgroundColor = (undefined === parameters.backgroundColor ? BackgroundColor.DARK_GRAY : parameters.backgroundColor),\n    backgroundVisible = (undefined === parameters.backgroundVisible ? true : parameters.backgroundVisible),\n    valueColor = (undefined === parameters.valueColor ? ColorDef.RED : parameters.valueColor),\n    lcdColor = (undefined === parameters.lcdColor ? LcdColor.STANDARD : parameters.lcdColor),\n    lcdVisible = (undefined === parameters.lcdVisible ? true : parameters.lcdVisible),\n    lcdDecimals = (undefined === parameters.lcdDecimals ? 2 : parameters.lcdDecimals),\n    digitalFont = (undefined === parameters.digitalFont ? false : parameters.digitalFont),\n    ledColor = (undefined === parameters.ledColor ? LedColor.RED_LED : parameters.ledColor),\n    ledVisible = (undefined === parameters.ledVisible ? true : parameters.ledVisible),\n    thresholdVisible = (undefined === parameters.thresholdVisible ? true : parameters.thresholdVisible),\n    thresholdRising = (undefined === parameters.thresholdRising ? true : parameters.thresholdRising),\n    minMeasuredValueVisible = (undefined === parameters.minMeasuredValueVisible ? false : parameters.minMeasuredValueVisible),\n    maxMeasuredValueVisible = (undefined === parameters.maxMeasuredValueVisible ? false : parameters.maxMeasuredValueVisible),\n    labelNumberFormat = (undefined === parameters.labelNumberFormat ? LabelNumberFormat.STANDARD : parameters.labelNumberFormat),\n    foregroundVisible = (undefined === parameters.foregroundVisible ? true : parameters.foregroundVisible),\n    playAlarm = (undefined === parameters.playAlarm ? false : parameters.playAlarm),\n    alarmSound = (undefined === parameters.alarmSound ? false : parameters.alarmSound),\n    fullScaleDeflectionTime = (undefined === parameters.fullScaleDeflectionTime ? 2.5 : parameters.fullScaleDeflectionTime);\n\n  // Get the canvas context and clear it\n  var mainCtx = getCanvasContext(canvas);\n  // Has a size been specified?\n  if (width === 0) {\n    width = mainCtx.canvas.width;\n  }\n  if (height === 0) {\n    height = mainCtx.canvas.height;\n  }\n\n  // Set the size - also clears the canvas\n  mainCtx.canvas.width = width;\n  mainCtx.canvas.height = height;\n\n  var imageWidth = width;\n  var imageHeight = height;\n\n  // Create audio tag for alarm sound\n  if (playAlarm && alarmSound !== false) {\n    var audioElement = doc.createElement('audio');\n    audioElement.setAttribute('src', alarmSound);\n    //audioElement.setAttribute('src', 'js/alarm.mp3');\n    audioElement.setAttribute('preload', 'auto');\n  }\n\n  var self = this;\n  var value = minValue;\n\n  // Properties\n  var minMeasuredValue = maxValue;\n  var maxMeasuredValue = minValue;\n\n  // Check gaugeType is 1 or 2\n  if (gaugeType.type !== 'type1' && gaugeType.type !== 'type2') {\n    gaugeType = GaugeType.TYPE1;\n  }\n\n  var tween;\n  var ledBlinking = false;\n  var repainting = false;\n\n  var ledTimerId = 0;\n\n  var vertical = width <= height;\n\n  // Constants\n  var ledPosX;\n  var ledPosY;\n  var ledSize = Math.round((vertical ? height : width) * 0.05);\n  var minMaxIndSize = Math.round((vertical ? width : height) * 0.05);\n  var stdFont;\n  var lcdFont;\n\n  // Misc\n  if (vertical) {\n    ledPosX = imageWidth / 2 - ledSize / 2;\n    ledPosY = (gaugeType.type === 'type1' ? 0.053 : 0.038) * imageHeight;\n    stdFont = Math.floor(imageHeight / 22) + 'px ' + stdFontName;\n    lcdFont = Math.floor(imageHeight / 22) + 'px ' + lcdFontName;\n  } else {\n    ledPosX = 0.89 * imageWidth;\n    ledPosY = imageHeight / 2 - ledSize / 2;\n    stdFont = Math.floor(imageHeight / 10) + 'px ' + stdFontName;\n    lcdFont = Math.floor(imageHeight / 10) + 'px ' + lcdFontName;\n  }\n\n  var initialized = false;\n\n  // Tickmark specific private variables\n  var niceMinValue = minValue;\n  var niceMaxValue = maxValue;\n  var niceRange = maxValue - minValue;\n  var range = niceMaxValue - niceMinValue;\n  var minorTickSpacing = 0;\n  var majorTickSpacing = 0;\n  var maxNoOfMinorTicks = 10;\n  var maxNoOfMajorTicks = 10;\n\n  // Method to calculate nice values for min, max and range for the tickmarks\n  var calculate = function calculate() {\n    if (niceScale) {\n      niceRange = calcNiceNumber(maxValue - minValue, false);\n      majorTickSpacing = calcNiceNumber(niceRange / (maxNoOfMajorTicks - 1), true);\n      niceMinValue = Math.floor(minValue / majorTickSpacing) * majorTickSpacing;\n      niceMaxValue = Math.ceil(maxValue / majorTickSpacing) * majorTickSpacing;\n      minorTickSpacing = calcNiceNumber(majorTickSpacing / (maxNoOfMinorTicks - 1), true);\n      minValue = niceMinValue;\n      maxValue = niceMaxValue;\n      range = maxValue - minValue;\n    } else {\n      niceRange = (maxValue - minValue);\n      niceMinValue = minValue;\n      niceMaxValue = maxValue;\n      range = niceRange;\n      minorTickSpacing = 1;\n      majorTickSpacing = 10;\n    }\n    // Make sure values are still in range\n    value = value < minValue ? minValue : value > maxValue ? maxValue : value;\n    minMeasuredValue = minMeasuredValue < minValue ? minValue : minMeasuredValue > maxValue ? maxValue : minMeasuredValue;\n    maxMeasuredValue = maxMeasuredValue < minValue ? minValue : maxMeasuredValue > maxValue ? maxValue : maxMeasuredValue;\n    threshold = threshold < minValue ? minValue : threshold > maxValue ? maxValue : threshold;\n  };\n\n  // **************   Buffer creation  ********************\n  // Buffer for the frame\n  var frameBuffer = createBuffer(width, height);\n  var frameContext = frameBuffer.getContext('2d');\n\n  // Buffer for the background\n  var backgroundBuffer = createBuffer(width, height);\n  var backgroundContext = backgroundBuffer.getContext('2d');\n\n  var lcdBuffer;\n\n  // Buffer for led on painting code\n  var ledBufferOn = createBuffer(ledSize, ledSize);\n  var ledContextOn = ledBufferOn.getContext('2d');\n\n  // Buffer for led off painting code\n  var ledBufferOff = createBuffer(ledSize, ledSize);\n  var ledContextOff = ledBufferOff.getContext('2d');\n\n  // Buffer for current led painting code\n  var ledBuffer = ledBufferOff;\n\n  // Buffer for the minMeasuredValue indicator\n  var minMeasuredValueBuffer = createBuffer(minMaxIndSize, minMaxIndSize);\n  var minMeasuredValueCtx = minMeasuredValueBuffer.getContext('2d');\n\n  // Buffer for the maxMeasuredValue indicator\n  var maxMeasuredValueBuffer = createBuffer(minMaxIndSize, minMaxIndSize);\n  var maxMeasuredValueCtx = maxMeasuredValueBuffer.getContext('2d');\n\n  // Buffer for static foreground painting code\n  var foregroundBuffer = createBuffer(width, height);\n  var foregroundContext = foregroundBuffer.getContext('2d');\n\n  // **************   Image creation  ********************\n  var drawLcdText = function(ctx, value, vertical) {\n    ctx.save();\n    ctx.textAlign = 'right';\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = lcdColor.textColor;\n    ctx.fillStyle = lcdColor.textColor;\n\n    if (lcdColor === LcdColor.STANDARD || lcdColor === LcdColor.STANDARD_GREEN) {\n      ctx.shadowColor = 'gray';\n      if (vertical) {\n        ctx.shadowOffsetX = imageHeight * 0.003;\n        ctx.shadowOffsetY = imageHeight * 0.003;\n        ctx.shadowBlur = imageHeight * 0.004;\n      } else {\n        ctx.shadowOffsetX = imageHeight * 0.007;\n        ctx.shadowOffsetY = imageHeight * 0.007;\n        ctx.shadowBlur = imageHeight * 0.009;\n      }\n    }\n\n    var lcdTextX;\n    var lcdTextY;\n    var lcdTextWidth;\n\n    if (digitalFont) {\n      ctx.font = lcdFont;\n    } else {\n      ctx.font = stdFont;\n    }\n\n    if (vertical) {\n      lcdTextX = (imageWidth - (imageWidth * 0.571428)) / 2 + imageWidth * 0.571428 - 2;\n      lcdTextY = imageHeight * 0.88 + 1 + (imageHeight * 0.055 - 2) / 2;\n      lcdTextWidth = imageWidth * 0.7 - 2;\n    } else {\n      lcdTextX = (imageWidth * 0.695) + imageWidth * 0.18 - 2;\n      lcdTextY = (imageHeight * 0.22) + 1 + (imageHeight * 0.15 - 2) / 2;\n      lcdTextWidth = imageHeight * 0.22 - 2;\n    }\n\n    ctx.fillText(value.toFixed(lcdDecimals), lcdTextX, lcdTextY, lcdTextWidth);\n\n    ctx.restore();\n  };\n\n  var createThresholdImage = function(vertical) {\n    var thresholdBuffer = doc.createElement('canvas');\n    var thresholdCtx = thresholdBuffer.getContext('2d');\n    thresholdBuffer.height = thresholdBuffer.width = minMaxIndSize;\n\n    thresholdCtx.save();\n    var gradThreshold = thresholdCtx.createLinearGradient(0, 0.1, 0, thresholdBuffer.height * 0.9);\n    gradThreshold.addColorStop(0, '#520000');\n    gradThreshold.addColorStop(0.3, '#fc1d00');\n    gradThreshold.addColorStop(0.59, '#fc1d00');\n    gradThreshold.addColorStop(1, '#520000');\n    thresholdCtx.fillStyle = gradThreshold;\n\n    if (vertical) {\n      thresholdCtx.beginPath();\n      thresholdCtx.moveTo(0.1, thresholdBuffer.height * 0.5);\n      thresholdCtx.lineTo(thresholdBuffer.width * 0.9, 0.1);\n      thresholdCtx.lineTo(thresholdBuffer.width * 0.9, thresholdBuffer.height * 0.9);\n      thresholdCtx.closePath();\n    } else {\n      thresholdCtx.beginPath();\n      thresholdCtx.moveTo(0.1, 0.1);\n      thresholdCtx.lineTo(thresholdBuffer.width * 0.9, 0.1);\n      thresholdCtx.lineTo(thresholdBuffer.width * 0.5, thresholdBuffer.height * 0.9);\n      thresholdCtx.closePath();\n    }\n\n    thresholdCtx.fill();\n    thresholdCtx.strokeStyle = '#FFFFFF';\n    thresholdCtx.stroke();\n\n    thresholdCtx.restore();\n\n    return thresholdBuffer;\n  };\n\n  var drawTickmarksImage = function(ctx, labelNumberFormat, vertical) {\n    backgroundColor.labelColor.setAlpha(1);\n    ctx.save();\n    ctx.textBaseline = 'middle';\n    var TEXT_WIDTH = imageWidth * 0.1;\n    ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();\n    ctx.fillStyle = backgroundColor.labelColor.getRgbaColor();\n\n    var valueCounter = minValue;\n    var majorTickCounter = maxNoOfMinorTicks - 1;\n    var tickCounter;\n    var currentPos;\n    var scaleBoundsX;\n    var scaleBoundsY;\n    var scaleBoundsW;\n    var scaleBoundsH;\n    var tickSpaceScaling = 1;\n\n    var minorTickStart;\n    var minorTickStop;\n    var mediumTickStart;\n    var mediumTickStop;\n    var majorTickStart;\n    var majorTickStop;\n    if (vertical) {\n      minorTickStart = (0.34 * imageWidth);\n      minorTickStop = (0.36 * imageWidth);\n      mediumTickStart = (0.33 * imageWidth);\n      mediumTickStop = (0.36 * imageWidth);\n      majorTickStart = (0.32 * imageWidth);\n      majorTickStop = (0.36 * imageWidth);\n      ctx.textAlign = 'right';\n      scaleBoundsX = 0;\n      scaleBoundsY = imageHeight * 0.128640;\n      scaleBoundsW = 0;\n      if (gaugeType.type === 'type1') {\n        scaleBoundsH = (imageHeight * 0.856796 - imageHeight * 0.128640);\n      } else {\n        scaleBoundsH = (imageHeight * 0.7475 - imageHeight * 0.128640);\n      }\n      tickSpaceScaling = scaleBoundsH / (maxValue - minValue);\n    } else {\n      minorTickStart = (0.65 * imageHeight);\n      minorTickStop = (0.63 * imageHeight);\n      mediumTickStart = (0.66 * imageHeight);\n      mediumTickStop = (0.63 * imageHeight);\n      majorTickStart = (0.67 * imageHeight);\n      majorTickStop = (0.63 * imageHeight);\n      ctx.textAlign = 'center';\n      scaleBoundsY = 0;\n      if (gaugeType.type === 'type1') {\n        scaleBoundsX = imageWidth * 0.142857;\n        scaleBoundsW = (imageWidth * 0.871012 - scaleBoundsX);\n      } else {\n        scaleBoundsX = imageWidth * 0.19857;\n        scaleBoundsW = (imageWidth * 0.82 - scaleBoundsX);\n      }\n      scaleBoundsH = 0;\n      tickSpaceScaling = scaleBoundsW / (maxValue - minValue);\n    }\n\n    var labelCounter;\n    for (labelCounter = minValue, tickCounter = 0; labelCounter <= maxValue; labelCounter += minorTickSpacing, tickCounter += minorTickSpacing) {\n\n      // Calculate the bounds of the scaling\n      if (vertical) {\n        currentPos = scaleBoundsY + scaleBoundsH - tickCounter * tickSpaceScaling;\n      } else {\n        currentPos = scaleBoundsX + tickCounter * tickSpaceScaling;\n      }\n\n      majorTickCounter++;\n\n      // Draw tickmark every major tickmark spacing\n      if (majorTickCounter === maxNoOfMinorTicks) {\n\n        // Draw the major tickmarks\n        ctx.lineWidth = 1.5;\n        drawLinearTicks(ctx, majorTickStart, majorTickStop, currentPos, vertical);\n\n        // Draw the standard tickmark labels\n        if (vertical) {\n          // Vertical orientation\n          switch (labelNumberFormat.format) {\n            case 'fractional':\n              ctx.fillText((valueCounter.toFixed(2)), imageWidth * 0.28, currentPos, TEXT_WIDTH);\n              break;\n\n            case 'scientific':\n              ctx.fillText((valueCounter.toPrecision(2)), imageWidth * 0.28, currentPos, TEXT_WIDTH);\n              break;\n\n            case 'standard':\n              /* falls through */\n            default:\n              ctx.fillText((valueCounter.toFixed(0)), imageWidth * 0.28, currentPos, TEXT_WIDTH);\n              break;\n          }\n        } else {\n          // Horizontal orientation\n          switch (labelNumberFormat.format) {\n            case 'fractional':\n              ctx.fillText((valueCounter.toFixed(2)), currentPos, (imageHeight * 0.73), TEXT_WIDTH);\n              break;\n\n            case 'scientific':\n              ctx.fillText((valueCounter.toPrecision(2)), currentPos, (imageHeight * 0.73), TEXT_WIDTH);\n              break;\n\n            case 'standard':\n              /* falls through */\n            default:\n              ctx.fillText((valueCounter.toFixed(0)), currentPos, (imageHeight * 0.73), TEXT_WIDTH);\n              break;\n          }\n        }\n\n        valueCounter += majorTickSpacing;\n        majorTickCounter = 0;\n        continue;\n      }\n\n      // Draw tickmark every minor tickmark spacing\n      if (0 === maxNoOfMinorTicks % 2 && majorTickCounter === (maxNoOfMinorTicks / 2)) {\n        ctx.lineWidth = 1;\n        drawLinearTicks(ctx, mediumTickStart, mediumTickStop, currentPos, vertical);\n      } else {\n        ctx.lineWidth = 0.5;\n        drawLinearTicks(ctx, minorTickStart, minorTickStop, currentPos, vertical);\n      }\n    }\n\n    ctx.restore();\n  };\n\n  var drawLinearTicks = function(ctx, tickStart, tickStop, currentPos, vertical) {\n    if (vertical) {\n      // Vertical orientation\n      ctx.beginPath();\n      ctx.moveTo(tickStart, currentPos);\n      ctx.lineTo(tickStop, currentPos);\n      ctx.closePath();\n      ctx.stroke();\n    } else {\n      // Horizontal orientation\n      ctx.beginPath();\n      ctx.moveTo(currentPos, tickStart);\n      ctx.lineTo(currentPos, tickStop);\n      ctx.closePath();\n      ctx.stroke();\n    }\n  };\n\n  // **************   Initialization  ********************\n  var init = function(parameters) {\n    parameters = parameters || {};\n    var drawFrame = (undefined === parameters.frame ? false : parameters.frame);\n    var drawBackground = (undefined === parameters.background ? false : parameters.background);\n    var drawLed = (undefined === parameters.led ? false : parameters.led);\n    var drawForeground = (undefined === parameters.foreground ? false : parameters.foreground);\n\n    var yOffset;\n    var yRange;\n    var valuePos;\n\n    initialized = true;\n\n    // Calculate the current min and max values and the range\n    calculate();\n\n    // Create frame in frame buffer (backgroundBuffer)\n    if (drawFrame && frameVisible) {\n      drawLinearFrameImage(frameContext, frameDesign, imageWidth, imageHeight, vertical);\n    }\n\n    // Create background in background buffer (backgroundBuffer)\n    if (drawBackground && backgroundVisible) {\n      drawLinearBackgroundImage(backgroundContext, backgroundColor, imageWidth, imageHeight, vertical);\n    }\n\n    // draw Thermometer outline\n    if (drawBackground && gaugeType.type === 'type2') {\n      drawBackgroundImage(backgroundContext);\n    }\n\n    if (drawLed) {\n      if (vertical) {\n        // Draw LED ON in ledBuffer_ON\n        ledContextOn.drawImage(createLedImage(ledSize, 1, ledColor), 0, 0);\n\n        // Draw LED ON in ledBuffer_OFF\n        ledContextOff.drawImage(createLedImage(ledSize, 0, ledColor), 0, 0);\n      } else {\n        // Draw LED ON in ledBuffer_ON\n        ledContextOn.drawImage(createLedImage(ledSize, 1, ledColor), 0, 0);\n\n        // Draw LED ON in ledBuffer_OFF\n        ledContextOff.drawImage(createLedImage(ledSize, 0, ledColor), 0, 0);\n      }\n    }\n\n    // Draw min measured value indicator in minMeasuredValueBuffer\n    if (minMeasuredValueVisible) {\n      if (vertical) {\n        minMeasuredValueCtx.drawImage(createMeasuredValueImage(minMaxIndSize, ColorDef.BLUE.dark.getRgbaColor(), false, vertical), 0, 0);\n      } else {\n        minMeasuredValueCtx.drawImage(createMeasuredValueImage(minMaxIndSize, ColorDef.BLUE.dark.getRgbaColor(), false, vertical), 0, 0);\n      }\n    }\n\n    // Draw max measured value indicator in maxMeasuredValueBuffer\n    if (maxMeasuredValueVisible) {\n      if (vertical) {\n        maxMeasuredValueCtx.drawImage(createMeasuredValueImage(minMaxIndSize, ColorDef.RED.medium.getRgbaColor(), false, vertical), 0, 0);\n      } else {\n        maxMeasuredValueCtx.drawImage(createMeasuredValueImage(minMaxIndSize, ColorDef.RED.medium.getRgbaColor(), false, vertical), 0, 0);\n      }\n    }\n\n    // Create alignment posts in background buffer (backgroundBuffer)\n    if (drawBackground && backgroundVisible) {\n\n      // Create tickmarks in background buffer (backgroundBuffer)\n      drawTickmarksImage(backgroundContext, labelNumberFormat, vertical);\n\n      // Create title in background buffer (backgroundBuffer)\n      if (vertical) {\n        drawTitleImage(backgroundContext, imageWidth, imageHeight, titleString, unitString, backgroundColor, vertical, null, lcdVisible, gaugeType);\n      } else {\n        drawTitleImage(backgroundContext, imageWidth, imageHeight, titleString, unitString, backgroundColor, vertical, null, lcdVisible, gaugeType);\n      }\n    }\n\n    // Draw threshold image to background context\n    if (drawBackground && thresholdVisible) {\n      backgroundContext.save();\n      if (vertical) {\n        // Vertical orientation\n        yOffset = (gaugeType.type === 'type1' ? 0.856796 : 0.7475);\n        yRange = yOffset - 0.128640;\n        valuePos = imageHeight * yOffset - (imageHeight * yRange) * (threshold - minValue) / (maxValue - minValue);\n        backgroundContext.translate(imageWidth * 0.365, valuePos - minMaxIndSize / 2);\n      } else {\n        // Horizontal orientation\n        yOffset = (gaugeType.type === 'type1' ? 0.871012 : 0.82);\n        yRange = yOffset - (gaugeType.type === 'type1' ? 0.142857 : 0.19857);\n        valuePos = imageWidth * yRange * (threshold - minValue) / (maxValue - minValue);\n        backgroundContext.translate(imageWidth * (gaugeType.type === 'type1' ? 0.142857 : 0.19857) - minMaxIndSize / 2 + valuePos, imageHeight * 0.58);\n      }\n      backgroundContext.drawImage(createThresholdImage(vertical), 0, 0);\n      backgroundContext.restore();\n    }\n\n    // Create lcd background if selected in background buffer (backgroundBuffer)\n    if (drawBackground && lcdVisible) {\n      if (vertical) {\n        lcdBuffer = createLcdBackgroundImage(imageWidth * 0.571428, imageHeight * 0.055, lcdColor);\n        backgroundContext.drawImage(lcdBuffer, ((imageWidth - (imageWidth * 0.571428)) / 2), imageHeight * 0.88);\n      } else {\n        lcdBuffer = createLcdBackgroundImage(imageWidth * 0.18, imageHeight * 0.15, lcdColor);\n        backgroundContext.drawImage(lcdBuffer, imageWidth * 0.695, imageHeight * 0.22);\n      }\n    }\n\n    // add thermometer stem foreground\n    if (drawForeground && gaugeType.type === 'type2') {\n      drawForegroundImage(foregroundContext);\n    }\n\n    // Create foreground in foreground buffer (foregroundBuffer)\n    if (drawForeground && foregroundVisible) {\n      drawLinearForegroundImage(foregroundContext, imageWidth, imageHeight, vertical, false);\n    }\n  };\n\n  var resetBuffers = function(buffers) {\n    buffers = buffers || {};\n    var resetFrame = (undefined === buffers.frame ? false : buffers.frame);\n    var resetBackground = (undefined === buffers.background ? false : buffers.background);\n    var resetLed = (undefined === buffers.led ? false : buffers.led);\n    var resetForeground = (undefined === buffers.foreground ? false : buffers.foreground);\n\n    if (resetFrame) {\n      frameBuffer.width = width;\n      frameBuffer.height = height;\n      frameContext = frameBuffer.getContext('2d');\n    }\n\n    if (resetBackground) {\n      backgroundBuffer.width = width;\n      backgroundBuffer.height = height;\n      backgroundContext = backgroundBuffer.getContext('2d');\n    }\n\n    if (resetLed) {\n      ledBufferOn.width = Math.ceil(width * 0.093457);\n      ledBufferOn.height = Math.ceil(height * 0.093457);\n      ledContextOn = ledBufferOn.getContext('2d');\n\n      ledBufferOff.width = Math.ceil(width * 0.093457);\n      ledBufferOff.height = Math.ceil(height * 0.093457);\n      ledContextOff = ledBufferOff.getContext('2d');\n\n      // Buffer for current led painting code\n      ledBuffer = ledBufferOff;\n    }\n\n    if (resetForeground) {\n      foregroundBuffer.width = width;\n      foregroundBuffer.height = height;\n      foregroundContext = foregroundBuffer.getContext('2d');\n    }\n  };\n\n  var blink = function(blinking) {\n    if (blinking) {\n      ledTimerId = setInterval(toggleAndRepaintLed, 1000);\n    } else {\n      clearInterval(ledTimerId);\n      ledBuffer = ledBufferOff;\n    }\n  };\n\n  var toggleAndRepaintLed = function() {\n    if (ledVisible) {\n      if (ledBuffer === ledBufferOn) {\n        ledBuffer = ledBufferOff;\n      } else {\n        ledBuffer = ledBufferOn;\n      }\n      if (!repainting) {\n        repainting = true;\n        requestAnimFrame(self.repaint);\n      }\n    }\n  };\n\n  var drawValue = function(ctx, imageWidth, imageHeight) {\n    var top; // position of max value\n    var bottom; // position of min value\n    var labelColor = backgroundColor.labelColor;\n    var fullSize;\n    var valueSize, valueTop;\n    var valueStartX, valueStartY, valueStopX, valueStopY;\n    var valueBackgroundStartX, valueBackgroundStartY, valueBackgroundStopX, valueBackgroundStopY;\n    var valueBorderStartX, valueBorderStartY, valueBorderStopX, valueBorderStopY;\n    var valueForegroundStartX, valueForegroundStartY, valueForegroundStopX, valueForegroundStopY;\n\n    // Orientation dependend definitions\n    if (vertical) {\n      // Vertical orientation\n      top = imageHeight * 0.128640; // position of max value\n      if (gaugeType.type === 'type1') {\n        bottom = imageHeight * 0.856796; // position of min value\n      } else {\n        bottom = imageHeight * 0.7475;\n      }\n      fullSize = bottom - top;\n      valueSize = fullSize * (value - minValue) / (maxValue - minValue);\n      valueTop = bottom - valueSize;\n      valueBackgroundStartX = 0;\n      valueBackgroundStartY = top;\n      valueBackgroundStopX = 0;\n      valueBackgroundStopY = bottom;\n    } else {\n      // Horizontal orientation\n      if (gaugeType.type === 'type1') {\n        top = imageWidth * 0.871012; // position of max value\n        bottom = imageWidth * 0.142857; // position of min value\n      } else {\n        top = imageWidth * 0.82; // position of max value\n        bottom = imageWidth * 0.19857; // position of min value\n      }\n      fullSize = top - bottom;\n      valueSize = fullSize * (value - minValue) / (maxValue - minValue);\n      valueTop = bottom;\n      valueBackgroundStartX = top;\n      valueBackgroundStartY = 0;\n      valueBackgroundStopX = bottom;\n      valueBackgroundStopY = 0;\n    }\n    if (gaugeType.type === 'type1') {\n      var darker = (backgroundColor === BackgroundColor.CARBON ||\n        backgroundColor === BackgroundColor.PUNCHED_SHEET ||\n        backgroundColor === BackgroundColor.STAINLESS ||\n        backgroundColor === BackgroundColor.BRUSHED_STAINLESS ||\n        backgroundColor === BackgroundColor.TURNED) ? 0.3 : 0;\n      var valueBackgroundTrackGradient = ctx.createLinearGradient(valueBackgroundStartX, valueBackgroundStartY, valueBackgroundStopX, valueBackgroundStopY);\n      labelColor.setAlpha(0.05 + darker);\n      valueBackgroundTrackGradient.addColorStop(0, labelColor.getRgbaColor());\n      labelColor.setAlpha(0.15 + darker);\n      valueBackgroundTrackGradient.addColorStop(0.48, labelColor.getRgbaColor());\n      labelColor.setAlpha(0.15 + darker);\n      valueBackgroundTrackGradient.addColorStop(0.49, labelColor.getRgbaColor());\n      labelColor.setAlpha(0.05 + darker);\n      valueBackgroundTrackGradient.addColorStop(1, labelColor.getRgbaColor());\n      ctx.fillStyle = valueBackgroundTrackGradient;\n\n      if (vertical) {\n        ctx.fillRect(imageWidth * 0.435714, top, imageWidth * 0.142857, fullSize);\n      } else {\n        ctx.fillRect(imageWidth * 0.142857, imageHeight * 0.435714, fullSize, imageHeight * 0.142857);\n      }\n\n      if (vertical) {\n        // Vertical orientation\n        valueBorderStartX = 0;\n        valueBorderStartY = top;\n        valueBorderStopX = 0;\n        valueBorderStopY = top + fullSize;\n      } else {\n        // Horizontal orientation\n        valueBorderStartX = imageWidth * 0.142857 + fullSize;\n        valueBorderStartY = 0;\n        valueBorderStopX = imageWidth * 0.142857;\n        valueBorderStopY = 0;\n      }\n      var valueBorderGradient = ctx.createLinearGradient(valueBorderStartX, valueBorderStartY, valueBorderStopX, valueBorderStopY);\n      labelColor.setAlpha(0.3 + darker);\n      valueBorderGradient.addColorStop(0, labelColor.getRgbaColor());\n      labelColor.setAlpha(0.69);\n      valueBorderGradient.addColorStop(0.48, labelColor.getRgbaColor());\n      labelColor.setAlpha(0.7);\n      valueBorderGradient.addColorStop(0.49, labelColor.getRgbaColor());\n      labelColor.setAlpha(0.4);\n      valueBorderGradient.addColorStop(1, labelColor.getRgbaColor());\n      ctx.fillStyle = valueBorderGradient;\n      if (vertical) {\n        ctx.fillRect(imageWidth * 0.435714, top, imageWidth * 0.007142, fullSize);\n        ctx.fillRect(imageWidth * 0.571428, top, imageWidth * 0.007142, fullSize);\n      } else {\n        ctx.fillRect(imageWidth * 0.142857, imageHeight * 0.435714, fullSize, imageHeight * 0.007142);\n        ctx.fillRect(imageWidth * 0.142857, imageHeight * 0.571428, fullSize, imageHeight * 0.007142);\n      }\n    }\n    if (vertical) {\n      // Vertical orientation\n      if (gaugeType.type === 'type1') {\n        valueStartX = imageWidth * 0.45;\n        valueStartY = 0;\n        valueStopX = imageWidth * 0.45 + imageWidth * 0.114285;\n        valueStopY = 0;\n      } else {\n        valueStartX = imageWidth / 2 - imageHeight * 0.0486 / 2;\n        valueStartY = 0;\n        valueStopX = valueStartX + imageHeight * 0.053;\n        valueStopY = 0;\n      }\n    } else {\n      // Horizontal orientation\n      if (gaugeType.type === 'type1') {\n        valueStartX = 0;\n        valueStartY = imageHeight * 0.45;\n        valueStopX = 0;\n        valueStopY = imageHeight * 0.45 + imageHeight * 0.114285;\n      } else {\n        valueStartX = 0;\n        valueStartY = imageHeight / 2 - imageWidth * 0.0250;\n        valueStopX = 0;\n        valueStopY = valueStartY + imageWidth * 0.053;\n      }\n    }\n\n    var valueBackgroundGradient = ctx.createLinearGradient(valueStartX, valueStartY, valueStopX, valueStopY);\n    valueBackgroundGradient.addColorStop(0, valueColor.medium.getRgbaColor());\n    valueBackgroundGradient.addColorStop(1, valueColor.light.getRgbaColor());\n    ctx.fillStyle = valueBackgroundGradient;\n    var thermoTweak = (gaugeType.type === 'type1' ? 0 : (vertical ? imageHeight * 0.05 : imageWidth * 0.05));\n    if (vertical) {\n      ctx.fillRect(valueStartX, valueTop, valueStopX - valueStartX, valueSize + thermoTweak);\n    } else {\n      ctx.fillRect(valueTop - thermoTweak, valueStartY, valueSize + thermoTweak, valueStopY - valueStartY);\n    }\n\n    if (gaugeType.type === 'type1') {\n      // The light effect on the value\n      if (vertical) {\n        // Vertical orientation\n        valueForegroundStartX = imageWidth * 0.45;\n        valueForegroundStartY = 0;\n        valueForegroundStopX = valueForegroundStartX + imageWidth * 0.05;\n        valueForegroundStopY = 0;\n      } else {\n        // Horizontal orientation\n        valueForegroundStartX = 0;\n        valueForegroundStartY = imageHeight * 0.45;\n        valueForegroundStopX = 0;\n        valueForegroundStopY = valueForegroundStartY + imageHeight * 0.05;\n      }\n      var valueForegroundGradient = ctx.createLinearGradient(valueForegroundStartX, valueForegroundStartY, valueForegroundStopX, valueForegroundStopY);\n      valueForegroundGradient.addColorStop(0, 'rgba(255, 255, 255, 0.7)');\n      valueForegroundGradient.addColorStop(0.98, 'rgba(255, 255, 255, 0.0)');\n      ctx.fillStyle = valueForegroundGradient;\n      if (vertical) {\n        ctx.fillRect(valueForegroundStartX, valueTop, valueForegroundStopX, valueSize);\n      } else {\n        ctx.fillRect(valueTop, valueForegroundStartY, valueSize, valueForegroundStopY - valueForegroundStartY);\n      }\n    }\n  };\n\n  var drawForegroundImage = function(ctx) {\n    var foreSize = (vertical ? imageHeight : imageWidth);\n\n    ctx.save();\n    if (vertical) {\n      ctx.translate(imageWidth / 2, 0);\n    } else {\n      ctx.translate(imageWidth / 2, imageHeight / 2);\n      ctx.rotate(HALF_PI);\n      ctx.translate(0, -imageWidth / 2 + imageWidth * 0.05);\n    }\n\n    // draw bulb\n    ctx.beginPath();\n    ctx.moveTo(-0.0490 * foreSize, 0.825 * foreSize);\n    ctx.bezierCurveTo(-0.0490 * foreSize, 0.7975 * foreSize, -0.0264 * foreSize, 0.775 * foreSize, 0.0013 * foreSize, 0.775 * foreSize);\n    ctx.bezierCurveTo(0.0264 * foreSize, 0.775 * foreSize, 0.0490 * foreSize, 0.7975 * foreSize, 0.0490 * foreSize, 0.825 * foreSize);\n    ctx.bezierCurveTo(0.0490 * foreSize, 0.85 * foreSize, 0.0264 * foreSize, 0.8725 * foreSize, 0.0013 * foreSize, 0.8725 * foreSize);\n    ctx.bezierCurveTo(-0.0264 * foreSize, 0.8725 * foreSize, -0.0490 * foreSize, 0.85 * foreSize, -0.0490 * foreSize, 0.825 * foreSize);\n    ctx.closePath();\n    var grad = ctx.createRadialGradient(0 * foreSize, 0.825 * foreSize, 0, 0 * foreSize, 0.825 * foreSize, 0.0490 * foreSize);\n    grad.addColorStop(0, valueColor.medium.getRgbaColor());\n    grad.addColorStop(0.3, valueColor.medium.getRgbaColor());\n    grad.addColorStop(1, valueColor.light.getRgbaColor());\n    ctx.fillStyle = grad;\n    ctx.fill();\n\n    // draw bulb highlight\n    ctx.beginPath();\n    if (vertical) {\n      ctx.moveTo(-0.0365 * foreSize, 0.8075 * foreSize);\n      ctx.bezierCurveTo(-0.0365 * foreSize, 0.7925 * foreSize, -0.0214 * foreSize, 0.7875 * foreSize, -0.0214 * foreSize, 0.7825 * foreSize);\n      ctx.bezierCurveTo(0.0189 * foreSize, 0.785 * foreSize, 0.0365 * foreSize, 0.7925 * foreSize, 0.0365 * foreSize, 0.8075 * foreSize);\n      ctx.bezierCurveTo(0.0365 * foreSize, 0.8175 * foreSize, 0.0214 * foreSize, 0.815 * foreSize, 0.0013 * foreSize, 0.8125 * foreSize);\n      ctx.bezierCurveTo(-0.0189 * foreSize, 0.8125 * foreSize, -0.0365 * foreSize, 0.8175 * foreSize, -0.0365 * foreSize, 0.8075 * foreSize);\n      grad = ctx.createRadialGradient(0, 0.8 * foreSize, 0, 0, 0.8 * foreSize, 0.0377 * foreSize);\n    } else {\n      ctx.beginPath();\n      ctx.moveTo(-0.0214 * foreSize, 0.86 * foreSize);\n      ctx.bezierCurveTo(-0.0365 * foreSize, 0.86 * foreSize, -0.0415 * foreSize, 0.845 * foreSize, -0.0465 * foreSize, 0.825 * foreSize);\n      ctx.bezierCurveTo(-0.0465 * foreSize, 0.805 * foreSize, -0.0365 * foreSize, 0.7875 * foreSize, -0.0214 * foreSize, 0.7875 * foreSize);\n      ctx.bezierCurveTo(-0.0113 * foreSize, 0.7875 * foreSize, -0.0163 * foreSize, 0.8025 * foreSize, -0.0163 * foreSize, 0.8225 * foreSize);\n      ctx.bezierCurveTo(-0.0163 * foreSize, 0.8425 * foreSize, -0.0113 * foreSize, 0.86 * foreSize, -0.0214 * foreSize, 0.86 * foreSize);\n      grad = ctx.createRadialGradient(-0.03 * foreSize, 0.8225 * foreSize, 0, -0.03 * foreSize, 0.8225 * foreSize, 0.0377 * foreSize);\n    }\n    grad.addColorStop(0.0, 'rgba(255, 255, 255, 0.55)');\n    grad.addColorStop(1.0, 'rgba(255, 255, 255, 0.05)');\n    ctx.fillStyle = grad;\n    ctx.closePath();\n    ctx.fill();\n\n    // stem highlight\n    ctx.beginPath();\n    ctx.moveTo(-0.0214 * foreSize, 0.115 * foreSize);\n    ctx.bezierCurveTo(-0.0214 * foreSize, 0.1075 * foreSize, -0.0163 * foreSize, 0.1025 * foreSize, -0.0113 * foreSize, 0.1025 * foreSize);\n    ctx.bezierCurveTo(-0.0113 * foreSize, 0.1025 * foreSize, -0.0113 * foreSize, 0.1025 * foreSize, -0.0113 * foreSize, 0.1025 * foreSize);\n    ctx.bezierCurveTo(-0.0038 * foreSize, 0.1025 * foreSize, 0.0013 * foreSize, 0.1075 * foreSize, 0.0013 * foreSize, 0.115 * foreSize);\n    ctx.bezierCurveTo(0.0013 * foreSize, 0.115 * foreSize, 0.0013 * foreSize, 0.76 * foreSize, 0.0013 * foreSize, 0.76 * foreSize);\n    ctx.bezierCurveTo(0.0013 * foreSize, 0.7675 * foreSize, -0.0038 * foreSize, 0.7725 * foreSize, -0.0113 * foreSize, 0.7725 * foreSize);\n    ctx.bezierCurveTo(-0.0113 * foreSize, 0.7725 * foreSize, -0.0113 * foreSize, 0.7725 * foreSize, -0.0113 * foreSize, 0.7725 * foreSize);\n    ctx.bezierCurveTo(-0.0163 * foreSize, 0.7725 * foreSize, -0.0214 * foreSize, 0.7675 * foreSize, -0.0214 * foreSize, 0.76 * foreSize);\n    ctx.bezierCurveTo(-0.0214 * foreSize, 0.76 * foreSize, -0.0214 * foreSize, 0.115 * foreSize, -0.0214 * foreSize, 0.115 * foreSize);\n    ctx.closePath();\n    grad = ctx.createLinearGradient(-0.0189 * foreSize, 0, 0.0013 * foreSize, 0);\n    grad.addColorStop(0.0, 'rgba(255, 255, 255, 0.1)');\n    grad.addColorStop(0.34, 'rgba(255, 255, 255, 0.5)');\n    grad.addColorStop(1.0, 'rgba(255, 255, 255, 0.1)');\n    ctx.fillStyle = grad;\n    ctx.fill();\n\n    ctx.restore();\n  };\n\n  var drawBackgroundImage = function(ctx) {\n    var backSize = (vertical ? imageHeight : imageWidth);\n    ctx.save();\n    if (vertical) {\n      ctx.translate(imageWidth / 2, 0);\n    } else {\n      ctx.translate(imageWidth / 2, imageHeight / 2);\n      ctx.rotate(HALF_PI);\n      ctx.translate(0, -imageWidth / 2 + imageWidth * 0.05);\n    }\n    ctx.beginPath();\n    ctx.moveTo(-0.0516 * backSize, 0.825 * backSize);\n    ctx.bezierCurveTo(-0.0516 * backSize, 0.8525 * backSize, -0.0289 * backSize, 0.875 * backSize, 0.0013 * backSize, 0.875 * backSize);\n    ctx.bezierCurveTo(0.0289 * backSize, 0.875 * backSize, 0.0516 * backSize, 0.8525 * backSize, 0.0516 * backSize, 0.825 * backSize);\n    ctx.bezierCurveTo(0.0516 * backSize, 0.8075 * backSize, 0.0440 * backSize, 0.7925 * backSize, 0.0314 * backSize, 0.7825 * backSize);\n    ctx.bezierCurveTo(0.0314 * backSize, 0.7825 * backSize, 0.0314 * backSize, 0.12 * backSize, 0.0314 * backSize, 0.12 * backSize);\n    ctx.bezierCurveTo(0.0314 * backSize, 0.1025 * backSize, 0.0189 * backSize, 0.0875 * backSize, 0.0013 * backSize, 0.0875 * backSize);\n    ctx.bezierCurveTo(-0.0163 * backSize, 0.0875 * backSize, -0.0289 * backSize, 0.1025 * backSize, -0.0289 * backSize, 0.12 * backSize);\n    ctx.bezierCurveTo(-0.0289 * backSize, 0.12 * backSize, -0.0289 * backSize, 0.7825 * backSize, -0.0289 * backSize, 0.7825 * backSize);\n    ctx.bezierCurveTo(-0.0415 * backSize, 0.79 * backSize, -0.0516 * backSize, 0.805 * backSize, -0.0516 * backSize, 0.825 * backSize);\n    ctx.closePath();\n    var grad = ctx.createLinearGradient(-0.0163 * backSize, 0, 0.0289 * backSize, 0);\n    grad.addColorStop(0, 'rgba(226, 226, 226, 0.5)');\n    grad.addColorStop(0.5, 'rgba(226, 226, 226, 0.2)');\n    grad.addColorStop(1, 'rgba(226, 226, 226, 0.5)');\n    ctx.fillStyle = grad;\n    ctx.fill();\n    ctx.lineWidth = 1;\n    ctx.strokeStyle = 'rgba(153, 153, 153, 0.5)';\n    ctx.stroke();\n    ctx.restore();\n  };\n\n  //************************************ Public methods **************************************\n  this.setValue = function(newValue) {\n    newValue = parseFloat(newValue);\n    var targetValue = (newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue));\n    if (value !== targetValue) {\n      value = targetValue;\n\n      if (value > maxMeasuredValue) {\n        maxMeasuredValue = value;\n      }\n      if (value < minMeasuredValue) {\n        minMeasuredValue = value;\n      }\n\n      if ((value >= threshold && !ledBlinking && thresholdRising) ||\n        (value <= threshold && !ledBlinking && !thresholdRising)) {\n        ledBlinking = true;\n        blink(ledBlinking);\n        if (playAlarm) {\n          audioElement.play();\n        }\n      } else if ((value < threshold && ledBlinking && thresholdRising) ||\n        (value > threshold && ledBlinking && !thresholdRising)) {\n        ledBlinking = false;\n        blink(ledBlinking);\n        if (playAlarm) {\n          audioElement.pause();\n        }\n      }\n\n      this.repaint();\n    }\n    return this;\n  };\n\n  this.getValue = function() {\n    return value;\n  };\n\n  this.setValueAnimated = function(newValue, callback) {\n    var targetValue,\n      gauge = this,\n      time;\n    newValue = parseFloat(newValue);\n    targetValue = (newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue));\n    if (value !== targetValue) {\n      if (undefined !== tween && tween.isPlaying) {\n        tween.stop();\n      }\n\n      time = fullScaleDeflectionTime * Math.abs(targetValue - value) / (maxValue - minValue);\n      time = Math.max(time, fullScaleDeflectionTime / 5);\n      tween = new Tween({}, '', Tween.regularEaseInOut, value, targetValue, time);\n      //tween = new Tween({}, '', Tween.regularEaseInOut, value, targetValue, 1);\n\n      tween.onMotionChanged = function(event) {\n        value = event.target._pos;\n        if (value > maxMeasuredValue) {\n          maxMeasuredValue = value;\n        }\n        if (value < minMeasuredValue) {\n          minMeasuredValue = value;\n        }\n\n        if ((value >= threshold && !ledBlinking && thresholdRising) ||\n          (value <= threshold && !ledBlinking && !thresholdRising)) {\n          ledBlinking = true;\n          blink(ledBlinking);\n          if (playAlarm) {\n            audioElement.play();\n          }\n        } else if ((value < threshold && ledBlinking && thresholdRising) ||\n          (value > threshold && ledBlinking && !thresholdRising)) {\n          ledBlinking = false;\n          blink(ledBlinking);\n          if (playAlarm) {\n            audioElement.pause();\n          }\n        }\n        if (!repainting) {\n          repainting = true;\n          requestAnimFrame(gauge.repaint);\n        }\n      };\n\n      // do we have a callback function to process?\n      if (callback && typeof(callback) === \"function\") {\n        tween.onMotionFinished = callback;\n      }\n\n      tween.start();\n    }\n    return this;\n  };\n\n  this.resetMinMeasuredValue = function() {\n    minMeasuredValue = value;\n    this.repaint();\n    return this;\n  };\n\n  this.resetMaxMeasuredValue = function() {\n    maxMeasuredValue = value;\n    this.repaint();\n    return this;\n  };\n\n  this.setMinMeasuredValueVisible = function(visible) {\n    minMeasuredValueVisible = !!visible;\n    this.repaint();\n    return this;\n  };\n\n  this.setMaxMeasuredValueVisible = function(visible) {\n    maxMeasuredValueVisible = !!visible;\n    this.repaint();\n    return this;\n  };\n\n  this.setThreshold = function(threshVal) {\n    threshVal = parseFloat(threshVal);\n    var targetValue = (threshVal < minValue ? minValue : (threshVal > maxValue ? maxValue : threshVal));\n    threshold = targetValue;\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setThresholdVisible = function(visible) {\n    thresholdVisible = !!visible;\n    this.repaint();\n    return this;\n  };\n\n  this.setThresholdRising = function(rising) {\n    thresholdRising = !!rising;\n    // reset existing threshold alerts\n    ledBlinking = !ledBlinking;\n    blink(ledBlinking);\n    this.repaint();\n    return this;\n  };\n\n  this.setLcdDecimals = function(decimals) {\n    lcdDecimals = parseInt(decimals, 10);\n    this.repaint();\n    return this;\n  };\n\n  this.setFrameDesign = function(newFrameDesign) {\n    resetBuffers({\n      frame: true\n    });\n    frameDesign = newFrameDesign;\n    init({\n      frame: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setBackgroundColor = function(newBackgroundColor) {\n    resetBuffers({\n      background: true\n    });\n    backgroundColor = newBackgroundColor;\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setValueColor = function(newValueColor) {\n    resetBuffers({\n      foreground: true\n    });\n    valueColor = newValueColor;\n    init({\n      foreground: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setLedColor = function(newLedColor) {\n    resetBuffers({\n      led: true\n    });\n    ledColor = newLedColor;\n    init({\n      led: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setLedVisible = function(visible) {\n    ledVisible = !!visible;\n    this.repaint();\n    return this;\n  };\n\n  this.setLcdColor = function(newLcdColor) {\n    resetBuffers({\n      background: true\n    });\n    lcdColor = newLcdColor;\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setMaxMeasuredValue = function(newVal) {\n    newVal = parseFloat(newVal);\n    var targetValue = (newVal < minValue ? minValue : (newVal > maxValue ? maxValue : newVal));\n    maxMeasuredValue = targetValue;\n    this.repaint();\n    return this;\n  };\n\n  this.setMinMeasuredValue = function(newVal) {\n    newVal = parseFloat(newVal);\n    var targetValue = (newVal < minValue ? minValue : (newVal > maxValue ? maxValue : newVal));\n    minMeasuredValue = targetValue;\n    this.repaint();\n    return this;\n  };\n\n  this.setTitleString = function(title) {\n    titleString = title;\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setUnitString = function(unit) {\n    unitString = unit;\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setMinValue = function(newVal) {\n    resetBuffers({\n      background: true\n    });\n    minValue = parseFloat(newVal);\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.getMinValue = function() {\n    return minValue;\n  };\n\n  this.setMaxValue = function(newVal) {\n    resetBuffers({\n      background: true\n    });\n    maxValue = parseFloat(newVal);\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.getMaxValue = function() {\n    return maxValue;\n  };\n\n  this.repaint = function() {\n    if (!initialized) {\n      init({\n        frame: true,\n        background: true,\n        led: true,\n        foreground: true\n      });\n    }\n\n    mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height);\n\n    // Draw frame\n    if (frameVisible) {\n      mainCtx.drawImage(frameBuffer, 0, 0);\n    }\n\n    // Draw buffered image to visible canvas\n    mainCtx.drawImage(backgroundBuffer, 0, 0);\n\n    // Draw lcd display\n    if (lcdVisible) {\n      drawLcdText(mainCtx, value, vertical);\n    }\n\n    // Draw led\n    if (ledVisible) {\n      mainCtx.drawImage(ledBuffer, ledPosX, ledPosY);\n    }\n\n    var valuePos;\n    var yOffset;\n    var yRange;\n    var minMaxX, minMaxY;\n    // Draw min measured value indicator\n    if (minMeasuredValueVisible) {\n      if (vertical) {\n        yOffset = (gaugeType.type === 'type1' ? 0.856796 : 0.7475);\n        yRange = (yOffset - 0.128640);\n        valuePos = imageHeight * yOffset - (imageHeight * yRange) * (minMeasuredValue - minValue) / (maxValue - minValue);\n        minMaxX = imageWidth * 0.34 - minMeasuredValueBuffer.width;\n        minMaxY = valuePos - minMeasuredValueBuffer.height / 2;\n      } else {\n        yOffset = (gaugeType.type === 'type1' ? 0.871012 : 0.82);\n        yRange = yOffset - (gaugeType.type === 'type1' ? 0.142857 : 0.19857);\n        valuePos = (imageWidth * yRange) * (minMeasuredValue - minValue) / (maxValue - minValue);\n        minMaxX = imageWidth * (gaugeType.type === 'type1' ? 0.142857 : 0.19857) - minMeasuredValueBuffer.height / 2 + valuePos;\n        minMaxY = imageHeight * 0.65;\n      }\n      mainCtx.drawImage(minMeasuredValueBuffer, minMaxX, minMaxY);\n    }\n\n    // Draw max measured value indicator\n    if (maxMeasuredValueVisible) {\n      if (vertical) {\n        valuePos = imageHeight * yOffset - (imageHeight * yRange) * (maxMeasuredValue - minValue) / (maxValue - minValue);\n        minMaxX = imageWidth * 0.34 - maxMeasuredValueBuffer.width;\n        minMaxY = valuePos - maxMeasuredValueBuffer.height / 2;\n      } else {\n        yOffset = (gaugeType.type === 'type1' ? 0.871012 : 0.8);\n        yRange = yOffset - (gaugeType.type === 'type1' ? 0.14857 : 0.19857);\n        valuePos = (imageWidth * yRange) * (maxMeasuredValue - minValue) / (maxValue - minValue);\n        minMaxX = imageWidth * (gaugeType.type === 'type1' ? 0.142857 : 0.19857) - maxMeasuredValueBuffer.height / 2 + valuePos;\n        minMaxY = imageHeight * 0.65;\n      }\n      mainCtx.drawImage(maxMeasuredValueBuffer, minMaxX, minMaxY);\n    }\n\n    mainCtx.save();\n    drawValue(mainCtx, imageWidth, imageHeight);\n    mainCtx.restore();\n\n    // Draw foreground\n    if (foregroundVisible || gaugeType.type === 'type2') {\n      mainCtx.drawImage(foregroundBuffer, 0, 0);\n    }\n\n    repainting = false;\n  };\n\n  // Visualize the component\n  this.repaint();\n\n  return this;\n};\n\nexport default linear;\n","import Tween from \"./tween.js\";\nimport drawLinearBackgroundImage from \"./drawLinearBackgroundImage\";\nimport drawLinearForegroundImage from \"./drawLinearForegroundImage\";\nimport drawLinearFrameImage from \"./drawLinearFrameImage\";\nimport createLedImage from \"./createLedImage\";\nimport createLcdBackgroundImage from \"./createLcdBackgroundImage\";\nimport createMeasuredValueImage from \"./createMeasuredValueImage\";\nimport drawTitleImage from \"./drawTitleImage\";\nimport {\ncalcNiceNumber, \ncreateBuffer, \ncustomColorDef, \nrequestAnimFrame, \ngetCanvasContext,\ndoc,\nlcdFontName,\nstdFontName,\n} from \"./tools\";\n\nimport {\n  backgroundColor as BackgroundColor,\n  lcdColor as LcdColor,\n  color as ColorDef,\n  ledColor as LedColor,\n  gaugeType as GaugeType,\n  orientation as Orientation,\n  knobType as KnobType,\n  knobStyle as KnobStyle,\n  frameDesign as FrameDesign,\n  pointerType as PointerType,\n  foregroundType as ForegroundType,\n  labelNumberFormat as LabelNumberFormat,\n  tickLabelOrientation as TickLabelOrientation,\n  trendState as TrendState,\n  } from \"./definitions\";\n\nvar linearBargraph = function(canvas, parameters) {\n  parameters = parameters || {};\n  var width = (undefined === parameters.width ? 0 : parameters.width),\n    height = (undefined === parameters.height ? 0 : parameters.height),\n    minValue = (undefined === parameters.minValue ? 0 : parameters.minValue),\n    maxValue = (undefined === parameters.maxValue ? (minValue + 100) : parameters.maxValue),\n    section = (undefined === parameters.section ? null : parameters.section),\n    useSectionColors = (undefined === parameters.useSectionColors ? false : parameters.useSectionColors),\n    niceScale = (undefined === parameters.niceScale ? true : parameters.niceScale),\n    threshold = (undefined === parameters.threshold ? (maxValue - minValue) / 2 + minValue : parameters.threshold),\n    titleString = (undefined === parameters.titleString ? '' : parameters.titleString),\n    unitString = (undefined === parameters.unitString ? '' : parameters.unitString),\n    frameDesign = (undefined === parameters.frameDesign ? FrameDesign.METAL : parameters.frameDesign),\n    frameVisible = (undefined === parameters.frameVisible ? true : parameters.frameVisible),\n    backgroundColor = (undefined === parameters.backgroundColor ? BackgroundColor.DARK_GRAY : parameters.backgroundColor),\n    backgroundVisible = (undefined === parameters.backgroundVisible ? true : parameters.backgroundVisible),\n    valueColor = (undefined === parameters.valueColor ? ColorDef.RED : parameters.valueColor),\n    lcdColor = (undefined === parameters.lcdColor ? LcdColor.STANDARD : parameters.lcdColor),\n    lcdVisible = (undefined === parameters.lcdVisible ? true : parameters.lcdVisible),\n    lcdDecimals = (undefined === parameters.lcdDecimals ? 2 : parameters.lcdDecimals),\n    digitalFont = (undefined === parameters.digitalFont ? false : parameters.digitalFont),\n    ledColor = (undefined === parameters.ledColor ? LedColor.RED_LED : parameters.ledColor),\n    ledVisible = (undefined === parameters.ledVisible ? true : parameters.ledVisible),\n    thresholdVisible = (undefined === parameters.thresholdVisible ? true : parameters.thresholdVisible),\n    thresholdRising = (undefined === parameters.thresholdRising ? true : parameters.thresholdRising),\n    minMeasuredValueVisible = (undefined === parameters.minMeasuredValueVisible ? false : parameters.minMeasuredValueVisible),\n    maxMeasuredValueVisible = (undefined === parameters.maxMeasuredValueVisible ? false : parameters.maxMeasuredValueVisible),\n    labelNumberFormat = (undefined === parameters.labelNumberFormat ? LabelNumberFormat.STANDARD : parameters.labelNumberFormat),\n    foregroundVisible = (undefined === parameters.foregroundVisible ? true : parameters.foregroundVisible),\n    playAlarm = (undefined === parameters.playAlarm ? false : parameters.playAlarm),\n    alarmSound = (undefined === parameters.alarmSound ? false : parameters.alarmSound),\n    valueGradient = (undefined === parameters.valueGradient ? null : parameters.valueGradient),\n    useValueGradient = (undefined === parameters.useValueGradient ? false : parameters.useValueGradient),\n    fullScaleDeflectionTime = (undefined === parameters.fullScaleDeflectionTime ? 2.5 : parameters.fullScaleDeflectionTime);\n\n  // Get the canvas context and clear it\n  var mainCtx = getCanvasContext(canvas);\n  // Has a size been specified?\n  if (width === 0) {\n    width = mainCtx.canvas.width;\n  }\n  if (height === 0) {\n    height = mainCtx.canvas.height;\n  }\n\n  // Set the size - also clears the canvas\n  mainCtx.canvas.width = width;\n  mainCtx.canvas.height = height;\n\n  var imageWidth = width;\n  var imageHeight = height;\n\n  // Create audio tag for alarm sound\n  if (playAlarm && alarmSound !== false) {\n    var audioElement = doc.createElement('audio');\n    audioElement.setAttribute('src', alarmSound);\n    audioElement.setAttribute('preload', 'auto');\n  }\n\n  var self = this;\n  var value = minValue;\n\n  // Properties\n  var minMeasuredValue = maxValue;\n  var maxMeasuredValue = minValue;\n\n  var tween;\n  var ledBlinking = false;\n  var repainting = false;\n  var isSectionsVisible = false;\n  var isGradientVisible = false;\n  var sectionPixels = [];\n  var ledTimerId = 0;\n\n  var vertical = width <= height;\n\n  // Constants\n  var ledPosX;\n  var ledPosY;\n  var ledSize = Math.round((vertical ? height : width) * 0.05);\n  var minMaxIndSize = Math.round((vertical ? width : height) * 0.05);\n  var stdFont;\n  var lcdFont;\n\n  if (vertical) {\n    ledPosX = imageWidth / 2 - ledSize / 2;\n    ledPosY = 0.053 * imageHeight;\n    stdFont = Math.floor(imageHeight / 22) + 'px ' + stdFontName;\n    lcdFont = Math.floor(imageHeight / 22) + 'px ' + lcdFontName;\n  } else {\n    ledPosX = 0.89 * imageWidth;\n    ledPosY = imageHeight / 1.95 - ledSize / 2;\n    stdFont = Math.floor(imageHeight / 10) + 'px ' + stdFontName;\n    lcdFont = Math.floor(imageHeight / 10) + 'px ' + lcdFontName;\n  }\n\n  var initialized = false;\n\n  // Tickmark specific private variables\n  var niceMinValue = minValue;\n  var niceMaxValue = maxValue;\n  var niceRange = maxValue - minValue;\n  var range = niceMaxValue - niceMinValue;\n  var minorTickSpacing = 0;\n  var majorTickSpacing = 0;\n  var maxNoOfMinorTicks = 10;\n  var maxNoOfMajorTicks = 10;\n\n  // Method to calculate nice values for min, max and range for the tickmarks\n  var calculate = function calculate() {\n    if (niceScale) {\n      niceRange = calcNiceNumber(maxValue - minValue, false);\n      majorTickSpacing = calcNiceNumber(niceRange / (maxNoOfMajorTicks - 1), true);\n      niceMinValue = Math.floor(minValue / majorTickSpacing) * majorTickSpacing;\n      niceMaxValue = Math.ceil(maxValue / majorTickSpacing) * majorTickSpacing;\n      minorTickSpacing = calcNiceNumber(majorTickSpacing / (maxNoOfMinorTicks - 1), true);\n      minValue = niceMinValue;\n      maxValue = niceMaxValue;\n      range = maxValue - minValue;\n    } else {\n      niceRange = (maxValue - minValue);\n      niceMinValue = minValue;\n      niceMaxValue = maxValue;\n      range = niceRange;\n      minorTickSpacing = 1;\n      majorTickSpacing = 10;\n    }\n    // Make sure values are still in range\n    value = value < minValue ? minValue : value > maxValue ? maxValue : value;\n    minMeasuredValue = minMeasuredValue < minValue ? minValue : minMeasuredValue > maxValue ? maxValue : minMeasuredValue;\n    maxMeasuredValue = maxMeasuredValue < minValue ? minValue : maxMeasuredValue > maxValue ? maxValue : maxMeasuredValue;\n    threshold = threshold < minValue ? minValue : threshold > maxValue ? maxValue : threshold;\n  };\n\n  // **************   Buffer creation  ********************\n  // Buffer for the frame\n  var frameBuffer = createBuffer(width, height);\n  var frameContext = frameBuffer.getContext('2d');\n\n  // Buffer for the background\n  var backgroundBuffer = createBuffer(width, height);\n  var backgroundContext = backgroundBuffer.getContext('2d');\n\n  var lcdBuffer;\n\n  // Buffer for active bargraph led\n  var activeLedBuffer = doc.createElement('canvas');\n  if (vertical) {\n    activeLedBuffer.width = imageWidth * 0.121428;\n    activeLedBuffer.height = imageHeight * 0.012135;\n  } else {\n    activeLedBuffer.width = imageWidth * 0.012135;\n    activeLedBuffer.height = imageHeight * 0.121428;\n  }\n  var activeLedContext = activeLedBuffer.getContext('2d');\n\n  // Buffer for active bargraph led\n  var inActiveLedBuffer = doc.createElement('canvas');\n  if (vertical) {\n    inActiveLedBuffer.width = imageWidth * 0.121428;\n    inActiveLedBuffer.height = imageHeight * 0.012135;\n  } else {\n    inActiveLedBuffer.width = imageWidth * 0.012135;\n    inActiveLedBuffer.height = imageHeight * 0.121428;\n  }\n  var inActiveLedContext = inActiveLedBuffer.getContext('2d');\n\n  // Buffer for led on painting code\n  var ledBufferOn = createBuffer(ledSize, ledSize);\n  var ledContextOn = ledBufferOn.getContext('2d');\n\n  // Buffer for led off painting code\n  var ledBufferOff = createBuffer(ledSize, ledSize);\n  var ledContextOff = ledBufferOff.getContext('2d');\n\n  // Buffer for current led painting code\n  var ledBuffer = ledBufferOff;\n\n  // Buffer for the minMeasuredValue indicator\n  var minMeasuredValueBuffer = createBuffer(minMaxIndSize, minMaxIndSize);\n  var minMeasuredValueCtx = minMeasuredValueBuffer.getContext('2d');\n\n  // Buffer for the maxMeasuredValue indicator\n  var maxMeasuredValueBuffer = createBuffer(minMaxIndSize, minMaxIndSize);\n  var maxMeasuredValueCtx = maxMeasuredValueBuffer.getContext('2d');\n\n  // Buffer for static foreground painting code\n  var foregroundBuffer = createBuffer(width, height);\n  var foregroundContext = foregroundBuffer.getContext('2d');\n\n  // **************   Image creation  ********************\n  var drawLcdText = function(ctx, value, vertical) {\n    ctx.save();\n    ctx.textAlign = 'right';\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = lcdColor.textColor;\n    ctx.fillStyle = lcdColor.textColor;\n\n    if (lcdColor === LcdColor.STANDARD || lcdColor === LcdColor.STANDARD_GREEN) {\n      ctx.shadowColor = 'gray';\n      if (vertical) {\n        ctx.shadowOffsetX = imageWidth * 0.007;\n        ctx.shadowOffsetY = imageWidth * 0.007;\n        ctx.shadowBlur = imageWidth * 0.009;\n      } else {\n        ctx.shadowOffsetX = imageHeight * 0.007;\n        ctx.shadowOffsetY = imageHeight * 0.007;\n        ctx.shadowBlur = imageHeight * 0.009;\n      }\n    }\n\n    var lcdTextX;\n    var lcdTextY;\n    var lcdTextWidth;\n\n    if (digitalFont) {\n      ctx.font = lcdFont;\n    } else {\n      ctx.font = stdFont;\n    }\n\n    if (vertical) {\n      lcdTextX = (imageWidth - (imageWidth * 0.571428)) / 2 + 1 + imageWidth * 0.571428 - 2;\n      lcdTextY = imageHeight * 0.88 + 1 + (imageHeight * 0.055 - 2) / 2;\n      lcdTextWidth = imageWidth * 0.7 - 2;\n    } else {\n      lcdTextX = (imageWidth * 0.695) + imageWidth * 0.18 - 2;\n      lcdTextY = (imageHeight * 0.22) + 1 + (imageHeight * 0.15 - 2) / 2;\n      lcdTextWidth = imageHeight * 0.22 - 2;\n    }\n\n    ctx.fillText(value.toFixed(lcdDecimals), lcdTextX, lcdTextY, lcdTextWidth);\n\n    ctx.restore();\n  };\n\n  var createThresholdImage = function(vertical) {\n    var thresholdBuffer = doc.createElement('canvas');\n    thresholdBuffer.height = thresholdBuffer.width = minMaxIndSize;\n    var thresholdCtx = thresholdBuffer.getContext('2d');\n\n    thresholdCtx.save();\n    var gradThreshold = thresholdCtx.createLinearGradient(0, 0.1, 0, thresholdBuffer.height * 0.9);\n    gradThreshold.addColorStop(0, '#520000');\n    gradThreshold.addColorStop(0.3, '#fc1d00');\n    gradThreshold.addColorStop(0.59, '#fc1d00');\n    gradThreshold.addColorStop(1, '#520000');\n    thresholdCtx.fillStyle = gradThreshold;\n\n    if (vertical) {\n      thresholdCtx.beginPath();\n      thresholdCtx.moveTo(0.1, thresholdBuffer.height * 0.5);\n      thresholdCtx.lineTo(thresholdBuffer.width * 0.9, 0.1);\n      thresholdCtx.lineTo(thresholdBuffer.width * 0.9, thresholdBuffer.height * 0.9);\n      thresholdCtx.closePath();\n    } else {\n      thresholdCtx.beginPath();\n      thresholdCtx.moveTo(0.1, 0.1);\n      thresholdCtx.lineTo(thresholdBuffer.width * 0.9, 0.1);\n      thresholdCtx.lineTo(thresholdBuffer.width * 0.5, thresholdBuffer.height * 0.9);\n      thresholdCtx.closePath();\n    }\n\n    thresholdCtx.fill();\n    thresholdCtx.strokeStyle = '#FFFFFF';\n    thresholdCtx.stroke();\n\n    thresholdCtx.restore();\n\n    return thresholdBuffer;\n  };\n\n  var drawTickmarksImage = function(ctx, labelNumberFormat, vertical) {\n    backgroundColor.labelColor.setAlpha(1);\n    ctx.save();\n    ctx.textBaseline = 'middle';\n    var TEXT_WIDTH = imageWidth * 0.1;\n    ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();\n    ctx.fillStyle = backgroundColor.labelColor.getRgbaColor();\n\n    var valueCounter = minValue;\n    var majorTickCounter = maxNoOfMinorTicks - 1;\n    var tickCounter;\n    var currentPos;\n    var scaleBoundsX;\n    var scaleBoundsY;\n    var scaleBoundsW;\n    var scaleBoundsH;\n    var tickSpaceScaling = 1;\n\n    var minorTickStart;\n    var minorTickStop;\n    var mediumTickStart;\n    var mediumTickStop;\n    var majorTickStart;\n    var majorTickStop;\n    if (vertical) {\n      minorTickStart = (0.34 * imageWidth);\n      minorTickStop = (0.36 * imageWidth);\n      mediumTickStart = (0.33 * imageWidth);\n      mediumTickStop = (0.36 * imageWidth);\n      majorTickStart = (0.32 * imageWidth);\n      majorTickStop = (0.36 * imageWidth);\n      ctx.textAlign = 'right';\n      scaleBoundsX = 0;\n      scaleBoundsY = imageHeight * 0.128640;\n      scaleBoundsW = 0;\n      scaleBoundsH = (imageHeight * 0.856796 - imageHeight * 0.128640);\n      tickSpaceScaling = scaleBoundsH / (maxValue - minValue);\n    } else {\n      minorTickStart = (0.65 * imageHeight);\n      minorTickStop = (0.63 * imageHeight);\n      mediumTickStart = (0.66 * imageHeight);\n      mediumTickStop = (0.63 * imageHeight);\n      majorTickStart = (0.67 * imageHeight);\n      majorTickStop = (0.63 * imageHeight);\n      ctx.textAlign = 'center';\n      scaleBoundsX = imageWidth * 0.142857;\n      scaleBoundsY = 0;\n      scaleBoundsW = (imageWidth * 0.871012 - imageWidth * 0.142857);\n      scaleBoundsH = 0;\n      tickSpaceScaling = scaleBoundsW / (maxValue - minValue);\n    }\n\n    var labelCounter;\n    for (labelCounter = minValue, tickCounter = 0; labelCounter <= maxValue; labelCounter += minorTickSpacing, tickCounter += minorTickSpacing) {\n\n      // Calculate the bounds of the scaling\n      if (vertical) {\n        currentPos = scaleBoundsY + scaleBoundsH - tickCounter * tickSpaceScaling;\n      } else {\n        currentPos = scaleBoundsX + tickCounter * tickSpaceScaling;\n      }\n\n      majorTickCounter++;\n\n      // Draw tickmark every major tickmark spacing\n      if (majorTickCounter === maxNoOfMinorTicks) {\n\n        // Draw the major tickmarks\n        ctx.lineWidth = 1.5;\n        drawLinearTicks(ctx, majorTickStart, majorTickStop, currentPos, vertical);\n\n        // Draw the standard tickmark labels\n        if (vertical) {\n          // Vertical orientation\n          switch (labelNumberFormat.format) {\n            case 'fractional':\n              ctx.fillText((valueCounter.toFixed(2)), imageWidth * 0.28, currentPos, TEXT_WIDTH);\n              break;\n\n            case 'scientific':\n              ctx.fillText((valueCounter.toPrecision(2)), imageWidth * 0.28, currentPos, TEXT_WIDTH);\n              break;\n\n            case 'standard':\n              /* falls through */\n            default:\n              ctx.fillText((valueCounter.toFixed(0)), imageWidth * 0.28, currentPos, TEXT_WIDTH);\n              break;\n          }\n        } else {\n          // Horizontal orientation\n          switch (labelNumberFormat.format) {\n            case 'fractional':\n              ctx.fillText((valueCounter.toFixed(2)), currentPos, (imageHeight * 0.73), TEXT_WIDTH);\n              break;\n\n            case 'scientific':\n              ctx.fillText((valueCounter.toPrecision(2)), currentPos, (imageHeight * 0.73), TEXT_WIDTH);\n              break;\n\n            case 'standard':\n              /* falls through */\n            default:\n              ctx.fillText((valueCounter.toFixed(0)), currentPos, (imageHeight * 0.73), TEXT_WIDTH);\n              break;\n          }\n        }\n\n        valueCounter += majorTickSpacing;\n        majorTickCounter = 0;\n        continue;\n      }\n\n      // Draw tickmark every minor tickmark spacing\n      if (0 === maxNoOfMinorTicks % 2 && majorTickCounter === (maxNoOfMinorTicks / 2)) {\n        ctx.lineWidth = 1;\n        drawLinearTicks(ctx, mediumTickStart, mediumTickStop, currentPos, vertical);\n      } else {\n        ctx.lineWidth = 0.5;\n        drawLinearTicks(ctx, minorTickStart, minorTickStop, currentPos, vertical);\n      }\n    }\n\n    ctx.restore();\n  };\n\n  var drawLinearTicks = function(ctx, tickStart, tickStop, currentPos, vertical) {\n    if (vertical) {\n      // Vertical orientation\n      ctx.beginPath();\n      ctx.moveTo(tickStart, currentPos);\n      ctx.lineTo(tickStop, currentPos);\n      ctx.closePath();\n      ctx.stroke();\n    } else {\n      // Horizontal orientation\n      ctx.beginPath();\n      ctx.moveTo(currentPos, tickStart);\n      ctx.lineTo(currentPos, tickStop);\n      ctx.closePath();\n      ctx.stroke();\n    }\n  };\n\n  // **************   Initialization  ********************\n  var init = function(parameters) {\n    parameters = parameters || {};\n    var drawFrame = (undefined === parameters.frame ? false : parameters.frame);\n    var drawBackground = (undefined === parameters.background ? false : parameters.background);\n    var drawLed = (undefined === parameters.led ? false : parameters.led);\n    var drawForeground = (undefined === parameters.foreground ? false : parameters.foreground);\n    var drawBargraphLed = (undefined === parameters.bargraphled ? false : parameters.bargraphled);\n\n    initialized = true;\n\n    // Calculate the current min and max values and the range\n    calculate();\n\n    // Create frame in frame buffer (backgroundBuffer)\n    if (drawFrame && frameVisible) {\n      drawLinearFrameImage(frameContext, frameDesign, imageWidth, imageHeight, vertical);\n    }\n\n    // Create background in background buffer (backgroundBuffer)\n    if (drawBackground && backgroundVisible) {\n      drawLinearBackgroundImage(backgroundContext, backgroundColor, imageWidth, imageHeight, vertical);\n    }\n\n    if (drawLed) {\n      if (vertical) {\n        // Draw LED ON in ledBuffer_ON\n        ledContextOn.drawImage(createLedImage(ledSize, 1, ledColor), 0, 0);\n\n        // Draw LED ON in ledBuffer_OFF\n        ledContextOff.drawImage(createLedImage(ledSize, 0, ledColor), 0, 0);\n      } else {\n        // Draw LED ON in ledBuffer_ON\n        ledContextOn.drawImage(createLedImage(ledSize, 1, ledColor), 0, 0);\n\n        // Draw LED ON in ledBuffer_OFF\n        ledContextOff.drawImage(createLedImage(ledSize, 0, ledColor), 0, 0);\n      }\n    }\n\n    // Draw min measured value indicator in minMeasuredValueBuffer\n    if (minMeasuredValueVisible) {\n      if (vertical) {\n        minMeasuredValueCtx.drawImage(createMeasuredValueImage(minMaxIndSize, ColorDef.BLUE.dark.getRgbaColor(), false, vertical), 0, 0);\n      } else {\n        minMeasuredValueCtx.drawImage(createMeasuredValueImage(minMaxIndSize, ColorDef.BLUE.dark.getRgbaColor(), false, vertical), 0, 0);\n      }\n    }\n\n    // Draw max measured value indicator in maxMeasuredValueBuffer\n    if (maxMeasuredValueVisible) {\n      if (vertical) {\n        maxMeasuredValueCtx.drawImage(createMeasuredValueImage(minMaxIndSize, ColorDef.RED.medium.getRgbaColor(), false, vertical), 0, 0);\n      } else {\n        maxMeasuredValueCtx.drawImage(createMeasuredValueImage(minMaxIndSize, ColorDef.RED.medium.getRgbaColor(), false, vertical), 0, 0);\n      }\n    }\n\n    // Create alignment posts in background buffer (backgroundBuffer)\n    if (drawBackground && backgroundVisible) {\n      var valuePos;\n      // Create tickmarks in background buffer (backgroundBuffer)\n      drawTickmarksImage(backgroundContext, labelNumberFormat, vertical);\n\n      // Draw threshold image to background context\n      if (thresholdVisible) {\n        backgroundContext.save();\n        if (vertical) {\n          // Vertical orientation\n          valuePos = imageHeight * 0.856796 - (imageHeight * 0.728155) * (threshold - minValue) / (maxValue - minValue);\n          backgroundContext.translate(imageWidth * 0.365, valuePos - minMaxIndSize / 2);\n        } else {\n          // Horizontal orientation\n          valuePos = (imageWidth * 0.856796 - imageWidth * 0.128640) * (threshold - minValue) / (maxValue - minValue);\n          backgroundContext.translate(imageWidth * 0.142857 - minMaxIndSize / 2 + valuePos, imageHeight * 0.58);\n        }\n        backgroundContext.drawImage(createThresholdImage(vertical), 0, 0);\n        backgroundContext.restore();\n      }\n\n      // Create title in background buffer (backgroundBuffer)\n      if (vertical) {\n        drawTitleImage(backgroundContext, imageWidth, imageHeight, titleString, unitString, backgroundColor, vertical, null, lcdVisible);\n      } else {\n        drawTitleImage(backgroundContext, imageWidth, imageHeight, titleString, unitString, backgroundColor, vertical, null, lcdVisible);\n      }\n    }\n\n    // Create lcd background if selected in background buffer (backgroundBuffer)\n    if (drawBackground && lcdVisible) {\n      if (vertical) {\n        lcdBuffer = createLcdBackgroundImage(imageWidth * 0.571428, imageHeight * 0.055, lcdColor);\n        backgroundContext.drawImage(lcdBuffer, ((imageWidth - (imageWidth * 0.571428)) / 2), imageHeight * 0.88);\n      } else {\n        lcdBuffer = createLcdBackgroundImage(imageWidth * 0.18, imageHeight * 0.15, lcdColor);\n        backgroundContext.drawImage(lcdBuffer, imageWidth * 0.695, imageHeight * 0.22);\n      }\n    }\n\n    // Draw leds of bargraph\n    if (drawBargraphLed) {\n      drawInActiveLed(inActiveLedContext);\n      drawActiveLed(activeLedContext, valueColor);\n    }\n\n    // Convert Section values into pixels\n    isSectionsVisible = false;\n    if (null !== section && 0 < section.length) {\n      isSectionsVisible = true;\n      var sectionIndex = section.length;\n      var top, bottom, fullSize, ledWidth2;\n\n      if (vertical) {\n        // Vertical orientation\n        top = imageHeight * 0.128640; // position of max value\n        bottom = imageHeight * 0.856796; // position of min value\n        fullSize = bottom - top;\n        ledWidth2 = 0;\n      } else {\n        // Horizontal orientation\n        top = imageWidth * 0.856796; // position of max value\n        bottom = imageWidth * 0.128640;\n        fullSize = top - bottom;\n        ledWidth2 = imageWidth * 0.012135 / 2;\n      }\n      sectionPixels = [];\n      do {\n        sectionIndex--;\n        sectionPixels.push({\n          start: (((section[sectionIndex].start + Math.abs(minValue)) / (maxValue - minValue)) * fullSize - ledWidth2),\n          stop: (((section[sectionIndex].stop + Math.abs(minValue)) / (maxValue - minValue)) * fullSize - ledWidth2),\n          color: customColorDef(section[sectionIndex].color)\n        });\n      } while (0 < sectionIndex);\n    }\n\n    // Use a gradient for the valueColor?\n    isGradientVisible = false;\n    if (useValueGradient && valueGradient !== null) {\n      // force section colors off!\n      isSectionsVisible = false;\n      isGradientVisible = true;\n    }\n\n    // Create foreground in foreground buffer (foregroundBuffer)\n    if (drawForeground && foregroundVisible) {\n      drawLinearForegroundImage(foregroundContext, imageWidth, imageHeight, vertical, false);\n    }\n  };\n\n  var resetBuffers = function(buffers) {\n    buffers = buffers || {};\n    var resetFrame = (undefined === buffers.frame ? false : buffers.frame);\n    var resetBackground = (undefined === buffers.background ? false : buffers.background);\n    var resetLed = (undefined === buffers.led ? false : buffers.led);\n    var resetBargraphLed = (undefined === buffers.bargraphled ? false : buffers.bargraphled);\n    var resetForeground = (undefined === buffers.foreground ? false : buffers.foreground);\n\n    if (resetFrame) {\n      frameBuffer.width = width;\n      frameBuffer.height = height;\n      frameContext = frameBuffer.getContext('2d');\n    }\n\n    if (resetBackground) {\n      backgroundBuffer.width = width;\n      backgroundBuffer.height = height;\n      backgroundContext = backgroundBuffer.getContext('2d');\n    }\n\n    if (resetBargraphLed) {\n      if (vertical) {\n        activeLedBuffer.width = width * 0.121428;\n        activeLedBuffer.height = height * 0.012135;\n      } else {\n        activeLedBuffer.width = width * 0.012135;\n        activeLedBuffer.height = height * 0.121428;\n      }\n      activeLedContext = activeLedBuffer.getContext('2d');\n\n      // Buffer for active bargraph led\n      if (vertical) {\n        inActiveLedBuffer.width = width * 0.121428;\n        inActiveLedBuffer.height = height * 0.012135;\n      } else {\n        inActiveLedBuffer.width = width * 0.012135;\n        inActiveLedBuffer.height = height * 0.121428;\n      }\n      inActiveLedContext = inActiveLedBuffer.getContext('2d');\n    }\n\n    if (resetLed) {\n      ledBufferOn.width = Math.ceil(width * 0.093457);\n      ledBufferOn.height = Math.ceil(height * 0.093457);\n      ledContextOn = ledBufferOn.getContext('2d');\n\n      ledBufferOff.width = Math.ceil(width * 0.093457);\n      ledBufferOff.height = Math.ceil(height * 0.093457);\n      ledContextOff = ledBufferOff.getContext('2d');\n\n      // Buffer for current led painting code\n      ledBuffer = ledBufferOff;\n    }\n\n    if (resetForeground) {\n      foregroundBuffer.width = width;\n      foregroundBuffer.height = height;\n      foregroundContext = foregroundBuffer.getContext('2d');\n    }\n  };\n\n  var blink = function(blinking) {\n    if (blinking) {\n      ledTimerId = setInterval(toggleAndRepaintLed, 1000);\n    } else {\n      clearInterval(ledTimerId);\n      ledBuffer = ledBufferOff;\n    }\n  };\n\n  var toggleAndRepaintLed = function() {\n    if (ledVisible) {\n      if (ledBuffer === ledBufferOn) {\n        ledBuffer = ledBufferOff;\n      } else {\n        ledBuffer = ledBufferOn;\n      }\n      if (!repainting) {\n        repainting = true;\n        requestAnimFrame(self.repaint);\n      }\n    }\n  };\n\n  var drawValue = function(ctx, imageWidth, imageHeight) {\n    var top; // position of max value\n    var bottom; // position of min value\n    var labelColor = backgroundColor.labelColor;\n    var fullSize;\n    var valueSize;\n    var valueTop;\n    var valueBackgroundStartX;\n    var valueBackgroundStartY;\n    var valueBackgroundStopX;\n    var valueBackgroundStopY;\n    var valueBorderStartX;\n    var valueBorderStartY;\n    var valueBorderStopX;\n    var valueBorderStopY;\n    var currentValue;\n    var gradRange;\n    var fraction;\n\n    // Orientation dependend definitions\n    if (vertical) {\n      // Vertical orientation\n      top = imageHeight * 0.128640; // position of max value\n      bottom = imageHeight * 0.856796; // position of min value\n      fullSize = bottom - top;\n      valueSize = fullSize * (value - minValue) / (maxValue - minValue);\n      valueTop = top + fullSize - valueSize;\n      valueBackgroundStartX = 0;\n      valueBackgroundStartY = top;\n      valueBackgroundStopX = 0;\n      valueBackgroundStopY = top + fullSize * 1.014;\n    } else {\n      // Horizontal orientation\n      top = imageWidth * 0.856796; // position of max value\n      bottom = imageWidth * 0.128640;\n      fullSize = top - bottom;\n      valueSize = fullSize * (value - minValue) / (maxValue - minValue);\n      valueTop = bottom;\n      valueBackgroundStartX = imageWidth * 0.13;\n      valueBackgroundStartY = imageHeight * 0.435714;\n      valueBackgroundStopX = valueBackgroundStartX + fullSize * 1.035;\n      valueBackgroundStopY = valueBackgroundStartY;\n    }\n\n    var darker = (backgroundColor === BackgroundColor.CARBON ||\n      backgroundColor === BackgroundColor.PUNCHED_SHEET ||\n      backgroundColor === BackgroundColor.STAINLESS ||\n      backgroundColor === BackgroundColor.BRUSHED_STAINLESS ||\n      backgroundColor === BackgroundColor.TURNED) ? 0.3 : 0;\n\n    var valueBackgroundTrackGradient = ctx.createLinearGradient(valueBackgroundStartX, valueBackgroundStartY, valueBackgroundStopX, valueBackgroundStopY);\n    labelColor.setAlpha(0.047058 + darker);\n    valueBackgroundTrackGradient.addColorStop(0, labelColor.getRgbaColor());\n    labelColor.setAlpha(0.145098 + darker);\n    valueBackgroundTrackGradient.addColorStop(0.48, labelColor.getRgbaColor());\n    labelColor.setAlpha(0.149019 + darker);\n    valueBackgroundTrackGradient.addColorStop(0.49, labelColor.getRgbaColor());\n    labelColor.setAlpha(0.047058 + darker);\n    valueBackgroundTrackGradient.addColorStop(1, labelColor.getRgbaColor());\n    ctx.fillStyle = valueBackgroundTrackGradient;\n\n    if (vertical) {\n      ctx.fillRect(imageWidth * 0.435714, top, imageWidth * 0.15, fullSize * 1.014);\n    } else {\n      ctx.fillRect(valueBackgroundStartX, valueBackgroundStartY, fullSize * 1.035, imageHeight * 0.152857);\n    }\n\n    if (vertical) {\n      // Vertical orientation\n      valueBorderStartX = 0;\n      valueBorderStartY = top;\n      valueBorderStopX = 0;\n      valueBorderStopY = top + fullSize * 1.014;\n    } else {\n      // Horizontal orientation                ;\n      valueBorderStartX = valueBackgroundStartX;\n      valueBorderStartY = 0;\n      valueBorderStopX = valueBackgroundStopX;\n      valueBorderStopY = 0;\n    }\n\n    var valueBorderGradient = ctx.createLinearGradient(valueBorderStartX, valueBorderStartY, valueBorderStopX, valueBorderStopY);\n    labelColor.setAlpha(0.298039 + darker);\n    valueBorderGradient.addColorStop(0, labelColor.getRgbaColor());\n    labelColor.setAlpha(0.686274 + darker);\n    valueBorderGradient.addColorStop(0.48, labelColor.getRgbaColor());\n    labelColor.setAlpha(0.698039 + darker);\n    valueBorderGradient.addColorStop(0.49, labelColor.getRgbaColor());\n    labelColor.setAlpha(0.4 + darker);\n    valueBorderGradient.addColorStop(1, labelColor.getRgbaColor());\n    ctx.fillStyle = valueBorderGradient;\n    if (vertical) {\n      ctx.fillRect(imageWidth * 0.435714, top, imageWidth * 0.007142, fullSize * 1.014);\n      ctx.fillRect(imageWidth * 0.571428, top, imageWidth * 0.007142, fullSize * 1.014);\n    } else {\n      ctx.fillRect(imageWidth * 0.13, imageHeight * 0.435714, fullSize * 1.035, imageHeight * 0.007142);\n      ctx.fillRect(imageWidth * 0.13, imageHeight * 0.571428, fullSize * 1.035, imageHeight * 0.007142);\n    }\n\n    // Prepare led specific variables\n    var ledX;\n    var ledY;\n    var ledW;\n    var ledH;\n    var ledCenterX;\n    var ledCenterY;\n    var activeLeds;\n    var inactiveLeds;\n    if (vertical) {\n      // VERTICAL\n      ledX = imageWidth * 0.45;\n      ledY = imageHeight * 0.851941;\n      ledW = imageWidth * 0.121428;\n      ledH = imageHeight * 0.012135;\n      ledCenterX = (ledX + ledW) / 2;\n      ledCenterY = (ledY + ledH) / 2;\n    } else {\n      // HORIZONTAL\n      ledX = imageWidth * 0.142857;\n      ledY = imageHeight * 0.45;\n      ledW = imageWidth * 0.012135;\n      ledH = imageHeight * 0.121428;\n      ledCenterX = (ledX + ledW) / 2;\n      ledCenterY = (ledY + ledH) / 2;\n    }\n\n    var translateX, translateY;\n    var activeLedColor;\n    var lastActiveLedColor = valueColor;\n    var i;\n    // Draw the value\n    if (vertical) {\n      // Draw the inactive leds\n      inactiveLeds = fullSize;\n      for (translateY = 0; translateY <= inactiveLeds; translateY += ledH + 1) {\n        ctx.translate(0, -translateY);\n        ctx.drawImage(inActiveLedBuffer, ledX, ledY);\n        ctx.translate(0, translateY);\n      }\n      // Draw the active leds in dependence on the current value\n      activeLeds = ((value - minValue) / (maxValue - minValue)) * fullSize;\n      for (translateY = 0; translateY <= activeLeds; translateY += ledH + 1) {\n        //check for LED color\n        activeLedColor = valueColor;\n        // Use a gradient for value colors?\n        if (isGradientVisible) {\n          // Convert pixel back to value\n          currentValue = minValue + (translateY / fullSize) * (maxValue - minValue);\n          gradRange = valueGradient.getEnd() - valueGradient.getStart();\n          fraction = (currentValue - minValue) / gradRange;\n          fraction = Math.max(Math.min(fraction, 1), 0);\n          activeLedColor = customColorDef(valueGradient.getColorAt(fraction).getRgbaColor());\n        } else if (isSectionsVisible) {\n          for (i = 0; i < sectionPixels.length; i++) {\n            if (translateY >= sectionPixels[i].start && translateY < sectionPixels[i].stop) {\n              activeLedColor = sectionPixels[i].color;\n              break;\n            }\n          }\n        }\n        // Has LED color changed? If so redraw the buffer\n        if (lastActiveLedColor.medium.getHexColor() !== activeLedColor.medium.getHexColor()) {\n          drawActiveLed(activeLedContext, activeLedColor);\n          lastActiveLedColor = activeLedColor;\n        }\n        // Draw LED\n        ctx.translate(0, -translateY);\n        ctx.drawImage(activeLedBuffer, ledX, ledY);\n        ctx.translate(0, translateY);\n      }\n    } else {\n      // Draw the inactive leds\n      inactiveLeds = fullSize;\n      for (translateX = -(ledW / 2); translateX <= inactiveLeds; translateX += ledW + 1) {\n        ctx.translate(translateX, 0);\n        ctx.drawImage(inActiveLedBuffer, ledX, ledY);\n        ctx.translate(-translateX, 0);\n      }\n      // Draw the active leds in dependence on the current value\n      activeLeds = ((value - minValue) / (maxValue - minValue)) * fullSize;\n      for (translateX = -(ledW / 2); translateX <= activeLeds; translateX += ledW + 1) {\n        //check for LED color\n        activeLedColor = valueColor;\n        if (isGradientVisible) {\n          // Convert pixel back to value\n          currentValue = minValue + (translateX / fullSize) * (maxValue - minValue);\n          gradRange = valueGradient.getEnd() - valueGradient.getStart();\n          fraction = (currentValue - minValue) / gradRange;\n          fraction = Math.max(Math.min(fraction, 1), 0);\n          activeLedColor = customColorDef(valueGradient.getColorAt(fraction).getRgbaColor());\n        } else if (isSectionsVisible) {\n          for (i = 0; i < sectionPixels.length; i++) {\n            if (translateX >= sectionPixels[i].start && translateX < sectionPixels[i].stop) {\n              activeLedColor = sectionPixels[i].color;\n              break;\n            }\n          }\n        }\n        // Has LED color changed? If so redraw the buffer\n        if (lastActiveLedColor.medium.getHexColor() !== activeLedColor.medium.getHexColor()) {\n          drawActiveLed(activeLedContext, activeLedColor);\n          lastActiveLedColor = activeLedColor;\n        }\n        ctx.translate(translateX, 0);\n        ctx.drawImage(activeLedBuffer, ledX, ledY);\n        ctx.translate(-translateX, 0);\n      }\n    }\n  };\n\n  var drawInActiveLed = function(ctx) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    ctx.closePath();\n    var ledCenterX = (ctx.canvas.width / 2);\n    var ledCenterY = (ctx.canvas.height / 2);\n    var ledGradient = mainCtx.createRadialGradient(ledCenterX, ledCenterY, 0, ledCenterX, ledCenterY, ctx.canvas.width / 2);\n    ledGradient.addColorStop(0, '#3c3c3c');\n    ledGradient.addColorStop(1, '#323232');\n    ctx.fillStyle = ledGradient;\n    ctx.fill();\n    ctx.restore();\n  };\n\n  var drawActiveLed = function(ctx, color) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    ctx.closePath();\n    var ledCenterX = (ctx.canvas.width / 2);\n    var ledCenterY = (ctx.canvas.height / 2);\n    var outerRadius;\n    if (vertical) {\n      outerRadius = ctx.canvas.width / 2;\n    } else {\n      outerRadius = ctx.canvas.height / 2;\n    }\n    var ledGradient = mainCtx.createRadialGradient(ledCenterX, ledCenterY, 0, ledCenterX, ledCenterY, outerRadius);\n    ledGradient.addColorStop(0, color.light.getRgbaColor());\n    ledGradient.addColorStop(1, color.dark.getRgbaColor());\n    ctx.fillStyle = ledGradient;\n    ctx.fill();\n    ctx.restore();\n  };\n\n  //************************************ Public methods **************************************\n  this.setValue = function(newValue) {\n    newValue = parseFloat(newValue);\n    var targetValue = (newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue));\n    if (value !== targetValue) {\n      value = targetValue;\n\n      if (value > maxMeasuredValue) {\n        maxMeasuredValue = value;\n      }\n      if (value < minMeasuredValue) {\n        minMeasuredValue = value;\n      }\n\n      if ((value >= threshold && !ledBlinking && thresholdRising) ||\n        (value <= threshold && !ledBlinking && !thresholdRising)) {\n        ledBlinking = true;\n        blink(ledBlinking);\n        if (playAlarm) {\n          audioElement.play();\n        }\n      } else if ((value < threshold && ledBlinking && thresholdRising) ||\n        (value > threshold && ledBlinking && !thresholdRising)) {\n        ledBlinking = false;\n        blink(ledBlinking);\n        if (playAlarm) {\n          audioElement.pause();\n        }\n      }\n\n      this.repaint();\n    }\n    return this;\n  };\n\n  this.getValue = function() {\n    return value;\n  };\n\n  this.setValueAnimated = function(newValue, callback) {\n    var targetValue,\n      gauge = this,\n      time;\n    newValue = parseFloat(newValue);\n    targetValue = (newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue));\n\n    if (value !== targetValue) {\n      if (undefined !== tween && tween.isPlaying) {\n        tween.stop();\n      }\n\n      time = fullScaleDeflectionTime * Math.abs(targetValue - value) / (maxValue - minValue);\n      time = Math.max(time, fullScaleDeflectionTime / 5);\n      tween = new Tween({}, '', Tween.regularEaseInOut, value, targetValue, time);\n      //tween = new Tween({}, '', Tween.regularEaseInOut, value, targetValue, 1);\n      //tween = new Tween(new Object(), '', Tween.strongEaseInOut, value, targetValue, 1);\n      tween.onMotionChanged = function(event) {\n        value = event.target._pos;\n\n        if ((value >= threshold && !ledBlinking && thresholdRising) ||\n          (value <= threshold && !ledBlinking && !thresholdRising)) {\n          ledBlinking = true;\n          blink(ledBlinking);\n          if (playAlarm) {\n            audioElement.play();\n          }\n        } else if ((value < threshold && ledBlinking && thresholdRising) ||\n          (value > threshold && ledBlinking && !thresholdRising)) {\n          ledBlinking = false;\n          blink(ledBlinking);\n          if (playAlarm) {\n            audioElement.pause();\n          }\n        }\n\n        if (value > maxMeasuredValue) {\n          maxMeasuredValue = value;\n        }\n        if (value < minMeasuredValue) {\n          minMeasuredValue = value;\n        }\n\n        if (!repainting) {\n          repainting = true;\n          requestAnimFrame(gauge.repaint);\n        }\n      };\n\n      // do we have a callback function to process?\n      if (callback && typeof(callback) === \"function\") {\n        tween.onMotionFinished = callback;\n      }\n\n      tween.start();\n    }\n    return this;\n  };\n\n  this.resetMinMeasuredValue = function() {\n    minMeasuredValue = value;\n    this.repaint();\n    return this;\n  };\n\n  this.resetMaxMeasuredValue = function() {\n    maxMeasuredValue = value;\n    this.repaint();\n    return this;\n  };\n\n  this.setMinMeasuredValueVisible = function(visible) {\n    minMeasuredValueVisible = !!visible;\n    this.repaint();\n    return this;\n  };\n\n  this.setMaxMeasuredValueVisible = function(visible) {\n    maxMeasuredValueVisible = !!visible;\n    this.repaint();\n    return this;\n  };\n\n  this.setThresholdVisible = function(visible) {\n    thresholdVisible = !!visible;\n    this.repaint();\n    return this;\n  };\n\n  this.setThresholdRising = function(rising) {\n    thresholdRising = !!rising;\n    // reset existing threshold alerts\n    ledBlinking = !ledBlinking;\n    blink(ledBlinking);\n    this.repaint();\n    return this;\n  };\n\n  this.setLcdDecimals = function(decimals) {\n    lcdDecimals = parseInt(decimals, 10);\n    this.repaint();\n    return this;\n  };\n\n  this.setFrameDesign = function(newFrameDesign) {\n    resetBuffers({\n      frame: true\n    });\n    frameDesign = newFrameDesign;\n    init({\n      frame: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setBackgroundColor = function(newBackgroundColor) {\n    resetBuffers({\n      background: true\n    });\n    backgroundColor = newBackgroundColor;\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setValueColor = function(newValueColor) {\n    resetBuffers({\n      bargraphled: true\n    });\n    valueColor = newValueColor;\n    init({\n      bargraphled: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setLedColor = function(newLedColor) {\n    resetBuffers({\n      led: true\n    });\n    ledColor = newLedColor;\n    init({\n      led: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setLedVisible = function(visible) {\n    ledVisible = !!visible;\n    this.repaint();\n    return this;\n  };\n\n  this.setLcdColor = function(newLcdColor) {\n    lcdColor = newLcdColor;\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setSection = function(areaSec) {\n    section = areaSec;\n    init();\n    this.repaint();\n    return this;\n  };\n\n  this.setSectionActive = function(value) {\n    useSectionColors = value;\n    init();\n    this.repaint();\n    return this;\n  };\n\n  this.setGradient = function(grad) {\n    valueGradient = grad;\n    init();\n    this.repaint();\n    return this;\n  };\n\n  this.setGradientActive = function(value) {\n    useValueGradient = value;\n    init();\n    this.repaint();\n    return this;\n  };\n\n  this.setMaxMeasuredValue = function(newValue) {\n    newValue = parseFloat(newValue);\n    var targetValue = (newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue));\n    if (maxMeasuredValue !== targetValue) {\n      maxMeasuredValue = targetValue;\n      this.repaint();\n    }\n    return this;\n  };\n\n  this.setMinMeasuredValue = function(newValue) {\n    newValue = parseFloat(newValue);\n    var targetValue = (newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue));\n    if (minMeasuredValue !== targetValue) {\n      minMeasuredValue = targetValue;\n      this.repaint();\n    }\n    return this;\n  };\n\n  this.setTitleString = function(title) {\n    titleString = title;\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setUnitString = function(unit) {\n    unitString = unit;\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setMinValue = function(newValue) {\n    minValue = parseFloat(newValue);\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.getMinValue = function() {\n    return minValue;\n  };\n\n  this.setMaxValue = function(newValue) {\n    maxValue = parseFloat(newValue);\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.getMaxValue = function() {\n    return maxValue;\n  };\n\n  this.setThreshold = function(newValue) {\n    newValue = parseFloat(newValue);\n    var targetValue = (newValue < minValue ? minValue : (newValue > maxValue ? maxValue : newValue));\n    if (threshold !== targetValue) {\n      threshold = targetValue;\n      resetBuffers({\n        background: true\n      });\n      init({\n        background: true\n      });\n      this.repaint();\n    }\n    return this;\n  };\n\n  this.setThresholdVisible = function(visible) {\n    thresholdVisible = !!visible;\n    this.repaint();\n    return this;\n  };\n\n  this.repaint = function() {\n    if (!initialized) {\n      init({\n        frame: true,\n        background: true,\n        led: true,\n        pointer: true,\n        foreground: true,\n        bargraphled: true\n      });\n    }\n\n    //mainCtx.save();\n    mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height);\n\n    // Draw frame\n    if (frameVisible) {\n      mainCtx.drawImage(frameBuffer, 0, 0);\n    }\n\n    // Draw buffered image to visible canvas\n    if (backgroundVisible) {\n      mainCtx.drawImage(backgroundBuffer, 0, 0);\n    }\n\n    // Draw lcd display\n    if (lcdVisible) {\n      drawLcdText(mainCtx, value, vertical);\n    }\n\n    // Draw led\n    if (ledVisible) {\n      mainCtx.drawImage(ledBuffer, ledPosX, ledPosY);\n    }\n    var valuePos;\n    var minMaxX, minMaxY;\n    // Draw min measured value indicator\n    if (minMeasuredValueVisible) {\n      if (vertical) {\n        valuePos = imageHeight * 0.856796 - (imageHeight * 0.728155) * (minMeasuredValue - minValue) / (maxValue - minValue);\n        minMaxX = imageWidth * 0.34 - minMeasuredValueBuffer.width;\n        minMaxY = valuePos - minMeasuredValueBuffer.height / 2;\n      } else {\n        valuePos = ((imageWidth * 0.856796) - (imageWidth * 0.128640)) * (minMeasuredValue - minValue) / (maxValue - minValue);\n        minMaxX = imageWidth * 0.142857 - minMeasuredValueBuffer.height / 2 + valuePos;\n        minMaxY = imageHeight * 0.65;\n      }\n      mainCtx.drawImage(minMeasuredValueBuffer, minMaxX, minMaxY);\n    }\n\n    // Draw max measured value indicator\n    if (maxMeasuredValueVisible) {\n      if (vertical) {\n        valuePos = imageHeight * 0.856796 - (imageHeight * 0.728155) * (maxMeasuredValue - minValue) / (maxValue - minValue);\n        minMaxX = imageWidth * 0.34 - maxMeasuredValueBuffer.width;\n        minMaxY = valuePos - maxMeasuredValueBuffer.height / 2;\n      } else {\n        valuePos = ((imageWidth * 0.856796) - (imageWidth * 0.128640)) * (maxMeasuredValue - minValue) / (maxValue - minValue);\n        minMaxX = imageWidth * 0.142857 - maxMeasuredValueBuffer.height / 2 + valuePos;\n        minMaxY = imageHeight * 0.65;\n      }\n      mainCtx.drawImage(maxMeasuredValueBuffer, minMaxX, minMaxY);\n    }\n\n    mainCtx.save();\n    drawValue(mainCtx, imageWidth, imageHeight);\n    mainCtx.restore();\n\n    // Draw foreground\n    if (foregroundVisible) {\n      mainCtx.drawImage(foregroundBuffer, 0, 0);\n    }\n\n    repainting = false;\n  };\n\n  // Visualize the component\n  this.repaint();\n\n  return this;\n};\n\nexport default linearBargraph;\n","\nimport createLcdBackgroundImage from \"./createLcdBackgroundImage\";\nimport {\nroundedRectangle, \ncreateBuffer, \ngetColorValues, \nhsbToRgb, \nrgbToHsb, \nrequestAnimFrame, \ngetCanvasContext,\nlcdFontName,\nstdFontName,\n} from \"./tools\";\n\nimport {\n  backgroundColor as BackgroundColor,\n  lcdColor as LcdColor,\n  color as ColorDef,\n  ledColor as LedColor,\n  gaugeType as GaugeType,\n  orientation as Orientation,\n  knobType as KnobType,\n  knobStyle as KnobStyle,\n  frameDesign as FrameDesign,\n  pointerType as PointerType,\n  foregroundType as ForegroundType,\n  labelNumberFormat as LabelNumberFormat,\n  tickLabelOrientation as TickLabelOrientation,\n  trendState as TrendState,\n  } from \"./definitions\";\n\nvar displaySingle = function(canvas, parameters) {\n  parameters = parameters || {};\n  var width = (undefined === parameters.width ? 0 : parameters.width),\n    height = (undefined === parameters.height ? 0 : parameters.height),\n    lcdColor = (undefined === parameters.lcdColor ? LcdColor.STANDARD : parameters.lcdColor),\n    lcdDecimals = (undefined === parameters.lcdDecimals ? 2 : parameters.lcdDecimals),\n    unitString = (undefined === parameters.unitString ? '' : parameters.unitString),\n    unitStringVisible = (undefined === parameters.unitStringVisible ? false : parameters.unitStringVisible),\n    headerString = (undefined === parameters.headerString ? '' : parameters.headerString),\n    headerStringVisible = (undefined === parameters.headerStringVisible ? false : parameters.headerStringVisible),\n    digitalFont = (undefined === parameters.digitalFont ? false : parameters.digitalFont),\n    valuesNumeric = (undefined === parameters.valuesNumeric ? true : parameters.valuesNumeric),\n    value = (undefined === parameters.value ? 0 : parameters.value),\n    alwaysScroll = (undefined === parameters.alwaysScroll ? false : parameters.alwaysScroll),\n    autoScroll = (undefined === parameters.autoScroll ? false : parameters.autoScroll),\n    section = (undefined === parameters.section ? null : parameters.section);\n\n  var scrolling = false;\n  var scrollX = 0;\n  var scrollTimer;\n  var repainting = false;\n\n  var self = this;\n\n  // Get the canvas context and clear it\n  var mainCtx = getCanvasContext(canvas);\n  // Has a size been specified?\n  if (width === 0) {\n    width = mainCtx.canvas.width;\n  }\n  if (height === 0) {\n    height = mainCtx.canvas.height;\n  }\n\n  // Set the size - also clears the canvas\n  mainCtx.canvas.width = width;\n  mainCtx.canvas.height = height;\n\n  var imageWidth = width;\n  var imageHeight = height;\n  var textWidth = 0;\n\n  var fontHeight = Math.floor(imageHeight / 1.5);\n  var stdFont = fontHeight + 'px ' + stdFontName;\n  var lcdFont = fontHeight + 'px ' + lcdFontName;\n\n  var initialized = false;\n\n  // **************   Buffer creation  ********************\n  // Buffer for the lcd\n  var lcdBuffer;\n  var sectionBuffer = [];\n  var sectionForegroundColor = [];\n\n  // **************   Image creation  ********************\n  var drawLcdText = function(value, color) {\n    mainCtx.save();\n    mainCtx.textAlign = 'right';\n    //mainCtx.textBaseline = 'top';\n    mainCtx.strokeStyle = color;\n    mainCtx.fillStyle = color;\n\n    mainCtx.beginPath();\n    mainCtx.rect(2, 0, imageWidth - 4, imageHeight);\n    mainCtx.closePath();\n    mainCtx.clip();\n\n    if ((lcdColor === LcdColor.STANDARD || lcdColor === LcdColor.STANDARD_GREEN) &&\n      section === null) {\n      mainCtx.shadowColor = 'gray';\n      mainCtx.shadowOffsetX = imageHeight * 0.035;\n      mainCtx.shadowOffsetY = imageHeight * 0.035;\n      mainCtx.shadowBlur = imageHeight * 0.055;\n    }\n\n    mainCtx.font = digitalFont ? lcdFont : stdFont;\n\n    if (valuesNumeric) {\n      // Numeric value\n      var unitWidth = 0;\n      textWidth = 0;\n      if (unitStringVisible) {\n        mainCtx.font = Math.floor(imageHeight / 2.5) + 'px ' + stdFontName;\n        unitWidth = mainCtx.measureText(unitString).width;\n      }\n      mainCtx.font = digitalFont ? lcdFont : stdFont;\n      var lcdText = value.toFixed(lcdDecimals);\n      textWidth = mainCtx.measureText(lcdText).width;\n      var vPos = 0.38;\n      if (headerStringVisible) {\n        vPos = 0.52;\n      }\n\n      mainCtx.fillText(lcdText, imageWidth - unitWidth - 4 - scrollX, imageHeight * 0.5 + fontHeight * vPos);\n\n      if (unitStringVisible) {\n        mainCtx.font = Math.floor(imageHeight / 2.5) + 'px ' + stdFontName;\n        mainCtx.fillText(unitString, imageWidth - 2 - scrollX, imageHeight * 0.5 + fontHeight * vPos);\n      }\n      if (headerStringVisible) {\n        mainCtx.textAlign = 'center';\n        mainCtx.font = Math.floor(imageHeight / 3.5) + 'px ' + stdFontName;\n        mainCtx.fillText(headerString, imageWidth / 2, imageHeight * 0.3);\n      }\n    } else {\n      // Text value\n      textWidth = mainCtx.measureText(value).width;\n      if (alwaysScroll || (autoScroll && textWidth > imageWidth - 4)) {\n        if (!scrolling) {\n          if (textWidth > imageWidth * 0.8) {\n            scrollX = imageWidth - textWidth - imageWidth * 0.2; // leave 20% blank leading space to give time to read start of message\n          } else {\n            scrollX = 0;\n          }\n          scrolling = true;\n          clearTimeout(scrollTimer); // kill any pending animate\n          scrollTimer = setTimeout(animate, 200);\n        }\n      } else if (autoScroll && textWidth <= imageWidth - 4) {\n        scrollX = 0;\n        scrolling = false;\n      }\n      mainCtx.fillText(value, imageWidth - 2 - scrollX, imageHeight * 0.5 + fontHeight * 0.38);\n    }\n    mainCtx.restore();\n  };\n\n  var createLcdSectionImage = function(width, height, color, lcdColor) {\n    var lcdSectionBuffer = createBuffer(width, height);\n    var lcdCtx = lcdSectionBuffer.getContext('2d');\n\n    lcdCtx.save();\n    var xB = 0;\n    var yB = 0;\n    var wB = width;\n    var hB = height;\n    var rB = Math.min(width, height) * 0.095;\n\n    var lcdBackground = lcdCtx.createLinearGradient(0, yB, 0, yB + hB);\n\n    lcdBackground.addColorStop(0, '#4c4c4c');\n    lcdBackground.addColorStop(0.08, '#666666');\n    lcdBackground.addColorStop(0.92, '#666666');\n    lcdBackground.addColorStop(1, '#e6e6e6');\n    lcdCtx.fillStyle = lcdBackground;\n\n    roundedRectangle(lcdCtx, xB, yB, wB, hB, rB);\n\n    lcdCtx.fill();\n    lcdCtx.restore();\n\n    lcdCtx.save();\n\n    var rgb = getColorValues(color);\n    var hsb = rgbToHsb(rgb[0], rgb[1], rgb[2]);\n\n    var rgbStart = getColorValues(lcdColor.gradientStartColor);\n    var hsbStart = rgbToHsb(rgbStart[0], rgbStart[1], rgbStart[2]);\n    var rgbFraction1 = getColorValues(lcdColor.gradientFraction1Color);\n    var hsbFraction1 = rgbToHsb(rgbFraction1[0], rgbFraction1[1], rgbFraction1[2]);\n    var rgbFraction2 = getColorValues(lcdColor.gradientFraction2Color);\n    var hsbFraction2 = rgbToHsb(rgbFraction2[0], rgbFraction2[1], rgbFraction2[2]);\n    var rgbFraction3 = getColorValues(lcdColor.gradientFraction3Color);\n    var hsbFraction3 = rgbToHsb(rgbFraction3[0], rgbFraction3[1], rgbFraction3[2]);\n    var rgbStop = getColorValues(lcdColor.gradientStopColor);\n    var hsbStop = rgbToHsb(rgbStop[0], rgbStop[1], rgbStop[2]);\n\n    var startColor = hsbToRgb(hsb[0], hsb[1], hsbStart[2] - 0.31);\n    var fraction1Color = hsbToRgb(hsb[0], hsb[1], hsbFraction1[2] - 0.31);\n    var fraction2Color = hsbToRgb(hsb[0], hsb[1], hsbFraction2[2] - 0.31);\n    var fraction3Color = hsbToRgb(hsb[0], hsb[1], hsbFraction3[2] - 0.31);\n    var stopColor = hsbToRgb(hsb[0], hsb[1], hsbStop[2] - 0.31);\n\n    var xF = 1;\n    var yF = 1;\n    var wF = width - 2;\n    var hF = height - 2;\n    var rF = rB - 1;\n    var lcdForeground = lcdCtx.createLinearGradient(0, yF, 0, yF + hF);\n    lcdForeground.addColorStop(0, 'rgb(' + startColor[0] + ', ' + startColor[1] + ', ' + startColor[2] + ')');\n    lcdForeground.addColorStop(0.03, 'rgb(' + fraction1Color[0] + ',' + fraction1Color[1] + ',' + fraction1Color[2] + ')');\n    lcdForeground.addColorStop(0.49, 'rgb(' + fraction2Color[0] + ',' + fraction2Color[1] + ',' + fraction2Color[2] + ')');\n    lcdForeground.addColorStop(0.5, 'rgb(' + fraction3Color[0] + ',' + fraction3Color[1] + ',' + fraction3Color[2] + ')');\n    lcdForeground.addColorStop(1, 'rgb(' + stopColor[0] + ',' + stopColor[1] + ',' + stopColor[2] + ')');\n    lcdCtx.fillStyle = lcdForeground;\n\n    roundedRectangle(lcdCtx, xF, yF, wF, hF, rF);\n\n    lcdCtx.fill();\n    lcdCtx.restore();\n\n    return lcdSectionBuffer;\n  };\n\n  var createSectionForegroundColor = function(sectionColor) {\n    var rgbSection = getColorValues(sectionColor);\n    var hsbSection = rgbToHsb(rgbSection[0], rgbSection[1], rgbSection[2]);\n    var sectionForegroundRgb = hsbToRgb(hsbSection[0], 0.57, 0.83);\n    return 'rgb(' + sectionForegroundRgb[0] + ', ' + sectionForegroundRgb[1] + ', ' + sectionForegroundRgb[2] + ')';\n  };\n\n  var animate = function() {\n    if (scrolling) {\n      if (scrollX > imageWidth) {\n        scrollX = -textWidth;\n      }\n      scrollX += 2;\n      scrollTimer = setTimeout(animate, 50);\n    } else {\n      scrollX = 0;\n    }\n    if (!repainting) {\n      repainting = true;\n      requestAnimFrame(self.repaint);\n    }\n  };\n\n  // **************   Initialization  ********************\n  var init = function() {\n    var sectionIndex;\n    initialized = true;\n\n    // Create lcd background if selected in background buffer (backgroundBuffer)\n    lcdBuffer = createLcdBackgroundImage(width, height, lcdColor);\n\n    if (null !== section && 0 < section.length) {\n      for (sectionIndex = 0; sectionIndex < section.length; sectionIndex++) {\n        sectionBuffer[sectionIndex] = createLcdSectionImage(width, height, section[sectionIndex].color, lcdColor);\n        sectionForegroundColor[sectionIndex] = createSectionForegroundColor(section[sectionIndex].color);\n      }\n    }\n\n  };\n\n  // **************   Public methods  ********************\n  this.setValue = function(newValue) {\n    if (value !== newValue) {\n      value = newValue;\n      this.repaint();\n    }\n    return this;\n  };\n\n  this.setLcdColor = function(newLcdColor) {\n    lcdColor = newLcdColor;\n    init();\n    this.repaint();\n    return this;\n  };\n\n  this.setSection = function(newSection) {\n    section = newSection;\n    init({\n      background: true,\n      foreground: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setScrolling = function(scroll) {\n    if (scroll) {\n      if (scrolling) {\n        return;\n      } else {\n        scrolling = scroll;\n        animate();\n      }\n    } else { //disable scrolling\n      scrolling = scroll;\n    }\n    return this;\n  };\n\n  this.repaint = function() {\n    if (!initialized) {\n      init();\n    }\n\n    //mainCtx.save();\n    mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height);\n\n    var lcdBackgroundBuffer = lcdBuffer;\n    var lcdTextColor = lcdColor.textColor;\n    var sectionIndex;\n    // Draw sections\n    if (null !== section && 0 < section.length) {\n      for (sectionIndex = 0; sectionIndex < section.length; sectionIndex++) {\n        if (value >= section[sectionIndex].start && value <= section[sectionIndex].stop) {\n          lcdBackgroundBuffer = sectionBuffer[sectionIndex];\n          lcdTextColor = sectionForegroundColor[sectionIndex];\n          break;\n        }\n      }\n    }\n\n    // Draw lcd background\n    mainCtx.drawImage(lcdBackgroundBuffer, 0, 0);\n\n    // Draw lcd text\n    drawLcdText(value, lcdTextColor);\n\n    repainting = false;\n  };\n\n  // Visualize the component\n  this.repaint();\n\n  return this;\n};\n\nexport default displaySingle;\n","\nimport createLcdBackgroundImage from \"./createLcdBackgroundImage\";\nimport {\ngetCanvasContext,\nlcdFontName,\nstdFontName,\n} from \"./tools\";\n\nimport {\n  backgroundColor as BackgroundColor,\n  lcdColor as LcdColor,\n  color as ColorDef,\n  ledColor as LedColor,\n  gaugeType as GaugeType,\n  orientation as Orientation,\n  knobType as KnobType,\n  knobStyle as KnobStyle,\n  frameDesign as FrameDesign,\n  pointerType as PointerType,\n  foregroundType as ForegroundType,\n  labelNumberFormat as LabelNumberFormat,\n  tickLabelOrientation as TickLabelOrientation,\n  trendState as TrendState,\n  } from \"./definitions\";\n\nvar displayMulti = function(canvas, parameters) {\n  parameters = parameters || {};\n  var width = (undefined === parameters.width ? 0 : parameters.width),\n    height = (undefined === parameters.height ? 0 : parameters.height),\n    lcdColor = (undefined === parameters.lcdColor ? LcdColor.STANDARD : parameters.lcdColor),\n    lcdDecimals = (undefined === parameters.lcdDecimals ? 2 : parameters.lcdDecimals),\n    headerString = (undefined === parameters.headerString ? '' : parameters.headerString),\n    headerStringVisible = (undefined === parameters.headerStringVisible ? false : parameters.headerStringVisible),\n    detailString = (undefined === parameters.detailString ? '' : parameters.detailString),\n    detailStringVisible = (undefined === parameters.detailStringVisible ? false : parameters.detailStringVisible),\n    linkAltValue = (undefined === parameters.linkAltValue ? true : parameters.linkAltValue),\n    unitString = (undefined === parameters.unitString ? '' : parameters.unitString),\n    unitStringVisible = (undefined === parameters.unitStringVisible ? false : parameters.unitStringVisible),\n    digitalFont = (undefined === parameters.digitalFont ? false : parameters.digitalFont),\n    valuesNumeric = (undefined === parameters.valuesNumeric ? true : parameters.valuesNumeric),\n    value = (undefined === parameters.value ? 0 : parameters.value),\n    altValue = (undefined === parameters.altValue ? 0 : parameters.altValue);\n\n  // Get the canvas context and clear it\n  var mainCtx = getCanvasContext(canvas);\n  // Has a size been specified?\n  if (width === 0) {\n    width = mainCtx.canvas.width;\n  }\n  if (height === 0) {\n    height = mainCtx.canvas.height;\n  }\n\n  // Set the size - also clears the canvas\n  mainCtx.canvas.width = width;\n  mainCtx.canvas.height = height;\n\n  var imageWidth = width;\n  var imageHeight = height;\n\n  var stdFont = Math.floor(imageHeight / 1.875) + 'px ' + stdFontName;\n  var lcdFont = Math.floor(imageHeight / 1.875) + 'px ' + lcdFontName;\n  var stdAltFont = Math.floor(imageHeight / 3.5) + 'px ' + stdFontName;\n  var lcdAltFont = Math.floor(imageHeight / 3.5) + 'px ' + lcdFontName;\n\n  var initialized = false;\n\n  // **************   Buffer creation  ********************\n  // Buffer for the lcd\n  var lcdBuffer;\n\n  // **************   Image creation  ********************\n  var drawLcdText = function(value) {\n    mainCtx.save();\n    mainCtx.textAlign = 'right';\n    mainCtx.textBaseline = 'middle';\n    mainCtx.strokeStyle = lcdColor.textColor;\n    mainCtx.fillStyle = lcdColor.textColor;\n\n    if (lcdColor === LcdColor.STANDARD || lcdColor === LcdColor.STANDARD_GREEN) {\n      mainCtx.shadowColor = 'gray';\n      mainCtx.shadowOffsetX = imageHeight * 0.025;\n      mainCtx.shadowOffsetY = imageHeight * 0.025;\n      mainCtx.shadowBlur = imageHeight * 0.05;\n    }\n\n    if (valuesNumeric) {\n      // Numeric value\n      if (headerStringVisible) {\n        mainCtx.font = Math.floor(imageHeight / 3) + 'px ' + stdFontName;\n      } else {\n        mainCtx.font = Math.floor(imageHeight / 2.5) + 'px ' + stdFontName;\n      }\n      var unitWidth = 0;\n      if (unitStringVisible) {\n        if (headerStringVisible) {\n          mainCtx.font = Math.floor(imageHeight / 3) + 'px ' + stdFontName;\n          unitWidth = mainCtx.measureText(unitString).width;\n        } else {\n          mainCtx.font = Math.floor(imageHeight / 2.5) + 'px ' + stdFontName;\n          unitWidth = mainCtx.measureText(unitString).width;\n        }\n      }\n      mainCtx.font = digitalFont ? lcdFont : stdFont;\n      var valueText = value.toFixed(lcdDecimals);\n      if (headerStringVisible) {\n        mainCtx.fillText(valueText, imageWidth - unitWidth - 4, imageHeight * 0.5);\n      } else {\n        mainCtx.fillText(valueText, imageWidth - unitWidth - 4, imageHeight * 0.38);\n      }\n\n      if (unitStringVisible) {\n        mainCtx.font = Math.floor(imageHeight / 3) + 'px ' + stdFontName;\n        mainCtx.fillText(unitString, imageWidth - 2, imageHeight * 0.55);\n      }\n\n      var altValueText = altValue.toFixed(lcdDecimals);\n      if (detailStringVisible) {\n        altValueText = detailString + altValueText;\n      }\n      if (digitalFont) {\n        mainCtx.font = lcdAltFont;\n      } else {\n        if (headerStringVisible) {\n          mainCtx.font = Math.floor(imageHeight / 5) + 'px ' + stdFontName;\n        } else {\n          mainCtx.font = stdAltFont;\n        }\n      }\n      mainCtx.textAlign = 'center';\n      if (headerStringVisible) {\n        mainCtx.fillText(altValueText, imageWidth / 2, imageHeight * 0.83);\n        mainCtx.fillText(headerString, imageWidth / 2, imageHeight * 0.16);\n      } else {\n        mainCtx.fillText(altValueText, imageWidth / 2, imageHeight * 0.8);\n      }\n    } else {\n      if (headerStringVisible) {\n        // Text value\n        mainCtx.font = Math.floor(imageHeight / 3.5) + 'px ' + stdFontName;\n        mainCtx.fillText(value, imageWidth - 2, imageHeight * 0.48);\n\n        //mainCtx.font = stdAltFont;\n        mainCtx.font = Math.floor(imageHeight / 5) + 'px ' + stdFontName;\n        mainCtx.textAlign = 'center';\n        mainCtx.fillText(altValue, imageWidth / 2, imageHeight * 0.83);\n        mainCtx.fillText(headerString, imageWidth / 2, imageHeight * 0.17);\n      } else {\n        // Text value\n        mainCtx.font = Math.floor(imageHeight / 2.5) + 'px ' + stdFontName;\n        mainCtx.fillText(value, imageWidth - 2, imageHeight * 0.38);\n\n        mainCtx.font = stdAltFont;\n        mainCtx.textAlign = 'center';\n        mainCtx.fillText(altValue, imageWidth / 2, imageHeight * 0.8);\n      }\n    }\n    mainCtx.restore();\n  };\n\n  // **************   Initialization  ********************\n  var init = function() {\n    initialized = true;\n\n    // Create lcd background if selected in background buffer (backgroundBuffer)\n    lcdBuffer = createLcdBackgroundImage(width, height, lcdColor);\n  };\n\n  // **************   Public methods  ********************\n  this.setValue = function(newValue) {\n    if (value !== newValue) {\n      if (linkAltValue) {\n        altValue = value;\n      }\n      value = newValue;\n      this.repaint();\n    }\n    return this;\n  };\n\n  this.setAltValue = function(altValueNew) {\n    if (altValue !== altValueNew) {\n      altValue = altValueNew;\n      this.repaint();\n    }\n    return this;\n  };\n\n  this.setLcdColor = function(newLcdColor) {\n    lcdColor = newLcdColor;\n    init();\n    this.repaint();\n    return this;\n  };\n\n  this.repaint = function() {\n    if (!initialized) {\n      init();\n    }\n\n    //mainCtx.save();\n    mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height);\n\n    // Draw lcd background\n    mainCtx.drawImage(lcdBuffer, 0, 0);\n\n    // Draw lcd text\n    drawLcdText(value);\n  };\n\n  // Visualize the component\n  this.repaint();\n\n  return this;\n};\n\nexport default displayMulti;\n","import Tween from \"./tween.js\";\nimport drawRadialFrameImage from \"./drawRadialFrameImage\";\nimport drawRadialBackgroundImage from \"./drawRadialBackgroundImage\";\nimport drawRadialForegroundImage from \"./drawRadialForegroundImage\";\nimport {\ncreateBuffer, \nrequestAnimFrame, \ngetCanvasContext,\nHALF_PI,\nTWO_PI,\nPI,\nRAD_FACTOR,\nstdFontName,\n} from \"./tools\";\n\nimport {\n  backgroundColor as BackgroundColor,\n  lcdColor as LcdColor,\n  color as ColorDef,\n  ledColor as LedColor,\n  gaugeType as GaugeType,\n  orientation as Orientation,\n  knobType as KnobType,\n  knobStyle as KnobStyle,\n  frameDesign as FrameDesign,\n  pointerType as PointerType,\n  foregroundType as ForegroundType,\n  labelNumberFormat as LabelNumberFormat,\n  tickLabelOrientation as TickLabelOrientation,\n  trendState as TrendState,\n  } from \"./definitions\";\n\nvar level = function(canvas, parameters) {\n  parameters = parameters || {};\n  var size = (undefined === parameters.size ? 0 : parameters.size),\n    decimalsVisible = (undefined === parameters.decimalsVisible ? false : parameters.decimalsVisible),\n    textOrientationFixed = (undefined === parameters.textOrientationFixed ? false : parameters.textOrientationFixed),\n    frameDesign = (undefined === parameters.frameDesign ? FrameDesign.METAL : parameters.frameDesign),\n    frameVisible = (undefined === parameters.frameVisible ? true : parameters.frameVisible),\n    backgroundColor = (undefined === parameters.backgroundColor ? BackgroundColor.DARK_GRAY : parameters.backgroundColor),\n    backgroundVisible = (undefined === parameters.backgroundVisible ? true : parameters.backgroundVisible),\n    pointerColor = (undefined === parameters.pointerColor ? ColorDef.RED : parameters.pointerColor),\n    foregroundType = (undefined === parameters.foregroundType ? ForegroundType.TYPE1 : parameters.foregroundType),\n    foregroundVisible = (undefined === parameters.foregroundVisible ? true : parameters.foregroundVisible),\n    rotateFace = (undefined === parameters.rotateFace ? false : parameters.rotateFace);\n\n  // Get the canvas context and clear it\n  var mainCtx = getCanvasContext(canvas);\n  // Has a size been specified?\n  if (size === 0) {\n    size = Math.min(mainCtx.canvas.width, mainCtx.canvas.height);\n  }\n\n  // Set the size - also clears the canvas\n  mainCtx.canvas.width = size;\n  mainCtx.canvas.height = size;\n\n  var tween;\n  var repainting = false;\n\n  var value = 0;\n  var stepValue = 0;\n  var visibleValue = 0;\n  var angleStep = TWO_PI / 360;\n  var angle = this.value;\n  var decimals = decimalsVisible ? 1 : 0;\n\n  var imageWidth = size;\n  var imageHeight = size;\n\n  var centerX = imageWidth / 2;\n  var centerY = imageHeight / 2;\n\n  var initialized = false;\n\n  // **************   Buffer creation  ********************\n  // Buffer for all static background painting code\n  var backgroundBuffer = createBuffer(size, size);\n  var backgroundContext = backgroundBuffer.getContext('2d');\n\n  // Buffer for pointer image painting code\n  var pointerBuffer = createBuffer(size, size);\n  var pointerContext = pointerBuffer.getContext('2d');\n\n  // Buffer for step pointer image painting code\n  var stepPointerBuffer = createBuffer(size, size);\n  var stepPointerContext = stepPointerBuffer.getContext('2d');\n\n  // Buffer for static foreground painting code\n  var foregroundBuffer = createBuffer(size, size);\n  var foregroundContext = foregroundBuffer.getContext('2d');\n\n  // **************   Image creation  ********************\n  var drawTickmarksImage = function(ctx) {\n    var stdFont, smlFont, i;\n\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.save();\n    ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();\n    ctx.fillStyle = backgroundColor.labelColor.getRgbaColor();\n    ctx.translate(centerX, centerY);\n\n    for (i = 0; 360 > i; i++) {\n      ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();\n      ctx.lineWidth = 0.5;\n      ctx.beginPath();\n      ctx.moveTo(imageWidth * 0.38, 0);\n      ctx.lineTo(imageWidth * 0.37, 0);\n      ctx.closePath();\n      ctx.stroke();\n\n      if (0 === i % 5) {\n        ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        ctx.moveTo(imageWidth * 0.38, 0);\n        ctx.lineTo(imageWidth * 0.36, 0);\n        ctx.closePath();\n        ctx.stroke();\n      }\n\n      if (0 === i % 45) {\n        ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        ctx.moveTo(imageWidth * 0.38, 0);\n        ctx.lineTo(imageWidth * 0.34, 0);\n        ctx.closePath();\n        ctx.stroke();\n      }\n\n      // Draw the labels\n      if (300 < imageWidth) {\n        stdFont = '14px ' + stdFont;\n        smlFont = '12px ' + stdFont;\n      }\n      if (300 >= imageWidth) {\n        stdFont = '12px ' + stdFont;\n        smlFont = '10px ' + stdFont;\n      }\n      if (200 >= imageWidth) {\n        stdFont = '10px ' + stdFont;\n        smlFont = '8px ' + stdFont;\n      }\n      if (100 >= imageWidth) {\n        stdFont = '8px ' + stdFont;\n        smlFont = '6px ' + stdFont;\n      }\n      ctx.save();\n      switch (i) {\n        case 0:\n          ctx.translate(imageWidth * 0.31, 0);\n          ctx.rotate((i * RAD_FACTOR) + HALF_PI);\n          ctx.font = stdFont;\n          ctx.fillText('0\\u00B0', 0, 0, imageWidth);\n          ctx.rotate(-(i * RAD_FACTOR) + HALF_PI);\n          ctx.translate(-imageWidth * 0.31, 0);\n\n          ctx.translate(imageWidth * 0.41, 0);\n          ctx.rotate((i * RAD_FACTOR) - HALF_PI);\n          ctx.font = smlFont;\n          ctx.fillText('0%', 0, 0, imageWidth);\n          break;\n        case 45:\n          ctx.translate(imageWidth * 0.31, 0);\n          ctx.rotate((i * RAD_FACTOR) + 0.25 * PI);\n          ctx.font = stdFont;\n          ctx.fillText('45\\u00B0', 0, 0, imageWidth);\n          ctx.rotate(-(i * RAD_FACTOR) + 0.25 * PI);\n          ctx.translate(-imageWidth * 0.31, 0);\n\n          ctx.translate(imageWidth * 0.31, imageWidth * 0.085);\n          ctx.rotate((i * RAD_FACTOR) - 0.25 * PI);\n          ctx.font = smlFont;\n          ctx.fillText('100%', 0, 0, imageWidth);\n          break;\n        case 90:\n          ctx.translate(imageWidth * 0.31, 0);\n          ctx.rotate((i * RAD_FACTOR));\n          ctx.font = stdFont;\n          ctx.fillText('90\\u00B0', 0, 0, imageWidth);\n          ctx.rotate(-(i * RAD_FACTOR));\n          ctx.translate(-imageWidth * 0.31, 0);\n\n          ctx.translate(imageWidth * 0.21, 0);\n          ctx.rotate((i * RAD_FACTOR));\n          ctx.font = smlFont;\n          ctx.fillText('\\u221E', 0, 0, imageWidth);\n          break;\n        case 135:\n          ctx.translate(imageWidth * 0.31, 0);\n          ctx.rotate((i * RAD_FACTOR) - 0.25 * PI);\n          ctx.font = stdFont;\n          ctx.fillText('45\\u00B0', 0, 0, imageWidth);\n          ctx.rotate(-(i * RAD_FACTOR) - 0.25 * PI);\n          ctx.translate(-imageWidth * 0.31, 0);\n\n          ctx.translate(imageWidth * 0.31, -imageWidth * 0.085);\n          ctx.rotate((i * RAD_FACTOR) + 0.25 * PI);\n          ctx.font = smlFont;\n          ctx.fillText('100%', 0, 0, imageWidth);\n          break;\n        case 180:\n          ctx.translate(imageWidth * 0.31, 0);\n          ctx.rotate((i * RAD_FACTOR) - HALF_PI);\n          ctx.font = stdFont;\n          ctx.fillText('0\\u00B0', 0, 0, imageWidth);\n          ctx.rotate(-(i * RAD_FACTOR) - HALF_PI);\n          ctx.translate(-imageWidth * 0.31, 0);\n\n          ctx.translate(imageWidth * 0.41, 0);\n          ctx.rotate((i * RAD_FACTOR) + HALF_PI);\n          ctx.font = smlFont;\n          ctx.fillText('0%', 0, 0, imageWidth);\n          ctx.translate(-imageWidth * 0.41, 0);\n          break;\n        case 225:\n          ctx.translate(imageWidth * 0.31, 0);\n          ctx.rotate((i * RAD_FACTOR) - 0.75 * PI);\n          ctx.font = stdFont;\n          ctx.fillText('45\\u00B0', 0, 0, imageWidth);\n          ctx.rotate(-(i * RAD_FACTOR) - 0.75 * PI);\n          ctx.translate(-imageWidth * 0.31, 0);\n\n          ctx.translate(imageWidth * 0.31, imageWidth * 0.085);\n          ctx.rotate((i * RAD_FACTOR) + 0.75 * PI);\n          ctx.font = smlFont;\n          ctx.fillText('100%', 0, 0, imageWidth);\n          break;\n        case 270:\n          ctx.translate(imageWidth * 0.31, 0);\n          ctx.rotate((i * RAD_FACTOR) - PI);\n          ctx.font = stdFont;\n          ctx.fillText('90\\u00B0', 0, 0, imageWidth);\n          ctx.rotate(-(i * RAD_FACTOR) - PI);\n          ctx.translate(-imageWidth * 0.31, 0);\n\n          ctx.translate(imageWidth * 0.21, 0);\n          ctx.rotate((i * RAD_FACTOR) - PI);\n          ctx.font = smlFont;\n          ctx.fillText('\\u221E', 0, 0, imageWidth);\n          break;\n        case 315:\n          ctx.translate(imageWidth * 0.31, 0);\n          ctx.rotate((i * RAD_FACTOR) - 1.25 * PI);\n          ctx.font = stdFont;\n          ctx.fillText('45\\u00B0', 0, 0, imageWidth);\n          ctx.rotate(-(i * RAD_FACTOR) - 1.25 * PI);\n          ctx.translate(-imageWidth * 0.31, 0);\n\n          ctx.translate(imageWidth * 0.31, -imageWidth * 0.085);\n          ctx.rotate((i * RAD_FACTOR) + 1.25 * PI);\n          ctx.font = smlFont;\n          ctx.fillText('100%', 0, 0, imageWidth);\n          break;\n      }\n      ctx.restore();\n\n      ctx.rotate(angleStep);\n    }\n    ctx.translate(-centerX, -centerY);\n    ctx.restore();\n  };\n\n  var drawMarkerImage = function(ctx) {\n    ctx.save();\n\n    ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();\n    ctx.fillStyle = backgroundColor.labelColor.getRgbaColor();\n\n    // FRAMELEFT\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(imageWidth * 0.200934, imageHeight * 0.434579);\n    ctx.lineTo(imageWidth * 0.163551, imageHeight * 0.434579);\n    ctx.lineTo(imageWidth * 0.163551, imageHeight * 0.560747);\n    ctx.lineTo(imageWidth * 0.200934, imageHeight * 0.560747);\n    ctx.lineWidth = 1;\n    ctx.lineCap = 'square';\n    ctx.lineJoin = 'miter';\n    ctx.stroke();\n\n    // TRIANGLELEFT\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(imageWidth * 0.163551, imageHeight * 0.471962);\n    ctx.lineTo(imageWidth * 0.205607, imageHeight * 0.5);\n    ctx.lineTo(imageWidth * 0.163551, imageHeight * 0.523364);\n    ctx.lineTo(imageWidth * 0.163551, imageHeight * 0.471962);\n    ctx.closePath();\n    ctx.fill();\n\n    // FRAMERIGHT\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(imageWidth * 0.799065, imageHeight * 0.434579);\n    ctx.lineTo(imageWidth * 0.836448, imageHeight * 0.434579);\n    ctx.lineTo(imageWidth * 0.836448, imageHeight * 0.560747);\n    ctx.lineTo(imageWidth * 0.799065, imageHeight * 0.560747);\n    ctx.lineWidth = 1;\n    ctx.lineCap = 'square';\n    ctx.lineJoin = 'miter';\n    ctx.stroke();\n\n    // TRIANGLERIGHT\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(imageWidth * 0.836448, imageHeight * 0.471962);\n    ctx.lineTo(imageWidth * 0.794392, imageHeight * 0.5);\n    ctx.lineTo(imageWidth * 0.836448, imageHeight * 0.523364);\n    ctx.lineTo(imageWidth * 0.836448, imageHeight * 0.471962);\n    ctx.closePath();\n    ctx.fill();\n\n    ctx.restore();\n  };\n\n  var drawPointerImage = function(ctx) {\n    ctx.save();\n\n    // POINTER_LEVEL\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(imageWidth * 0.523364, imageHeight * 0.350467);\n    ctx.lineTo(imageWidth * 0.5, imageHeight * 0.130841);\n    ctx.lineTo(imageWidth * 0.476635, imageHeight * 0.350467);\n    ctx.bezierCurveTo(imageWidth * 0.476635, imageHeight * 0.350467, imageWidth * 0.490654, imageHeight * 0.345794, imageWidth * 0.5, imageHeight * 0.345794);\n    ctx.bezierCurveTo(imageWidth * 0.509345, imageHeight * 0.345794, imageWidth * 0.523364, imageHeight * 0.350467, imageWidth * 0.523364, imageHeight * 0.350467);\n    ctx.closePath();\n    var POINTER_LEVEL_GRADIENT = ctx.createLinearGradient(0, 0.154205 * imageHeight, 0, 0.350466 * imageHeight);\n    var tmpDarkColor = pointerColor.dark;\n    var tmpLightColor = pointerColor.light;\n    tmpDarkColor.setAlpha(0.70588);\n    tmpLightColor.setAlpha(0.70588);\n    POINTER_LEVEL_GRADIENT.addColorStop(0, tmpDarkColor.getRgbaColor());\n    POINTER_LEVEL_GRADIENT.addColorStop(0.3, tmpLightColor.getRgbaColor());\n    POINTER_LEVEL_GRADIENT.addColorStop(0.59, tmpLightColor.getRgbaColor());\n    POINTER_LEVEL_GRADIENT.addColorStop(1, tmpDarkColor.getRgbaColor());\n    ctx.fillStyle = POINTER_LEVEL_GRADIENT;\n    var strokeColor_POINTER_LEVEL = pointerColor.light.getRgbaColor();\n    ctx.lineWidth = 1;\n    ctx.lineCap = 'square';\n    ctx.lineJoin = 'miter';\n    ctx.strokeStyle = strokeColor_POINTER_LEVEL;\n    ctx.fill();\n    ctx.stroke();\n\n    tmpDarkColor.setAlpha(1);\n    tmpLightColor.setAlpha(1);\n\n    ctx.restore();\n  };\n\n  var drawStepPointerImage = function(ctx) {\n    ctx.save();\n\n    var tmpDarkColor = pointerColor.dark;\n    var tmpLightColor = pointerColor.light;\n    tmpDarkColor.setAlpha(0.70588);\n    tmpLightColor.setAlpha(0.70588);\n\n    // POINTER_LEVEL_LEFT\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(imageWidth * 0.285046, imageHeight * 0.514018);\n    ctx.lineTo(imageWidth * 0.210280, imageHeight * 0.5);\n    ctx.lineTo(imageWidth * 0.285046, imageHeight * 0.481308);\n    ctx.bezierCurveTo(imageWidth * 0.285046, imageHeight * 0.481308, imageWidth * 0.280373, imageHeight * 0.490654, imageWidth * 0.280373, imageHeight * 0.495327);\n    ctx.bezierCurveTo(imageWidth * 0.280373, imageHeight * 0.504672, imageWidth * 0.285046, imageHeight * 0.514018, imageWidth * 0.285046, imageHeight * 0.514018);\n    ctx.closePath();\n    var POINTER_LEVEL_LEFT_GRADIENT = ctx.createLinearGradient(0.224299 * imageWidth, 0, 0.289719 * imageWidth, 0);\n    POINTER_LEVEL_LEFT_GRADIENT.addColorStop(0, tmpDarkColor.getRgbaColor());\n    POINTER_LEVEL_LEFT_GRADIENT.addColorStop(0.3, tmpLightColor.getRgbaColor());\n    POINTER_LEVEL_LEFT_GRADIENT.addColorStop(0.59, tmpLightColor.getRgbaColor());\n    POINTER_LEVEL_LEFT_GRADIENT.addColorStop(1, tmpDarkColor.getRgbaColor());\n    ctx.fillStyle = POINTER_LEVEL_LEFT_GRADIENT;\n    var strokeColor_POINTER_LEVEL_LEFT = pointerColor.light.getRgbaColor();\n    ctx.lineWidth = 1;\n    ctx.lineCap = 'square';\n    ctx.lineJoin = 'miter';\n    ctx.strokeStyle = strokeColor_POINTER_LEVEL_LEFT;\n    ctx.fill();\n    ctx.stroke();\n\n    // POINTER_LEVEL_RIGHT\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(imageWidth * 0.714953, imageHeight * 0.514018);\n    ctx.lineTo(imageWidth * 0.789719, imageHeight * 0.5);\n    ctx.lineTo(imageWidth * 0.714953, imageHeight * 0.481308);\n    ctx.bezierCurveTo(imageWidth * 0.714953, imageHeight * 0.481308, imageWidth * 0.719626, imageHeight * 0.490654, imageWidth * 0.719626, imageHeight * 0.495327);\n    ctx.bezierCurveTo(imageWidth * 0.719626, imageHeight * 0.504672, imageWidth * 0.714953, imageHeight * 0.514018, imageWidth * 0.714953, imageHeight * 0.514018);\n    ctx.closePath();\n    var POINTER_LEVEL_RIGHT_GRADIENT = ctx.createLinearGradient(0.775700 * imageWidth, 0, 0.71028 * imageWidth, 0);\n    POINTER_LEVEL_RIGHT_GRADIENT.addColorStop(0, tmpDarkColor.getRgbaColor());\n    POINTER_LEVEL_RIGHT_GRADIENT.addColorStop(0.3, tmpLightColor.getRgbaColor());\n    POINTER_LEVEL_RIGHT_GRADIENT.addColorStop(0.59, tmpLightColor.getRgbaColor());\n    POINTER_LEVEL_RIGHT_GRADIENT.addColorStop(1, tmpDarkColor.getRgbaColor());\n    ctx.fillStyle = POINTER_LEVEL_RIGHT_GRADIENT;\n    var strokeColor_POINTER_LEVEL_RIGHT = pointerColor.light.getRgbaColor();\n    ctx.lineWidth = 1;\n    ctx.lineCap = 'square';\n    ctx.lineJoin = 'miter';\n    ctx.strokeStyle = strokeColor_POINTER_LEVEL_RIGHT;\n    ctx.fill();\n    ctx.stroke();\n\n    tmpDarkColor.setAlpha(1);\n    tmpLightColor.setAlpha(1);\n\n    ctx.restore();\n  };\n\n  // **************   Initialization  ********************\n  // Draw all static painting code to background\n  var init = function() {\n    initialized = true;\n\n    if (frameVisible) {\n      drawRadialFrameImage(backgroundContext, frameDesign, centerX, centerY, imageWidth, imageHeight);\n    }\n\n    if (backgroundVisible) {\n      drawRadialBackgroundImage(backgroundContext, backgroundColor, centerX, centerY, imageWidth, imageHeight);\n      drawTickmarksImage(backgroundContext);\n    }\n\n    drawMarkerImage(pointerContext);\n\n    drawPointerImage(pointerContext);\n\n    drawStepPointerImage(stepPointerContext);\n\n    if (foregroundVisible) {\n      drawRadialForegroundImage(foregroundContext, foregroundType, imageWidth, imageHeight, false);\n    }\n  };\n\n  var resetBuffers = function() {\n    backgroundBuffer.width = size;\n    backgroundBuffer.height = size;\n    backgroundContext = backgroundBuffer.getContext('2d');\n\n    // Buffer for pointer image painting code\n    pointerBuffer.width = size;\n    pointerBuffer.height = size;\n    pointerContext = pointerBuffer.getContext('2d');\n\n    // Buffer for step pointer image painting code\n    stepPointerBuffer.width = size;\n    stepPointerBuffer.height = size;\n    stepPointerContext = stepPointerBuffer.getContext('2d');\n\n    // Buffer for static foreground painting code\n    foregroundBuffer.width = size;\n    foregroundBuffer.height = size;\n    foregroundContext = foregroundBuffer.getContext('2d');\n  };\n\n  //************************************ Public methods **************************************\n  this.setValue = function(newValue) {\n    var targetValue;\n    newValue = parseFloat(newValue);\n    targetValue = 0 > newValue ? (360 + newValue) : newValue;\n    targetValue = 359.9 < newValue ? (newValue - 360) : newValue;\n\n    if (value !== targetValue) {\n      value = targetValue;\n      stepValue = 2 * ((Math.abs(value) * 10) % 10);\n      if (10 < stepValue) {\n        stepValue -= 20;\n      }\n\n      if (0 === value) {\n        visibleValue = 90;\n      }\n\n      if (0 < value && 90 >= value) {\n        visibleValue = (90 - value);\n      }\n\n      if (90 < value && 180 >= value) {\n        visibleValue = (value - 90);\n      }\n\n      if (180 < value && 270 >= value) {\n        visibleValue = (270 - value);\n      }\n\n      if (270 < value && 360 >= value) {\n        visibleValue = (value - 270);\n      }\n\n      if (0 > value && value >= -90) {\n        visibleValue = (90 - Math.abs(value));\n      }\n\n      if (value < -90 && value >= -180) {\n        visibleValue = Math.abs(value) - 90;\n      }\n\n      if (value < -180 && value >= -270) {\n        visibleValue = 270 - Math.abs(value);\n      }\n\n      if (value < -270 && value >= -360) {\n        visibleValue = Math.abs(value) - 270;\n      }\n\n      this.repaint();\n    }\n    return this;\n  };\n\n  this.getValue = function() {\n    return value;\n  };\n\n  this.setValueAnimated = function(newValue, callback) {\n    newValue = parseFloat(newValue);\n    if (360 - newValue + value < newValue - value) {\n      newValue = 360 - newValue;\n    }\n    if (value !== newValue) {\n      if (undefined !== tween && tween.isPlaying) {\n        tween.stop();\n      }\n\n      //tween = new Tween(new Object(),'',Tween.elasticEaseOut,this.value,targetValue, 1);\n      tween = new Tween({}, '', Tween.regularEaseInOut, value, newValue, 1);\n      //tween = new Tween(new Object(), '', Tween.strongEaseInOut, this.value, targetValue, 1);\n\n      var gauge = this;\n\n      tween.onMotionChanged = function(event) {\n        value = event.target._pos;\n        stepValue = 2 * ((Math.abs(value) * 10) % 10);\n        if (10 < stepValue) {\n          stepValue -= 20;\n        }\n\n        if (0 === value) {\n          visibleValue = 90;\n        }\n\n        if (0 < value && 90 >= value) {\n          visibleValue = (90 - value);\n        }\n\n        if (90 < value && 180 >= value) {\n          visibleValue = (value - 90);\n        }\n\n        if (180 < value && 270 >= value) {\n          visibleValue = (270 - value);\n        }\n\n        if (270 < value && 360 >= value) {\n          visibleValue = (value - 270);\n        }\n\n        if (0 > value && value >= -90) {\n          visibleValue = (90 - Math.abs(value));\n        }\n\n        if (value < -90 && value >= -180) {\n          visibleValue = Math.abs(value) - 90;\n        }\n\n        if (value < -180 && value >= -270) {\n          visibleValue = 270 - Math.abs(value);\n        }\n\n        if (value < -270 && value >= -360) {\n          visibleValue = Math.abs(value) - 270;\n        }\n\n        if (!repainting) {\n          repainting = true;\n          requestAnimFrame(gauge.repaint);\n        }\n      };\n\n      // do we have a callback function to process?\n      if (callback && typeof(callback) === \"function\") {\n        tween.onMotionFinished = callback;\n      }\n\n      tween.start();\n    }\n    return this;\n  };\n\n  this.setFrameDesign = function(newFrameDesign) {\n    resetBuffers();\n    frameDesign = newFrameDesign;\n    init();\n    this.repaint();\n    return this;\n  };\n\n  this.setBackgroundColor = function(newBackgroundColor) {\n    resetBuffers();\n    backgroundColor = newBackgroundColor;\n    init();\n    this.repaint();\n    return this;\n  };\n\n  this.setForegroundType = function(newForegroundType) {\n    resetBuffers();\n    foregroundType = newForegroundType;\n    init();\n    this.repaint();\n    return this;\n  };\n\n  this.setPointerColor = function(newPointerColor) {\n    resetBuffers();\n    pointerColor = newPointerColor;\n    init();\n    this.repaint();\n    return this;\n  };\n\n  this.repaint = function() {\n    if (!initialized) {\n      init();\n    }\n\n    mainCtx.save();\n    mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height);\n\n    angle = HALF_PI + value * angleStep - HALF_PI;\n    if (rotateFace) {\n      mainCtx.translate(centerX, centerY);\n      mainCtx.rotate(-angle);\n      mainCtx.translate(-centerX, -centerY);\n    }\n    // Draw buffered image to visible canvas\n    if (frameVisible || backgroundVisible) {\n      mainCtx.drawImage(backgroundBuffer, 0, 0);\n    }\n\n    mainCtx.save();\n    // Define rotation center\n    mainCtx.translate(centerX, centerY);\n    mainCtx.rotate(angle);\n\n    // Draw pointer\n    mainCtx.translate(-centerX, -centerY);\n    mainCtx.drawImage(pointerBuffer, 0, 0);\n\n    mainCtx.fillStyle = backgroundColor.labelColor.getRgbaColor();\n    mainCtx.textAlign = 'center';\n    mainCtx.textBaseline = 'middle';\n\n    if (textOrientationFixed) {\n      mainCtx.restore();\n      if (decimalsVisible) {\n        mainCtx.font = imageWidth * 0.1 + 'px ' + stdFontName;\n      } else {\n        mainCtx.font = imageWidth * 0.15 + 'px ' + stdFontName;\n      }\n      mainCtx.fillText(visibleValue.toFixed(decimals) + '\\u00B0', centerX, centerY, imageWidth * 0.35);\n    } else {\n      if (decimalsVisible) {\n        mainCtx.font = imageWidth * 0.15 + 'px ' + stdFontName;\n      } else {\n        mainCtx.font = imageWidth * 0.2 + 'px ' + stdFontName;\n      }\n      mainCtx.fillText(visibleValue.toFixed(decimals) + '\\u00B0', centerX, centerY, imageWidth * 0.35);\n      mainCtx.restore();\n    }\n\n    mainCtx.translate(centerX, centerY);\n    mainCtx.rotate(angle + stepValue * RAD_FACTOR);\n    mainCtx.translate(-centerX, -centerY);\n    mainCtx.drawImage(stepPointerBuffer, 0, 0);\n    mainCtx.restore();\n\n    // Draw foreground\n    if (foregroundVisible) {\n      mainCtx.drawImage(foregroundBuffer, 0, 0);\n    }\n\n    mainCtx.restore();\n\n    repainting = false;\n  };\n\n  // Visualize the component\n  this.repaint();\n\n  return this;\n};\n\nexport default level;\n","\nimport {\nTWO_PI,\nRAD_FACTOR,\n} from \"./tools\";\n\n\n\n\nvar drawRoseImage = function(ctx, centerX, centerY, imageWidth, imageHeight, backgroundColor) {\n  var fill = true,\n    i, grad,\n    symbolColor = backgroundColor.symbolColor.getRgbaColor();\n\n  ctx.save();\n  ctx.lineWidth = 1;\n  ctx.fillStyle = symbolColor;\n  ctx.strokeStyle = symbolColor;\n  ctx.translate(centerX, centerY);\n  // broken ring\n  for (i = 0; i < 360; i += 15) {\n    fill = !fill;\n\n    ctx.beginPath();\n    ctx.arc(0, 0, imageWidth * 0.26, i * RAD_FACTOR, (i + 15) * RAD_FACTOR, false);\n    ctx.arc(0, 0, imageWidth * 0.23, (i + 15) * RAD_FACTOR, i * RAD_FACTOR, true);\n    ctx.closePath();\n    if (fill) {\n      ctx.fill();\n    }\n    ctx.stroke();\n  }\n\n  ctx.translate(-centerX, -centerY);\n\n  /*\n          // PATH1_2\n          ctx.save();\n          ctx.beginPath();\n          ctx.moveTo(imageWidth * 0.560747, imageHeight * 0.584112);\n          ctx.lineTo(imageWidth * 0.640186, imageHeight * 0.644859);\n          ctx.lineTo(imageWidth * 0.584112, imageHeight * 0.560747);\n          ctx.lineTo(imageWidth * 0.560747, imageHeight * 0.584112);\n          ctx.closePath();\n          ctx.fillStyle = fillColorPath;\n          ctx.fill();\n          ctx.stroke();\n\n          // PATH2_2\n          ctx.save();\n          ctx.beginPath();\n          ctx.moveTo(imageWidth * 0.411214, imageHeight * 0.560747);\n          ctx.lineTo(imageWidth * 0.355140, imageHeight * 0.644859);\n          ctx.lineTo(imageWidth * 0.439252, imageHeight * 0.588785);\n          ctx.lineTo(imageWidth * 0.411214, imageHeight * 0.560747);\n          ctx.closePath();\n          ctx.fillStyle = fillColorPath;\n          ctx.fill();\n          ctx.stroke();\n\n          // PATH3_2\n          ctx.save();\n          ctx.beginPath();\n          ctx.moveTo(imageWidth * 0.584112, imageHeight * 0.443925);\n          ctx.lineTo(imageWidth * 0.640186, imageHeight * 0.359813);\n          ctx.lineTo(imageWidth * 0.560747, imageHeight * 0.420560);\n          ctx.lineTo(imageWidth * 0.584112, imageHeight * 0.443925);\n          ctx.closePath();\n          ctx.fillStyle = fillColorPath;\n          ctx.fill();\n          ctx.stroke();\n\n          // PATH4_2\n          ctx.save();\n          ctx.beginPath();\n          ctx.moveTo(imageWidth * 0.439252, imageHeight * 0.415887);\n          ctx.lineTo(imageWidth * 0.355140, imageHeight * 0.359813);\n          ctx.lineTo(imageWidth * 0.415887, imageHeight * 0.439252);\n          ctx.lineTo(imageWidth * 0.439252, imageHeight * 0.415887);\n          ctx.closePath();\n          ctx.fillStyle = fillColorPath;\n          ctx.fill();\n          ctx.stroke();\n\n          // PATH5_2\n          ctx.save();\n          ctx.beginPath();\n          ctx.moveTo(imageWidth * 0.523364, imageHeight * 0.397196);\n          ctx.lineTo(imageWidth * 0.5, imageHeight * 0.196261);\n          ctx.lineTo(imageWidth * 0.471962, imageHeight * 0.397196);\n          ctx.lineTo(imageWidth * 0.523364, imageHeight * 0.397196);\n          ctx.closePath();\n          var PATH5_2_GRADIENT = ctx.createLinearGradient(0.476635 * imageWidth, 0, 0.518691 * imageWidth, 0);\n          PATH5_2_GRADIENT.addColorStop(0, 'rgb(222, 223, 218)');\n          PATH5_2_GRADIENT.addColorStop(0.48, 'rgb(222, 223, 218)');\n          PATH5_2_GRADIENT.addColorStop(0.49, backgroundColor.symbolColor.getRgbaColor());\n          PATH5_2_GRADIENT.addColorStop(1, backgroundColor.symbolColor.getRgbaColor());\n          ctx.fillStyle = PATH5_2_GRADIENT;\n          ctx.fill();\n          ctx.stroke();\n\n          // PATH6_2\n          ctx.save();\n          ctx.beginPath();\n          ctx.moveTo(imageWidth * 0.471962, imageHeight * 0.607476);\n          ctx.lineTo(imageWidth * 0.5, imageHeight * 0.813084);\n          ctx.lineTo(imageWidth * 0.523364, imageHeight * 0.607476);\n          ctx.lineTo(imageWidth * 0.471962, imageHeight * 0.607476);\n          ctx.closePath();\n          var PATH6_2_GRADIENT = ctx.createLinearGradient(0.518691 * imageWidth, 0, (0.518691 + -0.037383) * imageWidth, 0);\n          PATH6_2_GRADIENT.addColorStop(0, 'rgb(222, 223, 218)');\n          PATH6_2_GRADIENT.addColorStop(0.56, 'rgb(222, 223, 218)');\n          PATH6_2_GRADIENT.addColorStop(0.5601, backgroundColor.symbolColor.getRgbaColor());\n          PATH6_2_GRADIENT.addColorStop(1, backgroundColor.symbolColor.getRgbaColor());\n          ctx.fillStyle = PATH6_2_GRADIENT;\n          ctx.lineWidth = 1;\n          ctx.lineCap = 'square';\n          ctx.lineJoin = 'miter';\n          ctx.strokeStyle = backgroundColor.symbolColor.getRgbaColor();\n          ctx.fill();\n          ctx.stroke();\n\n          // PATH7_2\n          ctx.save();\n          ctx.beginPath();\n          ctx.moveTo(imageWidth * 0.602803, imageHeight * 0.528037);\n          ctx.lineTo(imageWidth * 0.803738, imageHeight * 0.5);\n          ctx.lineTo(imageWidth * 0.602803, imageHeight * 0.476635);\n          ctx.lineTo(imageWidth * 0.602803, imageHeight * 0.528037);\n          ctx.closePath();\n          var PATH7_2_GRADIENT = ctx.createLinearGradient(0, 0.485981 * imageHeight, 0, 0.514018 * imageHeight);\n          PATH7_2_GRADIENT.addColorStop(0, 'rgb(222, 223, 218)');\n          PATH7_2_GRADIENT.addColorStop(0.48, 'rgb(222, 223, 218)');\n          PATH7_2_GRADIENT.addColorStop(0.49, backgroundColor.symbolColor.getRgbaColor());\n          PATH7_2_GRADIENT.addColorStop(1, backgroundColor.symbolColor.getRgbaColor());\n          ctx.fillStyle = PATH7_2_GRADIENT;\n          ctx.fill();\n          ctx.stroke();\n\n          // PATH8_2\n          ctx.save();\n          ctx.beginPath();\n          ctx.moveTo(imageWidth * 0.392523, imageHeight * 0.476635);\n          ctx.lineTo(imageWidth * 0.191588, imageHeight * 0.5);\n          ctx.lineTo(imageWidth * 0.392523, imageHeight * 0.528037);\n          ctx.lineTo(imageWidth * 0.392523, imageHeight * 0.476635);\n          ctx.closePath();\n          var PATH8_2_GRADIENT = ctx.createLinearGradient(0, 0.528037 * imageHeight, 0, 0.485981 * imageHeight);\n          PATH8_2_GRADIENT.addColorStop(0, 'rgb(222, 223, 218)');\n          PATH8_2_GRADIENT.addColorStop(0.52, 'rgb(222, 223, 218)');\n          PATH8_2_GRADIENT.addColorStop(0.53, backgroundColor.symbolColor.getRgbaColor());\n          PATH8_2_GRADIENT.addColorStop(1, backgroundColor.symbolColor.getRgbaColor());\n          ctx.fillStyle = PATH8_2_GRADIENT;\n          ctx.fill();\n          ctx.stroke();\n\n          // PATH9_2\n          ctx.save();\n          ctx.beginPath();\n          ctx.moveTo(imageWidth * 0.406542, imageHeight * 0.504672);\n          ctx.bezierCurveTo(imageWidth * 0.406542, imageHeight * 0.453271, imageWidth * 0.448598, imageHeight * 0.411214, imageWidth * 0.5, imageHeight * 0.411214);\n          ctx.bezierCurveTo(imageWidth * 0.546728, imageHeight * 0.411214, imageWidth * 0.588785, imageHeight * 0.453271, imageWidth * 0.588785, imageHeight * 0.504672);\n          ctx.bezierCurveTo(imageWidth * 0.588785, imageHeight * 0.551401, imageWidth * 0.546728, imageHeight * 0.593457, imageWidth * 0.5, imageHeight * 0.593457);\n          ctx.bezierCurveTo(imageWidth * 0.448598, imageHeight * 0.593457, imageWidth * 0.406542, imageHeight * 0.551401, imageWidth * 0.406542, imageHeight * 0.504672);\n          ctx.closePath();\n          ctx.moveTo(imageWidth * 0.387850, imageHeight * 0.504672);\n          ctx.bezierCurveTo(imageWidth * 0.387850, imageHeight * 0.560747, imageWidth * 0.439252, imageHeight * 0.612149, imageWidth * 0.5, imageHeight * 0.612149);\n          ctx.bezierCurveTo(imageWidth * 0.556074, imageHeight * 0.612149, imageWidth * 0.607476, imageHeight * 0.560747, imageWidth * 0.607476, imageHeight * 0.504672);\n          ctx.bezierCurveTo(imageWidth * 0.607476, imageHeight * 0.443925, imageWidth * 0.556074, imageHeight * 0.392523, imageWidth * 0.5, imageHeight * 0.392523);\n          ctx.bezierCurveTo(imageWidth * 0.439252, imageHeight * 0.392523, imageWidth * 0.387850, imageHeight * 0.443925, imageWidth * 0.387850, imageHeight * 0.504672);\n          ctx.closePath();\n          ctx.fillStyle = fillColorPath;\n          ctx.lineWidth = 1;\n          ctx.lineCap = 'square';\n          ctx.lineJoin = 'miter';\n          ctx.strokeStyle = backgroundColor.symbolColor.getRgbaColor();\n          ctx.fill();\n          ctx.stroke();\n          ctx.restore();\n  */\n  // Replacement code, not quite the same but much smaller!\n\n  for (i = 0; 360 >= i; i += 90) {\n    // Small pointers\n    ctx.beginPath();\n    ctx.moveTo(imageWidth * 0.560747, imageHeight * 0.584112);\n    ctx.lineTo(imageWidth * 0.640186, imageHeight * 0.644859);\n    ctx.lineTo(imageWidth * 0.584112, imageHeight * 0.560747);\n    ctx.lineTo(imageWidth * 0.560747, imageHeight * 0.584112);\n    ctx.closePath();\n    ctx.fillStyle = symbolColor;\n    ctx.fill();\n    ctx.stroke();\n    // Large pointers\n    ctx.beginPath();\n    ctx.moveTo(imageWidth * 0.523364, imageHeight * 0.397196);\n    ctx.lineTo(imageWidth * 0.5, imageHeight * 0.196261);\n    ctx.lineTo(imageWidth * 0.471962, imageHeight * 0.397196);\n    ctx.lineTo(imageWidth * 0.523364, imageHeight * 0.397196);\n    ctx.closePath();\n    grad = ctx.createLinearGradient(0.476635 * imageWidth, 0, 0.518691 * imageWidth, 0);\n    grad.addColorStop(0, 'rgb(222, 223, 218)');\n    grad.addColorStop(0.48, 'rgb(222, 223, 218)');\n    grad.addColorStop(0.49, symbolColor);\n    grad.addColorStop(1, symbolColor);\n    ctx.fillStyle = grad;\n    ctx.fill();\n    ctx.stroke();\n    ctx.translate(centerX, centerY);\n    ctx.rotate(i * RAD_FACTOR);\n    ctx.translate(-centerX, -centerY);\n  }\n\n  // Central ring\n  ctx.beginPath();\n  ctx.translate(centerX, centerY);\n  ctx.arc(0, 0, imageWidth * 0.1, 0, TWO_PI, false);\n  ctx.lineWidth = imageWidth * 0.022;\n  ctx.stroke();\n  ctx.translate(-centerX, -centerY);\n\n  ctx.restore();\n\n};\n\nexport default drawRoseImage;","\nimport Tween from \"./tween.js\";\nimport drawRadialFrameImage from \"./drawRadialFrameImage\";\nimport drawRadialBackgroundImage from \"./drawRadialBackgroundImage\";\nimport drawRadialCustomImage from \"./drawRadialCustomImage\";\nimport drawRadialForegroundImage from \"./drawRadialForegroundImage\";\nimport drawRoseImage from \"./drawRoseImage\";\nimport {\ncreateBuffer, \ngetShortestAngle, \nrequestAnimFrame, \ngetCanvasContext,\nHALF_PI,\nRAD_FACTOR,\n} from \"./tools\";\n\nimport {\n  backgroundColor as BackgroundColor,\n  lcdColor as LcdColor,\n  color as ColorDef,\n  ledColor as LedColor,\n  gaugeType as GaugeType,\n  orientation as Orientation,\n  knobType as KnobType,\n  knobStyle as KnobStyle,\n  frameDesign as FrameDesign,\n  pointerType as PointerType,\n  foregroundType as ForegroundType,\n  labelNumberFormat as LabelNumberFormat,\n  tickLabelOrientation as TickLabelOrientation,\n  trendState as TrendState,\n  } from \"./definitions\";\n\nvar compass = function(canvas, parameters) {\n  parameters = parameters || {};\n  var size = (undefined === parameters.size ? 0 : parameters.size),\n    frameDesign = (undefined === parameters.frameDesign ? FrameDesign.METAL : parameters.frameDesign),\n    frameVisible = (undefined === parameters.frameVisible ? true : parameters.frameVisible),\n    backgroundColor = (undefined === parameters.backgroundColor ? BackgroundColor.DARK_GRAY : parameters.backgroundColor),\n    backgroundVisible = (undefined === parameters.backgroundVisible ? true : parameters.backgroundVisible),\n    pointerType = (undefined === parameters.pointerType ? PointerType.TYPE2 : parameters.pointerType),\n    pointerColor = (undefined === parameters.pointerColor ? ColorDef.RED : parameters.pointerColor),\n    knobType = (undefined === parameters.knobType ? KnobType.STANDARD_KNOB : parameters.knobType),\n    knobStyle = (undefined === parameters.knobStyle ? KnobStyle.SILVER : parameters.knobStyle),\n    foregroundType = (undefined === parameters.foregroundType ? ForegroundType.TYPE1 : parameters.foregroundType),\n    foregroundVisible = (undefined === parameters.foregroundVisible ? true : parameters.foregroundVisible),\n    pointSymbols = (undefined === parameters.pointSymbols ? ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW'] : parameters.pointSymbols),\n    pointSymbolsVisible = (undefined === parameters.pointSymbolsVisible ? true : parameters.pointSymbolsVisible),\n    customLayer = (undefined === parameters.customLayer ? null : parameters.customLayer),\n    degreeScale = (undefined === parameters.degreeScale ? false : parameters.degreeScale),\n    roseVisible = (undefined === parameters.roseVisible ? true : parameters.roseVisible),\n    rotateFace = (undefined === parameters.rotateFace ? false : parameters.rotateFace);\n\n  var tween;\n  var repainting = false;\n  var value = 0;\n  var angleStep = RAD_FACTOR;\n  var angle = this.value;\n\n  // Get the canvas context and clear it\n  var mainCtx = getCanvasContext(canvas);\n  // Has a size been specified?\n  if (size === 0) {\n    size = Math.min(mainCtx.canvas.width, mainCtx.canvas.height);\n  }\n\n  // Set the size - also clears the canvas\n  mainCtx.canvas.width = size;\n  mainCtx.canvas.height = size;\n\n  var imageWidth = size;\n  var imageHeight = size;\n\n  var centerX = imageWidth / 2;\n  var centerY = imageHeight / 2;\n\n  var shadowOffset = imageWidth * 0.006;\n\n  var initialized = false;\n\n  // **************   Buffer creation  ********************\n  // Buffer for all static background painting code\n  var backgroundBuffer = createBuffer(size, size);\n  var backgroundContext = backgroundBuffer.getContext('2d');\n\n  // Buffer for symbol/rose painting code\n  var roseBuffer = createBuffer(size, size);\n  var roseContext = roseBuffer.getContext('2d');\n\n  // Buffer for pointer image painting code\n  var pointerBuffer = createBuffer(size, size);\n  var pointerContext = pointerBuffer.getContext('2d');\n\n  // Buffer for static foreground painting code\n  var foregroundBuffer = createBuffer(size, size);\n  var foregroundContext = foregroundBuffer.getContext('2d');\n\n  // **************   Image creation  ********************\n  var drawTickmarksImage = function(ctx) {\n    var val;\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    var stdFont, smlFont, i;\n\n    ctx.save();\n    ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();\n    ctx.fillStyle = backgroundColor.labelColor.getRgbaColor();\n    ctx.translate(centerX, centerY);\n\n    if (!degreeScale) {\n\n      stdFont = 0.12 * imageWidth + 'px serif';\n      smlFont = 0.06 * imageWidth + 'px serif';\n\n      for (i = 0; 360 > i; i += 2.5) {\n\n        if (0 === i % 5) {\n          ctx.lineWidth = 1;\n          ctx.beginPath();\n          ctx.moveTo(imageWidth * 0.38, 0);\n          ctx.lineTo(imageWidth * 0.36, 0);\n          ctx.closePath();\n          ctx.stroke();\n        }\n\n        // Draw the labels\n        ctx.save();\n        switch (i) {\n          case 0:\n            ctx.translate(imageWidth * 0.35, 0);\n            ctx.rotate(HALF_PI);\n            ctx.font = stdFont;\n            ctx.fillText(pointSymbols[2], 0, 0, imageWidth);\n            ctx.translate(-imageWidth * 0.35, 0);\n            break;\n          case 45:\n            ctx.translate(imageWidth * 0.29, 0);\n            ctx.rotate(HALF_PI);\n            ctx.font = smlFont;\n            ctx.fillText(pointSymbols[3], 0, 0, imageWidth);\n            ctx.translate(-imageWidth * 0.29, 0);\n            break;\n          case 90:\n            ctx.translate(imageWidth * 0.35, 0);\n            ctx.rotate(HALF_PI);\n            ctx.font = stdFont;\n            ctx.fillText(pointSymbols[4], 0, 0, imageWidth);\n            ctx.translate(-imageWidth * 0.35, 0);\n            break;\n          case 135:\n            ctx.translate(imageWidth * 0.29, 0);\n            ctx.rotate(HALF_PI);\n            ctx.font = smlFont;\n            ctx.fillText(pointSymbols[5], 0, 0, imageWidth);\n            ctx.translate(-imageWidth * 0.29, 0);\n            break;\n          case 180:\n            ctx.translate(imageWidth * 0.35, 0);\n            ctx.rotate(HALF_PI);\n            ctx.font = stdFont;\n            ctx.fillText(pointSymbols[6], 0, 0, imageWidth);\n            ctx.translate(-imageWidth * 0.35, 0);\n            break;\n          case 225:\n            ctx.translate(imageWidth * 0.29, 0);\n            ctx.rotate(HALF_PI);\n            ctx.font = smlFont;\n            ctx.fillText(pointSymbols[7], 0, 0, imageWidth);\n            ctx.translate(-imageWidth * 0.29, 0);\n            break;\n          case 270:\n            ctx.translate(imageWidth * 0.35, 0);\n            ctx.rotate(HALF_PI);\n            ctx.font = stdFont;\n            ctx.fillText(pointSymbols[0], 0, 0, imageWidth);\n            ctx.translate(-imageWidth * 0.35, 0);\n            break;\n          case 315:\n            ctx.translate(imageWidth * 0.29, 0);\n            ctx.rotate(HALF_PI);\n            ctx.font = smlFont;\n            ctx.fillText(pointSymbols[1], 0, 0, imageWidth);\n            ctx.translate(-imageWidth * 0.29, 0);\n            break;\n        }\n        ctx.restore();\n\n        if (roseVisible && (0 === i || 22.5 === i || 45 === i || 67.5 === i || 90 === i || 112.5 === i || 135 === i || 157.5 === i || 180 === i || 202.5 === i || 225 === i || 247.5 === i || 270 === i || 292.5 === i || 315 === i || 337.5 === i || 360 === i)) {\n          // ROSE_LINE\n          ctx.save();\n          ctx.beginPath();\n          // indent the 16 half quadrant lines a bit for visual effect\n          if (i % 45) {\n            ctx.moveTo(imageWidth * 0.29, 0);\n          } else {\n            ctx.moveTo(imageWidth * 0.38, 0);\n          }\n          ctx.lineTo(imageWidth * 0.1, 0);\n          ctx.closePath();\n          ctx.restore();\n          ctx.lineWidth = 1;\n          ctx.strokeStyle = backgroundColor.symbolColor.getRgbaColor();\n          ctx.stroke();\n        }\n        ctx.rotate(angleStep * 2.5);\n      }\n    } else {\n      stdFont = 0.08 * imageWidth + 'px serif';\n      smlFont = imageWidth * 0.033 + 'px serif';\n\n      ctx.rotate(angleStep * 10);\n\n      for (i = 10; 360 >= i; i += 10) {\n        // Draw the labels\n        ctx.save();\n        if (pointSymbolsVisible) {\n          switch (i) {\n            case 360:\n              ctx.translate(imageWidth * 0.35, 0);\n              ctx.rotate(HALF_PI);\n              ctx.font = stdFont;\n              ctx.fillText(pointSymbols[2], 0, 0, imageWidth);\n              ctx.translate(-imageWidth * 0.35, 0);\n              break;\n            case 90:\n              ctx.translate(imageWidth * 0.35, 0);\n              ctx.rotate(HALF_PI);\n              ctx.font = stdFont;\n              ctx.fillText(pointSymbols[4], 0, 0, imageWidth);\n              ctx.translate(-imageWidth * 0.35, 0);\n              break;\n            case 180:\n              ctx.translate(imageWidth * 0.35, 0);\n              ctx.rotate(HALF_PI);\n              ctx.font = stdFont;\n              ctx.fillText(pointSymbols[6], 0, 0, imageWidth);\n              ctx.translate(-imageWidth * 0.35, 0);\n              break;\n            case 270:\n              ctx.translate(imageWidth * 0.35, 0);\n              ctx.rotate(HALF_PI);\n              ctx.font = stdFont;\n              ctx.fillText(pointSymbols[0], 0, 0, imageWidth);\n              ctx.translate(-imageWidth * 0.35, 0);\n              break;\n            default:\n              val = (i + 90) % 360;\n              ctx.translate(imageWidth * 0.37, 0);\n              ctx.rotate(HALF_PI);\n              ctx.font = smlFont;\n              ctx.fillText(('0'.substring(val >= 100) + val), 0, 0, imageWidth);\n              ctx.translate(-imageWidth * 0.37, 0);\n          }\n        } else {\n          val = (i + 90) % 360;\n          ctx.translate(imageWidth * 0.37, 0);\n          ctx.rotate(HALF_PI);\n          ctx.font = smlFont;\n          ctx.fillText(('0'.substring(val >= 100) + val), 0, 0, imageWidth);\n          ctx.translate(-imageWidth * 0.37, 0);\n        }\n        ctx.restore();\n        ctx.rotate(angleStep * 10);\n      }\n\n    }\n    ctx.translate(-centerX, -centerY);\n    ctx.restore();\n  };\n\n  var drawPointerImage = function(ctx) {\n    ctx.save();\n\n    switch (pointerType.type) {\n      case 'type2':\n        // NORTHPOINTER\n        ctx.beginPath();\n        ctx.moveTo(imageWidth * 0.532710, imageHeight * 0.453271);\n        ctx.bezierCurveTo(imageWidth * 0.532710, imageHeight * 0.453271, imageWidth * 0.5, imageHeight * 0.149532, imageWidth * 0.5, imageHeight * 0.149532);\n        ctx.bezierCurveTo(imageWidth * 0.5, imageHeight * 0.149532, imageWidth * 0.467289, imageHeight * 0.453271, imageWidth * 0.467289, imageHeight * 0.453271);\n        ctx.bezierCurveTo(imageWidth * 0.453271, imageHeight * 0.462616, imageWidth * 0.443925, imageHeight * 0.481308, imageWidth * 0.443925, imageHeight * 0.5);\n        ctx.bezierCurveTo(imageWidth * 0.443925, imageHeight * 0.5, imageWidth * 0.556074, imageHeight * 0.5, imageWidth * 0.556074, imageHeight * 0.5);\n        ctx.bezierCurveTo(imageWidth * 0.556074, imageHeight * 0.481308, imageWidth * 0.546728, imageHeight * 0.462616, imageWidth * 0.532710, imageHeight * 0.453271);\n        ctx.closePath();\n        var NORTHPOINTER2_GRADIENT = ctx.createLinearGradient(0.471962 * imageWidth, 0, 0.528036 * imageWidth, 0);\n        NORTHPOINTER2_GRADIENT.addColorStop(0, pointerColor.light.getRgbaColor());\n        NORTHPOINTER2_GRADIENT.addColorStop(0.46, pointerColor.light.getRgbaColor());\n        NORTHPOINTER2_GRADIENT.addColorStop(0.47, pointerColor.medium.getRgbaColor());\n        NORTHPOINTER2_GRADIENT.addColorStop(1, pointerColor.medium.getRgbaColor());\n        ctx.fillStyle = NORTHPOINTER2_GRADIENT;\n        ctx.strokeStyle = pointerColor.dark.getRgbaColor();\n        ctx.lineWidth = 1;\n        ctx.lineCap = 'square';\n        ctx.lineJoin = 'miter';\n        ctx.fill();\n        ctx.stroke();\n\n        // SOUTHPOINTER\n        ctx.beginPath();\n        ctx.moveTo(imageWidth * 0.467289, imageHeight * 0.546728);\n        ctx.bezierCurveTo(imageWidth * 0.467289, imageHeight * 0.546728, imageWidth * 0.5, imageHeight * 0.850467, imageWidth * 0.5, imageHeight * 0.850467);\n        ctx.bezierCurveTo(imageWidth * 0.5, imageHeight * 0.850467, imageWidth * 0.532710, imageHeight * 0.546728, imageWidth * 0.532710, imageHeight * 0.546728);\n        ctx.bezierCurveTo(imageWidth * 0.546728, imageHeight * 0.537383, imageWidth * 0.556074, imageHeight * 0.518691, imageWidth * 0.556074, imageHeight * 0.5);\n        ctx.bezierCurveTo(imageWidth * 0.556074, imageHeight * 0.5, imageWidth * 0.443925, imageHeight * 0.5, imageWidth * 0.443925, imageHeight * 0.5);\n        ctx.bezierCurveTo(imageWidth * 0.443925, imageHeight * 0.518691, imageWidth * 0.453271, imageHeight * 0.537383, imageWidth * 0.467289, imageHeight * 0.546728);\n        ctx.closePath();\n        var SOUTHPOINTER2_GRADIENT = ctx.createLinearGradient(0.471962 * imageWidth, 0, 0.528036 * imageWidth, 0);\n        SOUTHPOINTER2_GRADIENT.addColorStop(0, '#e3e5e8');\n        SOUTHPOINTER2_GRADIENT.addColorStop(0.48, '#e3e5e8');\n        SOUTHPOINTER2_GRADIENT.addColorStop(0.48, '#abb1b8');\n        SOUTHPOINTER2_GRADIENT.addColorStop(1, '#abb1b8');\n        ctx.fillStyle = SOUTHPOINTER2_GRADIENT;\n        var strokeColor_SOUTHPOINTER2 = '#abb1b8';\n        ctx.strokeStyle = strokeColor_SOUTHPOINTER2;\n        ctx.lineWidth = 1;\n        ctx.lineCap = 'square';\n        ctx.lineJoin = 'miter';\n        ctx.fill();\n        ctx.stroke();\n        break;\n\n      case 'type3':\n        // NORTHPOINTER\n        ctx.beginPath();\n        ctx.moveTo(imageWidth * 0.5, imageHeight * 0.149532);\n        ctx.bezierCurveTo(imageWidth * 0.5, imageHeight * 0.149532, imageWidth * 0.443925, imageHeight * 0.490654, imageWidth * 0.443925, imageHeight * 0.5);\n        ctx.bezierCurveTo(imageWidth * 0.443925, imageHeight * 0.532710, imageWidth * 0.467289, imageHeight * 0.556074, imageWidth * 0.5, imageHeight * 0.556074);\n        ctx.bezierCurveTo(imageWidth * 0.532710, imageHeight * 0.556074, imageWidth * 0.556074, imageHeight * 0.532710, imageWidth * 0.556074, imageHeight * 0.5);\n        ctx.bezierCurveTo(imageWidth * 0.556074, imageHeight * 0.490654, imageWidth * 0.5, imageHeight * 0.149532, imageWidth * 0.5, imageHeight * 0.149532);\n        ctx.closePath();\n        var NORTHPOINTER3_GRADIENT = ctx.createLinearGradient(0.471962 * imageWidth, 0, 0.528036 * imageWidth, 0);\n        NORTHPOINTER3_GRADIENT.addColorStop(0, pointerColor.light.getRgbaColor());\n        NORTHPOINTER3_GRADIENT.addColorStop(0.46, pointerColor.light.getRgbaColor());\n        NORTHPOINTER3_GRADIENT.addColorStop(0.47, pointerColor.medium.getRgbaColor());\n        NORTHPOINTER3_GRADIENT.addColorStop(1, pointerColor.medium.getRgbaColor());\n        ctx.fillStyle = NORTHPOINTER3_GRADIENT;\n        ctx.strokeStyle = pointerColor.dark.getRgbaColor();\n        ctx.lineWidth = 1;\n        ctx.lineCap = 'square';\n        ctx.lineJoin = 'miter';\n        ctx.fill();\n        ctx.stroke();\n        break;\n\n      case 'type1:':\n        /* falls through */\n      default:\n        // NORTHPOINTER\n        ctx.beginPath();\n        ctx.moveTo(imageWidth * 0.5, imageHeight * 0.495327);\n        ctx.lineTo(imageWidth * 0.528037, imageHeight * 0.495327);\n        ctx.lineTo(imageWidth * 0.5, imageHeight * 0.149532);\n        ctx.lineTo(imageWidth * 0.471962, imageHeight * 0.495327);\n        ctx.lineTo(imageWidth * 0.5, imageHeight * 0.495327);\n        ctx.closePath();\n        var NORTHPOINTER1_GRADIENT = ctx.createLinearGradient(0.471962 * imageWidth, 0, 0.528036 * imageWidth, 0);\n        NORTHPOINTER1_GRADIENT.addColorStop(0, pointerColor.light.getRgbaColor());\n        NORTHPOINTER1_GRADIENT.addColorStop(0.46, pointerColor.light.getRgbaColor());\n        NORTHPOINTER1_GRADIENT.addColorStop(0.47, pointerColor.medium.getRgbaColor());\n        NORTHPOINTER1_GRADIENT.addColorStop(1, pointerColor.medium.getRgbaColor());\n        ctx.fillStyle = NORTHPOINTER1_GRADIENT;\n        ctx.strokeStyle = pointerColor.dark.getRgbaColor();\n        ctx.lineWidth = 1;\n        ctx.lineCap = 'square';\n        ctx.lineJoin = 'miter';\n        ctx.fill();\n        ctx.stroke();\n\n        // SOUTHPOINTER\n        ctx.beginPath();\n        ctx.moveTo(imageWidth * 0.5, imageHeight * 0.504672);\n        ctx.lineTo(imageWidth * 0.471962, imageHeight * 0.504672);\n        ctx.lineTo(imageWidth * 0.5, imageHeight * 0.850467);\n        ctx.lineTo(imageWidth * 0.528037, imageHeight * 0.504672);\n        ctx.lineTo(imageWidth * 0.5, imageHeight * 0.504672);\n        ctx.closePath();\n        var SOUTHPOINTER1_GRADIENT = ctx.createLinearGradient(0.471962 * imageWidth, 0, 0.528036 * imageWidth, 0);\n        SOUTHPOINTER1_GRADIENT.addColorStop(0, '#e3e5e8');\n        SOUTHPOINTER1_GRADIENT.addColorStop(0.48, '#e3e5e8');\n        SOUTHPOINTER1_GRADIENT.addColorStop(0.480099, '#abb1b8');\n        SOUTHPOINTER1_GRADIENT.addColorStop(1, '#abb1b8');\n        ctx.fillStyle = SOUTHPOINTER1_GRADIENT;\n        var strokeColor_SOUTHPOINTER = '#abb1b8';\n        ctx.strokeStyle = strokeColor_SOUTHPOINTER;\n        ctx.lineWidth = 1;\n        ctx.lineCap = 'square';\n        ctx.lineJoin = 'miter';\n        ctx.fill();\n        ctx.stroke();\n        break;\n    }\n    ctx.restore();\n  };\n\n  // **************   Initialization  ********************\n  // Draw all static painting code to background\n  var init = function() {\n    initialized = true;\n\n    if (frameVisible) {\n      drawRadialFrameImage(backgroundContext, frameDesign, centerX, centerY, imageWidth, imageHeight);\n    }\n\n    if (backgroundVisible) {\n      drawRadialBackgroundImage(backgroundContext, backgroundColor, centerX, centerY, imageWidth, imageHeight);\n      drawRadialCustomImage(backgroundContext, customLayer, centerX, centerY, imageWidth, imageHeight);\n\n      if (roseVisible) {\n        drawRoseImage(roseContext, centerX, centerY, imageWidth, imageHeight, backgroundColor);\n      }\n\n      drawTickmarksImage(roseContext);\n    }\n\n    drawPointerImage(pointerContext, false);\n\n    if (foregroundVisible) {\n      drawRadialForegroundImage(foregroundContext, foregroundType, imageWidth, imageHeight, true, knobType, knobStyle);\n    }\n  };\n\n  var resetBuffers = function() {\n    // Buffer for all static background painting code\n    backgroundBuffer.width = size;\n    backgroundBuffer.height = size;\n    backgroundContext = backgroundBuffer.getContext('2d');\n\n    // Buffer for symbols/rose painting code\n    roseBuffer.width = size;\n    roseBuffer.height = size;\n    roseContext = roseBuffer.getContext('2d');\n\n    // Buffer for pointer image painting code\n    pointerBuffer.width = size;\n    pointerBuffer.height = size;\n    pointerContext = pointerBuffer.getContext('2d');\n\n    // Buffer for static foreground painting code\n    foregroundBuffer.width = size;\n    foregroundBuffer.height = size;\n    foregroundContext = foregroundBuffer.getContext('2d');\n  };\n\n  //************************************ Public methods **************************************\n  this.setValue = function(newValue) {\n    newValue = parseFloat(newValue) % 360;\n    if (value !== newValue) {\n      value = newValue;\n      this.repaint();\n    }\n    return this;\n  };\n\n  this.getValue = function() {\n    return value;\n  };\n\n  this.setValueAnimated = function(newValue, callback) {\n    var targetValue = newValue % 360;\n    var gauge = this;\n    var diff;\n    if (value !== targetValue) {\n      if (undefined !== tween && tween.isPlaying) {\n        tween.stop();\n      }\n\n      diff = getShortestAngle(value, targetValue);\n      if (rotateFace) {\n        tween = new Tween({}, '', Tween.regularEaseInOut, value, value + diff, 2);\n      } else {\n        tween = new Tween({}, '', Tween.elasticEaseOut, value, value + diff, 2);\n      }\n      tween.onMotionChanged = function(event) {\n        value = event.target._pos % 360;\n        if (!repainting) {\n          repainting = true;\n          requestAnimFrame(gauge.repaint);\n        }\n      };\n\n      // do we have a callback function to process?\n      if (callback && typeof(callback) === \"function\") {\n        tween.onMotionFinished = callback;\n      }\n\n      tween.start();\n    }\n    return this;\n  };\n\n  this.setFrameDesign = function(newFrameDesign) {\n    resetBuffers();\n    frameDesign = newFrameDesign;\n    init();\n    this.repaint();\n    return this;\n  };\n\n  this.setBackgroundColor = function(newBackgroundColor) {\n    resetBuffers();\n    backgroundColor = newBackgroundColor;\n    init();\n    this.repaint();\n    return this;\n  };\n\n  this.setForegroundType = function(newForegroundType) {\n    resetBuffers();\n    foregroundType = newForegroundType;\n    init();\n    this.repaint();\n    return this;\n  };\n\n  this.setPointerColor = function(newPointerColor) {\n    resetBuffers();\n    pointerColor = newPointerColor;\n    init();\n    this.repaint();\n    return this;\n  };\n\n  this.setPointerType = function(newPointerType) {\n    resetBuffers();\n    pointerType = newPointerType;\n    init();\n    this.repaint();\n    return this;\n  };\n\n  this.setPointSymbols = function(newPointSymbols) {\n    resetBuffers();\n    pointSymbols = newPointSymbols;\n    init();\n    this.repaint();\n    return this;\n  };\n\n  this.repaint = function() {\n    if (!initialized) {\n      init();\n    }\n\n    mainCtx.save();\n    mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height);\n    // Define rotation center\n    angle = HALF_PI + value * angleStep - HALF_PI;\n\n    if (backgroundVisible || frameVisible) {\n      mainCtx.drawImage(backgroundBuffer, 0, 0);\n    }\n\n    if (rotateFace) {\n      mainCtx.save();\n      mainCtx.translate(centerX, centerY);\n      mainCtx.rotate(-angle);\n      mainCtx.translate(-centerX, -centerY);\n      if (backgroundVisible) {\n        mainCtx.drawImage(roseBuffer, 0, 0);\n      }\n      mainCtx.restore();\n    } else {\n      if (backgroundVisible) {\n        mainCtx.drawImage(roseBuffer, 0, 0);\n      }\n      mainCtx.translate(centerX, centerY);\n      mainCtx.rotate(angle);\n      mainCtx.translate(-centerX, -centerY);\n    }\n    // Set the pointer shadow params\n    mainCtx.shadowColor = 'rgba(0, 0, 0, 0.8)';\n    mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset;\n    mainCtx.shadowBlur = shadowOffset * 2;\n    // Draw the pointer\n    mainCtx.drawImage(pointerBuffer, 0, 0);\n    // Undo the translations & shadow settings\n    mainCtx.restore();\n\n    if (foregroundVisible) {\n      mainCtx.drawImage(foregroundBuffer, 0, 0);\n    }\n\n    repainting = false;\n  };\n\n  // Visualize the component\n  this.repaint();\n\n  return this;\n};\n\nexport default compass;\n","import Tween from \"./tween.js\";\nimport drawPointerImage from \"./drawPointerImage\";\nimport drawRadialFrameImage from \"./drawRadialFrameImage\";\nimport drawRadialBackgroundImage from \"./drawRadialBackgroundImage\";\nimport drawRadialCustomImage from \"./drawRadialCustomImage\";\nimport drawRadialForegroundImage from \"./drawRadialForegroundImage\";\nimport createLcdBackgroundImage from \"./createLcdBackgroundImage\";\nimport drawRoseImage from \"./drawRoseImage\";\nimport {\ncreateBuffer, \ngetShortestAngle, \nrequestAnimFrame, \ngetCanvasContext,\nHALF_PI,\nTWO_PI,\nRAD_FACTOR,\nlcdFontName,\nstdFontName,\n} from \"./tools\";\n\nimport {\n  backgroundColor as BackgroundColor,\n  lcdColor as LcdColor,\n  color as ColorDef,\n  ledColor as LedColor,\n  gaugeType as GaugeType,\n  orientation as Orientation,\n  knobType as KnobType,\n  knobStyle as KnobStyle,\n  frameDesign as FrameDesign,\n  pointerType as PointerType,\n  foregroundType as ForegroundType,\n  labelNumberFormat as LabelNumberFormat,\n  tickLabelOrientation as TickLabelOrientation,\n  trendState as TrendState,\n  } from \"./definitions\";\n\nvar windDirection = function(canvas, parameters) {\n  parameters = parameters || {};\n  var size = (undefined === parameters.size ? 0 : parameters.size),\n    frameDesign = (undefined === parameters.frameDesign ? FrameDesign.METAL : parameters.frameDesign),\n    frameVisible = (undefined === parameters.frameVisible ? true : parameters.frameVisible),\n    backgroundColor = (undefined === parameters.backgroundColor ? BackgroundColor.DARK_GRAY : parameters.backgroundColor),\n    backgroundVisible = (undefined === parameters.backgroundVisible ? true : parameters.backgroundVisible),\n    pointerTypeLatest = (undefined === parameters.pointerTypeLatest ? PointerType.TYPE1 : parameters.pointerTypeLatest),\n    pointerTypeAverage = (undefined === parameters.pointerTypeAverage ? PointerType.TYPE8 : parameters.pointerTypeAverage),\n    pointerColor = (undefined === parameters.pointerColor ? ColorDef.RED : parameters.pointerColor),\n    pointerColorAverage = (undefined === parameters.pointerColorAverage ? ColorDef.BLUE : parameters.pointerColorAverage),\n    knobType = (undefined === parameters.knobType ? KnobType.STANDARD_KNOB : parameters.knobType),\n    knobStyle = (undefined === parameters.knobStyle ? KnobStyle.SILVER : parameters.knobStyle),\n    foregroundType = (undefined === parameters.foregroundType ? ForegroundType.TYPE1 : parameters.foregroundType),\n    foregroundVisible = (undefined === parameters.foregroundVisible ? true : parameters.foregroundVisible),\n    pointSymbols = (undefined === parameters.pointSymbols ? ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW'] : parameters.pointSymbols),\n    pointSymbolsVisible = (undefined === parameters.pointSymbolsVisible ? true : parameters.pointSymbolsVisible),\n    customLayer = (undefined === parameters.customLayer ? null : parameters.customLayer),\n    degreeScale = (undefined === parameters.degreeScale ? true : parameters.degreeScale),\n    degreeScaleHalf = (undefined === parameters.degreeScaleHalf ? false : parameters.degreeScaleHalf),\n    roseVisible = (undefined === parameters.roseVisible ? false : parameters.roseVisible),\n    lcdColor = (undefined === parameters.lcdColor ? LcdColor.STANDARD : parameters.lcdColor),\n    lcdVisible = (undefined === parameters.lcdVisible ? true : parameters.lcdVisible),\n    digitalFont = (undefined === parameters.digitalFont ? false : parameters.digitalFont),\n    section = (undefined === parameters.section ? null : parameters.section),\n    area = (undefined === parameters.area ? null : parameters.area),\n    lcdTitleStrings = (undefined === parameters.lcdTitleStrings ? ['Latest', 'Average'] : parameters.lcdTitleStrings),\n    titleString = (undefined === parameters.titleString ? '' : parameters.titleString),\n    useColorLabels = (undefined === parameters.useColorLabels ? false : parameters.useColorLabels),\n    fullScaleDeflectionTime = (undefined === parameters.fullScaleDeflectionTime ? 2.5 : parameters.fullScaleDeflectionTime);\n\n  var tweenLatest;\n  var tweenAverage;\n  var valueLatest = 0;\n  var valueAverage = 0;\n  var angleStep = RAD_FACTOR;\n  var angleLatest = this.valueLatest;\n  var angleAverage = this.valueAverage;\n  var rotationOffset = -HALF_PI;\n  var angleRange = TWO_PI;\n  var range = 360;\n  var repainting = false;\n\n  // Get the canvas context and clear it\n  var mainCtx = getCanvasContext(canvas);\n  // Has a size been specified?\n  if (size === 0) {\n    size = Math.min(mainCtx.canvas.width, mainCtx.canvas.height);\n  }\n\n  // Set the size - also clears the canvas\n  mainCtx.canvas.width = size;\n  mainCtx.canvas.height = size;\n\n  var imageWidth = size;\n  var imageHeight = size;\n\n  var centerX = imageWidth / 2;\n  var centerY = imageHeight / 2;\n\n  var lcdFontHeight = Math.floor(imageWidth / 10);\n  var stdFont = lcdFontHeight + 'px ' + stdFontName;\n  var lcdFont = lcdFontHeight + 'px ' + lcdFontName;\n  var lcdWidth = imageWidth * 0.3;\n  var lcdHeight = imageHeight * 0.12;\n  var lcdPosX = (imageWidth - lcdWidth) / 2;\n  var lcdPosY1 = imageHeight * 0.32;\n  var lcdPosY2 = imageHeight * 0.565;\n\n  var initialized = false;\n\n  // **************   Buffer creation  ********************\n  // Buffer for all static background painting code\n  var backgroundBuffer = createBuffer(size, size);\n  var backgroundContext = backgroundBuffer.getContext('2d');\n\n  // Buffer for LCD displays\n  var lcdBuffer;\n\n  // Buffer for latest pointer images painting code\n  var pointerBufferLatest = createBuffer(size, size);\n  var pointerContextLatest = pointerBufferLatest.getContext('2d');\n\n  // Buffer for average pointer image\n  var pointerBufferAverage = createBuffer(size, size);\n  var pointerContextAverage = pointerBufferAverage.getContext('2d');\n\n  // Buffer for static foreground painting code\n  var foregroundBuffer = createBuffer(size, size);\n  var foregroundContext = foregroundBuffer.getContext('2d');\n\n  // **************   Image creation  ********************\n  var drawLcdText = function(value, bLatest) {\n    mainCtx.save();\n    mainCtx.textAlign = 'center';\n    mainCtx.strokeStyle = lcdColor.textColor;\n    mainCtx.fillStyle = lcdColor.textColor;\n\n    //convert value from -180,180 range into 0-360 range\n    while (value < -180) {\n      value += 360;\n    }\n    if (!degreeScaleHalf && value < 0) {\n      value += 360;\n    }\n\n    if (degreeScaleHalf && value > 180) {\n      value = -(360 - value);\n    }\n\n    if (value >= 0) {\n      value = '00' + Math.round(value);\n      value = value.substring(value.length, value.length - 3);\n    } else {\n      value = '00' + Math.abs(Math.round(value));\n      value = '-' + value.substring(value.length, value.length - 3);\n    }\n\n    if (lcdColor === LcdColor.STANDARD || lcdColor === LcdColor.STANDARD_GREEN) {\n      mainCtx.shadowColor = 'gray';\n      mainCtx.shadowOffsetX = imageWidth * 0.007;\n      mainCtx.shadowOffsetY = imageWidth * 0.007;\n      mainCtx.shadowBlur = imageWidth * 0.007;\n    }\n    mainCtx.font = (digitalFont ? lcdFont : stdFont);\n    mainCtx.fillText(value + '\\u00B0', imageWidth / 2 + lcdWidth * 0.05, (bLatest ? lcdPosY1 : lcdPosY2) + lcdHeight * 0.5 + lcdFontHeight * 0.38, lcdWidth * 0.9);\n\n    mainCtx.restore();\n  };\n\n  var drawAreaSectionImage = function(ctx, start, stop, color, filled) {\n\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.fillStyle = color;\n    ctx.lineWidth = imageWidth * 0.035;\n    var startAngle = (angleRange / range * start);\n    var stopAngle = startAngle + (stop - start) / (range / angleRange);\n    ctx.translate(centerX, centerY);\n    ctx.rotate(rotationOffset);\n    ctx.beginPath();\n    if (filled) {\n      ctx.moveTo(0, 0);\n      ctx.arc(0, 0, imageWidth * 0.365 - ctx.lineWidth / 2, startAngle, stopAngle, false);\n    } else {\n      ctx.arc(0, 0, imageWidth * 0.365, startAngle, stopAngle, false);\n    }\n    if (filled) {\n      ctx.moveTo(0, 0);\n      ctx.fill();\n    } else {\n      ctx.stroke();\n    }\n\n    ctx.translate(-centerX, -centerY);\n    ctx.restore();\n  };\n\n  var drawTickmarksImage = function(ctx) {\n    var OUTER_POINT = imageWidth * 0.38,\n      MAJOR_INNER_POINT = imageWidth * 0.35,\n      //MED_INNER_POINT = imageWidth * 0.355,\n      MINOR_INNER_POINT = imageWidth * 0.36,\n      TEXT_WIDTH = imageWidth * 0.1,\n      TEXT_TRANSLATE_X = imageWidth * 0.31,\n      CARDINAL_TRANSLATE_X = imageWidth * 0.36,\n      stdFont, smlFont,\n      i, val, to;\n\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    ctx.save();\n    ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();\n    ctx.fillStyle = backgroundColor.labelColor.getRgbaColor();\n    ctx.translate(centerX, centerY);\n\n    if (!degreeScale) {\n\n      stdFont = 0.12 * imageWidth + 'px serif';\n      smlFont = 0.06 * imageWidth + 'px serif';\n\n      //var angleStep = RAD_FACTOR;\n      ctx.lineWidth = 1;\n      ctx.strokeStyle = backgroundColor.symbolColor.getRgbaColor();\n\n      for (i = 0; 360 > i; i += 2.5) {\n\n        if (0 === i % 5) {\n          ctx.beginPath();\n          ctx.moveTo(imageWidth * 0.38, 0);\n          ctx.lineTo(imageWidth * 0.36, 0);\n          ctx.closePath();\n          ctx.stroke();\n        }\n\n        // Draw the labels\n        ctx.save();\n        switch (i) {\n          case 0: //E\n            ctx.translate(imageWidth * 0.35, 0);\n            ctx.rotate(HALF_PI);\n            ctx.font = stdFont;\n            ctx.fillText(pointSymbols[2], 0, 0);\n            ctx.translate(-imageWidth * 0.35, 0);\n            break;\n          case 45: //SE\n            ctx.translate(imageWidth * 0.29, 0);\n            ctx.rotate(HALF_PI);\n            ctx.font = smlFont;\n            ctx.fillText(pointSymbols[3], 0, 0);\n            ctx.translate(-imageWidth * 0.29, 0);\n            break;\n          case 90: //S\n            ctx.translate(imageWidth * 0.35, 0);\n            ctx.rotate(HALF_PI);\n            ctx.font = stdFont;\n            ctx.fillText(pointSymbols[4], 0, 0);\n            ctx.translate(-imageWidth * 0.35, 0);\n            break;\n          case 135: //SW\n            ctx.translate(imageWidth * 0.29, 0);\n            ctx.rotate(HALF_PI);\n            ctx.font = smlFont;\n            ctx.fillText(pointSymbols[5], 0, 0);\n            ctx.translate(-imageWidth * 0.29, 0);\n            break;\n          case 180: //W\n            ctx.translate(imageWidth * 0.35, 0);\n            ctx.rotate(HALF_PI);\n            ctx.font = stdFont;\n            ctx.fillText(pointSymbols[6], 0, 0);\n            ctx.translate(-imageWidth * 0.35, 0);\n            break;\n          case 225: //NW\n            ctx.translate(imageWidth * 0.29, 0);\n            ctx.rotate(HALF_PI);\n            ctx.font = smlFont;\n            ctx.fillText(pointSymbols[7], 0, 0);\n            ctx.translate(-imageWidth * 0.29, 0);\n            break;\n          case 270: //N\n            ctx.translate(imageWidth * 0.35, 0);\n            ctx.rotate(HALF_PI);\n            ctx.font = stdFont;\n            ctx.fillText(pointSymbols[0], 0, 0);\n            ctx.translate(-imageWidth * 0.35, 0);\n            break;\n          case 315: //NE\n            ctx.translate(imageWidth * 0.29, 0);\n            ctx.rotate(HALF_PI);\n            ctx.font = smlFont;\n            ctx.fillText(pointSymbols[1], 0, 0);\n            ctx.translate(-imageWidth * 0.29, 0);\n            break;\n        }\n        ctx.restore();\n\n        if (roseVisible && (0 === i || 22.5 === i || 45 === i || 67.5 === i || 90 === i || 112.5 === i || 135 === i || 157.5 === i || 180 === i || 202.5 === i || 225 === i || 247.5 === i || 270 === i || 292.5 === i || 315 === i || 337.5 === i || 360 === i)) {\n          // ROSE_LINE\n          ctx.save();\n          ctx.beginPath();\n          // indent the 16 half quadrant lines a bit for visual effect\n          if (i % 45) {\n            ctx.moveTo(imageWidth * 0.29, 0);\n          } else {\n            ctx.moveTo(imageWidth * 0.38, 0);\n          }\n          ctx.lineTo(imageWidth * 0.1, 0);\n          ctx.closePath();\n          ctx.restore();\n          ctx.stroke();\n        }\n        ctx.rotate(angleStep * 2.5);\n      }\n    } else {\n      stdFont = Math.floor(0.1 * imageWidth) + 'px serif bold';\n      smlFont = Math.floor(imageWidth * 0.04) + 'px ' + stdFontName;\n\n      ctx.rotate(angleStep * 5);\n      for (i = 5; 360 >= i; i += 5) {\n        // Draw the labels\n        ctx.save();\n        if (pointSymbolsVisible) {\n\n          switch (i) {\n            case 360:\n              ctx.translate(CARDINAL_TRANSLATE_X, 0);\n              ctx.rotate(HALF_PI);\n              ctx.font = stdFont;\n              ctx.fillText(pointSymbols[2], 0, 0, TEXT_WIDTH);\n              ctx.translate(-CARDINAL_TRANSLATE_X, 0);\n              break;\n            case 90:\n              ctx.translate(CARDINAL_TRANSLATE_X, 0);\n              ctx.rotate(HALF_PI);\n              ctx.font = stdFont;\n              ctx.fillText(pointSymbols[4], 0, 0, TEXT_WIDTH);\n              ctx.translate(-CARDINAL_TRANSLATE_X, 0);\n              break;\n            case 180:\n              ctx.translate(CARDINAL_TRANSLATE_X, 0);\n              ctx.rotate(HALF_PI);\n              ctx.font = stdFont;\n              ctx.fillText(pointSymbols[6], 0, 0, TEXT_WIDTH);\n              ctx.translate(-CARDINAL_TRANSLATE_X, 0);\n              break;\n            case 270:\n              ctx.translate(CARDINAL_TRANSLATE_X, 0);\n              ctx.rotate(HALF_PI);\n              ctx.font = stdFont;\n              ctx.fillText(pointSymbols[0], 0, 0, TEXT_WIDTH);\n              ctx.translate(-CARDINAL_TRANSLATE_X, 0);\n              break;\n\n            case 5:\n            case 85:\n            case 95:\n            case 175:\n            case 185:\n            case 265:\n            case 275:\n            case 355:\n              //leave room for ordinal labels\n              break;\n\n            default:\n              if ((i + 90) % 20) {\n                ctx.lineWidth = ((i + 90) % 5) ? 1.5 : 1;\n                ctx.beginPath();\n                ctx.moveTo(OUTER_POINT, 0);\n                to = (i + 90) % 10 ? MINOR_INNER_POINT : MAJOR_INNER_POINT;\n                ctx.lineTo(to, 0);\n                ctx.closePath();\n                ctx.stroke();\n              } else {\n                ctx.lineWidth = 1.5;\n                ctx.beginPath();\n                ctx.moveTo(OUTER_POINT, 0);\n                ctx.lineTo(MAJOR_INNER_POINT, 0);\n                ctx.closePath();\n                ctx.stroke();\n                val = (i + 90) % 360;\n                ctx.translate(TEXT_TRANSLATE_X, 0);\n                ctx.rotate(HALF_PI);\n                ctx.font = smlFont;\n                ctx.fillText(('0'.substring(val >= 100) + val), 0, 0, TEXT_WIDTH);\n                ctx.translate(-TEXT_TRANSLATE_X, 0);\n              }\n          }\n        } else {\n\n          if ((i + 90) % 20) {\n            ctx.lineWidth = ((i + 90) % 5) ? 1.5 : 1;\n            ctx.beginPath();\n            ctx.moveTo(OUTER_POINT, 0);\n            to = (i + 90) % 10 ? MINOR_INNER_POINT : MAJOR_INNER_POINT;\n            ctx.lineTo(to, 0);\n            ctx.closePath();\n            ctx.stroke();\n          } else {\n            ctx.lineWidth = 1.5;\n            ctx.beginPath();\n            ctx.moveTo(OUTER_POINT, 0);\n            ctx.lineTo(MAJOR_INNER_POINT, 0);\n            ctx.closePath();\n            ctx.stroke();\n            val = (i + 90) % 360;\n            if (degreeScaleHalf) {\n              //invert 180-360\n              if (val > 180) {\n                val = -(360 - val);\n              }\n            }\n            ctx.translate(TEXT_TRANSLATE_X, 0);\n            ctx.rotate(HALF_PI);\n            ctx.font = smlFont;\n            ctx.fillText(val, 0, 0, TEXT_WIDTH);\n            ctx.translate(-TEXT_TRANSLATE_X, 0);\n          }\n        }\n        ctx.restore();\n        ctx.rotate(angleStep * 5);\n      }\n\n    }\n    ctx.translate(-centerX, -centerY);\n    ctx.restore();\n  };\n\n  var drawLcdTitles = function(ctx) {\n    if (lcdTitleStrings.length > 0) {\n      ctx.save();\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillStyle = (useColorLabels ? pointerColor.medium.getRgbaColor() : backgroundColor.labelColor.getRgbaColor());\n      ctx.font = 0.040 * imageWidth + 'px ' + stdFontName;\n      ctx.fillText(lcdTitleStrings[0], imageWidth / 2, imageHeight * 0.29, imageWidth * 0.3);\n      ctx.fillStyle = (useColorLabels ? pointerColorAverage.medium.getRgbaColor() : backgroundColor.labelColor.getRgbaColor());\n      ctx.fillText(lcdTitleStrings[1], imageWidth / 2, imageHeight * 0.71, imageWidth * 0.3);\n      if (titleString.length > 0) {\n        ctx.fillStyle = backgroundColor.labelColor.getRgbaColor();\n        ctx.font = 0.0467 * imageWidth + 'px ' + stdFontName;\n        ctx.fillText(titleString, imageWidth / 2, imageHeight * 0.5, imageWidth * 0.3);\n      }\n    }\n  };\n\n  // **************   Initialization  ********************\n  // Draw all static painting code to background\n\n  var init = function(parameters) {\n    parameters = parameters || {};\n    var drawBackground = (undefined === parameters.background ? false : parameters.background);\n    var drawPointer = (undefined === parameters.pointer ? false : parameters.pointer);\n    var drawForeground = (undefined === parameters.foreground ? false : parameters.foreground);\n\n    initialized = true;\n\n    if (drawBackground && frameVisible) {\n      drawRadialFrameImage(backgroundContext, frameDesign, centerX, centerY, imageWidth, imageHeight);\n    }\n\n    if (drawBackground && backgroundVisible) {\n      // Create background in background buffer (backgroundBuffer)\n      drawRadialBackgroundImage(backgroundContext, backgroundColor, centerX, centerY, imageWidth, imageHeight);\n\n      // Create custom layer in background buffer (backgroundBuffer)\n      drawRadialCustomImage(backgroundContext, customLayer, centerX, centerY, imageWidth, imageHeight);\n\n      // Create section in background buffer (backgroundBuffer)\n      if (null !== section && 0 < section.length) {\n        var sectionIndex = section.length;\n        do {\n          sectionIndex--;\n          drawAreaSectionImage(backgroundContext, section[sectionIndex].start, section[sectionIndex].stop, section[sectionIndex].color, false);\n        }\n        while (0 < sectionIndex);\n      }\n\n      // Create area in background buffer (backgroundBuffer)\n      if (null !== area && 0 < area.length) {\n        var areaIndex = area.length;\n        do {\n          areaIndex--;\n          drawAreaSectionImage(backgroundContext, area[areaIndex].start, area[areaIndex].stop, area[areaIndex].color, true);\n        }\n        while (0 < areaIndex);\n      }\n\n      drawTickmarksImage(backgroundContext);\n    }\n\n    if (drawBackground && roseVisible) {\n      drawRoseImage(backgroundContext, centerX, centerY, imageWidth, imageHeight, backgroundColor);\n    }\n\n    // Create lcd background if selected in background buffer (backgroundBuffer)\n    if (drawBackground && lcdVisible) {\n      lcdBuffer = createLcdBackgroundImage(lcdWidth, lcdHeight, lcdColor);\n      backgroundContext.drawImage(lcdBuffer, lcdPosX, lcdPosY1);\n      backgroundContext.drawImage(lcdBuffer, lcdPosX, lcdPosY2);\n      // Create title in background buffer (backgroundBuffer)\n      drawLcdTitles(backgroundContext);\n    }\n\n    if (drawPointer) {\n      drawPointerImage(pointerContextAverage, imageWidth, pointerTypeAverage, pointerColorAverage, backgroundColor.labelColor);\n      drawPointerImage(pointerContextLatest, imageWidth, pointerTypeLatest, pointerColor, backgroundColor.labelColor);\n    }\n\n    if (drawForeground && foregroundVisible) {\n      var knobVisible = (pointerTypeLatest.type === 'type15' || pointerTypeLatest.type === 'type16' ? false : true);\n      drawRadialForegroundImage(foregroundContext, foregroundType, imageWidth, imageHeight, knobVisible, knobType, knobStyle);\n    }\n  };\n\n  var resetBuffers = function(buffers) {\n    buffers = buffers || {};\n    var resetBackground = (undefined === buffers.background ? false : buffers.background);\n    var resetPointer = (undefined === buffers.pointer ? false : buffers.pointer);\n    var resetForeground = (undefined === buffers.foreground ? false : buffers.foreground);\n\n    // Buffer for all static background painting code\n    if (resetBackground) {\n      backgroundBuffer.width = size;\n      backgroundBuffer.height = size;\n      backgroundContext = backgroundBuffer.getContext('2d');\n    }\n    // Buffers for pointer image painting code\n    if (resetPointer) {\n      pointerBufferLatest.width = size;\n      pointerBufferLatest.height = size;\n      pointerContextLatest = pointerBufferLatest.getContext('2d');\n\n      pointerBufferAverage.width = size;\n      pointerBufferAverage.height = size;\n      pointerContextAverage = pointerBufferAverage.getContext('2d');\n    }\n    // Buffer for static foreground painting code\n    if (resetForeground) {\n      foregroundBuffer.width = size;\n      foregroundBuffer.height = size;\n      foregroundContext = foregroundBuffer.getContext('2d');\n    }\n  };\n\n  //************************************ Public methods **************************************\n  this.setValueLatest = function(newValue) {\n    // Actually need to handle 0-360 rather than 0-359\n    // 1-360 are used for directions\n    // 0 is used as a special case to indicate 'calm'\n    newValue = parseFloat(newValue);\n    newValue = newValue === 360 ? 360 : newValue % 360;\n    if (valueLatest !== newValue) {\n      valueLatest = newValue;\n      this.repaint();\n    }\n    return this;\n  };\n\n  this.getValueLatest = function() {\n    return valueLatest;\n  };\n\n  this.setValueAverage = function(newValue) {\n    // Actually need to handle 0-360 rather than 0-359\n    // 1-360 are used for directions\n    // 0 is used as a special case to indicate 'calm'\n    newValue = parseFloat(newValue);\n    newValue = newValue === 360 ? 360 : newValue % 360;\n    if (valueAverage !== newValue) {\n      valueAverage = newValue;\n      this.repaint();\n    }\n    return this;\n  };\n\n  this.getValueAverage = function() {\n    return valueAverage;\n  };\n\n  this.setValueAnimatedLatest = function(newValue, callback) {\n    var targetValue,\n      gauge = this,\n      diff,\n      time;\n    // Actually need to handle 0-360 rather than 0-359\n    // 1-360 are used for directions\n    // 0 is used as a special case to indicate 'calm'\n    newValue = parseFloat(newValue);\n    targetValue = (newValue === 360 ? 360 : newValue % 360);\n\n    if (valueLatest !== targetValue) {\n      if (undefined !== tweenLatest && tweenLatest.isPlaying) {\n        tweenLatest.stop();\n      }\n\n      diff = getShortestAngle(valueLatest, targetValue);\n\n      if (diff !== 0) { // 360 - 0 is a diff of zero\n        time = fullScaleDeflectionTime * Math.abs(diff) / 180;\n        time = Math.max(time, fullScaleDeflectionTime / 5);\n        tweenLatest = new Tween({}, '', Tween.regularEaseInOut, valueLatest, valueLatest + diff, time);\n        tweenLatest.onMotionChanged = function(event) {\n          valueLatest = event.target._pos === 360 ? 360 : event.target._pos % 360;\n          if (!repainting) {\n            repainting = true;\n            requestAnimFrame(gauge.repaint);\n          }\n        };\n\n        tweenLatest.onMotionFinished = function() {\n          valueLatest = targetValue;\n          if (!repainting) {\n            repainting = true;\n            requestAnimFrame(gauge.repaint);\n          }\n          // do we have a callback function to process?\n          if (callback && typeof(callback) === \"function\") {\n            callback();\n          }\n        };\n\n        tweenLatest.start();\n      } else {\n        // target different from current, but diff is zero (0 -> 360 for instance), so just repaint\n        valueLatest = targetValue;\n        if (!repainting) {\n          repainting = true;\n          requestAnimFrame(gauge.repaint);\n        }\n      }\n    }\n    return this;\n  };\n\n  this.setValueAnimatedAverage = function(newValue, callback) {\n    var targetValue,\n      gauge = this,\n      diff, time;\n    // Actually need to handle 0-360 rather than 0-359\n    // 1-360 are used for directions\n    // 0 is used as a special case to indicate 'calm'\n    newValue = parseFloat(newValue);\n    targetValue = (newValue === 360 ? 360 : newValue % 360);\n    if (valueAverage !== newValue) {\n      if (undefined !== tweenAverage && tweenAverage.isPlaying) {\n        tweenAverage.stop();\n      }\n\n      diff = getShortestAngle(valueAverage, targetValue);\n      if (diff !== 0) { // 360 - 0 is a diff of zero\n        time = fullScaleDeflectionTime * Math.abs(diff) / 180;\n        time = Math.max(time, fullScaleDeflectionTime / 5);\n        tweenAverage = new Tween({}, '', Tween.regularEaseInOut, valueAverage, valueAverage + diff, time);\n        tweenAverage.onMotionChanged = function(event) {\n          valueAverage = event.target._pos === 360 ? 360 : event.target._pos % 360;\n          if (!repainting) {\n            repainting = true;\n            requestAnimFrame(gauge.repaint);\n          }\n        };\n\n        tweenAverage.onMotionFinished = function() {\n          valueAverage = targetValue;\n          if (!repainting) {\n            repainting = true;\n            requestAnimFrame(gauge.repaint);\n          }\n          // do we have a callback function to process?\n          if (callback && typeof(callback) === \"function\") {\n            callback();\n          }\n        };\n\n        tweenAverage.start();\n      } else {\n        // target different from current, but diff is zero (0 -> 360 for instance), so just repaint\n        valueAverage = targetValue;\n        if (!repainting) {\n          repainting = true;\n          requestAnimFrame(gauge.repaint);\n        }\n      }\n    }\n    return this;\n  };\n\n  this.setArea = function(areaVal) {\n    area = areaVal;\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setSection = function(areaSec) {\n    section = areaSec;\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setFrameDesign = function(newFrameDesign) {\n    frameDesign = newFrameDesign;\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setBackgroundColor = function(newBackgroundColor) {\n    backgroundColor = newBackgroundColor;\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setForegroundType = function(newForegroundType) {\n    resetBuffers({\n      foreground: true\n    });\n    foregroundType = newForegroundType;\n    init({\n      foreground: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setPointerColor = function(newPointerColor) {\n    resetBuffers({\n      pointer: true\n    });\n    pointerColor = newPointerColor;\n    init({\n      pointer: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setPointerColorAverage = function(newPointerColor) {\n    resetBuffers({\n      pointer: true\n    });\n    pointerColorAverage = newPointerColor;\n    init({\n      pointer: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setPointerType = function(newPointerType) {\n    pointerTypeLatest = newPointerType;\n    resetBuffers({\n      pointer: true,\n      foreground: true\n    });\n    init({\n      pointer: true,\n      foreground: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setPointerTypeAverage = function(newPointerType) {\n    pointerTypeAverage = newPointerType;\n    resetBuffers({\n      pointer: true,\n      foreground: true\n    });\n    init({\n      pointer: true,\n      foreground: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setPointSymbols = function(newPointSymbols) {\n    pointSymbols = newPointSymbols;\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setLcdColor = function(newLcdColor) {\n    lcdColor = newLcdColor;\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setLcdTitleStrings = function(titles) {\n    lcdTitleStrings = titles;\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.repaint = function() {\n    if (!initialized) {\n      init({\n        frame: true,\n        background: true,\n        led: true,\n        pointer: true,\n        foreground: true\n      });\n    }\n\n    mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height);\n\n    if (frameVisible || backgroundVisible) {\n      mainCtx.drawImage(backgroundBuffer, 0, 0);\n    }\n\n    // Draw lcd display\n    if (lcdVisible) {\n      drawLcdText(valueLatest, true);\n      drawLcdText(valueAverage, false);\n    }\n\n    // Define rotation angle\n    angleAverage = valueAverage * angleStep;\n\n    // we have to draw to a rotated temporary image area so we can translate in\n    // absolute x, y values when drawing to main context\n    var shadowOffset = imageWidth * 0.006;\n\n    // Define rotation center\n    mainCtx.save();\n    mainCtx.translate(centerX, centerY);\n    mainCtx.rotate(angleAverage);\n    mainCtx.translate(-centerX, -centerY);\n    // Set the pointer shadow params\n    mainCtx.shadowColor = 'rgba(0, 0, 0, 0.8)';\n    mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset;\n    mainCtx.shadowBlur = shadowOffset * 2;\n    // Draw the pointer\n    mainCtx.drawImage(pointerBufferAverage, 0, 0);\n    // Define rotation angle difference for average pointer\n    angleLatest = valueLatest * angleStep - angleAverage;\n    mainCtx.translate(centerX, centerY);\n    mainCtx.rotate(angleLatest);\n    mainCtx.translate(-centerX, -centerY);\n    mainCtx.drawImage(pointerBufferLatest, 0, 0);\n    mainCtx.restore();\n\n    if (foregroundVisible) {\n      mainCtx.drawImage(foregroundBuffer, 0, 0);\n    }\n\n    repainting = false;\n  };\n\n  // Visualize the component\n  this.repaint();\n\n  return this;\n};\n\nexport default windDirection;\n","import Tween from \"./tween.js\";\nimport drawRadialFrameImage from \"./drawRadialFrameImage\";\nimport drawRadialForegroundImage from \"./drawRadialForegroundImage\";\nimport {\ncreateBuffer, \nrequestAnimFrame, \ngetCanvasContext,\nHALF_PI,\nTWO_PI,\nPI,\nRAD_FACTOR,\nstdFontName,\n} from \"./tools\";\n\nimport {\n  backgroundColor as BackgroundColor,\n  lcdColor as LcdColor,\n  color as ColorDef,\n  ledColor as LedColor,\n  gaugeType as GaugeType,\n  orientation as Orientation,\n  knobType as KnobType,\n  knobStyle as KnobStyle,\n  frameDesign as FrameDesign,\n  pointerType as PointerType,\n  foregroundType as ForegroundType,\n  labelNumberFormat as LabelNumberFormat,\n  tickLabelOrientation as TickLabelOrientation,\n  trendState as TrendState,\n  } from \"./definitions\";\n\nimport {\n  gaugeType,\n  knobType,\n  knobStyle,\n  } from \"./definitions\";\n\nvar horizon = function(canvas, parameters) {\n  parameters = parameters || {};\n  var size = (undefined === parameters.size ? 0 : parameters.size),\n    frameDesign = (undefined === parameters.frameDesign ? FrameDesign.METAL : parameters.frameDesign),\n    frameVisible = (undefined === parameters.frameVisible ? true : parameters.frameVisible),\n    foregroundType = (undefined === parameters.foregroundType ? ForegroundType.TYPE1 : parameters.foregroundType),\n    foregroundVisible = (undefined === parameters.foregroundVisible ? true : parameters.foregroundVisible),\n    pointerColor = (undefined === parameters.pointerColor ? ColorDef.WHITE : parameters.pointerColor);\n\n  var tweenRoll;\n  var tweenPitch;\n  var repainting = false;\n  var roll = 0;\n  var pitch = 0;\n  var pitchPixel = (PI * size) / 360;\n  var pitchOffset = 0;\n  var upsidedown = false;\n\n  // Get the canvas context and clear it\n  var mainCtx = getCanvasContext(canvas);\n  // Has a size been specified?\n  if (size === 0) {\n    size = Math.min(mainCtx.canvas.width, mainCtx.canvas.height);\n  }\n\n  // Set the size - also clears the canvas\n  mainCtx.canvas.width = size;\n  mainCtx.canvas.height = size;\n\n  var imageWidth = size;\n  var imageHeight = size;\n\n  var centerX = imageWidth / 2;\n  var centerY = imageHeight / 2;\n\n  var initialized = false;\n\n  // **************   Buffer creation  ********************\n  // Buffer for all static background painting code\n  var backgroundBuffer = createBuffer(size, size);\n  var backgroundContext = backgroundBuffer.getContext('2d');\n\n  // Buffer for pointer image painting code\n  var valueBuffer = createBuffer(size, size * PI);\n  var valueContext = valueBuffer.getContext('2d');\n\n  // Buffer for indicator painting code\n  var indicatorBuffer = createBuffer(size * 0.037383, size * 0.056074);\n  var indicatorContext = indicatorBuffer.getContext('2d');\n\n  // Buffer for static foreground painting code\n  var foregroundBuffer = createBuffer(size, size);\n  var foregroundContext = foregroundBuffer.getContext('2d');\n\n  // **************   Image creation  ********************\n  var drawHorizonBackgroundImage = function(ctx) {\n    ctx.save();\n\n    var imgWidth = size;\n    var imgHeight = size * PI;\n    var y;\n\n    // HORIZON\n    ctx.beginPath();\n    ctx.rect(0, 0, imgWidth, imgHeight);\n    ctx.closePath();\n    var HORIZON_GRADIENT = ctx.createLinearGradient(0, 0, 0, imgHeight);\n    HORIZON_GRADIENT.addColorStop(0, '#7fd5f0');\n    HORIZON_GRADIENT.addColorStop(0.5, '#7fd5f0');\n    HORIZON_GRADIENT.addColorStop(0.5, '#3c4439');\n    HORIZON_GRADIENT.addColorStop(1, '#3c4439');\n    ctx.fillStyle = HORIZON_GRADIENT;\n    ctx.fill();\n\n    ctx.lineWidth = 1;\n    var stepSizeY = imgHeight / 360 * 5;\n    var stepTen = false;\n    var step = 10;\n\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    var fontSize = imgWidth * 0.04;\n    ctx.font = fontSize + 'px ' + stdFontName;\n    ctx.fillStyle = '#37596e';\n    for (y = imgHeight / 2 - stepSizeY; y > 0; y -= stepSizeY) {\n      if (step <= 90) {\n        if (stepTen) {\n          ctx.fillText(step, (imgWidth - (imgWidth * 0.2)) / 2 - 8, y, imgWidth * 0.375);\n          ctx.fillText(step, imgWidth - (imgWidth - (imgWidth * 0.2)) / 2 + 8, y, imgWidth * 0.375);\n          ctx.beginPath();\n          ctx.moveTo((imgWidth - (imgWidth * 0.2)) / 2, y);\n          ctx.lineTo(imgWidth - (imgWidth - (imgWidth * 0.2)) / 2, y);\n          ctx.closePath();\n          step += 10;\n        } else {\n          ctx.beginPath();\n          ctx.moveTo((imgWidth - (imgWidth * 0.1)) / 2, y);\n          ctx.lineTo(imgWidth - (imgWidth - (imgWidth * 0.1)) / 2, y);\n          ctx.closePath();\n        }\n        ctx.stroke();\n      }\n      stepTen ^= true;\n    }\n    stepTen = false;\n    step = 10;\n    ctx.strokeStyle = '#FFFFFF';\n    ctx.lineWidth = 1.5;\n    ctx.beginPath();\n    ctx.moveTo(0, imgHeight / 2);\n    ctx.lineTo(imgWidth, imgHeight / 2);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.fillStyle = '#FFFFFF';\n    ctx.lineWidth = 1;\n    for (y = imgHeight / 2 + stepSizeY; y <= imgHeight; y += stepSizeY) {\n      if (step <= 90) {\n        if (stepTen) {\n          ctx.fillText(-step, (imgWidth - (imgWidth * 0.2)) / 2 - 8, y, imgWidth * 0.375);\n          ctx.fillText(-step, imgWidth - (imgWidth - (imgWidth * 0.2)) / 2 + 8, y, imgWidth * 0.375);\n          ctx.beginPath();\n          ctx.moveTo((imgWidth - (imgWidth * 0.2)) / 2, y);\n          ctx.lineTo(imgWidth - (imgWidth - (imgWidth * 0.2)) / 2, y);\n          ctx.closePath();\n          step += 10;\n        } else {\n          ctx.beginPath();\n          ctx.moveTo((imgWidth - (imgWidth * 0.1)) / 2, y);\n          ctx.lineTo(imgWidth - (imgWidth - (imgWidth * 0.1)) / 2, y);\n          ctx.closePath();\n        }\n        ctx.stroke();\n      }\n      stepTen ^= true;\n    }\n\n    ctx.restore();\n  };\n\n  var drawHorizonForegroundImage = function(ctx) {\n    ctx.save();\n\n    ctx.fillStyle = pointerColor.light.getRgbaColor();\n\n    // CENTERINDICATOR\n    ctx.beginPath();\n    ctx.moveTo(imageWidth * 0.476635, imageHeight * 0.5);\n    ctx.bezierCurveTo(imageWidth * 0.476635, imageHeight * 0.514018, imageWidth * 0.485981, imageHeight * 0.523364, imageWidth * 0.5, imageHeight * 0.523364);\n    ctx.bezierCurveTo(imageWidth * 0.514018, imageHeight * 0.523364, imageWidth * 0.523364, imageHeight * 0.514018, imageWidth * 0.523364, imageHeight * 0.5);\n    ctx.bezierCurveTo(imageWidth * 0.523364, imageHeight * 0.485981, imageWidth * 0.514018, imageHeight * 0.476635, imageWidth * 0.5, imageHeight * 0.476635);\n    ctx.bezierCurveTo(imageWidth * 0.485981, imageHeight * 0.476635, imageWidth * 0.476635, imageHeight * 0.485981, imageWidth * 0.476635, imageHeight * 0.5);\n    ctx.closePath();\n    ctx.moveTo(imageWidth * 0.415887, imageHeight * 0.504672);\n    ctx.lineTo(imageWidth * 0.415887, imageHeight * 0.495327);\n    ctx.bezierCurveTo(imageWidth * 0.415887, imageHeight * 0.495327, imageWidth * 0.467289, imageHeight * 0.495327, imageWidth * 0.467289, imageHeight * 0.495327);\n    ctx.bezierCurveTo(imageWidth * 0.471962, imageHeight * 0.481308, imageWidth * 0.481308, imageHeight * 0.471962, imageWidth * 0.495327, imageHeight * 0.467289);\n    ctx.bezierCurveTo(imageWidth * 0.495327, imageHeight * 0.467289, imageWidth * 0.495327, imageHeight * 0.415887, imageWidth * 0.495327, imageHeight * 0.415887);\n    ctx.lineTo(imageWidth * 0.504672, imageHeight * 0.415887);\n    ctx.bezierCurveTo(imageWidth * 0.504672, imageHeight * 0.415887, imageWidth * 0.504672, imageHeight * 0.467289, imageWidth * 0.504672, imageHeight * 0.467289);\n    ctx.bezierCurveTo(imageWidth * 0.518691, imageHeight * 0.471962, imageWidth * 0.528037, imageHeight * 0.481308, imageWidth * 0.532710, imageHeight * 0.495327);\n    ctx.bezierCurveTo(imageWidth * 0.532710, imageHeight * 0.495327, imageWidth * 0.584112, imageHeight * 0.495327, imageWidth * 0.584112, imageHeight * 0.495327);\n    ctx.lineTo(imageWidth * 0.584112, imageHeight * 0.504672);\n    ctx.bezierCurveTo(imageWidth * 0.584112, imageHeight * 0.504672, imageWidth * 0.532710, imageHeight * 0.504672, imageWidth * 0.532710, imageHeight * 0.504672);\n    ctx.bezierCurveTo(imageWidth * 0.528037, imageHeight * 0.518691, imageWidth * 0.518691, imageHeight * 0.532710, imageWidth * 0.5, imageHeight * 0.532710);\n    ctx.bezierCurveTo(imageWidth * 0.481308, imageHeight * 0.532710, imageWidth * 0.471962, imageHeight * 0.518691, imageWidth * 0.467289, imageHeight * 0.504672);\n    ctx.bezierCurveTo(imageWidth * 0.467289, imageHeight * 0.504672, imageWidth * 0.415887, imageHeight * 0.504672, imageWidth * 0.415887, imageHeight * 0.504672);\n    ctx.closePath();\n    ctx.fill();\n\n    // Tickmarks\n    var step = 5;\n    var stepRad = 5 * RAD_FACTOR;\n    ctx.translate(centerX, centerY);\n    ctx.rotate(-HALF_PI);\n    ctx.translate(-centerX, -centerY);\n    var angle;\n    for (angle = -90; angle <= 90; angle += step) {\n      if (angle % 45 === 0 || angle === 0) {\n        ctx.strokeStyle = pointerColor.medium.getRgbaColor();\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.moveTo(imageWidth * 0.5, imageHeight * 0.088785);\n        ctx.lineTo(imageWidth * 0.5, imageHeight * 0.113);\n        ctx.closePath();\n        ctx.stroke();\n      } else if (angle % 15 === 0) {\n        ctx.strokeStyle = '#FFFFFF';\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        ctx.moveTo(imageWidth * 0.5, imageHeight * 0.088785);\n        ctx.lineTo(imageWidth * 0.5, imageHeight * 0.103785);\n        ctx.closePath();\n        ctx.stroke();\n      } else {\n        ctx.strokeStyle = '#FFFFFF';\n        ctx.lineWidth = 0.5;\n        ctx.beginPath();\n        ctx.moveTo(imageWidth * 0.5, imageHeight * 0.088785);\n        ctx.lineTo(imageWidth * 0.5, imageHeight * 0.093785);\n        ctx.closePath();\n        ctx.stroke();\n      }\n      ctx.translate(centerX, centerY);\n      ctx.rotate(stepRad, centerX, centerY);\n      ctx.translate(-centerX, -centerY);\n    }\n\n    ctx.restore();\n  };\n\n  var drawIndicatorImage = function(ctx) {\n    ctx.save();\n\n    var imgWidth = imageWidth * 0.037383;\n    var imgHeight = imageHeight * 0.056074;\n\n    ctx.beginPath();\n    ctx.moveTo(imgWidth * 0.5, 0);\n    ctx.lineTo(0, imgHeight);\n    ctx.lineTo(imgWidth, imgHeight);\n    ctx.closePath();\n\n    ctx.fillStyle = pointerColor.light.getRgbaColor();\n    ctx.fill();\n    ctx.strokeStyle = pointerColor.medium.getRgbaColor();\n    ctx.stroke();\n\n    ctx.restore();\n  };\n\n  // **************   Initialization  ********************\n  // Draw all static painting code to background\n  var init = function() {\n    initialized = true;\n\n    if (frameVisible) {\n      drawRadialFrameImage(backgroundContext, frameDesign, centerX, centerY, imageWidth, imageHeight);\n    }\n\n    drawHorizonBackgroundImage(valueContext);\n\n    drawIndicatorImage(indicatorContext);\n\n    drawHorizonForegroundImage(foregroundContext);\n\n    if (foregroundVisible) {\n      drawRadialForegroundImage(foregroundContext, foregroundType, imageWidth, imageHeight, true, knobType, knobStyle, gaugeType);\n    }\n  };\n\n  var resetBuffers = function() {\n    // Buffer for all static background painting code\n    backgroundBuffer.width = size;\n    backgroundBuffer.height = size;\n    backgroundContext = backgroundBuffer.getContext('2d');\n\n    // Buffer for pointer image painting code\n    valueBuffer.width = size;\n    valueBuffer.height = size * PI;\n    valueContext = valueBuffer.getContext('2d');\n\n    // Buffer for the indicator\n    indicatorBuffer.width = size * 0.037383;\n    indicatorBuffer.height = size * 0.056074;\n    indicatorContext = indicatorBuffer.getContext('2d');\n\n    // Buffer for static foreground painting code\n    foregroundBuffer.width = size;\n    foregroundBuffer.height = size;\n    foregroundContext = foregroundBuffer.getContext('2d');\n  };\n\n  //************************************ Public methods **************************************\n  this.setRoll = function(newRoll) {\n    newRoll = parseFloat(newRoll) % 360;\n    if (roll !== newRoll) {\n      roll = newRoll;\n      this.repaint();\n    }\n    return this;\n  };\n\n  this.getRoll = function() {\n    return roll;\n  };\n\n  this.setRollAnimated = function(newRoll, callback) {\n    var gauge = this;\n    newRoll = parseFloat(newRoll) % 360;\n    if (roll !== newRoll) {\n\n      if (undefined !== tweenRoll && tweenRoll.isPlaying) {\n        tweenRoll.stop();\n      }\n\n      tweenRoll = new Tween({}, '', Tween.regularEaseInOut, roll, newRoll, 1);\n\n      tweenRoll.onMotionChanged = function(event) {\n        roll = event.target._pos;\n        if (!repainting) {\n          repainting = true;\n          requestAnimFrame(gauge.repaint);\n        }\n      };\n\n      // do we have a callback function to process?\n      if (callback && typeof(callback) === \"function\") {\n        tweenRoll.onMotionFinished = callback;\n      }\n\n      tweenRoll.start();\n    }\n    return this;\n  };\n\n  this.setPitch = function(newPitch) {\n    // constrain to range -180..180\n    // normal range -90..90 and -180..-90/90..180 indicate inverted\n    newPitch = ((parseFloat(newPitch) + 180 - pitchOffset) % 360) - 180;\n    //pitch = -(newPitch + pitchOffset) % 180;\n    if (pitch !== newPitch) {\n      pitch = newPitch;\n      if (pitch > 90) {\n        pitch = 90 - (pitch - 90);\n        if (!upsidedown) {\n          this.setRoll(roll - 180);\n        }\n        upsidedown = true;\n      } else if (pitch < -90) {\n        pitch = -90 + (-90 - pitch);\n        if (!upsidedown) {\n          this.setRoll(roll + 180);\n        }\n        upsidedown = true;\n      } else {\n        upsidedown = false;\n      }\n      this.repaint();\n    }\n    return this;\n  };\n\n  this.getPitch = function() {\n    return pitch;\n  };\n\n  this.setPitchAnimated = function(newPitch, callback) {\n    var gauge = this;\n    newPitch = parseFloat(newPitch);\n    // perform all range checking in setPitch()\n    if (pitch !== newPitch) {\n      if (undefined !== tweenPitch && tweenPitch.isPlaying) {\n        tweenPitch.stop();\n      }\n      tweenPitch = new Tween({}, '', Tween.regularEaseInOut, pitch, newPitch, 1);\n      tweenPitch.onMotionChanged = function(event) {\n        pitch = event.target._pos;\n        if (pitch > 90) {\n          pitch = 90 - (pitch - 90);\n          if (!upsidedown) {\n            this.setRoll(roll - 180);\n          }\n          upsidedown = true;\n        } else if (pitch < -90) {\n          pitch = -90 + (-90 - pitch);\n          if (!upsidedown) {\n            this.setRoll(roll + 180);\n          }\n          upsidedown = true;\n        } else {\n          upsidedown = false;\n        }\n        if (!repainting) {\n          repainting = true;\n          requestAnimFrame(gauge.repaint);\n        }\n        gauge.setPitch(event.target._pos);\n      };\n\n      // do we have a callback function to process?\n      if (callback && typeof(callback) === \"function\") {\n        tweenPitch.onMotionFinished = callback;\n      }\n\n      tweenPitch.start();\n    }\n    return this;\n  };\n\n  this.setPitchOffset = function(newPitchOffset) {\n    pitchOffset = parseFloat(newPitchOffset);\n    this.repaint();\n    return this;\n  };\n\n  this.setFrameDesign = function(newFrameDesign) {\n    resetBuffers();\n    frameDesign = newFrameDesign;\n    init();\n    this.repaint();\n    return this;\n  };\n\n  this.setForegroundType = function(newForegroundType) {\n    resetBuffers();\n    foregroundType = newForegroundType;\n    init();\n    this.repaint();\n    return this;\n  };\n\n  this.repaint = function() {\n    if (!initialized) {\n      init();\n    }\n\n    mainCtx.save();\n    mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height);\n\n    mainCtx.drawImage(backgroundBuffer, 0, 0);\n\n    mainCtx.save();\n\n    // Set the clipping area\n    mainCtx.beginPath();\n    mainCtx.arc(centerX, centerY, imageWidth * 0.831775 / 2, 0, TWO_PI, true);\n    mainCtx.closePath();\n    mainCtx.clip();\n\n    // Rotate around roll\n    mainCtx.translate(centerX, centerY);\n    mainCtx.rotate(-(roll * RAD_FACTOR));\n    mainCtx.translate(-centerX, 0);\n    // Translate about dive\n    mainCtx.translate(0, (pitch * pitchPixel));\n\n    // Draw horizon\n    mainCtx.drawImage(valueBuffer, 0, -valueBuffer.height / 2);\n\n    // Draw the scale and angle indicator\n    mainCtx.translate(0, -(pitch * pitchPixel) - centerY);\n    mainCtx.drawImage(indicatorBuffer, (imageWidth * 0.5 - indicatorBuffer.width / 2), (imageWidth * 0.107476));\n    mainCtx.restore();\n\n    mainCtx.drawImage(foregroundBuffer, 0, 0);\n\n    mainCtx.restore();\n  };\n\n  // Visualize the component\n  this.repaint();\n\n  return this;\n};\n\nexport default horizon;\n","\nimport createLedImage from \"./createLedImage\";\nimport {\ngetCanvasContext,\ndoc,\n} from \"./tools\";\n\nimport {\n  backgroundColor as BackgroundColor,\n  lcdColor as LcdColor,\n  color as ColorDef,\n  ledColor as LedColor,\n  gaugeType as GaugeType,\n  orientation as Orientation,\n  knobType as KnobType,\n  knobStyle as KnobStyle,\n  frameDesign as FrameDesign,\n  pointerType as PointerType,\n  foregroundType as ForegroundType,\n  labelNumberFormat as LabelNumberFormat,\n  tickLabelOrientation as TickLabelOrientation,\n  trendState as TrendState,\n  } from \"./definitions\";\n\nvar led = function(canvas, parameters) {\n  parameters = parameters || {};\n  var size = (undefined === parameters.size ? 0 : parameters.size),\n    ledColor = (undefined === parameters.ledColor ? LedColor.RED_LED : parameters.ledColor);\n\n  var ledBlinking = false;\n  var ledTimerId = 0;\n\n  // Get the canvas context and clear it\n  var mainCtx = getCanvasContext(canvas);\n  // Has a size been specified?\n  if (size === 0) {\n    size = Math.min(mainCtx.canvas.width, mainCtx.canvas.height);\n  }\n\n  // Set the size - also clears the canvas\n  mainCtx.canvas.width = size;\n  mainCtx.canvas.height = size;\n\n  var initialized = false;\n\n  // Buffer for led on painting code\n  var ledBufferOn = doc.createElement('canvas');\n  ledBufferOn.width = size;\n  ledBufferOn.height = size;\n  var ledContextOn = ledBufferOn.getContext('2d');\n\n  // Buffer for led off painting code\n  var ledBufferOff = doc.createElement('canvas');\n  ledBufferOff.width = size;\n  ledBufferOff.height = size;\n  var ledContextOff = ledBufferOff.getContext('2d');\n\n  // Buffer for current led painting code\n  var ledBuffer = ledBufferOff;\n\n  var init = function() {\n    initialized = true;\n\n    // Draw LED ON in ledBuffer_ON\n    ledContextOn.clearRect(0, 0, ledContextOn.canvas.width, ledContextOn.canvas.height);\n    ledContextOn.drawImage(createLedImage(size, 1, ledColor), 0, 0);\n\n    // Draw LED ON in ledBuffer_OFF\n    ledContextOff.clearRect(0, 0, ledContextOff.canvas.width, ledContextOff.canvas.height);\n    ledContextOff.drawImage(createLedImage(size, 0, ledColor), 0, 0);\n  };\n\n  this.toggleLed = function() {\n    if (ledBuffer === ledBufferOn) {\n      ledBuffer = ledBufferOff;\n    } else {\n      ledBuffer = ledBufferOn;\n    }\n    repaint();\n    return this;\n  };\n\n  this.setLedColor = function(newColor) {\n    ledColor = newColor;\n    initialized = false;\n    repaint();\n    return this;\n  };\n\n  this.setLedOnOff = function(on) {\n    if (!!on) {\n      ledBuffer = ledBufferOn;\n    } else {\n      ledBuffer = ledBufferOff;\n    }\n    repaint();\n    return this;\n  };\n\n  this.blink = function(blink) {\n    if (!!blink) {\n      if (!ledBlinking) {\n        ledTimerId = setInterval(this.toggleLed, 1000);\n        ledBlinking = true;\n      }\n    } else {\n      if (ledBlinking) {\n        clearInterval(ledTimerId);\n        ledBlinking = false;\n        ledBuffer = ledBufferOff;\n      }\n    }\n    return this;\n  };\n\n  var repaint = function() {\n    if (!initialized) {\n      init();\n    }\n\n    mainCtx.save();\n    mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height);\n\n    mainCtx.drawImage(ledBuffer, 0, 0);\n\n    mainCtx.restore();\n  };\n\n  repaint();\n\n  return this;\n};\n\nexport default led;\n","\nimport drawRadialFrameImage from \"./drawRadialFrameImage\";\nimport drawRadialBackgroundImage from \"./drawRadialBackgroundImage\";\nimport drawRadialCustomImage from \"./drawRadialCustomImage\";\nimport drawRadialForegroundImage from \"./drawRadialForegroundImage\";\nimport {\ncreateBuffer, \ngetCanvasContext,\nTWO_PI,\nRAD_FACTOR,\n} from \"./tools\";\n\nimport {\n  backgroundColor as BackgroundColor,\n  lcdColor as LcdColor,\n  color as ColorDef,\n  ledColor as LedColor,\n  gaugeType as GaugeType,\n  orientation as Orientation,\n  knobType as KnobType,\n  knobStyle as KnobStyle,\n  frameDesign as FrameDesign,\n  pointerType as PointerType,\n  foregroundType as ForegroundType,\n  labelNumberFormat as LabelNumberFormat,\n  tickLabelOrientation as TickLabelOrientation,\n  trendState as TrendState,\n  } from \"./definitions\";\n\nvar clock = function(canvas, parameters) {\n  parameters = parameters || {};\n  var size = (undefined === parameters.size ? 0 : parameters.size),\n    frameDesign = (undefined === parameters.frameDesign ? FrameDesign.METAL : parameters.frameDesign),\n    frameVisible = (undefined === parameters.frameVisible ? true : parameters.frameVisible),\n    pointerType = (undefined === parameters.pointerType ? PointerType.TYPE1 : parameters.pointerType),\n    pointerColor = (undefined === parameters.pointerColor ? (pointerType === PointerType.TYPE1 ? ColorDef.GRAY : ColorDef.BLACK) : parameters.pointerColor),\n    backgroundColor = (undefined === parameters.backgroundColor ? (pointerType === PointerType.TYPE1 ? BackgroundColor.ANTHRACITE : BackgroundColor.LIGHT_GRAY) : parameters.backgroundColor),\n    backgroundVisible = (undefined === parameters.backgroundVisible ? true : parameters.backgroundVisible),\n    foregroundType = (undefined === parameters.foregroundType ? ForegroundType.TYPE1 : parameters.foregroundType),\n    foregroundVisible = (undefined === parameters.foregroundVisible ? true : parameters.foregroundVisible),\n    customLayer = (undefined === parameters.customLayer ? null : parameters.customLayer),\n    isAutomatic = (undefined === parameters.isAutomatic ? true : parameters.isAutomatic),\n    hour = (undefined === parameters.hour ? 11 : parameters.hour),\n    minute = (undefined === parameters.minute ? 5 : parameters.minute),\n    second = (undefined === parameters.second ? 0 : parameters.second),\n    secondMovesContinuous = (undefined === parameters.secondMovesContinuous ? false : parameters.secondMovesContinuous),\n    timeZoneOffsetHour = (undefined === parameters.timeZoneOffsetHour ? 0 : parameters.timeZoneOffsetHour),\n    timeZoneOffsetMinute = (undefined === parameters.timeZoneOffsetMinute ? 0 : parameters.timeZoneOffsetMinute),\n    secondPointerVisible = (undefined === parameters.secondPointerVisible ? true : parameters.secondPointerVisible);\n\n  // GaugeType specific private variables\n  var objDate = new Date();\n  var minutePointerAngle;\n  var hourPointerAngle;\n  var secondPointerAngle;\n  var tickTimer;\n  var tickInterval = (secondMovesContinuous ? 100 : 1000);\n  tickInterval = (secondPointerVisible ? tickInterval : 100);\n\n  var self = this;\n\n  // Constants\n  var ANGLE_STEP = 6;\n\n  // Get the canvas context and clear it\n  var mainCtx = getCanvasContext(canvas);\n  // Has a size been specified?\n  if (size === 0) {\n    size = Math.min(mainCtx.canvas.width, mainCtx.canvas.height);\n  }\n\n  // Set the size - also clears the canvas\n  mainCtx.canvas.width = size;\n  mainCtx.canvas.height = size;\n\n  var imageWidth = size;\n  var imageHeight = size;\n\n  var centerX = imageWidth / 2;\n  var centerY = imageHeight / 2;\n\n  var initialized = false;\n\n  // Buffer for the frame\n  var frameBuffer = createBuffer(size, size);\n  var frameContext = frameBuffer.getContext('2d');\n\n  // Buffer for static background painting code\n  var backgroundBuffer = createBuffer(size, size);\n  var backgroundContext = backgroundBuffer.getContext('2d');\n\n  // Buffer for hour pointer image painting code\n  var hourBuffer = createBuffer(size, size);\n  var hourContext = hourBuffer.getContext('2d');\n\n  // Buffer for minute pointer image painting code\n  var minuteBuffer = createBuffer(size, size);\n  var minuteContext = minuteBuffer.getContext('2d');\n\n  // Buffer for second pointer image painting code\n  var secondBuffer = createBuffer(size, size);\n  var secondContext = secondBuffer.getContext('2d');\n\n  // Buffer for static foreground painting code\n  var foregroundBuffer = createBuffer(size, size);\n  var foregroundContext = foregroundBuffer.getContext('2d');\n\n  var drawTickmarksImage = function(ctx, ptrType) {\n    var tickAngle;\n    var SMALL_TICK_HEIGHT;\n    var BIG_TICK_HEIGHT;\n    var OUTER_POINT, INNER_POINT;\n    OUTER_POINT = imageWidth * 0.405;\n    ctx.save();\n    ctx.translate(centerX, centerY);\n\n    switch (ptrType.type) {\n      case 'type1':\n        // Draw minutes tickmarks\n        SMALL_TICK_HEIGHT = imageWidth * 0.074766;\n        INNER_POINT = OUTER_POINT - SMALL_TICK_HEIGHT;\n        ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();\n        ctx.lineWidth = imageWidth * 0.014018;\n\n        for (tickAngle = 0; tickAngle < 360; tickAngle += 30) {\n          ctx.beginPath();\n          ctx.moveTo(OUTER_POINT, 0);\n          ctx.lineTo(INNER_POINT, 0);\n          ctx.closePath();\n          ctx.stroke();\n          ctx.rotate(30 * RAD_FACTOR);\n        }\n\n        // Draw hours tickmarks\n        BIG_TICK_HEIGHT = imageWidth * 0.126168;\n        INNER_POINT = OUTER_POINT - BIG_TICK_HEIGHT;\n        ctx.lineWidth = imageWidth * 0.032710;\n\n        for (tickAngle = 0; tickAngle < 360; tickAngle += 90) {\n          ctx.beginPath();\n          ctx.moveTo(OUTER_POINT, 0);\n          ctx.lineTo(INNER_POINT, 0);\n          ctx.closePath();\n          ctx.stroke();\n          ctx.rotate(90 * RAD_FACTOR);\n        }\n        break;\n\n      case 'type2':\n        /* falls through */\n      default:\n        // Draw minutes tickmarks\n        SMALL_TICK_HEIGHT = imageWidth * 0.037383;\n        INNER_POINT = OUTER_POINT - SMALL_TICK_HEIGHT;\n        ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();\n        ctx.lineWidth = imageWidth * 0.009345;\n\n        for (tickAngle = 0; tickAngle < 360; tickAngle += 6) {\n          ctx.beginPath();\n          ctx.moveTo(OUTER_POINT, 0);\n          ctx.lineTo(INNER_POINT, 0);\n          ctx.closePath();\n          ctx.stroke();\n          ctx.rotate(6 * RAD_FACTOR);\n        }\n\n        // Draw hours tickmarks\n        BIG_TICK_HEIGHT = imageWidth * 0.084112;\n        INNER_POINT = OUTER_POINT - BIG_TICK_HEIGHT;\n        ctx.lineWidth = imageWidth * 0.028037;\n\n        for (tickAngle = 0; tickAngle < 360; tickAngle += 30) {\n          ctx.beginPath();\n          ctx.moveTo(OUTER_POINT, 0);\n          ctx.lineTo(INNER_POINT, 0);\n          ctx.closePath();\n          ctx.stroke();\n          ctx.rotate(30 * RAD_FACTOR);\n        }\n        break;\n    }\n    ctx.translate(-centerX, -centerY);\n    ctx.restore();\n  };\n\n  var drawHourPointer = function(ctx, ptrType) {\n    ctx.save();\n    var grad;\n\n    switch (ptrType.type) {\n      case 'type2':\n        ctx.beginPath();\n        ctx.lineWidth = imageWidth * 0.046728;\n        ctx.moveTo(centerX, imageWidth * 0.289719);\n        ctx.lineTo(centerX, imageWidth * 0.289719 + imageWidth * 0.224299);\n        ctx.strokeStyle = pointerColor.medium.getRgbaColor();\n        ctx.closePath();\n        ctx.stroke();\n        break;\n\n      case 'type1':\n        /* falls through */\n      default:\n        ctx.beginPath();\n        ctx.moveTo(imageWidth * 0.471962, imageHeight * 0.560747);\n        ctx.lineTo(imageWidth * 0.471962, imageHeight * 0.214953);\n        ctx.lineTo(imageWidth * 0.5, imageHeight * 0.182242);\n        ctx.lineTo(imageWidth * 0.528037, imageHeight * 0.214953);\n        ctx.lineTo(imageWidth * 0.528037, imageHeight * 0.560747);\n        ctx.lineTo(imageWidth * 0.471962, imageHeight * 0.560747);\n        ctx.closePath();\n        grad = ctx.createLinearGradient(imageWidth * 0.471962, imageHeight * 0.560747, imageWidth * 0.528037, imageHeight * 0.214953);\n        grad.addColorStop(1, pointerColor.veryLight.getRgbaColor());\n        grad.addColorStop(0, pointerColor.light.getRgbaColor());\n        ctx.fillStyle = grad;\n        ctx.strokeStyle = pointerColor.light.getRgbaColor();\n        ctx.fill();\n        ctx.stroke();\n        break;\n    }\n    ctx.restore();\n  };\n\n  var drawMinutePointer = function(ctx, ptrType) {\n    ctx.save();\n    var grad;\n\n    switch (ptrType.type) {\n      case 'type2':\n        ctx.beginPath();\n        ctx.lineWidth = imageWidth * 0.032710;\n        ctx.moveTo(centerX, imageWidth * 0.116822);\n        ctx.lineTo(centerX, imageWidth * 0.116822 + imageWidth * 0.387850);\n        ctx.strokeStyle = pointerColor.medium.getRgbaColor();\n        ctx.closePath();\n        ctx.stroke();\n        break;\n\n      case 'type1':\n        /* falls through */\n      default:\n        ctx.beginPath();\n        ctx.moveTo(imageWidth * 0.518691, imageHeight * 0.574766);\n        ctx.lineTo(imageWidth * 0.523364, imageHeight * 0.135514);\n        ctx.lineTo(imageWidth * 0.5, imageHeight * 0.107476);\n        ctx.lineTo(imageWidth * 0.476635, imageHeight * 0.140186);\n        ctx.lineTo(imageWidth * 0.476635, imageHeight * 0.574766);\n        ctx.lineTo(imageWidth * 0.518691, imageHeight * 0.574766);\n        ctx.closePath();\n        grad = ctx.createLinearGradient(imageWidth * 0.518691, imageHeight * 0.574766, imageWidth * 0.476635, imageHeight * 0.140186);\n        grad.addColorStop(1, pointerColor.veryLight.getRgbaColor());\n        grad.addColorStop(0, pointerColor.light.getRgbaColor());\n        ctx.fillStyle = grad;\n        ctx.strokeStyle = pointerColor.light.getRgbaColor();\n        ctx.fill();\n        ctx.stroke();\n        break;\n    }\n    ctx.restore();\n  };\n\n  var drawSecondPointer = function(ctx, ptrType) {\n    ctx.save();\n    var grad;\n\n    switch (ptrType.type) {\n      case 'type2':\n        // top rectangle\n        ctx.lineWidth = imageWidth * 0.009345;\n        ctx.beginPath();\n        ctx.moveTo(centerX, imageWidth * 0.098130);\n        ctx.lineTo(centerX, imageWidth * 0.098130 + imageWidth * 0.126168);\n        ctx.closePath();\n        ctx.stroke();\n        // bottom rectangle\n        ctx.lineWidth = imageWidth * 0.018691;\n        ctx.beginPath();\n        ctx.moveTo(centerX, imageWidth * 0.308411);\n        ctx.lineTo(centerX, imageWidth * 0.308411 + imageWidth * 0.191588);\n        ctx.closePath();\n        ctx.stroke();\n        // circle\n        ctx.lineWidth = imageWidth * 0.016;\n        ctx.beginPath();\n        ctx.arc(centerX, imageWidth * 0.26, imageWidth * 0.085 / 2, 0, TWO_PI);\n        ctx.closePath();\n        ctx.stroke();\n        break;\n\n      case 'type1':\n        /* falls through */\n      default:\n        ctx.beginPath();\n        ctx.moveTo(imageWidth * 0.509345, imageHeight * 0.116822);\n        ctx.lineTo(imageWidth * 0.509345, imageHeight * 0.574766);\n        ctx.lineTo(imageWidth * 0.490654, imageHeight * 0.574766);\n        ctx.lineTo(imageWidth * 0.490654, imageHeight * 0.116822);\n        ctx.lineTo(imageWidth * 0.509345, imageHeight * 0.116822);\n        ctx.closePath();\n        grad = ctx.createLinearGradient(imageWidth * 0.509345, imageHeight * 0.116822, imageWidth * 0.490654, imageHeight * 0.574766);\n        grad.addColorStop(0, ColorDef.RED.light.getRgbaColor());\n        grad.addColorStop(0.47, ColorDef.RED.medium.getRgbaColor());\n        grad.addColorStop(1, ColorDef.RED.dark.getRgbaColor());\n        ctx.fillStyle = grad;\n        ctx.strokeStyle = ColorDef.RED.dark.getRgbaColor();\n        ctx.fill();\n        ctx.stroke();\n        break;\n    }\n    ctx.restore();\n  };\n\n  var drawKnob = function(ctx) {\n    var grad;\n\n    // draw the knob\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, imageWidth * 0.045, 0, TWO_PI);\n    ctx.closePath();\n    grad = ctx.createLinearGradient(centerX - imageWidth * 0.045 / 2, centerY - imageWidth * 0.045 / 2, centerX + imageWidth * 0.045 / 2, centerY + imageWidth * 0.045 / 2);\n    grad.addColorStop(0, '#eef0f2');\n    grad.addColorStop(1, '#65696d');\n    ctx.fillStyle = grad;\n    ctx.fill();\n  };\n\n  var drawTopKnob = function(ctx, ptrType) {\n    var grad;\n\n    ctx.save();\n\n    switch (ptrType.type) {\n      case 'type2':\n        // draw knob\n        ctx.fillStyle = '#000000';\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, imageWidth * 0.088785 / 2, 0, TWO_PI);\n        ctx.closePath();\n        ctx.fill();\n        break;\n\n      case 'type1':\n        /* falls through */\n      default:\n        // draw knob\n        grad = ctx.createLinearGradient(centerX - imageWidth * 0.027 / 2, centerY - imageWidth * 0.027 / 2, centerX + imageWidth * 0.027 / 2, centerY + imageWidth * 0.027 / 2);\n        grad.addColorStop(0, '#f3f4f7');\n        grad.addColorStop(0.11, '#f3f5f7');\n        grad.addColorStop(0.12, '#f1f3f5');\n        grad.addColorStop(0.2, '#c0c5cb');\n        grad.addColorStop(0.2, '#bec3c9');\n        grad.addColorStop(1, '#bec3c9');\n        ctx.fillStyle = grad;\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, imageWidth * 0.027, 0, TWO_PI);\n        ctx.closePath();\n        ctx.fill();\n        break;\n    }\n\n    ctx.restore();\n  };\n\n  var calculateAngles = function(hour, minute, second) {\n    secondPointerAngle = second * ANGLE_STEP * RAD_FACTOR;\n    minutePointerAngle = minute * ANGLE_STEP * RAD_FACTOR;\n    hourPointerAngle = (hour + minute / 60) * ANGLE_STEP * 5 * RAD_FACTOR;\n  };\n\n  var tickTock = function() {\n    if (isAutomatic) {\n      objDate = new Date();\n    } else {\n      objDate.setHours(hour);\n      objDate.setMinutes(minute);\n      objDate.setSeconds(second);\n    }\n    // Seconds\n    second = objDate.getSeconds() + (secondMovesContinuous ? objDate.getMilliseconds() / 1000 : 0);\n\n    // Hours\n    if (timeZoneOffsetHour !== 0) {\n      hour = objDate.getUTCHours() + timeZoneOffsetHour;\n    } else {\n      hour = objDate.getHours();\n    }\n    hour = hour % 12;\n\n    // Minutes\n    if (timeZoneOffsetMinute !== 0) {\n      minute = objDate.getUTCMinutes() + timeZoneOffsetMinute;\n    } else {\n      minute = objDate.getMinutes();\n    }\n    if (minute > 60) {\n      minute -= 60;\n      hour++;\n    }\n    if (minute < 0) {\n      minute += 60;\n      hour--;\n    }\n    hour = hour % 12;\n    // Calculate angles from current hour and minute values\n    calculateAngles(hour, minute, second);\n\n    if (isAutomatic) {\n      tickTimer = setTimeout(tickTock, tickInterval);\n    }\n\n    self.repaint();\n  };\n\n  // **************   Initialization  ********************\n  // Draw all static painting code to background\n  var init = function(parameters) {\n    parameters = parameters || {};\n    var drawFrame = (undefined === parameters.frame ? false : parameters.frame);\n    var drawBackground = (undefined === parameters.background ? false : parameters.background);\n    var drawPointers = (undefined === parameters.pointers ? false : parameters.pointers);\n    var drawForeground = (undefined === parameters.foreground ? false : parameters.foreground);\n\n    initialized = true;\n\n    if (drawFrame && frameVisible) {\n      drawRadialFrameImage(frameContext, frameDesign, centerX, centerY, imageWidth, imageHeight);\n    }\n\n    if (drawBackground && backgroundVisible) {\n      // Create background in background buffer (backgroundBuffer)\n      drawRadialBackgroundImage(backgroundContext, backgroundColor, centerX, centerY, imageWidth, imageHeight);\n\n      // Create custom layer in background buffer (backgroundBuffer)\n      drawRadialCustomImage(backgroundContext, customLayer, centerX, centerY, imageWidth, imageHeight);\n\n      drawTickmarksImage(backgroundContext, pointerType);\n    }\n\n    if (drawPointers) {\n      drawHourPointer(hourContext, pointerType);\n      drawMinutePointer(minuteContext, pointerType);\n      drawSecondPointer(secondContext, pointerType);\n    }\n\n    if (drawForeground && foregroundVisible) {\n      drawTopKnob(foregroundContext, pointerType);\n      drawRadialForegroundImage(foregroundContext, foregroundType, imageWidth, imageHeight, false);\n    }\n  };\n\n  var resetBuffers = function(buffers) {\n    buffers = buffers || {};\n    var resetFrame = (undefined === buffers.frame ? false : buffers.frame);\n    var resetBackground = (undefined === buffers.background ? false : buffers.background);\n    var resetPointers = (undefined === buffers.pointers ? false : buffers.pointers);\n    var resetForeground = (undefined === buffers.foreground ? false : buffers.foreground);\n\n    if (resetFrame) {\n      frameBuffer.width = size;\n      frameBuffer.height = size;\n      frameContext = frameBuffer.getContext('2d');\n    }\n\n    if (resetBackground) {\n      backgroundBuffer.width = size;\n      backgroundBuffer.height = size;\n      backgroundContext = backgroundBuffer.getContext('2d');\n    }\n\n    if (resetPointers) {\n      hourBuffer.width = size;\n      hourBuffer.height = size;\n      hourContext = hourBuffer.getContext('2d');\n\n      minuteBuffer.width = size;\n      minuteBuffer.height = size;\n      minuteContext = minuteBuffer.getContext('2d');\n\n      secondBuffer.width = size;\n      secondBuffer.height = size;\n      secondContext = secondBuffer.getContext('2d');\n    }\n\n    if (resetForeground) {\n      foregroundBuffer.width = size;\n      foregroundBuffer.height = size;\n      foregroundContext = foregroundBuffer.getContext('2d');\n    }\n  };\n\n  //************************************ Public methods **************************************\n  this.getAutomatic = function() {\n    return isAutomatic;\n  };\n\n  this.setAutomatic = function(newValue) {\n    newValue = !!newValue;\n    if (isAutomatic && !newValue) {\n      // stop the clock!\n      clearTimeout(tickTimer);\n      isAutomatic = newValue;\n    } else if (!isAutomatic && newValue) {\n      // start the clock\n      isAutomatic = newValue;\n      tickTock();\n    }\n    return this;\n  };\n\n  this.getHour = function() {\n    return hour;\n  };\n\n  this.setHour = function(newValue) {\n    newValue = parseInt(newValue, 10) % 12;\n    if (hour !== newValue) {\n      hour = newValue;\n      calculateAngles(hour, minute, second);\n      this.repaint();\n    }\n    return this;\n  };\n\n  this.getMinute = function() {\n    return minute;\n  };\n\n  this.setMinute = function(newValue) {\n    newValue = parseInt(newValue, 10) % 60;\n    if (minute !== newValue) {\n      minute = newValue;\n      calculateAngles(hour, minute, second);\n      this.repaint();\n    }\n    return this;\n  };\n\n  this.getSecond = function() {\n    return second;\n  };\n\n  this.setSecond = function(newValue) {\n    newValue = parseInt(newValue, 10) % 60;\n    if (second !== newValue) {\n      second = newValue;\n      calculateAngles(hour, minute, second);\n      this.repaint();\n    }\n    return this;\n  };\n\n  this.getTimeZoneOffsetHour = function() {\n    return timeZoneOffsetHour;\n  };\n\n  this.setTimeZoneOffsetHour = function(newValue) {\n    timeZoneOffsetHour = parseInt(newValue, 10);\n    this.repaint();\n    return this;\n  };\n\n  this.getTimeZoneOffsetMinute = function() {\n    return timeZoneOffsetMinute;\n  };\n\n  this.setTimeZoneOffsetMinute = function(newValue) {\n    timeZoneOffsetMinute = parseInt(newValue, 10);\n    this.repaint();\n    return this;\n  };\n\n  this.getSecondPointerVisible = function() {\n    return secondPointerVisible;\n  };\n\n  this.setSecondPointerVisible = function(newValue) {\n    secondPointerVisible = !!newValue;\n    this.repaint();\n    return this;\n  };\n\n  this.getSecondMovesContinuous = function() {\n    return secondMovesContinuous;\n  };\n\n  this.setSecondMovesContinuous = function(newValue) {\n    secondMovesContinuous = !!newValue;\n    tickInterval = (secondMovesContinuous ? 100 : 1000);\n    tickInterval = (secondPointerVisible ? tickInterval : 100);\n    return this;\n  };\n\n  this.setFrameDesign = function(newFrameDesign) {\n    resetBuffers({\n      frame: true\n    });\n    frameDesign = newFrameDesign;\n    init({\n      frame: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setBackgroundColor = function(newBackgroundColor) {\n    resetBuffers({\n      frame: true,\n      background: true\n    });\n    backgroundColor = newBackgroundColor;\n    init({\n      frame: true,\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setForegroundType = function(newForegroundType) {\n    resetBuffers({\n      foreground: true\n    });\n    foregroundType = newForegroundType;\n    init({\n      foreground: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setPointerType = function(newPointerType) {\n    resetBuffers({\n      background: true,\n      foreground: true,\n      pointers: true\n    });\n    pointerType = newPointerType;\n    if (pointerType.type === 'type1') {\n      pointerColor = ColorDef.GRAY;\n      backgroundColor = BackgroundColor.ANTHRACITE;\n    } else {\n      pointerColor = ColorDef.BLACK;\n      backgroundColor = BackgroundColor.LIGHT_GRAY;\n    }\n    init({\n      background: true,\n      foreground: true,\n      pointers: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setPointerColor = function(newPointerColor) {\n    resetBuffers({\n      pointers: true\n    });\n    pointerColor = newPointerColor;\n    init({\n      pointers: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.repaint = function() {\n    if (!initialized) {\n      init({\n        frame: true,\n        background: true,\n        pointers: true,\n        foreground: true\n      });\n    }\n\n    //mainCtx.save();\n    mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height);\n\n    // Draw frame\n    if (frameVisible) {\n      mainCtx.drawImage(frameBuffer, 0, 0);\n    }\n\n    // Draw buffered image to visible canvas\n    if (backgroundVisible) {\n      mainCtx.drawImage(backgroundBuffer, 0, 0);\n    }\n\n    // have to draw to a rotated temporary image area so we can translate in\n    // absolute x, y values when drawing to main context\n    var shadowOffset = imageWidth * 0.006;\n\n    // draw hour pointer\n    // Define rotation center\n    mainCtx.save();\n    mainCtx.translate(centerX, centerY);\n    mainCtx.rotate(hourPointerAngle);\n    mainCtx.translate(-centerX, -centerY);\n    // Set the pointer shadow params\n    mainCtx.shadowColor = 'rgba(0, 0, 0, 0.8)';\n    mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset;\n    mainCtx.shadowBlur = shadowOffset * 2;\n    // Draw the pointer\n    mainCtx.drawImage(hourBuffer, 0, 0);\n\n    // draw minute pointer\n    // Define rotation center\n    mainCtx.translate(centerX, centerY);\n    mainCtx.rotate(minutePointerAngle - hourPointerAngle);\n    mainCtx.translate(-centerX, -centerY);\n    mainCtx.drawImage(minuteBuffer, 0, 0);\n    mainCtx.restore();\n\n    if (pointerType.type === 'type1') {\n      drawKnob(mainCtx);\n    }\n\n    if (secondPointerVisible) {\n      // draw second pointer\n      // Define rotation center\n      mainCtx.save();\n      mainCtx.translate(centerX, centerY);\n      mainCtx.rotate(secondPointerAngle);\n      mainCtx.translate(-centerX, -centerY);\n      // Set the pointer shadow params\n      mainCtx.shadowColor = 'rgba(0, 0, 0, 0.8)';\n      mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset;\n      mainCtx.shadowBlur = shadowOffset * 2;\n      // Draw the pointer\n      mainCtx.drawImage(secondBuffer, 0, 0);\n      mainCtx.restore();\n    }\n\n    // Draw foreground\n    if (foregroundVisible) {\n      mainCtx.drawImage(foregroundBuffer, 0, 0);\n    }\n  };\n\n  // Visualize the component\n  tickTock();\n\n  return this;\n};\n\nexport default clock;\n","\nimport {\nRgbaColor, \nGradientWrapper, \ngetCanvasContext,\n} from \"./tools\";\n\n\nvar battery = function(canvas, parameters) {\n  parameters = parameters || {};\n  var size = (undefined === parameters.size ? 0 : parameters.size),\n    value = (undefined === parameters.value ? 50 : parameters.value);\n\n  // Get the canvas context and clear it\n  var mainCtx = getCanvasContext(canvas);\n\n  // Has a size been specified?\n  if (size === 0) {\n    size = mainCtx.canvas.width;\n  }\n\n  var imageWidth = size;\n  var imageHeight = Math.ceil(size * 0.45);\n\n  // Set the size - also clears the canvas\n  mainCtx.canvas.width = imageWidth;\n  mainCtx.canvas.height = imageHeight;\n\n  var createBatteryImage = function(ctx, imageWidth, imageHeight, value) {\n    var grad;\n\n    // Background\n    ctx.beginPath();\n    ctx.moveTo(imageWidth * 0.025, imageHeight * 0.055555);\n    ctx.lineTo(imageWidth * 0.9, imageHeight * 0.055555);\n    ctx.lineTo(imageWidth * 0.9, imageHeight * 0.944444);\n    ctx.lineTo(imageWidth * 0.025, imageHeight * 0.944444);\n    ctx.lineTo(imageWidth * 0.025, imageHeight * 0.055555);\n    ctx.closePath();\n    //\n    ctx.beginPath();\n    ctx.moveTo(imageWidth * 0.925, 0);\n    ctx.lineTo(0, 0);\n    ctx.lineTo(0, imageHeight);\n    ctx.lineTo(imageWidth * 0.925, imageHeight);\n    ctx.lineTo(imageWidth * 0.925, imageHeight * 0.722222);\n    ctx.bezierCurveTo(imageWidth * 0.925, imageHeight * 0.722222, imageWidth * 0.975, imageHeight * 0.722222, imageWidth * 0.975, imageHeight * 0.722222);\n    ctx.bezierCurveTo(imageWidth, imageHeight * 0.722222, imageWidth, imageHeight * 0.666666, imageWidth, imageHeight * 0.666666);\n    ctx.bezierCurveTo(imageWidth, imageHeight * 0.666666, imageWidth, imageHeight * 0.333333, imageWidth, imageHeight * 0.333333);\n    ctx.bezierCurveTo(imageWidth, imageHeight * 0.333333, imageWidth, imageHeight * 0.277777, imageWidth * 0.975, imageHeight * 0.277777);\n    ctx.bezierCurveTo(imageWidth * 0.975, imageHeight * 0.277777, imageWidth * 0.925, imageHeight * 0.277777, imageWidth * 0.925, imageHeight * 0.277777);\n    ctx.lineTo(imageWidth * 0.925, 0);\n    ctx.closePath();\n    //\n    grad = ctx.createLinearGradient(0, 0, 0, imageHeight);\n    grad.addColorStop(0, '#ffffff');\n    grad.addColorStop(1, '#7e7e7e');\n    ctx.fillStyle = grad;\n    ctx.fill();\n\n    // Main\n    ctx.beginPath();\n    var end = Math.max(imageWidth * 0.875 * (value / 100), Math.ceil(imageWidth * 0.01));\n    ctx.rect(imageWidth * 0.025, imageWidth * 0.025, end, imageHeight * 0.888888);\n    ctx.closePath();\n    var BORDER_FRACTIONS = [0, 0.4, 1];\n    var BORDER_COLORS = [new RgbaColor(177, 25, 2, 1), // 0xB11902\n      new RgbaColor(219, 167, 21, 1), // 0xDBA715\n      new RgbaColor(121, 162, 75, 1) // 0x79A24B\n    ];\n    var border = new GradientWrapper(0, 100, BORDER_FRACTIONS, BORDER_COLORS);\n    ctx.fillStyle = border.getColorAt(value / 100).getRgbColor();\n    ctx.fill();\n    ctx.beginPath();\n    end = Math.max(end - imageWidth * 0.05, 0);\n    ctx.rect(imageWidth * 0.05, imageWidth * 0.05, end, imageHeight * 0.777777);\n    ctx.closePath();\n    var LIQUID_COLORS_DARK = [new RgbaColor(198, 39, 5, 1), // 0xC62705\n      new RgbaColor(228, 189, 32, 1), // 0xE4BD20\n      new RgbaColor(163, 216, 102, 1) // 0xA3D866\n    ];\n\n    var LIQUID_COLORS_LIGHT = [new RgbaColor(246, 121, 48, 1), // 0xF67930\n      new RgbaColor(246, 244, 157, 1), // 0xF6F49D\n      new RgbaColor(223, 233, 86, 1) // 0xDFE956\n    ];\n    var LIQUID_GRADIENT_FRACTIONS = [0, 0.4, 1];\n    var liquidDark = new GradientWrapper(0, 100, LIQUID_GRADIENT_FRACTIONS, LIQUID_COLORS_DARK);\n    var liquidLight = new GradientWrapper(0, 100, LIQUID_GRADIENT_FRACTIONS, LIQUID_COLORS_LIGHT);\n    grad = ctx.createLinearGradient(imageWidth * 0.05, 0, imageWidth * 0.875, 0);\n    grad.addColorStop(0, liquidDark.getColorAt(value / 100).getRgbColor());\n    grad.addColorStop(0.5, liquidLight.getColorAt(value / 100).getRgbColor());\n    grad.addColorStop(1, liquidDark.getColorAt(value / 100).getRgbColor());\n    ctx.fillStyle = grad;\n    ctx.fill();\n\n    // Foreground\n    ctx.beginPath();\n    ctx.rect(imageWidth * 0.025, imageWidth * 0.025, imageWidth * 0.875, imageHeight * 0.444444);\n    ctx.closePath();\n    grad = ctx.createLinearGradient(imageWidth * 0.025, imageWidth * 0.025, imageWidth * 0.875, imageHeight * 0.444444);\n    grad.addColorStop(0, 'rgba(255, 255, 255, 0)');\n    grad.addColorStop(1, 'rgba(255, 255, 255, 0.8)');\n    ctx.fillStyle = grad;\n    ctx.fill();\n  };\n\n  // **************   Public methods  ********************\n  this.setValue = function(newValue) {\n    newValue = (newValue < 0 ? 0 : (newValue > 100 ? 100 : newValue));\n    if (value !== newValue) {\n      value = newValue;\n      this.repaint();\n    }\n    return this;\n  };\n\n  this.getValue = function() {\n    return value;\n  };\n\n  this.repaint = function() {\n    mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height);\n    createBatteryImage(mainCtx, imageWidth, imageHeight, value);\n  };\n\n  // Visualize the component\n  this.repaint();\n\n  return this;\n};\n\nexport default battery;","\nimport drawRadialFrameImage from \"./drawRadialFrameImage\";\nimport drawRadialBackgroundImage from \"./drawRadialBackgroundImage\";\nimport drawRadialCustomImage from \"./drawRadialCustomImage\";\nimport drawRadialForegroundImage from \"./drawRadialForegroundImage\";\nimport {\ncreateBuffer, \ngetCanvasContext,\nTWO_PI,\nPI,\nRAD_FACTOR,\nstdFontName,\n} from \"./tools\";\n\nimport {\n  backgroundColor as BackgroundColor,\n  lcdColor as LcdColor,\n  color as ColorDef,\n  ledColor as LedColor,\n  gaugeType as GaugeType,\n  orientation as Orientation,\n  knobType as KnobType,\n  knobStyle as KnobStyle,\n  frameDesign as FrameDesign,\n  pointerType as PointerType,\n  foregroundType as ForegroundType,\n  labelNumberFormat as LabelNumberFormat,\n  tickLabelOrientation as TickLabelOrientation,\n  trendState as TrendState,\n  } from \"./definitions\";\n\nvar stopwatch = function(canvas, parameters) {\n  parameters = parameters || {};\n  var size = (undefined === parameters.size ? 0 : parameters.size),\n    frameDesign = (undefined === parameters.frameDesign ? FrameDesign.METAL : parameters.frameDesign),\n    frameVisible = (undefined === parameters.frameVisible ? true : parameters.frameVisible),\n    pointerColor = (undefined === parameters.pointerColor ? ColorDef.BLACK : parameters.pointerColor),\n    backgroundColor = (undefined === parameters.backgroundColor ? BackgroundColor.LIGHT_GRAY : parameters.backgroundColor),\n    backgroundVisible = (undefined === parameters.backgroundVisible ? true : parameters.backgroundVisible),\n    foregroundType = (undefined === parameters.foregroundType ? ForegroundType.TYPE1 : parameters.foregroundType),\n    foregroundVisible = (undefined === parameters.foregroundVisible ? true : parameters.foregroundVisible),\n    customLayer = (undefined === parameters.customLayer ? null : parameters.customLayer),\n\n    minutePointerAngle = 0,\n    secondPointerAngle = 0,\n    tickTimer,\n    ANGLE_STEP = 6,\n    self = this,\n\n    start = 0,\n    currentMilliSeconds = 0,\n    minutes = 0,\n    seconds = 0,\n    milliSeconds = 0,\n    running = false,\n    lap = false,\n    // Get the canvas context\n    mainCtx = getCanvasContext(canvas),\n\n    imageWidth, imageHeight,\n    centerX, centerY,\n\n    smallPointerSize, smallPointerX_Offset, smallPointerY_Offset,\n\n    initialized = false,\n\n    // Buffer for the frame\n    frameBuffer, frameContext,\n\n    // Buffer for static background painting code\n    backgroundBuffer, backgroundContext,\n\n    // Buffer for small pointer image painting code\n    smallPointerBuffer, smallPointerContext,\n\n    // Buffer for large pointer image painting code\n    largePointerBuffer, largePointerContext,\n\n    // Buffer for static foreground painting code\n    foregroundBuffer, foregroundContext,\n\n    drawTickmarksImage = function(ctx, width, range, text_scale, text_dist_factor, x_offset, y_offset) {\n      var STD_FONT_SIZE = text_scale * width,\n        STD_FONT = STD_FONT_SIZE + 'px ' + stdFontName,\n        TEXT_WIDTH = width * 0.15,\n        THIN_STROKE = 0.5,\n        MEDIUM_STROKE = 1,\n        THICK_STROKE = 1.5,\n        TEXT_DISTANCE = text_dist_factor * width,\n        MIN_LENGTH = Math.round(0.025 * width),\n        MED_LENGTH = Math.round(0.035 * width),\n        MAX_LENGTH = Math.round(0.045 * width),\n        TEXT_COLOR = backgroundColor.labelColor.getRgbaColor(),\n        TICK_COLOR = backgroundColor.labelColor.getRgbaColor(),\n        CENTER = width / 2,\n        // Create the ticks itself\n        RADIUS = width * 0.4,\n        innerPoint, outerPoint, textPoint,\n        counter = 0,\n        numberCounter = 0,\n        tickCounter = 0,\n        valueCounter, // value for the tickmarks\n        sinValue = 0,\n        cosValue = 0,\n        alpha, // angle for the tickmarks\n        ALPHA_START = -PI,\n        ANGLE_STEPSIZE = TWO_PI / (range);\n\n      ctx.width = ctx.height = width;\n      ctx.save();\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.font = STD_FONT;\n\n      for (alpha = ALPHA_START, valueCounter = 0; valueCounter <= range + 1; alpha -= ANGLE_STEPSIZE * 0.1, valueCounter += 0.1) {\n        ctx.lineWidth = THIN_STROKE;\n        sinValue = Math.sin(alpha);\n        cosValue = Math.cos(alpha);\n\n        // tickmark every 2 units\n        if (counter % 2 === 0) {\n          //ctx.lineWidth = THIN_STROKE;\n          innerPoint = [CENTER + (RADIUS - MIN_LENGTH) * sinValue + x_offset, CENTER + (RADIUS - MIN_LENGTH) * cosValue + y_offset];\n          outerPoint = [CENTER + RADIUS * sinValue + x_offset, CENTER + RADIUS * cosValue + y_offset];\n          // Draw ticks\n          ctx.strokeStyle = TICK_COLOR;\n          ctx.beginPath();\n          ctx.moveTo(innerPoint[0], innerPoint[1]);\n          ctx.lineTo(outerPoint[0], outerPoint[1]);\n          ctx.closePath();\n          ctx.stroke();\n        }\n\n        // Different tickmark every 10 units\n        if (counter === 10 || counter === 0) {\n          ctx.fillStyle = TEXT_COLOR;\n          ctx.lineWidth = MEDIUM_STROKE;\n          outerPoint = [CENTER + RADIUS * sinValue + x_offset, CENTER + RADIUS * cosValue + y_offset];\n          textPoint = [CENTER + (RADIUS - TEXT_DISTANCE) * sinValue + x_offset, CENTER + (RADIUS - TEXT_DISTANCE) * cosValue + y_offset];\n\n          // Draw text\n          if (numberCounter === 5) {\n            if (valueCounter !== range) {\n              if (Math.round(valueCounter) !== 60) {\n                ctx.fillText(Math.round(valueCounter), textPoint[0], textPoint[1], TEXT_WIDTH);\n              }\n            }\n            ctx.lineWidth = THICK_STROKE;\n            innerPoint = [CENTER + (RADIUS - MAX_LENGTH) * sinValue + x_offset, CENTER + (RADIUS - MAX_LENGTH) * cosValue + y_offset];\n            numberCounter = 0;\n          } else {\n            ctx.lineWidth = MEDIUM_STROKE;\n            innerPoint = [CENTER + (RADIUS - MED_LENGTH) * sinValue + x_offset, CENTER + (RADIUS - MED_LENGTH) * cosValue + y_offset];\n          }\n\n          // Draw ticks\n          ctx.strokeStyle = TICK_COLOR;\n          ctx.beginPath();\n          ctx.moveTo(innerPoint[0], innerPoint[1]);\n          ctx.lineTo(outerPoint[0], outerPoint[1]);\n          ctx.closePath();\n          ctx.stroke();\n\n          counter = 0;\n          tickCounter++;\n          numberCounter++;\n        }\n        counter++;\n      }\n      ctx.restore();\n    },\n\n    drawLargePointer = function(ctx) {\n      var grad, radius;\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.moveTo(imageWidth * 0.509345, imageWidth * 0.457943);\n      ctx.lineTo(imageWidth * 0.5, imageWidth * 0.102803);\n      ctx.lineTo(imageWidth * 0.490654, imageWidth * 0.457943);\n      ctx.bezierCurveTo(imageWidth * 0.490654, imageWidth * 0.457943, imageWidth * 0.490654, imageWidth * 0.457943, imageWidth * 0.490654, imageWidth * 0.457943);\n      ctx.bezierCurveTo(imageWidth * 0.471962, imageWidth * 0.462616, imageWidth * 0.457943, imageWidth * 0.481308, imageWidth * 0.457943, imageWidth * 0.5);\n      ctx.bezierCurveTo(imageWidth * 0.457943, imageWidth * 0.518691, imageWidth * 0.471962, imageWidth * 0.537383, imageWidth * 0.490654, imageWidth * 0.542056);\n      ctx.bezierCurveTo(imageWidth * 0.490654, imageWidth * 0.542056, imageWidth * 0.490654, imageWidth * 0.542056, imageWidth * 0.490654, imageWidth * 0.542056);\n      ctx.lineTo(imageWidth * 0.490654, imageWidth * 0.621495);\n      ctx.lineTo(imageWidth * 0.509345, imageWidth * 0.621495);\n      ctx.lineTo(imageWidth * 0.509345, imageWidth * 0.542056);\n      ctx.bezierCurveTo(imageWidth * 0.509345, imageWidth * 0.542056, imageWidth * 0.509345, imageWidth * 0.542056, imageWidth * 0.509345, imageWidth * 0.542056);\n      ctx.bezierCurveTo(imageWidth * 0.528037, imageWidth * 0.537383, imageWidth * 0.542056, imageWidth * 0.518691, imageWidth * 0.542056, imageWidth * 0.5);\n      ctx.bezierCurveTo(imageWidth * 0.542056, imageWidth * 0.481308, imageWidth * 0.528037, imageWidth * 0.462616, imageWidth * 0.509345, imageWidth * 0.457943);\n      ctx.bezierCurveTo(imageWidth * 0.509345, imageWidth * 0.457943, imageWidth * 0.509345, imageWidth * 0.457943, imageWidth * 0.509345, imageWidth * 0.457943);\n      ctx.closePath();\n      grad = ctx.createLinearGradient(0, 0, 0, imageWidth * 0.621495);\n      grad.addColorStop(0, pointerColor.medium.getRgbaColor());\n      grad.addColorStop(0.388888, pointerColor.medium.getRgbaColor());\n      grad.addColorStop(0.5, pointerColor.light.getRgbaColor());\n      grad.addColorStop(0.611111, pointerColor.medium.getRgbaColor());\n      grad.addColorStop(1, pointerColor.medium.getRgbaColor());\n      ctx.fillStyle = grad;\n      ctx.strokeStyle = pointerColor.dark.getRgbaColor();\n      ctx.fill();\n      ctx.stroke();\n      // Draw the rings\n      ctx.beginPath();\n      radius = imageWidth * 0.065420 / 2;\n      ctx.arc(centerX, centerY, radius, 0, TWO_PI);\n      grad = ctx.createLinearGradient(centerX - radius, centerX + radius, 0, centerX + radius);\n      grad.addColorStop(0, '#e6b35c');\n      grad.addColorStop(0.01, '#e6b35c');\n      grad.addColorStop(0.99, '#c48200');\n      grad.addColorStop(1, '#c48200');\n      ctx.fillStyle = grad;\n      ctx.closePath();\n      ctx.fill();\n      ctx.beginPath();\n      radius = imageWidth * 0.046728 / 2;\n      ctx.arc(centerX, centerY, radius, 0, TWO_PI);\n      grad = ctx.createRadialGradient(centerX, centerX, 0, centerX, centerX, radius);\n      grad.addColorStop(0, '#c5c5c5');\n      grad.addColorStop(0.19, '#c5c5c5');\n      grad.addColorStop(0.22, '#000000');\n      grad.addColorStop(0.8, '#000000');\n      grad.addColorStop(0.99, '#707070');\n      grad.addColorStop(1, '#707070');\n      ctx.fillStyle = grad;\n      ctx.closePath();\n      ctx.fill();\n      ctx.restore();\n    },\n\n    drawSmallPointer = function(ctx) {\n      var grad, radius;\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.moveTo(imageWidth * 0.476635, imageWidth * 0.313084);\n      ctx.bezierCurveTo(imageWidth * 0.476635, imageWidth * 0.322429, imageWidth * 0.485981, imageWidth * 0.331775, imageWidth * 0.495327, imageWidth * 0.336448);\n      ctx.bezierCurveTo(imageWidth * 0.495327, imageWidth * 0.336448, imageWidth * 0.495327, imageWidth * 0.350467, imageWidth * 0.495327, imageWidth * 0.350467);\n      ctx.lineTo(imageWidth * 0.504672, imageWidth * 0.350467);\n      ctx.bezierCurveTo(imageWidth * 0.504672, imageWidth * 0.350467, imageWidth * 0.504672, imageWidth * 0.336448, imageWidth * 0.504672, imageWidth * 0.336448);\n      ctx.bezierCurveTo(imageWidth * 0.514018, imageWidth * 0.331775, imageWidth * 0.523364, imageWidth * 0.322429, imageWidth * 0.523364, imageWidth * 0.313084);\n      ctx.bezierCurveTo(imageWidth * 0.523364, imageWidth * 0.303738, imageWidth * 0.514018, imageWidth * 0.294392, imageWidth * 0.504672, imageWidth * 0.289719);\n      ctx.bezierCurveTo(imageWidth * 0.504672, imageWidth * 0.289719, imageWidth * 0.5, imageWidth * 0.200934, imageWidth * 0.5, imageWidth * 0.200934);\n      ctx.bezierCurveTo(imageWidth * 0.5, imageWidth * 0.200934, imageWidth * 0.495327, imageWidth * 0.289719, imageWidth * 0.495327, imageWidth * 0.289719);\n      ctx.bezierCurveTo(imageWidth * 0.485981, imageWidth * 0.294392, imageWidth * 0.476635, imageWidth * 0.303738, imageWidth * 0.476635, imageWidth * 0.313084);\n      ctx.closePath();\n      grad = ctx.createLinearGradient(0, 0, imageWidth, 0);\n      grad.addColorStop(0, pointerColor.medium.getRgbaColor());\n      grad.addColorStop(0.388888, pointerColor.medium.getRgbaColor());\n      grad.addColorStop(0.5, pointerColor.light.getRgbaColor());\n      grad.addColorStop(0.611111, pointerColor.medium.getRgbaColor());\n      grad.addColorStop(1, pointerColor.medium.getRgbaColor());\n      ctx.fillStyle = grad;\n      ctx.strokeStyle = pointerColor.dark.getRgbaColor();\n      ctx.fill();\n      ctx.stroke();\n      // Draw the rings\n      ctx.beginPath();\n      radius = imageWidth * 0.037383 / 2;\n      ctx.arc(centerX, smallPointerY_Offset + smallPointerSize / 2, radius, 0, TWO_PI);\n      ctx.fillStyle = '#C48200';\n      ctx.closePath();\n      ctx.fill();\n      ctx.beginPath();\n      radius = imageWidth * 0.028037 / 2;\n      ctx.arc(centerX, smallPointerY_Offset + smallPointerSize / 2, radius, 0, TWO_PI);\n      ctx.fillStyle = '#999999';\n      ctx.closePath();\n      ctx.fill();\n      ctx.beginPath();\n      radius = imageWidth * 0.018691 / 2;\n      ctx.arc(centerX, smallPointerY_Offset + smallPointerSize / 2, radius, 0, TWO_PI);\n      ctx.fillStyle = '#000000';\n      ctx.closePath();\n      ctx.fill();\n      ctx.restore();\n    },\n\n    calculateAngles = function() {\n      currentMilliSeconds = new Date().getTime() - start;\n      secondPointerAngle = (currentMilliSeconds * ANGLE_STEP / 1000);\n      minutePointerAngle = (secondPointerAngle % 10800) / 30;\n\n      minutes = (currentMilliSeconds / 60000) % 30;\n      seconds = (currentMilliSeconds / 1000) % 60;\n      milliSeconds = (currentMilliSeconds) % 1000;\n    },\n\n    init = function(parameters) {\n      parameters = parameters || {};\n      var drawFrame = (undefined === parameters.frame ? false : parameters.frame),\n        drawBackground = (undefined === parameters.background ? false : parameters.background),\n        drawPointers = (undefined === parameters.pointers ? false : parameters.pointers),\n        drawForeground = (undefined === parameters.foreground ? false : parameters.foreground);\n\n      initialized = true;\n\n      if (drawFrame && frameVisible) {\n        drawRadialFrameImage(frameContext, frameDesign, centerX, centerY, imageWidth, imageHeight);\n      }\n\n      if (drawBackground && backgroundVisible) {\n        // Create background in background buffer (backgroundBuffer)\n        drawRadialBackgroundImage(backgroundContext, backgroundColor, centerX, centerY, imageWidth, imageHeight);\n\n        // Create custom layer in background buffer (backgroundBuffer)\n        drawRadialCustomImage(backgroundContext, customLayer, centerX, centerY, imageWidth, imageHeight);\n\n        drawTickmarksImage(backgroundContext, imageWidth, 60, 0.075, 0.1, 0, 0);\n        drawTickmarksImage(backgroundContext, smallPointerSize, 30, 0.095, 0.13, smallPointerX_Offset, smallPointerY_Offset);\n      }\n      if (drawPointers) {\n        drawLargePointer(largePointerContext);\n        drawSmallPointer(smallPointerContext);\n      }\n\n      if (drawForeground && foregroundVisible) {\n        drawRadialForegroundImage(foregroundContext, foregroundType, imageWidth, imageHeight, false);\n      }\n    },\n\n    resetBuffers = function(buffers) {\n      buffers = buffers || {};\n      var resetFrame = (undefined === buffers.frame ? false : buffers.frame),\n        resetBackground = (undefined === buffers.background ? false : buffers.background),\n        resetPointers = (undefined === buffers.pointers ? false : buffers.pointers),\n        resetForeground = (undefined === buffers.foreground ? false : buffers.foreground);\n\n      if (resetFrame) {\n        frameBuffer.width = size;\n        frameBuffer.height = size;\n        frameContext = frameBuffer.getContext('2d');\n      }\n\n      if (resetBackground) {\n        backgroundBuffer.width = size;\n        backgroundBuffer.height = size;\n        backgroundContext = backgroundBuffer.getContext('2d');\n      }\n\n      if (resetPointers) {\n        smallPointerBuffer.width = size;\n        smallPointerBuffer.height = size;\n        smallPointerContext = smallPointerBuffer.getContext('2d');\n\n        largePointerBuffer.width = size;\n        largePointerBuffer.height = size;\n        largePointerContext = largePointerBuffer.getContext('2d');\n      }\n\n      if (resetForeground) {\n        foregroundBuffer.width = size;\n        foregroundBuffer.height = size;\n        foregroundContext = foregroundBuffer.getContext('2d');\n      }\n    },\n\n    tickTock = function() {\n      if (!lap) {\n        calculateAngles();\n        self.repaint();\n      }\n      if (running) {\n        tickTimer = setTimeout(tickTock, 200);\n      }\n\n    };\n\n  //************************************ Public methods **************************************\n  // Returns true if the stopwatch is running\n  this.isRunning = function() {\n    return running;\n  };\n\n  // Starts the stopwatch\n  this.start = function() {\n    if (!running) {\n      running = true;\n      start = new Date().getTime() - currentMilliSeconds;\n      tickTock();\n    }\n    return this;\n  };\n\n  // Stops the stopwatch\n  this.stop = function() {\n    if (running) {\n      running = false;\n      clearTimeout(tickTimer);\n      //calculateAngles();\n    }\n    if (lap) {\n      lap = false;\n      calculateAngles();\n      this.repaint();\n    }\n    return this;\n  };\n\n  // Resets the stopwatch\n  this.reset = function() {\n    if (running) {\n      running = false;\n      lap = false;\n      clearTimeout(tickTimer);\n    }\n    start = new Date().getTime();\n    calculateAngles();\n    this.repaint();\n    return this;\n  };\n\n  // Laptimer, stop/restart stopwatch\n  this.lap = function() {\n    if (running && !lap) {\n      lap = true;\n    } else if (lap) {\n      lap = false;\n    }\n    return this;\n  };\n\n  this.getMeasuredTime = function() {\n    return (minutes + ':' + seconds + ':' + milliSeconds);\n  };\n\n  this.setFrameDesign = function(newFrameDesign) {\n    resetBuffers({\n      frame: true\n    });\n    frameDesign = newFrameDesign;\n    init({\n      frame: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setBackgroundColor = function(newBackgroundColor) {\n    resetBuffers({\n      background: true\n    });\n    backgroundColor = newBackgroundColor;\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setForegroundType = function(newForegroundType) {\n    resetBuffers({\n      foreground: true\n    });\n    foregroundType = newForegroundType;\n    init({\n      foreground: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setPointerColor = function(newPointerColor) {\n    resetBuffers({\n      pointers: true\n    });\n    pointerColor = newPointerColor;\n    init({\n      pointers: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.repaint = function() {\n    if (!initialized) {\n      init({\n        frame: true,\n        background: true,\n        pointers: true,\n        foreground: true\n      });\n    }\n\n    mainCtx.clearRect(0, 0, imageWidth, imageHeight);\n\n    // Draw frame\n    if (frameVisible) {\n      mainCtx.drawImage(frameBuffer, 0, 0);\n    }\n\n    // Draw buffered image to visible canvas\n    if (backgroundVisible) {\n      mainCtx.drawImage(backgroundBuffer, 0, 0);\n    }\n\n    // have to draw to a rotated temporary image area so we can translate in\n    // absolute x, y values when drawing to main context\n    var shadowOffset = imageWidth * 0.006;\n\n    var rotationAngle = (minutePointerAngle + (2 * Math.sin(minutePointerAngle * RAD_FACTOR))) * RAD_FACTOR;\n    var secRotationAngle = (secondPointerAngle + (2 * Math.sin(secondPointerAngle * RAD_FACTOR))) * RAD_FACTOR;\n\n    // Draw the minute pointer\n    // Define rotation center\n    mainCtx.save();\n    mainCtx.translate(centerX, smallPointerY_Offset + smallPointerSize / 2);\n    mainCtx.rotate(rotationAngle);\n    mainCtx.translate(-centerX, -(smallPointerY_Offset + smallPointerSize / 2));\n    // Set the pointer shadow params\n    mainCtx.shadowColor = 'rgba(0, 0, 0, 0.8)';\n    mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset / 2;\n    mainCtx.shadowBlur = shadowOffset;\n    // Draw the pointer\n    mainCtx.drawImage(smallPointerBuffer, 0, 0);\n    mainCtx.restore();\n\n    // Draw the second pointer\n    // Define rotation center\n    mainCtx.save();\n    mainCtx.translate(centerX, centerY);\n    mainCtx.rotate(secRotationAngle);\n    mainCtx.translate(-centerX, -centerY);\n    // Set the pointer shadow params\n    mainCtx.shadowColor = 'rgba(0, 0, 0, 0.8)';\n    mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset / 2;\n    mainCtx.shadowBlur = shadowOffset;\n    // Draw the pointer\n    mainCtx.drawImage(largePointerBuffer, 0, 0);\n    // Undo the translations & shadow settings\n    mainCtx.restore();\n\n    // Draw the foreground\n    if (foregroundVisible) {\n      mainCtx.drawImage(foregroundBuffer, 0, 0);\n    }\n  };\n\n  // Has a size been specified?\n  size = (size === 0 ? Math.min(mainCtx.canvas.width, mainCtx.canvas.height) : size);\n\n  // Set the size - also clears it\n  mainCtx.canvas.width = size;\n  mainCtx.canvas.height = size;\n\n  imageWidth = size;\n  imageHeight = size;\n\n  centerX = imageWidth / 2;\n  centerY = imageHeight / 2;\n\n  smallPointerSize = 0.285 * imageWidth;\n  smallPointerX_Offset = centerX - smallPointerSize / 2;\n  smallPointerY_Offset = 0.17 * imageWidth;\n\n  // Buffer for the frame\n  frameBuffer = createBuffer(size, size);\n  frameContext = frameBuffer.getContext('2d');\n\n  // Buffer for static background painting code\n  backgroundBuffer = createBuffer(size, size);\n  backgroundContext = backgroundBuffer.getContext('2d');\n\n  // Buffer for small pointer image painting code\n  smallPointerBuffer = createBuffer(size, size);\n  smallPointerContext = smallPointerBuffer.getContext('2d');\n\n  // Buffer for large pointer image painting code\n  largePointerBuffer = createBuffer(size, size);\n  largePointerContext = largePointerBuffer.getContext('2d');\n\n  // Buffer for static foreground painting code\n  foregroundBuffer = createBuffer(size, size);\n  foregroundContext = foregroundBuffer.getContext('2d');\n\n  // Visualize the component\n  start = new Date().getTime();\n  tickTock();\n\n  return this;\n};\n\nexport default stopwatch;\n","import Tween from \"./tween.js\";\nimport drawRadialFrameImage from \"./drawRadialFrameImage\";\nimport drawRadialBackgroundImage from \"./drawRadialBackgroundImage\";\nimport drawRadialCustomImage from \"./drawRadialCustomImage\";\nimport drawRadialForegroundImage from \"./drawRadialForegroundImage\";\nimport createLcdBackgroundImage from \"./createLcdBackgroundImage\";\nimport drawTitleImage from \"./drawTitleImage\";\nimport {\ncreateBuffer,\nrequestAnimFrame, \ngetCanvasContext,\nTWO_PI,\nPI,\nlcdFontName,\nstdFontName,\n} from \"./tools\";\n\nimport {\n  backgroundColor as BackgroundColor,\n  lcdColor as LcdColor,\n  color as ColorDef,\n  ledColor as LedColor,\n  gaugeType as GaugeType,\n  orientation as Orientation,\n  knobType as KnobType,\n  knobStyle as KnobStyle,\n  frameDesign as FrameDesign,\n  pointerType as PointerType,\n  foregroundType as ForegroundType,\n  labelNumberFormat as LabelNumberFormat,\n  tickLabelOrientation as TickLabelOrientation,\n  trendState as TrendState,\n  } from \"./definitions\";\n\n\nvar altimeter = function(canvas, parameters) {\n  parameters = parameters || {};\n  // parameters\n  var size = (undefined === parameters.size ? 0 : parameters.size),\n    frameDesign = (undefined === parameters.frameDesign ? FrameDesign.METAL : parameters.frameDesign),\n    frameVisible = (undefined === parameters.frameVisible ? true : parameters.frameVisible),\n    backgroundColor = (undefined === parameters.backgroundColor ? BackgroundColor.DARK_GRAY : parameters.backgroundColor),\n    backgroundVisible = (undefined === parameters.backgroundVisible ? true : parameters.backgroundVisible),\n    titleString = (undefined === parameters.titleString ? '' : parameters.titleString),\n    unitString = (undefined === parameters.unitString ? '' : parameters.unitString),\n    unitAltPos = (undefined === parameters.unitAltPos ? false : true),\n    knobType = (undefined === parameters.knobType ? KnobType.METAL_KNOB : parameters.knobType),\n    knobStyle = (undefined === parameters.knobStyle ? KnobStyle.BLACK : parameters.knobStyle),\n    lcdColor = (undefined === parameters.lcdColor ? LcdColor.BLACK : parameters.lcdColor),\n    lcdVisible = (undefined === parameters.lcdVisible ? true : parameters.lcdVisible),\n    digitalFont = (undefined === parameters.digitalFont ? false : parameters.digitalFont),\n    foregroundType = (undefined === parameters.foregroundType ? ForegroundType.TYPE1 : parameters.foregroundType),\n    foregroundVisible = (undefined === parameters.foregroundVisible ? true : parameters.foregroundVisible),\n    customLayer = (undefined === parameters.customLayer ? null : parameters.customLayer),\n    //\n    minValue = 0,\n    maxValue = 10,\n    value = minValue,\n    value100 = 0,\n    value1000 = 0,\n    value10000 = 0,\n    angleStep100ft, angleStep1000ft, angleStep10000ft,\n    tickLabelPeriod = 1, // Draw value at every 10th tickmark\n    tween,\n    repainting = false,\n    imageWidth, imageHeight,\n    centerX, centerY,\n    stdFont,\n    mainCtx = getCanvasContext(canvas), // Get the canvas context\n    // Constants\n    TICKMARK_OFFSET = PI,\n    //\n    initialized = false,\n    // **************   Buffer creation  ********************\n    // Buffer for the frame\n    frameBuffer = createBuffer(size, size),\n    frameContext = frameBuffer.getContext('2d'),\n    // Buffer for the background\n    backgroundBuffer = createBuffer(size, size),\n    backgroundContext = backgroundBuffer.getContext('2d'),\n\n    lcdBuffer,\n\n    // Buffer for 10000ft pointer image painting code\n    pointer10000Buffer = createBuffer(size, size),\n    pointer10000Context = pointer10000Buffer.getContext('2d'),\n\n    // Buffer for 1000ft pointer image painting code\n    pointer1000Buffer = createBuffer(size, size),\n    pointer1000Context = pointer1000Buffer.getContext('2d'),\n\n    // Buffer for 100ft pointer image painting code\n    pointer100Buffer = createBuffer(size, size),\n    pointer100Context = pointer100Buffer.getContext('2d'),\n\n    // Buffer for static foreground painting code\n    foregroundBuffer = createBuffer(size, size),\n    foregroundContext = foregroundBuffer.getContext('2d');\n  // End of variables\n\n  // Get the canvas context and clear it\n  mainCtx.save();\n  // Has a size been specified?\n  size = (size === 0 ? Math.min(mainCtx.canvas.width, mainCtx.canvas.height) : size);\n\n  // Set the size\n  mainCtx.canvas.width = size;\n  mainCtx.canvas.height = size;\n\n  imageWidth = size;\n  imageHeight = size;\n\n  centerX = imageWidth / 2;\n  centerY = imageHeight / 2;\n\n  var unitStringPosY = unitAltPos ? imageHeight * 0.68 : false;\n\n\n  stdFont = Math.floor(imageWidth * 0.09) + 'px ' + stdFontName;\n\n  // **************   Image creation  ********************\n  var drawLcdText = function(value) {\n    mainCtx.save();\n    mainCtx.textAlign = 'right';\n    mainCtx.textBaseline = 'middle';\n    mainCtx.strokeStyle = lcdColor.textColor;\n    mainCtx.fillStyle = lcdColor.textColor;\n\n    if (lcdColor === LcdColor.STANDARD || lcdColor === LcdColor.STANDARD_GREEN) {\n      mainCtx.shadowColor = 'gray';\n      mainCtx.shadowOffsetX = imageWidth * 0.007;\n      mainCtx.shadowOffsetY = imageWidth * 0.007;\n      mainCtx.shadowBlur = imageWidth * 0.009;\n    }\n    if (digitalFont) {\n      mainCtx.font = Math.floor(imageWidth * 0.075) + 'px ' + lcdFontName;\n    } else {\n      mainCtx.font = Math.floor(imageWidth * 0.075) + 'px bold ' + stdFontName;\n    }\n    mainCtx.fillText(Math.round(value), (imageWidth + (imageWidth * 0.4)) / 2 - 4, imageWidth * 0.607, imageWidth * 0.4);\n    mainCtx.restore();\n  };\n\n  var drawTickmarksImage = function(ctx, freeAreaAngle, offset, minVal, maxVal, angleStep) {\n    var MEDIUM_STROKE = Math.max(imageWidth * 0.012, 2),\n      THIN_STROKE = Math.max(imageWidth * 0.007, 1.5),\n      TEXT_DISTANCE = imageWidth * 0.13,\n      MED_LENGTH = imageWidth * 0.05,\n      MAX_LENGTH = imageWidth * 0.07,\n      RADIUS = imageWidth * 0.4,\n      counter = 0,\n      tickCounter = 0,\n      sinValue = 0,\n      cosValue = 0,\n      alpha, // angle for tickmarks\n      valueCounter, // value for tickmarks\n      ALPHA_START = -offset - (freeAreaAngle / 2);\n\n    ctx.save();\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.font = stdFont;\n    ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor();\n    ctx.fillStyle = backgroundColor.labelColor.getRgbaColor();\n\n    for (alpha = ALPHA_START, valueCounter = 0; valueCounter <= 10; alpha -= angleStep * 0.1, valueCounter += 0.1) {\n      sinValue = Math.sin(alpha);\n      cosValue = Math.cos(alpha);\n\n      // tickmark every 2 units\n      if (counter % 2 === 0) {\n        ctx.lineWidth = THIN_STROKE;\n        // Draw ticks\n        ctx.beginPath();\n        ctx.moveTo(centerX + (RADIUS - MED_LENGTH) * sinValue, centerY + (RADIUS - MED_LENGTH) * cosValue);\n        ctx.lineTo(centerX + RADIUS * sinValue, centerY + RADIUS * cosValue);\n        ctx.closePath();\n        ctx.stroke();\n      }\n\n      // Different tickmark every 10 units\n      if (counter === 10 || counter === 0) {\n        ctx.lineWidth = MEDIUM_STROKE;\n\n        // if gauge is full circle, avoid painting maxValue over minValue\n        if (freeAreaAngle === 0) {\n          if (Math.round(valueCounter) !== maxValue) {\n            ctx.fillText(Math.round(valueCounter).toString(), centerX + (RADIUS - TEXT_DISTANCE) * sinValue, centerY + (RADIUS - TEXT_DISTANCE) * cosValue);\n          }\n        }\n        counter = 0;\n        tickCounter++;\n\n        // Draw ticks\n        ctx.beginPath();\n        ctx.moveTo(centerX + (RADIUS - MAX_LENGTH) * sinValue, centerY + (RADIUS - MAX_LENGTH) * cosValue);\n        ctx.lineTo(centerX + RADIUS * sinValue, centerY + RADIUS * cosValue);\n        ctx.closePath();\n        ctx.stroke();\n      }\n      counter++;\n    }\n    ctx.restore();\n  };\n\n  var draw100ftPointer = function(ctx, shadow) {\n    var grad;\n\n    if (shadow) {\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\n      ctx.strokeStyle = 'rgba(0, 0, 0, 0.5)';\n    } else {\n      grad = ctx.createLinearGradient(0, imageHeight * 0.168224, 0, imageHeight * 0.626168);\n      grad.addColorStop(0, '#ffffff');\n      grad.addColorStop(0.31, '#ffffff');\n      grad.addColorStop(0.3101, '#ffffff');\n      grad.addColorStop(0.32, '#202020');\n      grad.addColorStop(1, '#202020');\n      ctx.fillStyle = grad;\n    }\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(imageWidth * 0.518691, imageHeight * 0.471962);\n    ctx.bezierCurveTo(imageWidth * 0.514018, imageHeight * 0.471962, imageWidth * 0.509345, imageHeight * 0.467289, imageWidth * 0.509345, imageHeight * 0.467289);\n    ctx.lineTo(imageWidth * 0.509345, imageHeight * 0.200934);\n    ctx.lineTo(imageWidth * 0.5, imageHeight * 0.168224);\n    ctx.lineTo(imageWidth * 0.490654, imageHeight * 0.200934);\n    ctx.lineTo(imageWidth * 0.490654, imageHeight * 0.467289);\n    ctx.bezierCurveTo(imageWidth * 0.490654, imageHeight * 0.467289, imageWidth * 0.481308, imageHeight * 0.471962, imageWidth * 0.481308, imageHeight * 0.471962);\n    ctx.bezierCurveTo(imageWidth * 0.471962, imageHeight * 0.481308, imageWidth * 0.467289, imageHeight * 0.490654, imageWidth * 0.467289, imageHeight * 0.5);\n    ctx.bezierCurveTo(imageWidth * 0.467289, imageHeight * 0.514018, imageWidth * 0.476635, imageHeight * 0.528037, imageWidth * 0.490654, imageHeight * 0.532710);\n    ctx.bezierCurveTo(imageWidth * 0.490654, imageHeight * 0.532710, imageWidth * 0.490654, imageHeight * 0.579439, imageWidth * 0.490654, imageHeight * 0.588785);\n    ctx.bezierCurveTo(imageWidth * 0.485981, imageHeight * 0.593457, imageWidth * 0.481308, imageHeight * 0.598130, imageWidth * 0.481308, imageHeight * 0.607476);\n    ctx.bezierCurveTo(imageWidth * 0.481308, imageHeight * 0.616822, imageWidth * 0.490654, imageHeight * 0.626168, imageWidth * 0.5, imageHeight * 0.626168);\n    ctx.bezierCurveTo(imageWidth * 0.509345, imageHeight * 0.626168, imageWidth * 0.518691, imageHeight * 0.616822, imageWidth * 0.518691, imageHeight * 0.607476);\n    ctx.bezierCurveTo(imageWidth * 0.518691, imageHeight * 0.598130, imageWidth * 0.514018, imageHeight * 0.593457, imageWidth * 0.504672, imageHeight * 0.588785);\n    ctx.bezierCurveTo(imageWidth * 0.504672, imageHeight * 0.579439, imageWidth * 0.504672, imageHeight * 0.532710, imageWidth * 0.509345, imageHeight * 0.532710);\n    ctx.bezierCurveTo(imageWidth * 0.523364, imageHeight * 0.528037, imageWidth * 0.532710, imageHeight * 0.514018, imageWidth * 0.532710, imageHeight * 0.5);\n    ctx.bezierCurveTo(imageWidth * 0.532710, imageHeight * 0.490654, imageWidth * 0.528037, imageHeight * 0.481308, imageWidth * 0.518691, imageHeight * 0.471962);\n    ctx.closePath();\n    ctx.fill();\n    ctx.restore();\n  };\n\n  var draw1000ftPointer = function(ctx) {\n    var grad;\n\n    grad = ctx.createLinearGradient(0, imageHeight * 0.401869, 0, imageHeight * 0.616822);\n    grad.addColorStop(0, '#ffffff');\n    grad.addColorStop(0.51, '#ffffff');\n    grad.addColorStop(0.52, '#ffffff');\n    grad.addColorStop(0.5201, '#202020');\n    grad.addColorStop(0.53, '#202020');\n    grad.addColorStop(1, '#202020');\n    ctx.fillStyle = grad;\n    ctx.beginPath();\n    ctx.moveTo(imageWidth * 0.518691, imageHeight * 0.471962);\n    ctx.bezierCurveTo(imageWidth * 0.514018, imageHeight * 0.462616, imageWidth * 0.528037, imageHeight * 0.401869, imageWidth * 0.528037, imageHeight * 0.401869);\n    ctx.lineTo(imageWidth * 0.5, imageHeight * 0.331775);\n    ctx.lineTo(imageWidth * 0.471962, imageHeight * 0.401869);\n    ctx.bezierCurveTo(imageWidth * 0.471962, imageHeight * 0.401869, imageWidth * 0.485981, imageHeight * 0.462616, imageWidth * 0.481308, imageHeight * 0.471962);\n    ctx.bezierCurveTo(imageWidth * 0.471962, imageHeight * 0.481308, imageWidth * 0.467289, imageHeight * 0.490654, imageWidth * 0.467289, imageHeight * 0.5);\n    ctx.bezierCurveTo(imageWidth * 0.467289, imageHeight * 0.514018, imageWidth * 0.476635, imageHeight * 0.528037, imageWidth * 0.490654, imageHeight * 0.532710);\n    ctx.bezierCurveTo(imageWidth * 0.490654, imageHeight * 0.532710, imageWidth * 0.462616, imageHeight * 0.574766, imageWidth * 0.462616, imageHeight * 0.593457);\n    ctx.bezierCurveTo(imageWidth * 0.467289, imageHeight * 0.616822, imageWidth * 0.5, imageHeight * 0.612149, imageWidth * 0.5, imageHeight * 0.612149);\n    ctx.bezierCurveTo(imageWidth * 0.5, imageHeight * 0.612149, imageWidth * 0.532710, imageHeight * 0.616822, imageWidth * 0.537383, imageHeight * 0.593457);\n    ctx.bezierCurveTo(imageWidth * 0.537383, imageHeight * 0.574766, imageWidth * 0.509345, imageHeight * 0.532710, imageWidth * 0.509345, imageHeight * 0.532710);\n    ctx.bezierCurveTo(imageWidth * 0.523364, imageHeight * 0.528037, imageWidth * 0.532710, imageHeight * 0.514018, imageWidth * 0.532710, imageHeight * 0.5);\n    ctx.bezierCurveTo(imageWidth * 0.532710, imageHeight * 0.490654, imageWidth * 0.528037, imageHeight * 0.481308, imageWidth * 0.518691, imageHeight * 0.471962);\n    ctx.closePath();\n    ctx.fill();\n    ctx.restore();\n  };\n\n  var draw10000ftPointer = function(ctx) {\n    ctx.fillStyle = '#ffffff';\n    ctx.beginPath();\n    ctx.moveTo(imageWidth * 0.518691, imageHeight * 0.471962);\n    ctx.bezierCurveTo(imageWidth * 0.514018, imageHeight * 0.471962, imageWidth * 0.514018, imageHeight * 0.467289, imageWidth * 0.514018, imageHeight * 0.467289);\n    ctx.lineTo(imageWidth * 0.514018, imageHeight * 0.317757);\n    ctx.lineTo(imageWidth * 0.504672, imageHeight * 0.303738);\n    ctx.lineTo(imageWidth * 0.504672, imageHeight * 0.182242);\n    ctx.lineTo(imageWidth * 0.532710, imageHeight * 0.116822);\n    ctx.lineTo(imageWidth * 0.462616, imageHeight * 0.116822);\n    ctx.lineTo(imageWidth * 0.495327, imageHeight * 0.182242);\n    ctx.lineTo(imageWidth * 0.495327, imageHeight * 0.299065);\n    ctx.lineTo(imageWidth * 0.485981, imageHeight * 0.317757);\n    ctx.lineTo(imageWidth * 0.485981, imageHeight * 0.467289);\n    ctx.bezierCurveTo(imageWidth * 0.485981, imageHeight * 0.467289, imageWidth * 0.485981, imageHeight * 0.471962, imageWidth * 0.481308, imageHeight * 0.471962);\n    ctx.bezierCurveTo(imageWidth * 0.471962, imageHeight * 0.481308, imageWidth * 0.467289, imageHeight * 0.490654, imageWidth * 0.467289, imageHeight * 0.5);\n    ctx.bezierCurveTo(imageWidth * 0.467289, imageHeight * 0.518691, imageWidth * 0.481308, imageHeight * 0.532710, imageWidth * 0.5, imageHeight * 0.532710);\n    ctx.bezierCurveTo(imageWidth * 0.518691, imageHeight * 0.532710, imageWidth * 0.532710, imageHeight * 0.518691, imageWidth * 0.532710, imageHeight * 0.5);\n    ctx.bezierCurveTo(imageWidth * 0.532710, imageHeight * 0.490654, imageWidth * 0.528037, imageHeight * 0.481308, imageWidth * 0.518691, imageHeight * 0.471962);\n    ctx.closePath();\n    ctx.fill();\n  };\n\n  function calcAngleStep() {\n    angleStep100ft = (TWO_PI) / (maxValue - minValue);\n    angleStep1000ft = angleStep100ft / 10;\n    angleStep10000ft = angleStep1000ft / 10;\n  }\n\n  function calcValues() {\n    value100 = (value % 1000) / 100;\n    value1000 = (value % 10000) / 100;\n    value10000 = (value % 100000) / 100;\n  }\n\n  // **************   Initialization  ********************\n  // Draw all static painting code to background\n  var init = function(parameters) {\n    parameters = parameters || {};\n    // Parameters\n    var drawFrame = (undefined === parameters.frame ? false : parameters.frame),\n      drawBackground = (undefined === parameters.background ? false : parameters.background),\n      drawPointers = (undefined === parameters.pointers ? false : parameters.pointers),\n      drawForeground = (undefined === parameters.foreground ? false : parameters.foreground);\n\n    initialized = true;\n\n    calcAngleStep();\n\n    // Create frame in frame buffer (backgroundBuffer)\n    if (drawFrame && frameVisible) {\n      drawRadialFrameImage(frameContext, frameDesign, centerX, centerY, imageWidth, imageHeight);\n    }\n\n    if (drawBackground && backgroundVisible) {\n      // Create background in background buffer (backgroundBuffer)\n      drawRadialBackgroundImage(backgroundContext, backgroundColor, centerX, centerY, imageWidth, imageHeight);\n\n      // Create custom layer in background buffer (backgroundBuffer)\n      drawRadialCustomImage(backgroundContext, customLayer, centerX, centerY, imageWidth, imageHeight);\n\n      // Create tickmarks in background buffer (backgroundBuffer)\n      drawTickmarksImage(backgroundContext, 0, TICKMARK_OFFSET, 0, 10, angleStep100ft, tickLabelPeriod, 0, true, true, null);\n\n      // Create title in background buffer (backgroundBuffer)\n      drawTitleImage(backgroundContext, imageWidth, imageHeight, titleString, unitString, backgroundColor, true, true, unitStringPosY);\n    }\n\n    // Create lcd background if selected in background buffer (backgroundBuffer)\n    if (drawBackground && lcdVisible) {\n      lcdBuffer = createLcdBackgroundImage(imageWidth * 0.4, imageHeight * 0.09, lcdColor);\n      backgroundContext.drawImage(lcdBuffer, (imageWidth - (imageWidth * 0.4)) / 2, imageHeight * 0.56);\n    }\n\n    if (drawPointers) {\n      // Create 100ft pointer in buffer\n      draw100ftPointer(pointer100Context, false);\n      // Create 1000ft pointer in buffer\n      draw1000ftPointer(pointer1000Context, false);\n      // Create 10000ft pointer in buffer\n      draw10000ftPointer(pointer10000Context, false);\n    }\n\n    if (drawForeground && foregroundVisible) {\n      drawRadialForegroundImage(foregroundContext, foregroundType, imageWidth, imageHeight, true, knobType, knobStyle);\n    }\n  };\n\n  var resetBuffers = function(buffers) {\n    buffers = buffers || {};\n    var resetFrame = (undefined === buffers.frame ? false : buffers.frame),\n      resetBackground = (undefined === buffers.background ? false : buffers.background),\n      resetPointers = (undefined === buffers.pointers ? false : buffers.pointers),\n      resetForeground = (undefined === buffers.foreground ? false : buffers.foreground);\n\n    if (resetFrame) {\n      frameBuffer.width = size;\n      frameBuffer.height = size;\n      frameContext = frameBuffer.getContext('2d');\n    }\n\n    if (resetBackground) {\n      backgroundBuffer.width = size;\n      backgroundBuffer.height = size;\n      backgroundContext = backgroundBuffer.getContext('2d');\n    }\n\n    if (resetPointers) {\n      pointer100Buffer.width = size;\n      pointer100Buffer.height = size;\n      pointer100Context = pointer100Buffer.getContext('2d');\n\n      pointer1000Buffer.width = size;\n      pointer1000Buffer.height = size;\n      pointer1000Context = pointer1000Buffer.getContext('2d');\n\n      pointer10000Buffer.width = size;\n      pointer10000Buffer.height = size;\n      pointer10000Context = pointer10000Buffer.getContext('2d');\n    }\n\n    if (resetForeground) {\n      foregroundBuffer.width = size;\n      foregroundBuffer.height = size;\n      foregroundContext = foregroundBuffer.getContext('2d');\n    }\n  };\n\n  //************************************ Public methods **************************************\n  this.setValue = function(newValue) {\n    value = parseFloat(newValue);\n    this.repaint();\n  };\n\n  this.getValue = function() {\n    return value;\n  };\n\n  this.setValueAnimated = function(newValue, callback) {\n    newValue = parseFloat(newValue);\n    var targetValue = (newValue < minValue ? minValue : newValue),\n      gauge = this,\n      time;\n\n    if (value !== targetValue) {\n      if (undefined !== tween && tween.isPlaying) {\n        tween.stop();\n      }\n      // Allow 5 secs per 10,000ft\n      time = Math.max(Math.abs(value - targetValue) / 10000 * 5, 1);\n      tween = new Tween({}, '', Tween.regularEaseInOut, value, targetValue, time);\n      //tween = new Tween(new Object(), '', Tween.strongEaseInOut, value, targetValue, 1);\n      tween.onMotionChanged = function(event) {\n        value = event.target._pos;\n        if (!repainting) {\n          repainting = true;\n          requestAnimFrame(gauge.repaint);\n        }\n      };\n\n      // do we have a callback function to process?\n      if (callback && typeof(callback) === \"function\") {\n        tween.onMotionFinished = callback;\n      }\n\n      tween.start();\n    }\n    return this;\n  };\n\n  this.setFrameDesign = function(newFrameDesign) {\n    resetBuffers({\n      frame: true\n    });\n    frameDesign = newFrameDesign;\n    init({\n      frame: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setBackgroundColor = function(newBackgroundColor) {\n    resetBuffers({\n      background: true,\n      pointer: true // type2 & 13 depend on background\n    });\n    backgroundColor = newBackgroundColor;\n    init({\n      background: true, // type2 & 13 depend on background\n      pointer: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setForegroundType = function(newForegroundType) {\n    resetBuffers({\n      foreground: true\n    });\n    foregroundType = newForegroundType;\n    init({\n      foreground: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setLcdColor = function(newLcdColor) {\n    lcdColor = newLcdColor;\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setTitleString = function(title) {\n    titleString = title;\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.setUnitString = function(unit) {\n    unitString = unit;\n    resetBuffers({\n      background: true\n    });\n    init({\n      background: true\n    });\n    this.repaint();\n    return this;\n  };\n\n  this.repaint = function() {\n    if (!initialized) {\n      init({\n        frame: true,\n        background: true,\n        led: true,\n        pointers: true,\n        foreground: true\n      });\n    }\n\n    //mainCtx.save();\n    mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height);\n\n    // Draw frame\n    if (frameVisible) {\n      mainCtx.drawImage(frameBuffer, 0, 0);\n    }\n\n    // Draw buffered image to visible canvas\n    mainCtx.drawImage(backgroundBuffer, 0, 0);\n\n    // Draw lcd display\n    if (lcdVisible) {\n      drawLcdText(value);\n    }\n\n    // re-calculate the spearate pointer values\n    calcValues();\n\n    var shadowOffset = imageWidth * 0.006 * 0.5;\n\n    mainCtx.save();\n    //Draw 10000ft pointer\n    // Define rotation center\n    mainCtx.translate(centerX, centerY);\n    mainCtx.rotate((value10000 - minValue) * angleStep10000ft);\n    mainCtx.translate(-centerX, -centerY);\n    // Set the pointer shadow params\n    mainCtx.shadowColor = 'rgba(0, 0, 0, 0.8)';\n    mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset;\n    mainCtx.shadowBlur = shadowOffset * 2;\n    // Draw the pointer\n    mainCtx.drawImage(pointer10000Buffer, 0, 0);\n\n    shadowOffset = imageWidth * 0.006 * 0.75;\n    mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset;\n\n    //Draw 1000ft pointer\n    mainCtx.translate(centerX, centerY);\n    mainCtx.rotate((value1000 - minValue) * angleStep1000ft - (value10000 - minValue) * angleStep10000ft);\n    mainCtx.translate(-centerX, -centerY);\n    mainCtx.drawImage(pointer1000Buffer, 0, 0);\n\n    shadowOffset = imageWidth * 0.006;\n    mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset;\n\n    //Draw 100ft pointer\n    mainCtx.translate(centerX, centerY);\n    mainCtx.rotate((value100 - minValue) * angleStep100ft - (value1000 - minValue) * angleStep1000ft);\n    mainCtx.translate(-centerX, -centerY);\n    mainCtx.drawImage(pointer100Buffer, 0, 0);\n    mainCtx.restore();\n\n    //Draw the foregound\n    if (foregroundVisible) {\n      mainCtx.drawImage(foregroundBuffer, 0, 0);\n    }\n\n    repainting = false;\n  };\n\n  // Visualize the component\n  this.repaint();\n\n  return this;\n};\n\nexport default altimeter;\n","\nimport {\ngetCanvasContext,\nTWO_PI,\ndoc,\n} from \"./tools\";\n\nvar trafficlight = function(canvas, parameters) {\n  parameters = parameters || {};\n  var width = (undefined === parameters.width ? 0 : parameters.width),\n    height = (undefined === parameters.height ? 0 : parameters.height),\n    //\n    mainCtx = getCanvasContext(canvas),\n    prefHeight, imageWidth, imageHeight,\n    redOn = false,\n    yellowOn = false,\n    greenOn = false,\n    initialized = false,\n    housingBuffer = doc.createElement('canvas'),\n    housingCtx = housingBuffer.getContext('2d'),\n    lightGreenBuffer = doc.createElement('canvas'),\n    lightGreenCtx = lightGreenBuffer.getContext('2d'),\n    greenOnBuffer = doc.createElement('canvas'),\n    greenOnCtx = greenOnBuffer.getContext('2d'),\n    greenOffBuffer = doc.createElement('canvas'),\n    greenOffCtx = greenOffBuffer.getContext('2d'),\n    lightYellowBuffer = doc.createElement('canvas'),\n    lightYellowCtx = lightYellowBuffer.getContext('2d'),\n    yellowOnBuffer = doc.createElement('canvas'),\n    yellowOnCtx = yellowOnBuffer.getContext('2d'),\n    yellowOffBuffer = doc.createElement('canvas'),\n    yellowOffCtx = yellowOffBuffer.getContext('2d'),\n    lightRedBuffer = doc.createElement('canvas'),\n    lightRedCtx = lightRedBuffer.getContext('2d'),\n    redOnBuffer = doc.createElement('canvas'),\n    redOnCtx = redOnBuffer.getContext('2d'),\n    redOffBuffer = doc.createElement('canvas'),\n    redOffCtx = redOffBuffer.getContext('2d');\n  // End of variables\n\n  // Has a size been specified?\n  if (width === 0) {\n    width = mainCtx.canvas.width;\n  }\n  if (height === 0) {\n    height = mainCtx.canvas.height;\n  }\n\n  // Set the size - also clears the canvas\n  mainCtx.canvas.width = width;\n  mainCtx.canvas.height = height;\n\n  prefHeight = width < (height * 0.352517) ? (width * 2.836734) : height;\n  imageWidth = prefHeight * 0.352517;\n  imageHeight = prefHeight;\n\n  housingBuffer.width = imageWidth;\n  housingBuffer.height = imageHeight;\n\n  lightGreenBuffer.width = imageWidth;\n  lightGreenBuffer.height = imageHeight;\n\n  greenOnBuffer.width = imageWidth;\n  greenOnBuffer.height = imageHeight;\n\n  greenOffBuffer.width = imageWidth;\n  greenOffBuffer.height = imageHeight;\n\n  lightYellowBuffer.width = imageWidth;\n  lightYellowBuffer.height = imageHeight;\n\n  yellowOnBuffer.width = imageWidth;\n  yellowOnBuffer.height = imageHeight;\n\n  yellowOffBuffer.width = imageWidth;\n  yellowOffBuffer.height = imageHeight;\n\n  lightRedBuffer.width = imageWidth;\n  lightRedBuffer.height = imageHeight;\n\n  redOnBuffer.width = imageWidth;\n  redOnBuffer.height = imageHeight;\n\n  redOffBuffer.width = imageWidth;\n  redOffBuffer.height = imageHeight;\n\n  var drawHousing = function(ctx) {\n    var housingFill, housingFrontFill;\n\n    ctx.save();\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(0.107142 * imageWidth, 0);\n    ctx.lineTo(imageWidth - 0.107142 * imageWidth, 0);\n    ctx.quadraticCurveTo(imageWidth, 0, imageWidth, 0.107142 * imageWidth);\n    ctx.lineTo(imageWidth, imageHeight - 0.107142 * imageWidth);\n    ctx.quadraticCurveTo(imageWidth, imageHeight, imageWidth - 0.107142 * imageWidth, imageHeight);\n    ctx.lineTo(0.107142 * imageWidth, imageHeight);\n    ctx.quadraticCurveTo(0, imageHeight, 0, imageHeight - 0.107142 * imageWidth);\n    ctx.lineTo(0, 0.107142 * imageWidth);\n    ctx.quadraticCurveTo(0, 0, 0.107142 * imageWidth, imageHeight);\n    ctx.closePath();\n    housingFill = ctx.createLinearGradient(0.040816 * imageWidth, 0.007194 * imageHeight, 0.952101 * imageWidth, 0.995882 * imageHeight);\n    housingFill.addColorStop(0, 'rgb(152, 152, 154)');\n    housingFill.addColorStop(0.01, 'rgb(152, 152, 154)');\n    housingFill.addColorStop(0.09, '#333333');\n    housingFill.addColorStop(0.24, 'rgb(152, 152, 154)');\n    housingFill.addColorStop(0.55, 'rgb(31, 31, 31)');\n    housingFill.addColorStop(0.78, '#363636');\n    housingFill.addColorStop(0.98, '#000000');\n    housingFill.addColorStop(1, '#000000');\n    ctx.fillStyle = housingFill;\n    ctx.fill();\n    ctx.restore();\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(0.030612 * imageWidth + 0.084183 * imageWidth, 0.010791 * imageHeight);\n    ctx.lineTo(0.030612 * imageWidth + 0.938775 * imageWidth - 0.084183 * imageWidth, 0.010791 * imageHeight);\n    ctx.quadraticCurveTo(0.030612 * imageWidth + 0.938775 * imageWidth, 0.010791 * imageHeight, 0.030612 * imageWidth + 0.938775 * imageWidth, 0.010791 * imageHeight + 0.084183 * imageWidth);\n    ctx.lineTo(0.030612 * imageWidth + 0.938775 * imageWidth, 0.010791 * imageHeight + 0.978417 * imageHeight - 0.084183 * imageWidth);\n    ctx.quadraticCurveTo(0.030612 * imageWidth + 0.938775 * imageWidth, 0.010791 * imageHeight + 0.978417 * imageHeight, 0.030612 * imageWidth + 0.938775 * imageWidth - 0.084183 * imageWidth, 0.010791 * imageHeight + 0.978417 * imageHeight);\n    ctx.lineTo(0.030612 * imageWidth + 0.084183 * imageWidth, 0.010791 * imageHeight + 0.978417 * imageHeight);\n    ctx.quadraticCurveTo(0.030612 * imageWidth, 0.010791 * imageHeight + 0.978417 * imageHeight, 0.030612 * imageWidth, 0.010791 * imageHeight + 0.978417 * imageHeight - 0.084183 * imageWidth);\n    ctx.lineTo(0.030612 * imageWidth, 0.010791 * imageHeight + 0.084183 * imageWidth);\n    ctx.quadraticCurveTo(0.030612 * imageWidth, 0.010791 * imageHeight, 0.030612 * imageWidth + 0.084183 * imageWidth, 0.010791 * imageHeight);\n    ctx.closePath();\n    housingFrontFill = ctx.createLinearGradient(-0.132653 * imageWidth, -0.053956 * imageHeight, 2.061408 * imageWidth, 0.667293 * imageHeight);\n    housingFrontFill.addColorStop(0, '#000000');\n    housingFrontFill.addColorStop(0.01, '#000000');\n    housingFrontFill.addColorStop(0.16, '#373735');\n    housingFrontFill.addColorStop(0.31, '#000000');\n    housingFrontFill.addColorStop(0.44, '#303030');\n    housingFrontFill.addColorStop(0.65, '#000000');\n    housingFrontFill.addColorStop(0.87, '#363636');\n    housingFrontFill.addColorStop(0.98, '#000000');\n    housingFrontFill.addColorStop(1, '#000000');\n    ctx.fillStyle = housingFrontFill;\n    ctx.fill();\n    ctx.restore();\n\n    ctx.restore();\n  };\n\n  var drawLightGreen = function(ctx) {\n    var lightGreenFrameFill, lightGreenInnerFill, lightGreenEffectFill, lightGreenInnerShadowFill;\n\n    ctx.save();\n\n    ctx.save();\n    ctx.scale(1, 1);\n    ctx.beginPath();\n    ctx.arc(0.5 * imageWidth, 0.805755 * imageHeight, 0.397959 * imageWidth, 0, TWO_PI, false);\n    lightGreenFrameFill = ctx.createLinearGradient(0, 0.665467 * imageHeight, 0, 0.946043 * imageHeight);\n    lightGreenFrameFill.addColorStop(0, '#ffffff');\n    lightGreenFrameFill.addColorStop(0.05, 'rgb(204, 204, 204)');\n    lightGreenFrameFill.addColorStop(0.1, 'rgb(153, 153, 153)');\n    lightGreenFrameFill.addColorStop(0.17, '#666666');\n    lightGreenFrameFill.addColorStop(0.27, '#333333');\n    lightGreenFrameFill.addColorStop(1, '#010101');\n    ctx.fillStyle = lightGreenFrameFill;\n    ctx.fill();\n    ctx.restore();\n\n    ctx.save();\n    ctx.scale(1.083333, 1);\n    ctx.beginPath();\n    ctx.arc(0.461538 * imageWidth, 0.816546 * imageHeight, 0.367346 * imageWidth, 0, TWO_PI, false);\n    lightGreenInnerFill = ctx.createLinearGradient(0, 0.687050 * imageHeight, 0, 0.946043 * imageHeight);\n    lightGreenInnerFill.addColorStop(0, '#000000');\n    lightGreenInnerFill.addColorStop(0.35, '#040404');\n    lightGreenInnerFill.addColorStop(0.66, '#000000');\n    lightGreenInnerFill.addColorStop(1, '#010101');\n    ctx.fillStyle = lightGreenInnerFill;\n    ctx.fill();\n    ctx.restore();\n\n    ctx.save();\n    ctx.scale(1, 1);\n    ctx.beginPath();\n    ctx.arc(0.5 * imageWidth, 0.809352 * imageHeight, 0.357142 * imageWidth, 0, TWO_PI, false);\n    lightGreenEffectFill = ctx.createRadialGradient(0.5 * imageWidth, 0.809352 * imageHeight, 0, 0.5 * imageWidth, 0.809352 * imageHeight, 0.362244 * imageWidth);\n    lightGreenEffectFill.addColorStop(0, '#000000');\n    lightGreenEffectFill.addColorStop(0.88, '#000000');\n    lightGreenEffectFill.addColorStop(0.95, 'rgb(94, 94, 94)');\n    lightGreenEffectFill.addColorStop(1, '#010101');\n    ctx.fillStyle = lightGreenEffectFill;\n    ctx.fill();\n    ctx.restore();\n\n    ctx.save();\n    ctx.scale(1, 1);\n    ctx.beginPath();\n    ctx.arc(0.5 * imageWidth, 0.809352 * imageHeight, 0.357142 * imageWidth, 0, TWO_PI, false);\n    lightGreenInnerShadowFill = ctx.createLinearGradient(0, 0.687050 * imageHeight, 0, 0.917266 * imageHeight);\n    lightGreenInnerShadowFill.addColorStop(0, '#000000');\n    lightGreenInnerShadowFill.addColorStop(1, 'rgba(1, 1, 1, 0)');\n    ctx.fillStyle = lightGreenInnerShadowFill;\n    ctx.fill();\n    ctx.restore();\n    ctx.restore();\n  };\n\n  var drawGreenOn = function(ctx) {\n    var greenOnFill, greenOnGlowFill;\n\n    ctx.save();\n\n    ctx.save();\n    ctx.scale(1, 1);\n    ctx.beginPath();\n    ctx.arc(0.5 * imageWidth, 0.809352 * imageHeight, 0.326530 * imageWidth, 0, TWO_PI, false);\n    greenOnFill = ctx.createRadialGradient(0.5 * imageWidth, 0.809352 * imageHeight, 0, 0.5 * imageWidth, 0.809352 * imageHeight, 0.326530 * imageWidth);\n    greenOnFill.addColorStop(0, 'rgb(85, 185, 123)');\n    greenOnFill.addColorStop(1, 'rgb(0, 31, 0)');\n    ctx.fillStyle = greenOnFill;\n    ctx.fill();\n    ctx.restore();\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(0, 0.812949 * imageHeight);\n    ctx.bezierCurveTo(0, 0.910071 * imageHeight, 0.224489 * imageWidth, 0.989208 * imageHeight, 0.5 * imageWidth, 0.989208 * imageHeight);\n    ctx.bezierCurveTo(0.775510 * imageWidth, 0.989208 * imageHeight, imageWidth, 0.910071 * imageHeight, imageWidth, 0.809352 * imageHeight);\n    ctx.bezierCurveTo(0.908163 * imageWidth, 0.751798 * imageHeight, 0.704081 * imageWidth, 0.687050 * imageHeight, 0.5 * imageWidth, 0.687050 * imageHeight);\n    ctx.bezierCurveTo(0.285714 * imageWidth, 0.687050 * imageHeight, 0.081632 * imageWidth, 0.751798 * imageHeight, 0, 0.812949 * imageHeight);\n    ctx.closePath();\n    greenOnGlowFill = ctx.createRadialGradient(0.5 * imageWidth, 0.809352 * imageHeight, 0, 0.5 * imageWidth, 0.809352 * imageHeight, 0.515306 * imageWidth);\n    greenOnGlowFill.addColorStop(0, 'rgb(65, 187, 126)');\n    greenOnGlowFill.addColorStop(1, 'rgba(4, 37, 8, 0)');\n    ctx.fillStyle = greenOnGlowFill;\n    ctx.fill();\n    ctx.restore();\n    ctx.restore();\n  };\n\n  var drawGreenOff = function(ctx) {\n    var greenOffFill, greenOffInnerShadowFill;\n\n    ctx.save();\n\n    ctx.save();\n    ctx.scale(1, 1);\n    ctx.beginPath();\n    ctx.arc(0.5 * imageWidth, 0.809352 * imageHeight, 0.326530 * imageWidth, 0, TWO_PI, false);\n    greenOffFill = ctx.createRadialGradient(0.5 * imageWidth, 0.809352 * imageHeight, 0, 0.5 * imageWidth, 0.809352 * imageHeight, 0.326530 * imageWidth);\n    greenOffFill.addColorStop(0, 'rgba(0, 255, 0, 0.25)');\n    greenOffFill.addColorStop(1, 'rgba(0, 255, 0, 0.05)');\n    ctx.fillStyle = greenOffFill;\n    ctx.fill();\n    ctx.restore();\n\n    ctx.save();\n    ctx.scale(1, 1);\n    ctx.beginPath();\n    ctx.arc(0.5 * imageWidth, 0.809352 * imageHeight, 0.326530 * imageWidth, 0, TWO_PI, false);\n    greenOffInnerShadowFill = ctx.createRadialGradient(0.5 * imageWidth, 0.809352 * imageHeight, 0, 0.5 * imageWidth, 0.809352 * imageHeight, 0.326530 * imageWidth);\n    greenOffInnerShadowFill.addColorStop(0, 'rgba(1, 1, 1, 0)');\n    greenOffInnerShadowFill.addColorStop(0.55, 'rgba(0, 0, 0, 0)');\n    greenOffInnerShadowFill.addColorStop(0.5501, 'rgba(0, 0, 0, 0)');\n    greenOffInnerShadowFill.addColorStop(0.78, 'rgba(0, 0, 0, 0.12)');\n    greenOffInnerShadowFill.addColorStop(0.79, 'rgba(0, 0, 0, 0.12)');\n    greenOffInnerShadowFill.addColorStop(1, 'rgba(0, 0, 0, 0.5)');\n    ctx.fillStyle = greenOffInnerShadowFill;\n    ctx.fill();\n    ctx.restore();\n\n    ctx.fillStyle = ctx.createPattern(hatchBuffer, 'repeat');\n    ctx.fill();\n\n    ctx.restore();\n  };\n\n  var drawLightYellow = function(ctx) {\n    var lightYellowFrameFill, lightYellowInnerFill, lightYellowEffectFill, lightYellowInnerShadowFill;\n\n    ctx.save();\n\n    ctx.save();\n    ctx.scale(1, 1);\n    ctx.beginPath();\n    ctx.arc(0.5 * imageWidth, 0.496402 * imageHeight, 0.397959 * imageWidth, 0, TWO_PI, false);\n    lightYellowFrameFill = ctx.createLinearGradient(0, 0.356115 * imageHeight, 0, 0.636690 * imageHeight);\n    lightYellowFrameFill.addColorStop(0, '#ffffff');\n    lightYellowFrameFill.addColorStop(0.05, 'rgb(204, 204, 204)');\n    lightYellowFrameFill.addColorStop(0.1, 'rgb(153, 153, 153)');\n    lightYellowFrameFill.addColorStop(0.17, '#666666');\n    lightYellowFrameFill.addColorStop(0.27, '#333333');\n    lightYellowFrameFill.addColorStop(1, '#010101');\n    ctx.fillStyle = lightYellowFrameFill;\n    ctx.fill();\n    ctx.restore();\n\n    ctx.save();\n    ctx.scale(1.083333, 1);\n    ctx.beginPath();\n    ctx.arc(0.461538 * imageWidth, 0.507194 * imageHeight, 0.367346 * imageWidth, 0, TWO_PI, false);\n    lightYellowInnerFill = ctx.createLinearGradient(0, 0.377697 * imageHeight, 0, 0.636690 * imageHeight);\n    lightYellowInnerFill.addColorStop(0, '#000000');\n    lightYellowInnerFill.addColorStop(0.35, '#040404');\n    lightYellowInnerFill.addColorStop(0.66, '#000000');\n    lightYellowInnerFill.addColorStop(1, '#010101');\n    ctx.fillStyle = lightYellowInnerFill;\n    ctx.fill();\n    ctx.restore();\n\n    ctx.save();\n    ctx.scale(1, 1);\n    ctx.beginPath();\n    ctx.arc(0.5 * imageWidth, 0.5 * imageHeight, 0.357142 * imageWidth, 0, TWO_PI, false);\n    lightYellowEffectFill = ctx.createRadialGradient(0.5 * imageWidth, 0.5 * imageHeight, 0, 0.5 * imageWidth, 0.5 * imageHeight, 0.362244 * imageWidth);\n    lightYellowEffectFill.addColorStop(0, '#000000');\n    lightYellowEffectFill.addColorStop(0.88, '#000000');\n    lightYellowEffectFill.addColorStop(0.95, '#5e5e5e');\n    lightYellowEffectFill.addColorStop(1, '#010101');\n    ctx.fillStyle = lightYellowEffectFill;\n    ctx.fill();\n    ctx.restore();\n\n    //lIGHT_YELLOW_4_E_INNER_SHADOW_3_4\n    ctx.save();\n    ctx.scale(1, 1);\n    ctx.beginPath();\n    ctx.arc(0.5 * imageWidth, 0.5 * imageHeight, 0.357142 * imageWidth, 0, TWO_PI, false);\n    lightYellowInnerShadowFill = ctx.createLinearGradient(0, 0.377697 * imageHeight, 0, 0.607913 * imageHeight);\n    lightYellowInnerShadowFill.addColorStop(0, '#000000');\n    lightYellowInnerShadowFill.addColorStop(1, 'rgba(1, 1, 1, 0)');\n    ctx.fillStyle = lightYellowInnerShadowFill;\n    ctx.fill();\n    ctx.restore();\n    ctx.restore();\n  };\n\n  var drawYellowOn = function(ctx) {\n    var yellowOnFill, yellowOnGlowFill;\n\n    ctx.save();\n\n    ctx.save();\n    ctx.scale(1, 1);\n    ctx.beginPath();\n    ctx.arc(0.5 * imageWidth, 0.5 * imageHeight, 0.326530 * imageWidth, 0, TWO_PI, false);\n    yellowOnFill = ctx.createRadialGradient(0.5 * imageWidth, 0.5 * imageHeight, 0, 0.5 * imageWidth, 0.5 * imageHeight, 0.326530 * imageWidth);\n    yellowOnFill.addColorStop(0, '#fed434');\n    yellowOnFill.addColorStop(1, '#82330c');\n    ctx.fillStyle = yellowOnFill;\n    ctx.fill();\n    ctx.restore();\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(0, 0.503597 * imageHeight);\n    ctx.bezierCurveTo(0, 0.600719 * imageHeight, 0.224489 * imageWidth, 0.679856 * imageHeight, 0.5 * imageWidth, 0.679856 * imageHeight);\n    ctx.bezierCurveTo(0.775510 * imageWidth, 0.679856 * imageHeight, imageWidth, 0.600719 * imageHeight, imageWidth, 0.5 * imageHeight);\n    ctx.bezierCurveTo(0.908163 * imageWidth, 0.442446 * imageHeight, 0.704081 * imageWidth, 0.377697 * imageHeight, 0.5 * imageWidth, 0.377697 * imageHeight);\n    ctx.bezierCurveTo(0.285714 * imageWidth, 0.377697 * imageHeight, 0.081632 * imageWidth, 0.442446 * imageHeight, 0, 0.503597 * imageHeight);\n    ctx.closePath();\n    yellowOnGlowFill = ctx.createRadialGradient(0.5 * imageWidth, 0.5 * imageHeight, 0, 0.5 * imageWidth, 0.5 * imageHeight, 0.515306 * imageWidth);\n    yellowOnGlowFill.addColorStop(0, '#fed434');\n    yellowOnGlowFill.addColorStop(1, 'rgba(130, 51, 12, 0)');\n    ctx.fillStyle = yellowOnGlowFill;\n    ctx.fill();\n    ctx.restore();\n    ctx.restore();\n  };\n\n  var drawYellowOff = function(ctx) {\n    var yellowOffFill, yellowOffInnerShadowFill;\n\n    ctx.save();\n\n    ctx.save();\n    ctx.scale(1, 1);\n    ctx.beginPath();\n    ctx.arc(0.5 * imageWidth, 0.5 * imageHeight, 0.326530 * imageWidth, 0, TWO_PI, false);\n    yellowOffFill = ctx.createRadialGradient(0.5 * imageWidth, 0.5 * imageHeight, 0, 0.5 * imageWidth, 0.5 * imageHeight, 0.326530 * imageWidth);\n    yellowOffFill.addColorStop(0, 'rgba(255, 255, 0, 0.25)');\n    yellowOffFill.addColorStop(1, 'rgba(255, 255, 0, 0.05)');\n    ctx.fillStyle = yellowOffFill;\n    ctx.fill();\n    ctx.restore();\n\n    ctx.save();\n    ctx.scale(1, 1);\n    ctx.beginPath();\n    ctx.arc(0.5 * imageWidth, 0.5 * imageHeight, 0.326530 * imageWidth, 0, TWO_PI, false);\n    yellowOffInnerShadowFill = ctx.createRadialGradient(0.5 * imageWidth, 0.5 * imageHeight, 0, 0.5 * imageWidth, 0.5 * imageHeight, 0.326530 * imageWidth);\n    yellowOffInnerShadowFill.addColorStop(0, 'rgba(1, 1, 1, 0)');\n    yellowOffInnerShadowFill.addColorStop(0.55, 'rgba(0, 0, 0, 0)');\n    yellowOffInnerShadowFill.addColorStop(0.5501, 'rgba(0, 0, 0, 0)');\n    yellowOffInnerShadowFill.addColorStop(0.78, 'rgba(0, 0, 0, 0.12)');\n    yellowOffInnerShadowFill.addColorStop(0.79, 'rgba(0, 0, 0, 0.13)');\n    yellowOffInnerShadowFill.addColorStop(1, 'rgba(0, 0, 0, 0.5)');\n    ctx.fillStyle = yellowOffInnerShadowFill;\n    ctx.fill();\n    ctx.restore();\n\n    ctx.fillStyle = ctx.createPattern(hatchBuffer, 'repeat');\n    ctx.fill();\n\n    ctx.restore();\n  };\n\n  var drawLightRed = function(ctx) {\n    var lightRedFrameFill, lightRedInnerFill, lightRedEffectFill, lightRedInnerShadowFill;\n\n    ctx.save();\n\n    //lIGHT_RED_7_E_FRAME_0_1\n    ctx.save();\n    ctx.scale(1, 1);\n    ctx.beginPath();\n    ctx.arc(0.5 * imageWidth, 0.187050 * imageHeight, 0.397959 * imageWidth, 0, TWO_PI, false);\n    lightRedFrameFill = ctx.createLinearGradient((0.5 * imageWidth), (0.046762 * imageHeight), ((0.500000) * imageWidth), ((0.327338) * imageHeight));\n    lightRedFrameFill.addColorStop(0, '#ffffff');\n    lightRedFrameFill.addColorStop(0.05, '#cccccc');\n    lightRedFrameFill.addColorStop(0.1, '#999999');\n    lightRedFrameFill.addColorStop(0.17, '#666666');\n    lightRedFrameFill.addColorStop(0.27, '#333333');\n    lightRedFrameFill.addColorStop(1, '#010101');\n    ctx.fillStyle = lightRedFrameFill;\n    ctx.fill();\n    ctx.restore();\n\n    //lIGHT_RED_7_E_INNER_CLIP_1_2\n    ctx.save();\n    ctx.scale(1.083333, 1);\n    ctx.beginPath();\n    ctx.arc(0.461538 * imageWidth, 0.197841 * imageHeight, 0.367346 * imageWidth, 0, TWO_PI, false);\n    lightRedInnerFill = ctx.createLinearGradient((0.5 * imageWidth), (0.068345 * imageHeight), ((0.500000) * imageWidth), ((0.327338) * imageHeight));\n    lightRedInnerFill.addColorStop(0, '#000000');\n    lightRedInnerFill.addColorStop(0.35, '#040404');\n    lightRedInnerFill.addColorStop(0.66, '#000000');\n    lightRedInnerFill.addColorStop(1, '#010101');\n    ctx.fillStyle = lightRedInnerFill;\n    ctx.fill();\n    ctx.restore();\n\n    //lIGHT_RED_7_E_LIGHT_EFFECT_2_3\n    ctx.save();\n    ctx.scale(1, 1);\n    ctx.beginPath();\n    ctx.arc(0.5 * imageWidth, 0.190647 * imageHeight, 0.357142 * imageWidth, 0, TWO_PI, false);\n    lightRedEffectFill = ctx.createRadialGradient((0.5) * imageWidth, ((0.190647) * imageHeight), 0, ((0.5) * imageWidth), ((0.190647) * imageHeight), 0.362244 * imageWidth);\n    lightRedEffectFill.addColorStop(0, '#000000');\n    lightRedEffectFill.addColorStop(0.88, '#000000');\n    lightRedEffectFill.addColorStop(0.95, '#5e5e5e');\n    lightRedEffectFill.addColorStop(1, '#010101');\n    ctx.fillStyle = lightRedEffectFill;\n    ctx.fill();\n    ctx.restore();\n\n    //lIGHT_RED_7_E_INNER_SHADOW_3_4\n    ctx.save();\n    ctx.scale(1, 1);\n    ctx.beginPath();\n    ctx.arc(0.5 * imageWidth, 0.190647 * imageHeight, 0.357142 * imageWidth, 0, TWO_PI, false);\n    lightRedInnerShadowFill = ctx.createLinearGradient((0.5 * imageWidth), (0.068345 * imageHeight), ((0.500000) * imageWidth), ((0.298561) * imageHeight));\n    lightRedInnerShadowFill.addColorStop(0, '#000000');\n    lightRedInnerShadowFill.addColorStop(1, 'rgba(1, 1, 1, 0)');\n    ctx.fillStyle = lightRedInnerShadowFill;\n    ctx.fill();\n    ctx.restore();\n    ctx.restore();\n  };\n\n  var drawRedOn = function(ctx) {\n    var redOnFill, redOnGlowFill;\n\n    ctx.save();\n\n    ctx.save();\n    ctx.scale(1, 1);\n    ctx.beginPath();\n    ctx.arc(0.5 * imageWidth, 0.190647 * imageHeight, 0.326530 * imageWidth, 0, TWO_PI, false);\n    redOnFill = ctx.createRadialGradient(0.5 * imageWidth, 0.190647 * imageHeight, 0, 0.5 * imageWidth, 0.190647 * imageHeight, 0.326530 * imageWidth);\n    redOnFill.addColorStop(0, '#ff0000');\n    redOnFill.addColorStop(1, '#410004');\n    ctx.fillStyle = redOnFill;\n    ctx.fill();\n    ctx.restore();\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(0, 0.194244 * imageHeight);\n    ctx.bezierCurveTo(0, 0.291366 * imageHeight, 0.224489 * imageWidth, 0.370503 * imageHeight, 0.5 * imageWidth, 0.370503 * imageHeight);\n    ctx.bezierCurveTo(0.775510 * imageWidth, 0.370503 * imageHeight, imageWidth, 0.291366 * imageHeight, imageWidth, 0.190647 * imageHeight);\n    ctx.bezierCurveTo(0.908163 * imageWidth, 0.133093 * imageHeight, 0.704081 * imageWidth, 0.068345 * imageHeight, 0.5 * imageWidth, 0.068345 * imageHeight);\n    ctx.bezierCurveTo(0.285714 * imageWidth, 0.068345 * imageHeight, 0.081632 * imageWidth, 0.133093 * imageHeight, 0, 0.194244 * imageHeight);\n    ctx.closePath();\n    redOnGlowFill = ctx.createRadialGradient(0.5 * imageWidth, 0.190647 * imageHeight, 0, 0.5 * imageWidth, 0.190647 * imageHeight, 0.515306 * imageWidth);\n    redOnGlowFill.addColorStop(0, '#ff0000');\n    redOnGlowFill.addColorStop(1, 'rgba(118, 5, 1, 0)');\n    ctx.fillStyle = redOnGlowFill;\n    ctx.fill();\n    ctx.restore();\n\n    ctx.restore();\n  };\n\n  var drawRedOff = function(ctx) {\n    var redOffFill, redOffInnerShadowFill;\n\n    ctx.save();\n\n    ctx.save();\n    ctx.scale(1, 1);\n    ctx.beginPath();\n    ctx.arc(0.5 * imageWidth, 0.190647 * imageHeight, 0.326530 * imageWidth, 0, TWO_PI, false);\n    redOffFill = ctx.createRadialGradient(0.5 * imageWidth, 0.190647 * imageHeight, 0, 0.5 * imageWidth, 0.190647 * imageHeight, 0.326530 * imageWidth);\n    redOffFill.addColorStop(0, 'rgba(255, 0, 0, 0.25)');\n    redOffFill.addColorStop(1, 'rgba(255, 0, 0, 0.05)');\n    ctx.fillStyle = redOffFill;\n    ctx.fill();\n    ctx.restore();\n\n    ctx.save();\n    ctx.scale(1, 1);\n    ctx.beginPath();\n    ctx.arc(0.5 * imageWidth, 0.190647 * imageHeight, 0.326530 * imageWidth, 0, TWO_PI, false);\n    redOffInnerShadowFill = ctx.createRadialGradient(0.5 * imageWidth, 0.190647 * imageHeight, 0, 0.5 * imageWidth, 0.190647 * imageHeight, 0.326530 * imageWidth);\n    redOffInnerShadowFill.addColorStop(0, 'rgba(1, 1, 1, 0)');\n    redOffInnerShadowFill.addColorStop(0.55, 'rgba(0, 0, 0, 0)');\n    redOffInnerShadowFill.addColorStop(0.5501, 'rgba(0, 0, 0, 0)');\n    redOffInnerShadowFill.addColorStop(0.78, 'rgba(0, 0, 0, 0.12)');\n    redOffInnerShadowFill.addColorStop(0.79, 'rgba(0, 0, 0, 0.13)');\n    redOffInnerShadowFill.addColorStop(1, 'rgba(0, 0, 0, 0.5)');\n    ctx.fillStyle = redOffInnerShadowFill;\n    ctx.fill();\n    ctx.restore();\n\n    ctx.fillStyle = ctx.createPattern(hatchBuffer, 'repeat');\n    ctx.fill();\n\n    ctx.restore();\n  };\n\n  function drawToBuffer(width, height, drawFunction) {\n    var buffer = doc.createElement('canvas');\n    buffer.width = width;\n    buffer.height = height;\n    drawFunction(buffer.getContext('2d'));\n    return buffer;\n  }\n\n  var hatchBuffer = drawToBuffer(2, 2, function(ctx) {\n    ctx.save();\n    ctx.strokeStyle = 'rgba(0, 0, 0, 0.1)';\n    ctx.beginPath();\n    ctx.lineTo(0, 0, 1, 0);\n    ctx.lineTo(0, 1, 0, 1);\n    ctx.stroke();\n    ctx.restore();\n  });\n\n  var init = function() {\n    initialized = true;\n\n    drawHousing(housingCtx);\n    drawLightGreen(lightGreenCtx);\n    drawGreenOn(greenOnCtx);\n    drawGreenOff(greenOffCtx);\n    drawLightYellow(lightYellowCtx);\n    drawYellowOn(yellowOnCtx);\n    drawYellowOff(yellowOffCtx);\n    drawLightRed(lightRedCtx);\n    drawRedOn(redOnCtx);\n    drawRedOff(redOffCtx);\n  };\n\n  // **************   P U B L I C   M E T H O D S   ********************************\n  this.setRedOn = function(on) {\n    redOn = !!on;\n    this.repaint();\n  };\n\n  this.isRedOn = function() {\n    return redOn;\n  };\n\n  this.setYellowOn = function(on) {\n    yellowOn = !!on;\n    this.repaint();\n  };\n\n  this.isYellowOn = function() {\n    return yellowOn;\n  };\n\n  this.setGreenOn = function(on) {\n    greenOn = !!on;\n    this.repaint();\n  };\n\n  this.isGreenOn = function() {\n    return greenOn;\n  };\n\n  this.repaint = function() {\n    if (!initialized) {\n      init();\n    }\n\n    mainCtx.save();\n    mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height);\n\n    // housing\n    mainCtx.drawImage(housingBuffer, 0, 0);\n\n    // Green light\n    mainCtx.drawImage(lightGreenBuffer, 0, 0);\n\n    if (greenOn) {\n      mainCtx.drawImage(greenOnBuffer, 0, 0);\n    }\n\n    mainCtx.drawImage(greenOffBuffer, 0, 0);\n\n    // Yellow light\n    mainCtx.drawImage(lightYellowBuffer, 0, 0);\n\n    if (yellowOn) {\n      mainCtx.drawImage(yellowOnBuffer, 0, 0);\n    }\n\n    mainCtx.drawImage(yellowOffBuffer, 0, 0);\n\n    // Red light\n    mainCtx.drawImage(lightRedBuffer, 0, 0);\n\n    if (redOn) {\n      mainCtx.drawImage(redOnBuffer, 0, 0);\n    }\n\n    mainCtx.drawImage(redOffBuffer, 0, 0);\n    mainCtx.restore();\n  };\n\n  // Visualize the component\n  this.repaint();\n\n  return this;\n};\n\nexport default trafficlight;","\nimport {\nrgbToHsl, \ndoc,\n} from \"./tools\";\n\nvar lightbulb = function(canvas, parameters) {\n  parameters = parameters || {};\n  var mainCtx,\n    // parameters\n    width = (undefined === parameters.width ? 0 : parameters.width),\n    height = (undefined === parameters.height ? 0 : parameters.height),\n    glowColor = (undefined === parameters.glowColor ? '#ffff00' : parameters.glowColor),\n    //\n    size, imageWidth, imageHeight,\n    initialized = false,\n    lightOn = false,\n    alpha = 1,\n    offBuffer = doc.createElement('canvas'),\n    offCtx = offBuffer.getContext('2d'),\n    onBuffer = doc.createElement('canvas'),\n    onCtx = onBuffer.getContext('2d'),\n    bulbBuffer = doc.createElement('canvas'),\n    bulbCtx = bulbBuffer.getContext('2d');\n  // End of variables\n\n  // Get the canvas context and clear it\n  mainCtx = document.getElementById(canvas).getContext('2d');\n\n  // Has a size been specified?\n  if (width === 0) {\n    width = mainCtx.canvas.width;\n  }\n  if (height === 0) {\n    height = mainCtx.canvas.height;\n  }\n\n  // Get the size\n  mainCtx.canvas.width = width;\n  mainCtx.canvas.height = height;\n  size = width < height ? width : height;\n  imageWidth = size;\n  imageHeight = size;\n\n  function drawToBuffer(width, height, drawFunction) {\n    var buffer = doc.createElement('canvas');\n    buffer.width = width;\n    buffer.height = height;\n    drawFunction(buffer.getContext('2d'));\n    return buffer;\n  }\n\n  var getColorValues = function(color) {\n    var colorData,\n      lookupBuffer = drawToBuffer(1, 1, function(ctx) {\n        ctx.fillStyle = color;\n        ctx.beginPath();\n        ctx.rect(0, 0, 1, 1);\n        ctx.fill();\n      });\n\n    colorData = lookupBuffer.getContext('2d').getImageData(0, 0, 2, 2).data;\n    return [colorData[0], colorData[1], colorData[2]];\n  };\n\n  offBuffer.width = imageWidth;\n  offBuffer.height = imageHeight;\n\n  onBuffer.width = imageWidth;\n  onBuffer.height = imageHeight;\n\n  bulbBuffer.width = imageWidth;\n  bulbBuffer.height = imageHeight;\n\n  var drawOff = function(ctx) {\n    var glassOffFill;\n\n    ctx.save();\n\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(0.289473 * imageWidth, 0.438596 * imageHeight);\n    ctx.bezierCurveTo(0.289473 * imageWidth, 0.561403 * imageHeight, 0.385964 * imageWidth, 0.605263 * imageHeight, 0.385964 * imageWidth, 0.745614 * imageHeight);\n    ctx.bezierCurveTo(0.385964 * imageWidth, 0.745614 * imageHeight, 0.587719 * imageWidth, 0.745614 * imageHeight, 0.587719 * imageWidth, 0.745614 * imageHeight);\n    ctx.bezierCurveTo(0.587719 * imageWidth, 0.605263 * imageHeight, 0.692982 * imageWidth, 0.561403 * imageHeight, 0.692982 * imageWidth, 0.438596 * imageHeight);\n    ctx.bezierCurveTo(0.692982 * imageWidth, 0.324561 * imageHeight, 0.605263 * imageWidth, 0.228070 * imageHeight, 0.5 * imageWidth, 0.228070 * imageHeight);\n    ctx.bezierCurveTo(0.385964 * imageWidth, 0.228070 * imageHeight, 0.289473 * imageWidth, 0.324561 * imageHeight, 0.289473 * imageWidth, 0.438596 * imageHeight);\n    ctx.closePath();\n    glassOffFill = ctx.createLinearGradient(0, 0.289473 * imageHeight, 0, 0.701754 * imageHeight);\n    glassOffFill.addColorStop(0, '#eeeeee');\n    glassOffFill.addColorStop(0.99, '#999999');\n    glassOffFill.addColorStop(1, '#999999');\n    ctx.fillStyle = glassOffFill;\n    ctx.fill();\n    ctx.lineCap = 'butt';\n    ctx.lineJoin = 'round';\n    ctx.lineWidth = 0.008771 * imageWidth;\n    ctx.strokeStyle = '#cccccc';\n    ctx.stroke();\n    ctx.restore();\n    ctx.restore();\n  };\n\n  var drawOn = function(ctx) {\n    var glassOnFill,\n      data = getColorValues(glowColor),\n      red = data[0],\n      green = data[1],\n      blue = data[2],\n      hsl = rgbToHsl(red, green, blue);\n\n    ctx.save();\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(0.289473 * imageWidth, 0.438596 * imageHeight);\n    ctx.bezierCurveTo(0.289473 * imageWidth, 0.561403 * imageHeight, 0.385964 * imageWidth, 0.605263 * imageHeight, 0.385964 * imageWidth, 0.745614 * imageHeight);\n    ctx.bezierCurveTo(0.385964 * imageWidth, 0.745614 * imageHeight, 0.587719 * imageWidth, 0.745614 * imageHeight, 0.587719 * imageWidth, 0.745614 * imageHeight);\n    ctx.bezierCurveTo(0.587719 * imageWidth, 0.605263 * imageHeight, 0.692982 * imageWidth, 0.561403 * imageHeight, 0.692982 * imageWidth, 0.438596 * imageHeight);\n    ctx.bezierCurveTo(0.692982 * imageWidth, 0.324561 * imageHeight, 0.605263 * imageWidth, 0.228070 * imageHeight, 0.5 * imageWidth, 0.228070 * imageHeight);\n    ctx.bezierCurveTo(0.385964 * imageWidth, 0.228070 * imageHeight, 0.289473 * imageWidth, 0.324561 * imageHeight, 0.289473 * imageWidth, 0.438596 * imageHeight);\n    ctx.closePath();\n\n    glassOnFill = ctx.createLinearGradient(0, 0.289473 * imageHeight, 0, 0.701754 * imageHeight);\n\n    if (red === green && green === blue) {\n      glassOnFill.addColorStop(0, 'hsl(0, 60%, 0%)');\n      glassOnFill.addColorStop(1, 'hsl(0, 40%, 0%)');\n    } else {\n      glassOnFill.addColorStop(0, 'hsl(' + hsl[0] * 255 + ', ' + hsl[1] * 100 + '%, 70%)');\n      glassOnFill.addColorStop(1, 'hsl(' + hsl[0] * 255 + ', ' + hsl[1] * 100 + '%, 80%)');\n    }\n    ctx.fillStyle = glassOnFill;\n\n    // sets shadow properties\n    ctx.shadowOffsetX = 0;\n    ctx.shadowOffsetY = 0;\n    ctx.shadowBlur = 30;\n    ctx.shadowColor = glowColor;\n\n    ctx.fill();\n\n    ctx.lineCap = 'butt';\n    ctx.lineJoin = 'round';\n    ctx.lineWidth = 0.008771 * imageWidth;\n    ctx.strokeStyle = 'rgba(' + red + ', ' + green + ', ' + blue + ', 0.4)';\n    ctx.stroke();\n\n    ctx.restore();\n\n    ctx.restore();\n  };\n\n  var drawBulb = function(ctx) {\n    var highlight, winding, winding1, contactPlate;\n\n    ctx.save();\n\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(0.350877 * imageWidth, 0.333333 * imageHeight);\n    ctx.bezierCurveTo(0.350877 * imageWidth, 0.280701 * imageHeight, 0.412280 * imageWidth, 0.236842 * imageHeight, 0.5 * imageWidth, 0.236842 * imageHeight);\n    ctx.bezierCurveTo(0.578947 * imageWidth, 0.236842 * imageHeight, 0.640350 * imageWidth, 0.280701 * imageHeight, 0.640350 * imageWidth, 0.333333 * imageHeight);\n    ctx.bezierCurveTo(0.640350 * imageWidth, 0.385964 * imageHeight, 0.578947 * imageWidth, 0.429824 * imageHeight, 0.5 * imageWidth, 0.429824 * imageHeight);\n    ctx.bezierCurveTo(0.412280 * imageWidth, 0.429824 * imageHeight, 0.350877 * imageWidth, 0.385964 * imageHeight, 0.350877 * imageWidth, 0.333333 * imageHeight);\n    ctx.closePath();\n    highlight = ctx.createLinearGradient(0, 0.245614 * imageHeight, 0, 0.429824 * imageHeight);\n    highlight.addColorStop(0, '#ffffff');\n    highlight.addColorStop(0.99, 'rgba(255, 255, 255, 0)');\n    highlight.addColorStop(1, 'rgba(255, 255, 255, 0)');\n    ctx.fillStyle = highlight;\n    ctx.fill();\n    ctx.restore();\n\n    //winding\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(0.377192 * imageWidth, 0.745614 * imageHeight);\n    ctx.bezierCurveTo(0.377192 * imageWidth, 0.745614 * imageHeight, 0.429824 * imageWidth, 0.728070 * imageHeight, 0.491228 * imageWidth, 0.728070 * imageHeight);\n    ctx.bezierCurveTo(0.561403 * imageWidth, 0.728070 * imageHeight, 0.605263 * imageWidth, 0.736842 * imageHeight, 0.605263 * imageWidth, 0.736842 * imageHeight);\n    ctx.lineTo(0.605263 * imageWidth, 0.763157 * imageHeight);\n    ctx.lineTo(0.596491 * imageWidth, 0.780701 * imageHeight);\n    ctx.lineTo(0.605263 * imageWidth, 0.798245 * imageHeight);\n    ctx.lineTo(0.596491 * imageWidth, 0.815789 * imageHeight);\n    ctx.lineTo(0.605263 * imageWidth, 0.833333 * imageHeight);\n    ctx.lineTo(0.596491 * imageWidth, 0.850877 * imageHeight);\n    ctx.lineTo(0.605263 * imageWidth, 0.868421 * imageHeight);\n    ctx.lineTo(0.596491 * imageWidth, 0.885964 * imageHeight);\n    ctx.lineTo(0.605263 * imageWidth, 0.894736 * imageHeight);\n    ctx.bezierCurveTo(0.605263 * imageWidth, 0.894736 * imageHeight, 0.570175 * imageWidth, 0.956140 * imageHeight, 0.535087 * imageWidth, 0.991228 * imageHeight);\n    ctx.bezierCurveTo(0.526315 * imageWidth, 0.991228 * imageHeight, 0.517543 * imageWidth, imageHeight, 0.5 * imageWidth, imageHeight);\n    ctx.bezierCurveTo(0.482456 * imageWidth, imageHeight, 0.473684 * imageWidth, imageHeight, 0.464912 * imageWidth, 0.991228 * imageHeight);\n    ctx.bezierCurveTo(0.421052 * imageWidth, 0.947368 * imageHeight, 0.394736 * imageWidth, 0.903508 * imageHeight, 0.394736 * imageWidth, 0.903508 * imageHeight);\n    ctx.lineTo(0.394736 * imageWidth, 0.894736 * imageHeight);\n    ctx.lineTo(0.385964 * imageWidth, 0.885964 * imageHeight);\n    ctx.lineTo(0.394736 * imageWidth, 0.868421 * imageHeight);\n    ctx.lineTo(0.385964 * imageWidth, 0.850877 * imageHeight);\n    ctx.lineTo(0.394736 * imageWidth, 0.833333 * imageHeight);\n    ctx.lineTo(0.385964 * imageWidth, 0.815789 * imageHeight);\n    ctx.lineTo(0.394736 * imageWidth, 0.798245 * imageHeight);\n    ctx.lineTo(0.377192 * imageWidth, 0.789473 * imageHeight);\n    ctx.lineTo(0.394736 * imageWidth, 0.771929 * imageHeight);\n    ctx.lineTo(0.377192 * imageWidth, 0.763157 * imageHeight);\n    ctx.lineTo(0.377192 * imageWidth, 0.745614 * imageHeight);\n    ctx.closePath();\n    winding = ctx.createLinearGradient(0.473684 * imageWidth, 0.728070 * imageHeight, 0.484702 * imageWidth, 0.938307 * imageHeight);\n    winding.addColorStop(0, '#333333');\n    winding.addColorStop(0.04, '#d9dad6');\n    winding.addColorStop(0.19, '#e4e5e0');\n    winding.addColorStop(0.24, '#979996');\n    winding.addColorStop(0.31, '#fbffff');\n    winding.addColorStop(0.4, '#818584');\n    winding.addColorStop(0.48, '#f5f7f4');\n    winding.addColorStop(0.56, '#959794');\n    winding.addColorStop(0.64, '#f2f2f0');\n    winding.addColorStop(0.7, '#828783');\n    winding.addColorStop(0.78, '#fcfcfc');\n    winding.addColorStop(1, '#666666');\n    ctx.fillStyle = winding;\n    ctx.fill();\n    ctx.restore();\n\n    // winding\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(0.377192 * imageWidth, 0.745614 * imageHeight);\n    ctx.bezierCurveTo(0.377192 * imageWidth, 0.745614 * imageHeight, 0.429824 * imageWidth, 0.728070 * imageHeight, 0.491228 * imageWidth, 0.728070 * imageHeight);\n    ctx.bezierCurveTo(0.561403 * imageWidth, 0.728070 * imageHeight, 0.605263 * imageWidth, 0.736842 * imageHeight, 0.605263 * imageWidth, 0.736842 * imageHeight);\n    ctx.lineTo(0.605263 * imageWidth, 0.763157 * imageHeight);\n    ctx.lineTo(0.596491 * imageWidth, 0.780701 * imageHeight);\n    ctx.lineTo(0.605263 * imageWidth, 0.798245 * imageHeight);\n    ctx.lineTo(0.596491 * imageWidth, 0.815789 * imageHeight);\n    ctx.lineTo(0.605263 * imageWidth, 0.833333 * imageHeight);\n    ctx.lineTo(0.596491 * imageWidth, 0.850877 * imageHeight);\n    ctx.lineTo(0.605263 * imageWidth, 0.868421 * imageHeight);\n    ctx.lineTo(0.596491 * imageWidth, 0.885964 * imageHeight);\n    ctx.lineTo(0.605263 * imageWidth, 0.894736 * imageHeight);\n    ctx.bezierCurveTo(0.605263 * imageWidth, 0.894736 * imageHeight, 0.570175 * imageWidth, 0.956140 * imageHeight, 0.535087 * imageWidth, 0.991228 * imageHeight);\n    ctx.bezierCurveTo(0.526315 * imageWidth, 0.991228 * imageHeight, 0.517543 * imageWidth, imageHeight, 0.5 * imageWidth, imageHeight);\n    ctx.bezierCurveTo(0.482456 * imageWidth, imageHeight, 0.473684 * imageWidth, imageHeight, 0.464912 * imageWidth, 0.991228 * imageHeight);\n    ctx.bezierCurveTo(0.421052 * imageWidth, 0.947368 * imageHeight, 0.394736 * imageWidth, 0.903508 * imageHeight, 0.394736 * imageWidth, 0.903508 * imageHeight);\n    ctx.lineTo(0.394736 * imageWidth, 0.894736 * imageHeight);\n    ctx.lineTo(0.385964 * imageWidth, 0.885964 * imageHeight);\n    ctx.lineTo(0.394736 * imageWidth, 0.868421 * imageHeight);\n    ctx.lineTo(0.385964 * imageWidth, 0.850877 * imageHeight);\n    ctx.lineTo(0.394736 * imageWidth, 0.833333 * imageHeight);\n    ctx.lineTo(0.385964 * imageWidth, 0.815789 * imageHeight);\n    ctx.lineTo(0.394736 * imageWidth, 0.798245 * imageHeight);\n    ctx.lineTo(0.377192 * imageWidth, 0.789473 * imageHeight);\n    ctx.lineTo(0.394736 * imageWidth, 0.771929 * imageHeight);\n    ctx.lineTo(0.377192 * imageWidth, 0.763157 * imageHeight);\n    ctx.lineTo(0.377192 * imageWidth, 0.745614 * imageHeight);\n    ctx.closePath();\n    winding1 = ctx.createLinearGradient(0.377192 * imageWidth, 0.789473 * imageHeight, 0.605263 * imageWidth, 0.789473 * imageHeight);\n    winding1.addColorStop(0, 'rgba(0, 0, 0, 0.4)');\n    winding1.addColorStop(0.15, 'rgba(0, 0, 0, 0.32)');\n    winding1.addColorStop(0.85, 'rgba(0, 0, 0, 0.33)');\n    winding1.addColorStop(1, 'rgba(0, 0, 0, 0.4)');\n    ctx.fillStyle = winding1;\n    ctx.fill();\n    ctx.restore();\n\n    // contact plate\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(0.421052 * imageWidth, 0.947368 * imageHeight);\n    ctx.bezierCurveTo(0.438596 * imageWidth, 0.956140 * imageHeight, 0.447368 * imageWidth, 0.973684 * imageHeight, 0.464912 * imageWidth, 0.991228 * imageHeight);\n    ctx.bezierCurveTo(0.473684 * imageWidth, imageHeight, 0.482456 * imageWidth, imageHeight, 0.5 * imageWidth, imageHeight);\n    ctx.bezierCurveTo(0.517543 * imageWidth, imageHeight, 0.526315 * imageWidth, 0.991228 * imageHeight, 0.535087 * imageWidth, 0.991228 * imageHeight);\n    ctx.bezierCurveTo(0.543859 * imageWidth, 0.982456 * imageHeight, 0.561403 * imageWidth, 0.956140 * imageHeight, 0.578947 * imageWidth, 0.947368 * imageHeight);\n    ctx.bezierCurveTo(0.552631 * imageWidth, 0.938596 * imageHeight, 0.526315 * imageWidth, 0.938596 * imageHeight, 0.5 * imageWidth, 0.938596 * imageHeight);\n    ctx.bezierCurveTo(0.473684 * imageWidth, 0.938596 * imageHeight, 0.447368 * imageWidth, 0.938596 * imageHeight, 0.421052 * imageWidth, 0.947368 * imageHeight);\n    ctx.closePath();\n    contactPlate = ctx.createLinearGradient(0, 0.938596 * imageHeight, 0, imageHeight);\n    contactPlate.addColorStop(0, '#050a06');\n    contactPlate.addColorStop(0.61, '#070602');\n    contactPlate.addColorStop(0.71, '#999288');\n    contactPlate.addColorStop(0.83, '#010101');\n    contactPlate.addColorStop(1, '#000000');\n    ctx.fillStyle = contactPlate;\n    ctx.fill();\n    ctx.restore();\n    ctx.restore();\n  };\n\n  var clearCanvas = function(ctx) {\n    // Store the current transformation matrix\n    ctx.save();\n\n    // Use the identity matrix while clearing the canvas\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n    // Restore the transform\n    ctx.restore();\n  };\n\n  var init = function() {\n    initialized = true;\n    drawOff(offCtx);\n    drawOn(onCtx);\n    drawBulb(bulbCtx);\n  };\n\n  // **************   P U B L I C   M E T H O D S   ********************************\n  this.setOn = function(on) {\n    lightOn = !!on;\n    this.repaint();\n    return this;\n  };\n\n  this.isOn = function() {\n    return lightOn;\n  };\n\n  this.setAlpha = function(a) {\n    alpha = a;\n    this.repaint();\n    return this;\n  };\n\n  this.getAlpha = function() {\n    return alpha;\n  };\n\n  this.setGlowColor = function(color) {\n    glowColor = color;\n    init();\n    this.repaint();\n    return this;\n  };\n\n  this.getGlowColor = function() {\n    return glowColor;\n  };\n\n  // Component visualization\n  this.repaint = function() {\n    if (!initialized) {\n      init();\n    }\n\n    clearCanvas(mainCtx);\n\n    mainCtx.save();\n\n    mainCtx.drawImage(offBuffer, 0, 0);\n\n    mainCtx.globalAlpha = alpha;\n    if (lightOn) {\n      mainCtx.drawImage(onBuffer, 0, 0);\n    }\n    mainCtx.globalAlpha = 1;\n    mainCtx.drawImage(bulbBuffer, 0, 0);\n    mainCtx.restore();\n  };\n\n  this.repaint();\n\n  return this;\n};\n\nexport default lightbulb;","\nimport radial from \"./radial\";\nimport radialBargraph from \"./radialBargraph\";\nimport radialVertical from \"./radialVertical\";\nimport linear from \"./linear\";\nimport linearBargraph from \"./linearBargraph\";\nimport displaySingle from \"./displaySingle\";\nimport displayMulti from \"./displayMulti\";\nimport level from \"./level\";\nimport compass from \"./compass\";\nimport windDirection from \"./windDirection\";\nimport horizon from \"./horizon\";\nimport led from \"./led\";\nimport clock from \"./clock\";\nimport battery from \"./battery\";\nimport stopwatch from \"./stopwatch\";\nimport altimeter from \"./altimeter\";\nimport trafficlight from \"./trafficlight\";\nimport lightbulb from \"./lightbulb\";\nimport odometer from \"./odometer\";\nimport drawRadialFrameImage from \"./drawRadialFrameImage\";\nimport drawRadialBackgroundImage from \"./drawRadialBackgroundImage\";\nimport drawLinearBackgroundImage from \"./drawLinearBackgroundImage\";\nimport drawRadialForegroundImage from \"./drawRadialForegroundImage\";\nimport {\nRgbaColor, \nConicalGradient, \nGradientWrapper, \nsetAlpha, \ngetColorFromFraction, \nsection,\n} from \"./tools\";\n\nimport {\nbackgroundColor,\nlcdColor,\ncolor,\nledColor,\ngaugeType,\norientation,\nknobType,\nknobStyle,\nframeDesign,\npointerType,\nforegroundType,\nlabelNumberFormat,\ntickLabelOrientation,\ntrendState,\n} from \"./definitions\";\n\nexport {radial as Radial};\nexport {radialBargraph as RadialBargraph};\nexport {radialVertical as RadialVertical};\nexport {linear as Linear};\nexport {linearBargraph as LinearBargraph};\nexport {displaySingle as DisplaySingle};\nexport {displayMulti as DisplayMulti};\nexport {level as Level};\nexport {compass as Compass};\nexport {windDirection as WindDirection};\nexport {horizon as Horizon};\nexport {led as Led};\nexport {clock as Clock};\nexport {battery as Battery};\nexport {stopwatch as StopWatch};\nexport {altimeter as Altimeter};\nexport {trafficlight as TrafficLight};\nexport {lightbulb as LightBulb};\nexport {odometer as Odometer};\n\n// Images\nexport {drawRadialFrameImage as drawFrame};\nexport {drawRadialBackgroundImage as drawBackground};\nexport {drawRadialForegroundImage as drawForeground};\n\n// Tools\nexport {RgbaColor as rgbaColor};\nexport {ConicalGradient as ConicalGradient};\nexport {setAlpha as setAlpha};\nexport {getColorFromFraction as getColorFromFraction};\nexport {GradientWrapper as gradientWrapper};\n\n// Constants\nexport {backgroundColor as BackgroundColor};\nexport {lcdColor as LcdColor};\nexport {color as ColorDef};\nexport {ledColor as LedColor};\nexport {gaugeType as GaugeType};\nexport {orientation as Orientation};\nexport {frameDesign as FrameDesign};\nexport {pointerType as PointerType};\nexport {foregroundType as ForegroundType};\nexport {knobType as KnobType};\nexport {knobStyle as KnobStyle};\nexport {labelNumberFormat as LabelNumberFormat};\nexport {tickLabelOrientation as TickLabelOrientation};\nexport {trendState as TrendState};\n\n// Other\nexport {section as Section};\n","\nimport * as steelseries from '../src/steelseries';\n\nwindow.steelseries = steelseries;"]}