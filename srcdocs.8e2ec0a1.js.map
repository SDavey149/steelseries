{"version":3,"sources":["../src/tween.js","../src/constants.js","../src/tools.js","../src/drawPointerImage.js","../src/drawFrame.js","../src/carbonBuffer.js","../src/punchedSheetBuffer.js","../src/brushedMetalTexture.js","../src/drawBackground.js","../src/drawRadialCustomImage.js","../src/createKnobImage.js","../src/definitions.js","../src/drawForeground.js","../src/createLedImage.js","../src/createLcdBackgroundImage.js","../src/createMeasuredValueImage.js","../src/createTrendIndicator.js","../src/drawTitleImage.js","../src/Odometer.js","../src/Radial.js","../src/RadialBargraph.js","../src/RadialVertical.js","../src/drawLinearBackgroundImage.js","../src/drawLinearForegroundImage.js","../src/drawLinearFrameImage.js","../src/Linear.js","../src/LinearBargraph.js","../src/DisplaySingle.js","../src/DisplayMulti.js","../src/Level.js","../src/drawRoseImage.js","../src/Compass.js","../src/WindDirection.js","../src/Horizon.js","../src/Led.js","../src/Clock.js","../src/Battery.js","../src/StopWatch.js","../src/Altimeter.js","../src/TrafficLight.js","../src/LightBulb.js","../src/steelseries.js","index.js"],"names":["Tween","Delegate","create","o","f","a","i","l","arguments","length","aP","concat","apply","obj","prop","func","begin","finish","duration","suffixe","init","t","prototype","b","c","d","change","prevTime","prevPos","looping","_duration","_time","_pos","_position","_startTime","_finish","name","_listeners","setTime","getDuration","rewind","update","broadcastMessage","target","type","stop","getTime","setDuration","setPosition","p","Math","round","getPosition","undefined","setFinish","getFinish","addListener","start","startEnterFrame","fixTime","fforward","stopEnterFrame","isPlaying","onEnterFrame","nextFrame","setTimeout","getTimer","playing","continueTo","resume","yoyo","removeListener","push","splice","arr","e","shift","Date","backEaseIn","s","backEaseOut","backEaseInOut","elasticEaseIn","abs","PI","asin","pow","sin","elasticEaseOut","elasticEaseInOut","bounceEaseOut","bounceEaseIn","bounceEaseInOut","strongEaseInOut","regularEaseIn","regularEaseOut","regularEaseInOut","strongEaseIn","strongEaseOut","BackgroundColorDef","LcdColorDef","ColorDef","LedColorDef","GaugeTypeDef","OrientationDef","KnobTypeDef","KnobStyleDef","FrameDesignDef","PointerTypeDef","ForegroundTypeDef","LabelNumberFormatDef","TickLabelOrientationDef","TrendStateDef","gradientStart","gradientFraction","gradientStop","labelColor","symbolColor","gradientStartColor","gradientFraction1Color","gradientFraction2Color","gradientFraction3Color","gradientStopColor","textColor","veryDark","dark","medium","light","lighter","veryLight","innerColor1_ON","innerColor2_ON","outerColor_ON","coronaColor","innerColor1_OFF","innerColor2_OFF","outerColor_OFF","style","design","format","state","HALF_PI","TWO_PI","RAD_FACTOR","DEG_FACTOR","doc","document","lcdFontName","stdFontName","rgbaColor","r","g","red","green","blue","alpha","parseInt","substr","range","getRed","setRed","getGreen","setGreen","getBlue","setBlue","getAlpha","setAlpha","getRgbaColor","getRgbColor","getHexColor","toString","ConicalGradient","fractions","colors","limit","fillCircle","ctx","centerX","centerY","innerX","outerX","angle","x","y","dx","dy","dy2","distance","indx","pixColor","radius","ceil","diameter","pixels","createImageData","sqrt","atan2","getColorFromFraction","data","buffer","createBuffer","getContext","putImageData","drawImage","fillRect","width","height","thicknessX","thicknessY","width2","height2","gradientWrapper","end","getColorAt","fraction","lowerLimit","lowerIndex","upperLimit","upperIndex","interpolationFraction","getStart","getEnd","hex","hexColor","charAt","substring","color","sourceColor","destinationColor","returnRawData","INT_TO_FLOAT","sourceRed","sourceGreen","sourceBlue","sourceAlpha","fractionRed","fractionGreen","fractionBlue","fractionAlpha","toFixed","Section","calcNiceNumber","exponent","floor","log10","niceFraction","roundedRectangle","w","h","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","createElement","drawToBuffer","drawFunction","getColorValues","lookupBuffer","colorData","fillStyle","rect","fill","getImageData","customColorDef","values","rgbaCol","VERY_DARK","darker","DARK","LIGHT","LIGHTER","VERY_LIGHT","rgbToHsl","hue","saturation","delta","max","min","lightness","hsbToRgb","brightness","q","rgbToHsb","value","wrap","lower","upper","Error","getShortestAngle","from","to","log","LN10","requestAnimFrame","window","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","callback","getCanvasContext","elementOrId","element","String","getElementById","drawPointerImage","size","ptrType","ptrColor","lblColor","ptrBuffer","ptrCtx","grad","cacheKey","cache","createLinearGradient","addColorStop","lineWidth","lineCap","lineJoin","strokeStyle","stroke","bezierCurveTo","arc","createRadialGradient","drawFrame","frameDesign","imageWidth","imageHeight","radFBuffer","radFCtx","save","clip","restore","globalCompositeOperation","carbonBuffer","canvas","offsetY","punchedSheetBuffer","brushedMetalTexture","amount","monochrome","shine","random","vari","clamp","C","startX","startY","endX","endY","sinArr","tr","tg","tb","n","variation","outCanvas","outCanvasContext","inPixels","outPixels","horizontalBlur","inPix","outPix","totR","totG","totB","mul","drawBackground","backgroundColor","radBBuffer","radBCtx","mono","textureColor","texture","turnRadius","stepSize","backgroundOffsetX","createPattern","translate","rotate","drawRadialCustomImage","img","drawWidth","drawHeight","createKnobImage","knob","knobBuffer","knobCtx","maxPostCenterX","maxPostCenterY","BackgroundColor","DARK_GRAY","SATIN_GRAY","LIGHT_GRAY","WHITE","BLACK","BEIGE","BROWN","RED","GREEN","BLUE","ANTHRACITE","MUD","PUNCHED_SHEET","CARBON","STAINLESS","BRUSHED_METAL","BRUSHED_STAINLESS","TURNED","LcdColor","ORANGE","YELLOW","GRAY","BLUE2","BLUE_BLACK","BLUE_DARKBLUE","BLUE_GRAY","STANDARD","STANDARD_GREEN","BLUE_BLUE","RED_DARKRED","DARKBLUE","LILA","BLACKRED","DARKGREEN","AMBER","LIGHTBLUE","SECTIONS","Color","CYAN","MAGENTA","RAITH","GREEN_LCD","JUG_GREEN","LedColor","RED_LED","GREEN_LED","BLUE_LED","ORANGE_LED","YELLOW_LED","CYAN_LED","MAGENTA_LED","GaugeType","TYPE1","TYPE2","TYPE3","TYPE4","TYPE5","Orientation","NORTH","SOUTH","EAST","WEST","KnobType","STANDARD_KNOB","METAL_KNOB","KnobStyle","BRASS","SILVER","FrameDesign","BLACK_METAL","METAL","SHINY_METAL","STEEL","CHROME","GOLD","TILTED_GRAY","TILTED_BLACK","GLOSSY_METAL","PointerType","TYPE6","TYPE7","TYPE8","TYPE9","TYPE10","TYPE11","TYPE12","TYPE13","TYPE14","TYPE15","TYPE16","ForegroundType","LabelNumberFormat","FRACTIONAL","SCIENTIFIC","TickLabelOrientation","NORMAL","HORIZONTAL","TANGENT","TrendState","UP","STEADY","DOWN","OFF","drawForeground","foregroundType","withCenterKnob","gaugeType","orientation","radFgBuffer","radFgCtx","gradHighlight","gradHighlight2","knobSize","knobX","knobY","shadowOffset","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","createLedImage","ledColor","ledBuffer","ledCtx","ledCenterX","ledCenterY","createLcdBackgroundImage","lcdColor","lcdBuffer","lcdCtx","wB","hB","rB","wF","hF","rF","JSON","stringify","createMeasuredValueImage","indicatorColor","radial","vertical","indicatorBuffer","indicatorCtx","createTrendIndicator","onSection","trendBuffer","trendCtx","drawUpArrow","drawEquals","drawDownArrow","drawTitleImage","titleString","unitString","altPos","textAlign","textBaseline","font","fillText","Odometer","parameters","_context","tween","digits","decimals","decimalBackColor","decimalForeColor","valueBackColor","valueForeColor","wobbleFactor","initialized","repainting","wobble","digitHeight","stdFont","digitWidth","columnHeight","verticalSpace","zeroOffset","backgroundBuffer","backgroundContext","foregroundBuffer","foregroundContext","digitBuffer","digitContext","decimalBuffer","decimalContext","setValueAnimated","newVal","gauge","parseFloat","onMotionChanged","event","repaint","onMotionFinished","setValue","getValue","drawDigits","pos","num","numb","frac","prevNum","val","Radial","audioElement","minValue","maxValue","niceScale","threshold","thresholdRising","section","area","frameVisible","backgroundVisible","pointerType","pointerColor","knobType","knobStyle","lcdVisible","lcdDecimals","digitalFont","fractionalScaleDecimals","ledVisible","userLedColor","userLedVisible","thresholdVisible","minMeasuredValueVisible","maxMeasuredValueVisible","foregroundVisible","labelNumberFormat","playAlarm","alarmSound","customLayer","tickLabelOrientation","trendVisible","trendColors","useOdometer","odometerParams","odometerUseValue","fullScaleDeflectionTime","mainCtx","setAttribute","freeAreaAngle","rotationOffset","angleRange","angleStep","odoPosX","trendUpBuffer","trendSteadyBuffer","trendDownBuffer","trendOffBuffer","odoGauge","odoBuffer","odoContext","odoValue","self","minMeasuredValue","maxMeasuredValue","ledBlinking","userLedBlinking","ledTimerId","userLedTimerId","trendIndicator","trendSize","trendPosX","trendPosY","ledSize","ledPosX","ledPosY","userLedPosX","userLedPosY","lcdFontHeight","lcdFont","lcdHeight","lcdWidth","lcdPosX","lcdPosY","odoPosY","niceMinValue","niceMaxValue","niceRange","minorTickSpacing","majorTickSpacing","frameBuffer","frameContext","ledBufferOn","ledContextOn","ledBufferOff","ledContextOff","userLedBufferOn","userLedContextOn","userLedBufferOff","userLedContextOff","userLedBuffer","minMeasuredValueBuffer","minMeasuredValueCtx","maxMeasuredValueBuffer","maxMeasuredValueCtx","pointerBuffer","pointerContext","drawLcdText","drawAreaSectionImage","filled","startAngle","stopAngle","drawFrame2","frame","drawBackground2","background","drawLed","led","drawUserLed","userLed","drawPointer","pointer","drawForeground2","foreground","drawTrend","trend","drawOdo","odo","maxNoOfMajorTicks","maxNoOfMinorTicks","calculate","sectionIndex","areaIndex","fontSize","textRotationAngle","rotationStep","valueCounter","majorTickCounter","OUTER_POINT","MAJOR_INNER_POINT","MED_INNER_POINT","MINOR_INNER_POINT","TEXT_TRANSLATE_X","TEXT_WIDTH","MAX_VALUE_ROUNDED","toPrecision","drawTickmarksImage","thresholdBuffer","thresholdCtx","gradThreshold","createThresholdImage","knobVisible","resetBuffers","buffers","resetFrame","resetBackground","resetLed","resetUserLed","resetPointer","resetForeground","toggleAndRepaintLed","toggleAndRepaintUserLed","blink","blinking","setInterval","clearInterval","newValue","targetValue","play","pause","setOdoValue","getOdoValue","time","resetMinMeasuredValue","resetMaxMeasuredValue","setMinMeasuredValueVisible","visible","setMaxMeasuredValueVisible","setMaxMeasuredValue","setMinMeasuredValue","setTitleString","title","setUnitString","unit","setMinValue","getMinValue","setMaxValue","getMaxValue","setThreshold","setArea","areaVal","setSection","areaSec","setThresholdVisible","setThresholdRising","rising","setLcdDecimals","setFrameDesign","newFrameDesign","setBackgroundColor","newBackgroundColor","setForegroundType","newForegroundType","setPointerType","newPointerType","setPointerColor","newPointerColor","setLedColor","newLedColor","setUserLedColor","toggleUserLed","setUserLedOnOff","on","blinkUserLed","setLedVisible","setUserLedVisible","setLcdColor","newLcdColor","setTrend","setTrendVisible","setFractionalScaleDecimals","setLabelNumberFormat","clearRect","RadialBargraph","useSectionColors","valueColor","valueGradient","useValueGradient","bargraphOffset","degAngleRange","sectionAngles","isSectionsVisible","isGradientVisible","ACTIVE_LED_POS_X","ACTIVE_LED_POS_Y","LED_SIZE","LED_POS_X","LED_POS_Y","USER_LED_POS_X","USER_LED_POS_Y","activeLedBuffer","activeLedContext","drawValue","drawBargraphTrackImage","drawActiveLed","resetValue","ledTrackFrameGradient","ledTrackMainGradient","ledOffGradient","ledGradient","setValueColor","newValueColor","setSectionActive","setGradient","setGradientActive","activeLedAngle","activeLedColor","currentValue","gradRange","lastActiveLedColor","RadialVertical","pointerOffset","titleWidth","measureText","unitWidth","drawLinearBackgroundImage","frameWidth","linBBuffer","linBCtx","CORNER_RADIUS","drawLinearForegroundImage","linFgBuffer","linFgCtx","foregroundGradient","fgOffset","fgOffset2","drawLinearFrameImage","linFBuffer","linFCtx","OUTER_FRAME_CORNER_RADIUS","FRAME_MAIN_CORNER_RADIUS","SUBTRACT_CORNER_RADIUS","Linear","minMaxIndSize","drawLinearTicks","tickStart","tickStop","currentPos","yOffset","yRange","valuePos","drawBackgroundImage","tickCounter","scaleBoundsX","scaleBoundsY","scaleBoundsH","minorTickStart","minorTickStop","mediumTickStart","mediumTickStop","majorTickStart","majorTickStop","labelCounter","tickSpaceScaling","drawForegroundImage","foreSize","backSize","threshVal","minMaxX","minMaxY","lcdTextX","lcdTextY","lcdTextWidth","top","bottom","fullSize","valueSize","valueTop","valueStartX","valueStartY","valueStopX","valueStopY","valueBackgroundStartX","valueBackgroundStartY","valueBackgroundStopX","valueBackgroundStopY","valueBorderStartX","valueBorderStartY","valueBorderStopX","valueBorderStopY","valueForegroundStartX","valueForegroundStartY","valueForegroundStopX","valueForegroundStopY","valueBackgroundTrackGradient","valueBorderGradient","valueBackgroundGradient","thermoTweak","valueForegroundGradient","LinearBargraph","sectionPixels","inActiveLedBuffer","inActiveLedContext","drawBargraphLed","bargraphled","drawInActiveLed","ledWidth2","resetBargraphLed","outerRadius","ledX","ledY","ledW","ledH","activeLeds","inactiveLeds","translateX","translateY","DisplaySingle","scrollTimer","unitStringVisible","headerString","headerStringVisible","valuesNumeric","alwaysScroll","autoScroll","scrolling","scrollX","textWidth","fontHeight","sectionBuffer","sectionForegroundColor","createLcdSectionImage","lcdSectionBuffer","xB","lcdBackground","rgb","hsb","rgbStart","hsbStart","rgbFraction1","hsbFraction1","rgbFraction2","hsbFraction2","rgbFraction3","hsbFraction3","rgbStop","hsbStop","startColor","fraction1Color","fraction2Color","fraction3Color","stopColor","lcdForeground","animate","sectionColor","rgbSection","hsbSection","sectionForegroundRgb","newSection","setScrolling","scroll","lcdBackgroundBuffer","lcdTextColor","lcdText","vPos","clearTimeout","DisplayMulti","detailString","detailStringVisible","linkAltValue","altValue","stdAltFont","lcdAltFont","setAltValue","altValueNew","valueText","altValueText","Level","decimalsVisible","textOrientationFixed","rotateFace","stepValue","visibleValue","stepPointerBuffer","stepPointerContext","smlFont","POINTER_LEVEL_GRADIENT","tmpDarkColor","tmpLightColor","strokeColor_POINTER_LEVEL","POINTER_LEVEL_LEFT_GRADIENT","strokeColor_POINTER_LEVEL_LEFT","POINTER_LEVEL_RIGHT_GRADIENT","strokeColor_POINTER_LEVEL_RIGHT","drawStepPointerImage","drawRoseImage","Compass","pointSymbols","pointSymbolsVisible","degreeScale","roseVisible","roseBuffer","roseContext","NORTHPOINTER2_GRADIENT","SOUTHPOINTER2_GRADIENT","NORTHPOINTER3_GRADIENT","NORTHPOINTER1_GRADIENT","SOUTHPOINTER1_GRADIENT","diff","setPointSymbols","newPointSymbols","WindDirection","tweenLatest","tweenAverage","pointerTypeLatest","pointerTypeAverage","pointerColorAverage","degreeScaleHalf","lcdTitleStrings","useColorLabels","valueLatest","valueAverage","angleLatest","angleAverage","lcdPosY1","lcdPosY2","pointerBufferLatest","pointerContextLatest","pointerBufferAverage","pointerContextAverage","bLatest","CARDINAL_TRANSLATE_X","setValueLatest","getValueLatest","setValueAverage","getValueAverage","setValueAnimatedLatest","setValueAnimatedAverage","setPointerColorAverage","setPointerTypeAverage","setLcdTitleStrings","titles","Horizon","tweenRoll","tweenPitch","roll","pitch","pitchPixel","pitchOffset","upsidedown","valueBuffer","valueContext","indicatorContext","imgWidth","imgHeight","HORIZON_GRADIENT","stepSizeY","stepTen","step","drawHorizonBackgroundImage","drawIndicatorImage","stepRad","drawHorizonForegroundImage","setRoll","newRoll","getRoll","setRollAnimated","setPitch","newPitch","getPitch","setPitchAnimated","setPitchOffset","newPitchOffset","Led","toggleLed","newColor","setLedOnOff","Clock","minutePointerAngle","hourPointerAngle","secondPointerAngle","tickTimer","isAutomatic","hour","minute","second","secondMovesContinuous","timeZoneOffsetHour","timeZoneOffsetMinute","secondPointerVisible","objDate","tickInterval","hourBuffer","hourContext","minuteBuffer","minuteContext","secondBuffer","secondContext","calculateAngles","tickTock","setHours","setMinutes","setSeconds","getSeconds","getMilliseconds","getUTCHours","getHours","getUTCMinutes","getMinutes","drawPointers","pointers","tickAngle","INNER_POINT","drawHourPointer","drawMinutePointer","drawSecondPointer","drawTopKnob","resetPointers","getAutomatic","setAutomatic","getHour","setHour","getMinute","setMinute","getSecond","setSecond","getTimeZoneOffsetHour","setTimeZoneOffsetHour","getTimeZoneOffsetMinute","setTimeZoneOffsetMinute","getSecondPointerVisible","setSecondPointerVisible","getSecondMovesContinuous","setSecondMovesContinuous","drawKnob","Battery","BORDER_FRACTIONS","BORDER_COLORS","border","LIQUID_COLORS_DARK","LIQUID_COLORS_LIGHT","LIQUID_GRADIENT_FRACTIONS","liquidDark","liquidLight","createBatteryImage","Stopwatch","smallPointerContext","largePointerContext","currentMilliSeconds","minutes","seconds","milliSeconds","running","lap","text_scale","text_dist_factor","x_offset","y_offset","STD_FONT_SIZE","innerPoint","outerPoint","textPoint","STD_FONT","TEXT_DISTANCE","MIN_LENGTH","MED_LENGTH","MAX_LENGTH","TEXT_COLOR","TICK_COLOR","CENTER","RADIUS","counter","numberCounter","sinValue","cosValue","ALPHA_START","ANGLE_STEPSIZE","cos","smallPointerSize","smallPointerX_Offset","smallPointerY_Offset","drawSmallPointer","smallPointerBuffer","largePointerBuffer","isRunning","reset","getMeasuredTime","rotationAngle","secRotationAngle","Altimeter","angleStep100ft","angleStep1000ft","angleStep10000ft","unitAltPos","value100","value1000","value10000","TICKMARK_OFFSET","pointer10000Buffer","pointer10000Context","pointer1000Buffer","pointer1000Context","pointer100Buffer","pointer100Context","unitStringPosY","offset","minVal","maxVal","MEDIUM_STROKE","THIN_STROKE","draw1000ftPointer","draw10000ftPointer","Trafficlight","redOn","yellowOn","greenOn","housingBuffer","housingCtx","lightGreenBuffer","lightGreenCtx","greenOnBuffer","greenOnCtx","greenOffBuffer","greenOffCtx","lightYellowBuffer","lightYellowCtx","yellowOnBuffer","yellowOnCtx","yellowOffBuffer","yellowOffCtx","lightRedBuffer","lightRedCtx","redOnBuffer","redOnCtx","redOffBuffer","redOffCtx","prefHeight","hatchBuffer","housingFill","housingFrontFill","drawHousing","scale","lightGreenFrameFill","lightGreenInnerFill","lightGreenEffectFill","lightGreenInnerShadowFill","drawLightGreen","greenOnFill","greenOnGlowFill","drawGreenOn","greenOffFill","greenOffInnerShadowFill","drawGreenOff","lightYellowFrameFill","lightYellowInnerFill","lightYellowEffectFill","lightYellowInnerShadowFill","drawLightYellow","yellowOnFill","yellowOnGlowFill","drawYellowOn","yellowOffFill","yellowOffInnerShadowFill","drawYellowOff","lightRedFrameFill","lightRedInnerFill","lightRedEffectFill","lightRedInnerShadowFill","drawLightRed","redOnFill","redOnGlowFill","drawRedOn","redOffFill","redOffInnerShadowFill","drawRedOff","setRedOn","isRedOn","setYellowOn","isYellowOn","setGreenOn","isGreenOn","Lightbulb","glowColor","lightOn","offBuffer","offCtx","onBuffer","onCtx","bulbBuffer","bulbCtx","drawOff","glassOffFill","hsl","glassOnFill","drawOn","highlight","winding","winding1","contactPlate","drawBulb","setOn","isOn","setGlowColor","getGlowColor","setTransform","globalAlpha","steelseries"],"mappings":"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","file":"srcdocs.8e2ec0a1.js","sourceRoot":"../srcdocs","sourcesContent":["/** ********************************************************************\nTERMS OF USE - EASING EQUATIONS\nOpen source under the BSD License.\nCopyright (c) 2001 Robert Penner\nJavaScript version copyright (C) 2006 by Philippe Maegerman\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n   * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n   * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n   * Neither the name of the author nor the names of contributors may\nbe used to endorse or promote products derived from this software\nwithout specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n*****************************************/\nfunction Delegate () {}\nDelegate.create = function (o, f) {\n  const a = []\n  let i\n  const l = arguments.length\n  for (i = 2; i < l; i++) {\n    a[i - 2] = arguments[i]\n  }\n  return function () {\n    const aP = [].concat(arguments, a)\n    f.apply(o, aP)\n  }\n}\n\n/*\nobject:\n  type:Object\n    The object you want to modify. It can be any object, a visual object that you want to animate\n    ( document.body.style ) or an anymous object ( new Object() ).\nproperty:\n  type:String\n    The property that is updated on the target object, it can be empty ('')\neasing:\n  type:Function\n    The easing that will be applied to motion.\nstart:\n  type:Number\n    Start value\nend:\n  type:Number\n    End value\nduration:\n  type:Number\n    Animation duration in seconds\nsuffixe:\n type:String\n   A string to append to the updated property ('%','pt','em' ...).\n*/\n\nconst Tween = function (obj, prop, func, begin, finish, duration, suffixe) {\n  this.init(obj, prop, func, begin, finish, duration, suffixe)\n}\nconst t = Tween.prototype\n\nt.obj = {}\nt.prop = ''\nt.func = function (t, b, c, d) {\n  return (c * t) / d + b\n}\nt.begin = 0\nt.change = 0\nt.prevTime = 0\nt.prevPos = 0\nt.looping = false\nt._duration = 0\nt._time = 0\nt._pos = 0\nt._position = 0\nt._startTime = 0\nt._finish = 0\nt.name = ''\nt.suffixe = ''\nt._listeners = []\nt.setTime = function (t) {\n  this.prevTime = this._time\n  if (t > this.getDuration()) {\n    if (this.looping) {\n      this.rewind(t - this._duration)\n      this.update()\n      this.broadcastMessage('onMotionLooped', {\n        target: this,\n        type: 'onMotionLooped'\n      })\n    } else {\n      this._time = this._duration\n      this.update()\n      this.stop()\n      this.broadcastMessage('onMotionFinished', {\n        target: this,\n        type: 'onMotionFinished'\n      })\n    }\n  } else if (t < 0) {\n    this.rewind()\n    this.update()\n  } else {\n    this._time = t\n    this.update()\n  }\n}\nt.getTime = function () {\n  return this._time\n}\nt.setDuration = function (d) {\n  this._duration = d === null || d <= 0 ? 100000 : d\n}\nt.getDuration = function () {\n  return this._duration\n}\nt.setPosition = function (p) {\n  this.prevPos = this._pos\n  const a = this.suffixe !== '' ? this.suffixe : ''\n  this.obj[this.prop] = Math.round(p) + a\n  this._pos = p\n  this.broadcastMessage('onMotionChanged', {\n    target: this,\n    type: 'onMotionChanged'\n  })\n}\nt.getPosition = function (t) {\n  if (t === undefined) {\n    t = this._time\n  }\n  return this.func(t, this.begin, this.change, this._duration)\n}\nt.setFinish = function (f) {\n  this.change = f - this.begin\n}\nt.getFinish = function () {\n  return this.begin + this.change\n}\nt.init = function (obj, prop, func, begin, finish, duration, suffixe) {\n  if (!arguments.length) {\n    return\n  }\n  this._listeners = []\n  this.addListener(this)\n  if (suffixe) {\n    this.suffixe = suffixe\n  }\n  this.obj = obj\n  this.prop = prop\n  this.begin = begin\n  this._pos = begin\n  this.setDuration(duration)\n  if (func !== null && func !== '') {\n    this.func = func\n  }\n  this.setFinish(finish)\n}\nt.start = function () {\n  this.rewind()\n  this.startEnterFrame()\n  this.broadcastMessage('onMotionStarted', {\n    target: this,\n    type: 'onMotionStarted'\n  })\n  // alert('in');\n}\nt.rewind = function (t) {\n  this.stop()\n  this._time = t === undefined ? 0 : t\n  this.fixTime()\n  this.update()\n}\nt.fforward = function () {\n  this._time = this._duration\n  this.fixTime()\n  this.update()\n}\nt.update = function () {\n  this.setPosition(this.getPosition(this._time))\n}\nt.startEnterFrame = function () {\n  this.stopEnterFrame()\n  this.isPlaying = true\n  this.onEnterFrame()\n}\nt.onEnterFrame = function () {\n  if (this.isPlaying) {\n    this.nextFrame()\n    // To get real smooth movement you have to set the timeout to 0 instead of 25\n    setTimeout(Delegate.create(this, this.onEnterFrame), 25)\n  }\n}\nt.nextFrame = function () {\n  this.setTime((this.getTimer() - this._startTime) / 1000)\n}\nt.stop = function () {\n  this.stopEnterFrame()\n  this.broadcastMessage('onMotionStopped', {\n    target: this,\n    type: 'onMotionStopped'\n  })\n}\nt.stopEnterFrame = function () {\n  this.isPlaying = false\n}\nt.playing = function () {\n  return this.isPlaying\n}\nt.continueTo = function (finish, duration) {\n  this.begin = this._pos\n  this.setFinish(finish)\n  if (this._duration !== undefined) {\n    this.setDuration(duration)\n  }\n  this.start()\n}\nt.resume = function () {\n  this.fixTime()\n  this.startEnterFrame()\n  this.broadcastMessage('onMotionResumed', {\n    target: this,\n    type: 'onMotionResumed'\n  })\n}\nt.yoyo = function () {\n  this.continueTo(this.begin, this._time)\n}\nt.addListener = function (o) {\n  this.removeListener(o)\n  return this._listeners.push(o)\n}\nt.removeListener = function (o) {\n  const a = this._listeners\n  let i = a.length\n  while (i--) {\n    if (a[i] === o) {\n      a.splice(i, 1)\n      return true\n    }\n  }\n  return false\n}\nt.broadcastMessage = function () {\n  const arr = []\n  let i\n  const a = this._listeners\n  const l = a.length\n  for (i = 0; i < arguments.length; i++) {\n    arr.push(arguments[i])\n  }\n  const e = arr.shift()\n\n  for (i = 0; i < l; i++) {\n    if (a[i][e]) {\n      a[i][e].apply(a[i], arr)\n    }\n  }\n}\nt.fixTime = function () {\n  this._startTime = this.getTimer() - this._time * 1000\n}\nt.getTimer = function () {\n  return new Date().getTime() - this._time\n}\nTween.backEaseIn = function (t, b, c, d, a, p) {\n  const s = 1.70158\n  return c * (t /= d) * t * ((s + 1) * t - s) + b\n}\nTween.backEaseOut = function (t, b, c, d, a, p) {\n  const s = 1.70158\n  return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b\n}\nTween.backEaseInOut = function (t, b, c, d, a, p) {\n  let s = 1.70158\n  if ((t /= d / 2) < 1) {\n    return (c / 2) * (t * t * (((s *= 1.525) + 1) * t - s)) + b\n  }\n  return (c / 2) * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b\n}\nTween.elasticEaseIn = function (t, b, c, d, a, p) {\n  let s\n  if (t === 0) {\n    return b\n  }\n  if ((t /= d) === 1) {\n    return b + c\n  }\n  if (!p) {\n    p = d * 0.3\n  }\n  if (!a || a < Math.abs(c)) {\n    a = c\n    s = p / 4\n  } else {\n    s = (p / (2 * Math.PI)) * Math.asin(c / a)\n  }\n\n  return (\n    -(\n      a *\n      Math.pow(2, 10 * (t -= 1)) *\n      Math.sin(((t * d - s) * (2 * Math.PI)) / p)\n    ) + b\n  )\n}\nTween.elasticEaseOut = function (t, b, c, d, a, p) {\n  let s\n  if (t === 0) {\n    return b\n  }\n  if ((t /= d) === 1) {\n    return b + c\n  }\n  if (!p) {\n    p = d * 0.3\n  }\n  if (!a || a < Math.abs(c)) {\n    a = c\n    s = p / 4\n  } else {\n    s = (p / (2 * Math.PI)) * Math.asin(c / a)\n  }\n  return (\n    a * Math.pow(2, -10 * t) * Math.sin(((t * d - s) * (2 * Math.PI)) / p) +\n    c +\n    b\n  )\n}\nTween.elasticEaseInOut = function (t, b, c, d, a, p) {\n  let s\n  if (t === 0) {\n    return b\n  }\n  if ((t /= d / 2) === 2) {\n    return b + c\n  }\n  if (!p) {\n    p = d * (0.3 * 1.5)\n  }\n  if (!a || a < Math.abs(c)) {\n    a = c\n    s = p / 4\n  } else {\n    s = (p / (2 * Math.PI)) * Math.asin(c / a)\n  }\n  if (t < 1) {\n    return (\n      -0.5 *\n        (a *\n          Math.pow(2, 10 * (t -= 1)) *\n          Math.sin(((t * d - s) * (2 * Math.PI)) / p)) +\n      b\n    )\n  }\n  return (\n    a *\n      Math.pow(2, -10 * (t -= 1)) *\n      Math.sin(((t * d - s) * (2 * Math.PI)) / p) *\n      0.5 +\n    c +\n    b\n  )\n}\nTween.bounceEaseOut = function (t, b, c, d) {\n  if ((t /= d) < 1 / 2.75) {\n    return c * (7.5625 * t * t) + b\n  } else if (t < 2 / 2.75) {\n    return c * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + b\n  } else if (t < 2.5 / 2.75) {\n    return c * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + b\n  } else {\n    return c * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + b\n  }\n}\nTween.bounceEaseIn = function (t, b, c, d) {\n  return c - Tween.bounceEaseOut(d - t, 0, c, d) + b\n}\nTween.bounceEaseInOut = function (t, b, c, d) {\n  if (t < d / 2) {\n    return Tween.bounceEaseIn(t * 2, 0, c, d) * 0.5 + b\n  } else {\n    return Tween.bounceEaseOut(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b\n  }\n}\nTween.strongEaseInOut = function (t, b, c, d) {\n  return c * (t /= d) * t * t * t * t + b\n}\nTween.regularEaseIn = function (t, b, c, d) {\n  return c * (t /= d) * t + b\n}\nTween.regularEaseOut = function (t, b, c, d) {\n  return -c * (t /= d) * (t - 2) + b\n}\nTween.regularEaseInOut = function (t, b, c, d) {\n  if ((t /= d / 2) < 1) {\n    return (c / 2) * t * t + b\n  }\n  return (-c / 2) * (--t * (t - 2) - 1) + b\n}\nTween.strongEaseIn = function (t, b, c, d) {\n  return c * (t /= d) * t * t * t * t + b\n}\nTween.strongEaseOut = function (t, b, c, d) {\n  return c * ((t = t / d - 1) * t * t * t * t + 1) + b\n}\nTween.strongEaseInOut = function (t, b, c, d) {\n  if ((t /= d / 2) < 1) {\n    return (c / 2) * t * t * t * t * t + b\n  }\n  return (c / 2) * ((t -= 2) * t * t * t * t + 2) + b\n}\n\nexport default Tween\n","let BackgroundColorDef;\n(function () {\n  BackgroundColorDef = function (\n    gradientStart,\n    gradientFraction,\n    gradientStop,\n    labelColor,\n    symbolColor,\n    name\n  ) {\n    this.gradientStart = gradientStart\n    this.gradientFraction = gradientFraction\n    this.gradientStop = gradientStop\n    this.labelColor = labelColor\n    this.symbolColor = symbolColor\n    this.name = name\n  }\n})()\nexport { BackgroundColorDef }\n\nlet LcdColorDef;\n(function () {\n  LcdColorDef = function (\n    gradientStartColor,\n    gradientFraction1Color,\n    gradientFraction2Color,\n    gradientFraction3Color,\n    gradientStopColor,\n    textColor\n  ) {\n    this.gradientStartColor = gradientStartColor\n    this.gradientFraction1Color = gradientFraction1Color\n    this.gradientFraction2Color = gradientFraction2Color\n    this.gradientFraction3Color = gradientFraction3Color\n    this.gradientStopColor = gradientStopColor\n    this.textColor = textColor\n  }\n})()\nexport { LcdColorDef }\n\nlet ColorDef;\n(function () {\n  ColorDef = function (veryDark, dark, medium, light, lighter, veryLight) {\n    this.veryDark = veryDark\n    this.dark = dark\n    this.medium = medium\n    this.light = light\n    this.lighter = lighter\n    this.veryLight = veryLight\n  }\n})()\nexport { ColorDef }\n\nlet LedColorDef;\n(function () {\n  LedColorDef = function (\n    innerColor1_ON,\n    innerColor2_ON,\n    outerColor_ON,\n    coronaColor,\n    innerColor1_OFF,\n    innerColor2_OFF,\n    outerColor_OFF\n  ) {\n    this.innerColor1_ON = innerColor1_ON\n    this.innerColor2_ON = innerColor2_ON\n    this.outerColor_ON = outerColor_ON\n    this.coronaColor = coronaColor\n    this.innerColor1_OFF = innerColor1_OFF\n    this.innerColor2_OFF = innerColor2_OFF\n    this.outerColor_OFF = outerColor_OFF\n  }\n})()\nexport { LedColorDef }\n\nlet GaugeTypeDef;\n(function () {\n  GaugeTypeDef = function (type) {\n    this.type = type\n  }\n})()\nexport { GaugeTypeDef }\n\nlet OrientationDef;\n(function () {\n  OrientationDef = function (type) {\n    this.type = type\n  }\n})()\nexport { OrientationDef }\n\nlet KnobTypeDef;\n(function () {\n  KnobTypeDef = function (type) {\n    this.type = type\n  }\n})()\nexport { KnobTypeDef }\n\nlet KnobStyleDef;\n(function () {\n  KnobStyleDef = function (style) {\n    this.style = style\n  }\n})()\nexport { KnobStyleDef }\n\nlet FrameDesignDef;\n(function () {\n  FrameDesignDef = function (design) {\n    this.design = design\n  }\n})()\nexport { FrameDesignDef }\n\nlet PointerTypeDef;\n(function () {\n  PointerTypeDef = function (type) {\n    this.type = type\n  }\n})()\nexport { PointerTypeDef }\n\nlet ForegroundTypeDef;\n(function () {\n  ForegroundTypeDef = function (type) {\n    this.type = type\n  }\n})()\nexport { ForegroundTypeDef }\n\nlet LabelNumberFormatDef;\n(function () {\n  LabelNumberFormatDef = function (format) {\n    this.format = format\n  }\n})()\nexport { LabelNumberFormatDef }\n\nlet TickLabelOrientationDef;\n(function () {\n  TickLabelOrientationDef = function (type) {\n    this.type = type\n  }\n})()\nexport { TickLabelOrientationDef }\n\nlet TrendStateDef;\n(function () {\n  TrendStateDef = function (state) {\n    this.state = state\n  }\n})()\nexport { TrendStateDef }\n","import { ColorDef } from './constants'\n\nexport const HALF_PI = Math.PI * 0.5\nexport const TWO_PI = Math.PI * 2\nexport const PI = Math.PI\nexport const RAD_FACTOR = Math.PI / 180\nexport const DEG_FACTOR = 180 / Math.PI\nexport const doc = document\nexport const lcdFontName = 'LCDMono2Ultra,Arial,Verdana,sans-serif'\nexport const stdFontName = 'Arial,Verdana,sans-serif'\n\nexport const rgbaColor = function (r, g, b, a) {\n  let red\n  let green\n  let blue\n  let alpha\n\n  if (arguments.length === 1) {\n    // hexadecimal input #112233\n    b = parseInt(r.substr(5, 2), 16)\n    g = parseInt(r.substr(3, 2), 16)\n    r = parseInt(r.substr(1, 2), 16)\n    a = 1\n  } else if (arguments.length === 3) {\n    a = 1\n  }\n\n  function validateColors () {\n    red = range(r, 255)\n    green = range(g, 255)\n    blue = range(b, 255)\n    alpha = range(a, 1)\n  }\n\n  validateColors()\n\n  this.getRed = function () {\n    return red\n  }\n\n  this.setRed = function (r) {\n    red = range(r, 255)\n  }\n\n  this.getGreen = function () {\n    return green\n  }\n\n  this.setGreen = function (g) {\n    green = range(g, 255)\n  }\n\n  this.getBlue = function () {\n    return blue\n  }\n\n  this.setBlue = function (b) {\n    blue = range(b, 255)\n  }\n\n  this.getAlpha = function () {\n    return alpha\n  }\n\n  this.setAlpha = function (a) {\n    alpha = range(a, 1)\n  }\n\n  this.getRgbaColor = function () {\n    return 'rgba(' + red + ', ' + green + ', ' + blue + ', ' + alpha + ')'\n  }\n\n  this.getRgbColor = function () {\n    return 'rgb(' + red + ', ' + green + ', ' + blue + ')'\n  }\n\n  this.getHexColor = function () {\n    return '#' + red.toString(16) + green.toString(16) + blue.toString(16)\n  }\n}\n\nexport const ConicalGradient = function (fractions, colors) {\n  const limit = fractions.length - 1\n  let i\n\n  // Pre-multipy fractions array into range -PI to PI\n  for (i = 0; i <= limit; i++) {\n    fractions[i] = TWO_PI * fractions[i] - PI\n  }\n\n  this.fillCircle = function (ctx, centerX, centerY, innerX, outerX) {\n    let angle\n    const radius = Math.ceil(outerX)\n    const diameter = radius * 2\n    let x\n    let y\n    let dx\n    let dy\n    let dy2\n    let distance\n    let indx\n    let pixColor\n\n    // Create pixel array\n    const pixels = ctx.createImageData(diameter, diameter)\n    const alpha = 255\n\n    for (y = 0; y < diameter; y++) {\n      dy = radius - y\n      dy2 = dy * dy\n      for (x = 0; x < diameter; x++) {\n        dx = x - radius\n        distance = Math.sqrt(dx * dx + dy2)\n        if (distance <= radius && distance >= innerX) {\n          // pixels are transparent by default, so only paint the ones we need\n          angle = Math.atan2(dx, dy)\n          for (i = 0; i < limit; i++) {\n            if (angle >= fractions[i] && angle < fractions[i + 1]) {\n              pixColor = getColorFromFraction(\n                colors[i],\n                colors[i + 1],\n                fractions[i + 1] - fractions[i],\n                angle - fractions[i],\n                true\n              )\n            }\n          }\n          // The pixel array is addressed as 4 elements per pixel [r,g,b,a]\n          // plot is 180 rotated from orginal method, so apply a simple invert (diameter - y)\n          indx = (diameter - y) * diameter * 4 + x * 4\n          pixels.data[indx] = pixColor[0]\n          pixels.data[indx + 1] = pixColor[1]\n          pixels.data[indx + 2] = pixColor[2]\n          pixels.data[indx + 3] = alpha\n        }\n      }\n    }\n\n    // Create a new buffer to apply the raw data so we can rotate it\n    const buffer = createBuffer(diameter, diameter)\n    const bufferCtx = buffer.getContext('2d')\n    bufferCtx.putImageData(pixels, 0, 0)\n    // Apply the image buffer\n    ctx.drawImage(buffer, centerX - radius, centerY - radius)\n  }\n\n  this.fillRect = function (\n    ctx,\n    centerX,\n    centerY,\n    width,\n    height,\n    thicknessX,\n    thicknessY\n  ) {\n    let angle\n    let x\n    let y\n    let dx\n    let dy\n    let indx\n    let pixColor\n\n    width = Math.ceil(width)\n    height = Math.ceil(height)\n    const width2 = width / 2\n    const height2 = height / 2\n    thicknessX = Math.ceil(thicknessX)\n    thicknessY = Math.ceil(thicknessY)\n\n    // Create pixel array\n    const pixels = ctx.createImageData(width, height)\n    const alpha = 255\n\n    for (y = 0; y < height; y++) {\n      dy = height2 - y\n      for (x = 0; x < width; x++) {\n        if (y > thicknessY && y <= height - thicknessY) {\n          // we are in the range where we only draw the sides\n          if (x > thicknessX && x < width - thicknessX) {\n            // we are in the empty 'middle', jump to the next edge\n            x = width - thicknessX\n          }\n        }\n        dx = x - width2\n        angle = Math.atan2(dx, dy)\n        for (i = 0; i < limit; i++) {\n          if (angle >= fractions[i] && angle < fractions[i + 1]) {\n            pixColor = getColorFromFraction(\n              colors[i],\n              colors[i + 1],\n              fractions[i + 1] - fractions[i],\n              angle - fractions[i],\n              true\n            )\n          }\n        }\n        // The pixel array is addressed as 4 elements per pixel [r,g,b,a]\n        // plot is 180 rotated from orginal method, so apply a simple invert (height - y)\n        indx = (height - y) * width * 4 + x * 4\n        pixels.data[indx] = pixColor[0]\n        pixels.data[indx + 1] = pixColor[0]\n        pixels.data[indx + 2] = pixColor[0]\n        pixels.data[indx + 3] = alpha\n      }\n    }\n    // Create a new buffer to apply the raw data so we can clip it when drawing to canvas\n    const buffer = createBuffer(width, height)\n    const bufferCtx = buffer.getContext('2d')\n    bufferCtx.putImageData(pixels, 0, 0)\n\n    // draw the buffer back to the canvas\n    ctx.drawImage(buffer, centerX - width2, centerY - height2)\n  }\n}\n\nexport const gradientWrapper = function (start, end, fractions, colors) {\n  this.getColorAt = function (fraction) {\n    let lowerLimit = 0\n    let lowerIndex = 0\n    let upperLimit = 1\n    let upperIndex = 1\n    let i\n\n    fraction = fraction < 0 ? 0 : fraction > 1 ? 1 : fraction\n\n    for (i = 0; i < fractions.length; i++) {\n      if (fractions[i] < fraction && lowerLimit < fractions[i]) {\n        lowerLimit = fractions[i]\n        lowerIndex = i\n      }\n      if (fractions[i] === fraction) {\n        return colors[i]\n      }\n      if (fractions[i] > fraction && upperLimit >= fractions[i]) {\n        upperLimit = fractions[i]\n        upperIndex = i\n      }\n    }\n    const interpolationFraction = (fraction - lowerLimit) / (upperLimit - lowerLimit)\n    return getColorFromFraction(\n      colors[lowerIndex],\n      colors[upperIndex],\n      1,\n      interpolationFraction\n    )\n  }\n\n  this.getStart = function () {\n    return start\n  }\n\n  this.getEnd = function () {\n    return end\n  }\n}\n\nexport function setAlpha (hex, alpha) {\n  const hexColor = hex.charAt(0) === '#' ? hex.substring(1, 7) : hex\n  const red = parseInt(hexColor.substring(0, 2), 16)\n  const green = parseInt(hexColor.substring(2, 4), 16)\n  const blue = parseInt(hexColor.substring(4, 6), 16)\n  const color = 'rgba(' + red + ',' + green + ',' + blue + ',' + alpha + ')'\n\n  return color\n}\n\nexport function getColorFromFraction (\n  sourceColor,\n  destinationColor,\n  range,\n  fraction,\n  returnRawData\n) {\n  const INT_TO_FLOAT = 1 / 255\n  const sourceRed = sourceColor.getRed()\n  const sourceGreen = sourceColor.getGreen()\n  const sourceBlue = sourceColor.getBlue()\n  const sourceAlpha = sourceColor.getAlpha()\n\n  const deltaRed = destinationColor.getRed() - sourceRed\n  const deltaGreen = destinationColor.getGreen() - sourceGreen\n  const deltaBlue = destinationColor.getBlue() - sourceBlue\n  const deltaAlpha =\n    destinationColor.getAlpha() * INT_TO_FLOAT - sourceAlpha * INT_TO_FLOAT\n\n  const fractionRed = (deltaRed / range) * fraction\n  const fractionGreen = (deltaGreen / range) * fraction\n  const fractionBlue = (deltaBlue / range) * fraction\n  const fractionAlpha = (deltaAlpha / range) * fraction\n\n  returnRawData = returnRawData || false\n  if (returnRawData) {\n    return [\n      (sourceRed + fractionRed).toFixed(0),\n      (sourceGreen + fractionGreen).toFixed(0),\n      (sourceBlue + fractionBlue).toFixed(0),\n      sourceAlpha + fractionAlpha\n    ]\n  } else {\n    return new rgbaColor(\n      (sourceRed + fractionRed).toFixed(0),\n      (sourceGreen + fractionGreen).toFixed(0),\n      (sourceBlue + fractionBlue).toFixed(0),\n      sourceAlpha + fractionAlpha\n    )\n  }\n}\n\nexport function Section (start, stop, color) {\n  return {\n    start: start,\n    stop: stop,\n    color: color\n  }\n}\n\nMath.log10 = function (value) {\n  return Math.log(value) / Math.LN10\n}\n\nexport function calcNiceNumber (range, round) {\n  const exponent = Math.floor(Math.log10(range)) // exponent of range\n  const fraction = range / Math.pow(10, exponent) // fractional part of range\n  let niceFraction // nice, rounded fraction\n\n  if (round) {\n    if (fraction < 1.5) {\n      niceFraction = 1\n    } else if (fraction < 3) {\n      niceFraction = 2\n    } else if (fraction < 7) {\n      niceFraction = 5\n    } else {\n      niceFraction = 10\n    }\n  } else {\n    if (fraction <= 1) {\n      niceFraction = 1\n    } else if (fraction <= 2) {\n      niceFraction = 2\n    } else if (fraction <= 5) {\n      niceFraction = 5\n    } else {\n      niceFraction = 10\n    }\n  }\n  return niceFraction * Math.pow(10, exponent)\n}\n\nexport function roundedRectangle (ctx, x, y, w, h, radius) {\n  const r = x + w\n  const b = y + h\n  ctx.beginPath()\n  ctx.moveTo(x + radius, y)\n  ctx.lineTo(r - radius, y)\n  ctx.quadraticCurveTo(r, y, r, y + radius)\n  ctx.lineTo(r, y + h - radius)\n  ctx.quadraticCurveTo(r, b, r - radius, b)\n  ctx.lineTo(x + radius, b)\n  ctx.quadraticCurveTo(x, b, x, b - radius)\n  ctx.lineTo(x, y + radius)\n  ctx.quadraticCurveTo(x, y, x + radius, y)\n  ctx.closePath()\n  //        ctx.stroke();\n}\n\nexport function createBuffer (width, height) {\n  const buffer = doc.createElement('canvas')\n  buffer.width = width\n  buffer.height = height\n  return buffer\n}\n\nexport function drawToBuffer (width, height, drawFunction) {\n  const buffer = doc.createElement('canvas')\n  buffer.width = width\n  buffer.height = height\n  drawFunction(buffer.getContext('2d'))\n  return buffer\n}\n\nexport function getColorValues (color) {\n  const lookupBuffer = drawToBuffer(1, 1, function (ctx) {\n    ctx.fillStyle = color\n    ctx.beginPath()\n    ctx.rect(0, 0, 1, 1)\n    ctx.fill()\n  })\n  const colorData = lookupBuffer.getContext('2d').getImageData(0, 0, 2, 2).data\n\n  return [colorData[0], colorData[1], colorData[2], colorData[3]]\n}\n\nexport function customColorDef (color) {\n  const values = getColorValues(color)\n  const rgbaCol = new rgbaColor(values[0], values[1], values[2], values[3])\n\n  const VERY_DARK = darker(rgbaCol, 0.32)\n  const DARK = darker(rgbaCol, 0.62)\n  const LIGHT = lighter(rgbaCol, 0.84)\n  const LIGHTER = lighter(rgbaCol, 0.94)\n  const VERY_LIGHT = lighter(rgbaCol, 1)\n\n  return new ColorDef(VERY_DARK, DARK, rgbaCol, LIGHT, LIGHTER, VERY_LIGHT)\n}\n\nexport function rgbToHsl (red, green, blue) {\n  let hue\n  let saturation\n  let delta\n\n  red /= 255\n  green /= 255\n  blue /= 255\n\n  const max = Math.max(red, green, blue)\n  const min = Math.min(red, green, blue)\n  const lightness = (max + min) / 2\n\n  if (max === min) {\n    hue = saturation = 0 // achromatic\n  } else {\n    delta = max - min\n    saturation =\n      lightness > 0.5 ? delta / (2 - max - min) : delta / (max + min)\n    switch (max) {\n      case red:\n        hue = (green - blue) / delta + (green < blue ? 6 : 0)\n        break\n      case green:\n        hue = (blue - red) / delta + 2\n        break\n      case blue:\n        hue = (red - green) / delta + 4\n        break\n    }\n    hue /= 6\n  }\n  return [hue, saturation, lightness]\n}\n\nexport function hsbToRgb (hue, saturation, brightness) {\n  let r\n  let g\n  let b\n  const i = Math.floor(hue * 6)\n  const f = hue * 6 - i\n  const p = brightness * (1 - saturation)\n  const q = brightness * (1 - f * saturation)\n  const t = brightness * (1 - (1 - f) * saturation)\n\n  switch (i % 6) {\n    case 0:\n      r = brightness\n      g = t\n      b = p\n      break\n    case 1:\n      r = q\n      g = brightness\n      b = p\n      break\n    case 2:\n      r = p\n      g = brightness\n      b = t\n      break\n    case 3:\n      r = p\n      g = q\n      b = brightness\n      break\n    case 4:\n      r = t\n      g = p\n      b = brightness\n      break\n    case 5:\n      r = brightness\n      g = p\n      b = q\n      break\n  }\n\n  return [Math.floor(r * 255), Math.floor(g * 255), Math.floor(b * 255)]\n}\n\nexport function rgbToHsb (r, g, b) {\n  let hue\n\n  r = r / 255\n  g = g / 255\n  b = b / 255\n  const max = Math.max(r, g, b)\n  const min = Math.min(r, g, b)\n  const brightness = max\n  const delta = max - min\n  const saturation = max === 0 ? 0 : delta / max\n\n  if (max === min) {\n    hue = 0 // achromatic\n  } else {\n    switch (max) {\n      case r:\n        hue = (g - b) / delta + (g < b ? 6 : 0)\n        break\n      case g:\n        hue = (b - r) / delta + 2\n        break\n      case b:\n        hue = (r - g) / delta + 4\n        break\n    }\n    hue /= 6\n  }\n  return [hue, saturation, brightness]\n}\n\nexport function range (value, limit) {\n  return value < 0 ? 0 : value > limit ? limit : value\n}\n\nexport function darker (color, fraction) {\n  let red = Math.floor(color.getRed() * (1 - fraction))\n  let green = Math.floor(color.getGreen() * (1 - fraction))\n  let blue = Math.floor(color.getBlue() * (1 - fraction))\n\n  red = range(red, 255)\n  green = range(green, 255)\n  blue = range(blue, 255)\n\n  return new rgbaColor(red, green, blue, color.getAlpha())\n}\n\nexport function lighter (color, fraction) {\n  let red = Math.round(color.getRed() * (1 + fraction))\n  let green = Math.round(color.getGreen() * (1 + fraction))\n  let blue = Math.round(color.getBlue() * (1 + fraction))\n\n  red = range(red, 255)\n  green = range(green, 255)\n  blue = range(blue, 255)\n\n  return new rgbaColor(red, green, blue, color.getAlpha())\n}\n\nexport function wrap (value, lower, upper) {\n  if (upper <= lower) {\n    throw new Error('Rotary bounds are of negative or zero size')\n  }\n\n  const distance = upper - lower\n  const times = Math.floor((value - lower) / distance)\n\n  return value - times * distance\n}\n\nexport function getShortestAngle (from, to) {\n  return wrap(to - from, -180, 180)\n}\n\n// shim layer\nexport const requestAnimFrame = (function () {\n  return (\n    window.requestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    window.oRequestAnimationFrame ||\n    window.msRequestAnimationFrame ||\n    function (callback) {\n      window.setTimeout(callback, 1000 / 16)\n    }\n  )\n})()\n\nexport function getCanvasContext (elementOrId) {\n  const element =\n    typeof elementOrId === 'string' || elementOrId instanceof String\n      ? doc.getElementById(elementOrId)\n      : elementOrId\n  return element.getContext('2d')\n}\n","import { createBuffer, TWO_PI } from './tools'\n\nconst drawPointerImage = function (ctx, size, ptrType, ptrColor, lblColor) {\n  let ptrBuffer\n  let ptrCtx\n  let grad\n  let radius\n  const cacheKey =\n    size.toString() +\n    ptrType.type +\n    ptrColor.light.getHexColor() +\n    ptrColor.medium.getHexColor()\n\n  // check if we have already created and cached this buffer, if not create it\n  if (!drawPointerImage.cache[cacheKey]) {\n    // create a pointer buffer\n    ptrBuffer = createBuffer(size, size)\n    ptrCtx = ptrBuffer.getContext('2d')\n\n    switch (ptrType.type) {\n      case 'type2':\n        grad = ptrCtx.createLinearGradient(\n          0,\n          size * 0.471962,\n          0,\n          size * 0.130841\n        )\n        grad.addColorStop(0, lblColor.getRgbaColor())\n        grad.addColorStop(0.36, lblColor.getRgbaColor())\n        grad.addColorStop(0.361, ptrColor.light.getRgbaColor())\n        grad.addColorStop(1, ptrColor.light.getRgbaColor())\n        ptrCtx.fillStyle = grad\n        ptrCtx.beginPath()\n        ptrCtx.moveTo(size * 0.518691, size * 0.471962)\n        ptrCtx.lineTo(size * 0.509345, size * 0.462616)\n        ptrCtx.lineTo(size * 0.509345, size * 0.341121)\n        ptrCtx.lineTo(size * 0.504672, size * 0.130841)\n        ptrCtx.lineTo(size * 0.495327, size * 0.130841)\n        ptrCtx.lineTo(size * 0.490654, size * 0.341121)\n        ptrCtx.lineTo(size * 0.490654, size * 0.462616)\n        ptrCtx.lineTo(size * 0.481308, size * 0.471962)\n        ptrCtx.closePath()\n        ptrCtx.fill()\n        break\n\n      case 'type3':\n        ptrCtx.beginPath()\n        ptrCtx.rect(\n          size * 0.495327,\n          size * 0.130841,\n          size * 0.009345,\n          size * 0.373831\n        )\n        ptrCtx.closePath()\n        ptrCtx.fillStyle = ptrColor.light.getRgbaColor()\n        ptrCtx.fill()\n        break\n\n      case 'type4':\n        grad = ptrCtx.createLinearGradient(\n          0.467289 * size,\n          0,\n          0.528036 * size,\n          0\n        )\n        grad.addColorStop(0, ptrColor.dark.getRgbaColor())\n        grad.addColorStop(0.51, ptrColor.dark.getRgbaColor())\n        grad.addColorStop(0.52, ptrColor.light.getRgbaColor())\n        grad.addColorStop(1, ptrColor.light.getRgbaColor())\n        ptrCtx.fillStyle = grad\n        ptrCtx.beginPath()\n        ptrCtx.moveTo(size * 0.5, size * 0.126168)\n        ptrCtx.lineTo(size * 0.514018, size * 0.135514)\n        ptrCtx.lineTo(size * 0.53271, size * 0.5)\n        ptrCtx.lineTo(size * 0.523364, size * 0.602803)\n        ptrCtx.lineTo(size * 0.476635, size * 0.602803)\n        ptrCtx.lineTo(size * 0.467289, size * 0.5)\n        ptrCtx.lineTo(size * 0.485981, size * 0.135514)\n        ptrCtx.lineTo(size * 0.5, size * 0.126168)\n        ptrCtx.closePath()\n        ptrCtx.fill()\n        break\n\n      case 'type5':\n        grad = ptrCtx.createLinearGradient(\n          0.471962 * size,\n          0,\n          0.528036 * size,\n          0\n        )\n        grad.addColorStop(0, ptrColor.light.getRgbaColor())\n        grad.addColorStop(0.5, ptrColor.light.getRgbaColor())\n        grad.addColorStop(0.5, ptrColor.medium.getRgbaColor())\n        grad.addColorStop(1, ptrColor.medium.getRgbaColor())\n        ptrCtx.fillStyle = grad\n        ptrCtx.beginPath()\n        ptrCtx.moveTo(size * 0.5, size * 0.495327)\n        ptrCtx.lineTo(size * 0.528037, size * 0.495327)\n        ptrCtx.lineTo(size * 0.5, size * 0.149532)\n        ptrCtx.lineTo(size * 0.471962, size * 0.495327)\n        ptrCtx.lineTo(size * 0.5, size * 0.495327)\n        ptrCtx.closePath()\n        ptrCtx.fill()\n\n        ptrCtx.lineWidth = 1\n        ptrCtx.lineCap = 'square'\n        ptrCtx.lineJoin = 'miter'\n        ptrCtx.strokeStyle = ptrColor.dark.getRgbaColor()\n        ptrCtx.stroke()\n        break\n\n      case 'type6':\n        ptrCtx.fillStyle = ptrColor.medium.getRgbaColor()\n        ptrCtx.beginPath()\n        ptrCtx.moveTo(size * 0.481308, size * 0.485981)\n        ptrCtx.lineTo(size * 0.481308, size * 0.392523)\n        ptrCtx.lineTo(size * 0.485981, size * 0.317757)\n        ptrCtx.lineTo(size * 0.495327, size * 0.130841)\n        ptrCtx.lineTo(size * 0.504672, size * 0.130841)\n        ptrCtx.lineTo(size * 0.514018, size * 0.317757)\n        ptrCtx.lineTo(size * 0.518691, size * 0.38785)\n        ptrCtx.lineTo(size * 0.518691, size * 0.485981)\n        ptrCtx.lineTo(size * 0.504672, size * 0.485981)\n        ptrCtx.lineTo(size * 0.504672, size * 0.38785)\n        ptrCtx.lineTo(size * 0.5, size * 0.317757)\n        ptrCtx.lineTo(size * 0.495327, size * 0.392523)\n        ptrCtx.lineTo(size * 0.495327, size * 0.485981)\n        ptrCtx.lineTo(size * 0.481308, size * 0.485981)\n        ptrCtx.closePath()\n        ptrCtx.fill()\n        break\n\n      case 'type7':\n        grad = ptrCtx.createLinearGradient(\n          0.481308 * size,\n          0,\n          0.518691 * size,\n          0\n        )\n        grad.addColorStop(0, ptrColor.dark.getRgbaColor())\n        grad.addColorStop(1, ptrColor.medium.getRgbaColor())\n        ptrCtx.fillStyle = grad\n        ptrCtx.beginPath()\n        ptrCtx.moveTo(size * 0.490654, size * 0.130841)\n        ptrCtx.lineTo(size * 0.481308, size * 0.5)\n        ptrCtx.lineTo(size * 0.518691, size * 0.5)\n        ptrCtx.lineTo(size * 0.504672, size * 0.130841)\n        ptrCtx.lineTo(size * 0.490654, size * 0.130841)\n        ptrCtx.closePath()\n        ptrCtx.fill()\n        break\n\n      case 'type8':\n        grad = ptrCtx.createLinearGradient(\n          0.471962 * size,\n          0,\n          0.528036 * size,\n          0\n        )\n        grad.addColorStop(0, ptrColor.light.getRgbaColor())\n        grad.addColorStop(0.5, ptrColor.light.getRgbaColor())\n        grad.addColorStop(0.5, ptrColor.medium.getRgbaColor())\n        grad.addColorStop(1, ptrColor.medium.getRgbaColor())\n        ptrCtx.fillStyle = grad\n        ptrCtx.strokeStyle = ptrColor.dark.getRgbaColor()\n        ptrCtx.beginPath()\n        ptrCtx.moveTo(size * 0.5, size * 0.53271)\n        ptrCtx.lineTo(size * 0.53271, size * 0.5)\n        ptrCtx.bezierCurveTo(\n          size * 0.53271,\n          size * 0.5,\n          size * 0.509345,\n          size * 0.457943,\n          size * 0.5,\n          size * 0.149532\n        )\n        ptrCtx.bezierCurveTo(\n          size * 0.490654,\n          size * 0.457943,\n          size * 0.467289,\n          size * 0.5,\n          size * 0.467289,\n          size * 0.5\n        )\n        ptrCtx.lineTo(size * 0.5, size * 0.53271)\n        ptrCtx.closePath()\n        ptrCtx.fill()\n        ptrCtx.stroke()\n        break\n\n      case 'type9':\n        grad = ptrCtx.createLinearGradient(\n          0.471962 * size,\n          0,\n          0.528036 * size,\n          0\n        )\n        grad.addColorStop(0, 'rgb(50, 50, 50)')\n        grad.addColorStop(0.5, '#666666')\n        grad.addColorStop(1, 'rgb(50, 50, 50)')\n        ptrCtx.fillStyle = grad\n        ptrCtx.strokeStyle = '#2E2E2E'\n        ptrCtx.beginPath()\n        ptrCtx.moveTo(size * 0.495327, size * 0.233644)\n        ptrCtx.lineTo(size * 0.504672, size * 0.233644)\n        ptrCtx.lineTo(size * 0.514018, size * 0.439252)\n        ptrCtx.lineTo(size * 0.485981, size * 0.439252)\n        ptrCtx.lineTo(size * 0.495327, size * 0.233644)\n        ptrCtx.closePath()\n        ptrCtx.moveTo(size * 0.490654, size * 0.130841)\n        ptrCtx.lineTo(size * 0.471962, size * 0.471962)\n        ptrCtx.lineTo(size * 0.471962, size * 0.528037)\n        ptrCtx.bezierCurveTo(\n          size * 0.471962,\n          size * 0.528037,\n          size * 0.476635,\n          size * 0.602803,\n          size * 0.476635,\n          size * 0.602803\n        )\n        ptrCtx.bezierCurveTo(\n          size * 0.476635,\n          size * 0.607476,\n          size * 0.481308,\n          size * 0.607476,\n          size * 0.5,\n          size * 0.607476\n        )\n        ptrCtx.bezierCurveTo(\n          size * 0.518691,\n          size * 0.607476,\n          size * 0.523364,\n          size * 0.607476,\n          size * 0.523364,\n          size * 0.602803\n        )\n        ptrCtx.bezierCurveTo(\n          size * 0.523364,\n          size * 0.602803,\n          size * 0.528037,\n          size * 0.528037,\n          size * 0.528037,\n          size * 0.528037\n        )\n        ptrCtx.lineTo(size * 0.528037, size * 0.471962)\n        ptrCtx.lineTo(size * 0.509345, size * 0.130841)\n        ptrCtx.lineTo(size * 0.490654, size * 0.130841)\n        ptrCtx.closePath()\n        ptrCtx.fill()\n\n        ptrCtx.beginPath()\n        ptrCtx.moveTo(size * 0.495327, size * 0.219626)\n        ptrCtx.lineTo(size * 0.504672, size * 0.219626)\n        ptrCtx.lineTo(size * 0.504672, size * 0.135514)\n        ptrCtx.lineTo(size * 0.495327, size * 0.135514)\n        ptrCtx.lineTo(size * 0.495327, size * 0.219626)\n        ptrCtx.closePath()\n\n        ptrCtx.fillStyle = ptrColor.medium.getRgbaColor()\n        ptrCtx.fill()\n        break\n\n      case 'type10':\n        // POINTER_TYPE10\n        ptrCtx.beginPath()\n        ptrCtx.moveTo(size * 0.5, size * 0.149532)\n        ptrCtx.bezierCurveTo(\n          size * 0.5,\n          size * 0.149532,\n          size * 0.443925,\n          size * 0.490654,\n          size * 0.443925,\n          size * 0.5\n        )\n        ptrCtx.bezierCurveTo(\n          size * 0.443925,\n          size * 0.53271,\n          size * 0.467289,\n          size * 0.556074,\n          size * 0.5,\n          size * 0.556074\n        )\n        ptrCtx.bezierCurveTo(\n          size * 0.53271,\n          size * 0.556074,\n          size * 0.556074,\n          size * 0.53271,\n          size * 0.556074,\n          size * 0.5\n        )\n        ptrCtx.bezierCurveTo(\n          size * 0.556074,\n          size * 0.490654,\n          size * 0.5,\n          size * 0.149532,\n          size * 0.5,\n          size * 0.149532\n        )\n        ptrCtx.closePath()\n        grad = ptrCtx.createLinearGradient(\n          0.471962 * size,\n          0,\n          0.528036 * size,\n          0\n        )\n        grad.addColorStop(0, ptrColor.light.getRgbaColor())\n        grad.addColorStop(0.5, ptrColor.light.getRgbaColor())\n        grad.addColorStop(0.5, ptrColor.medium.getRgbaColor())\n        grad.addColorStop(1, ptrColor.medium.getRgbaColor())\n        ptrCtx.fillStyle = grad\n        ptrCtx.strokeStyle = ptrColor.medium.getRgbaColor()\n        ptrCtx.lineWidth = 1\n        ptrCtx.lineCap = 'square'\n        ptrCtx.lineJoin = 'miter'\n        ptrCtx.fill()\n        ptrCtx.stroke()\n        break\n\n      case 'type11':\n        // POINTER_TYPE11\n        ptrCtx.beginPath()\n        ptrCtx.moveTo(0.5 * size, 0.168224 * size)\n        ptrCtx.lineTo(0.485981 * size, 0.5 * size)\n        ptrCtx.bezierCurveTo(\n          0.485981 * size,\n          0.5 * size,\n          0.481308 * size,\n          0.584112 * size,\n          0.5 * size,\n          0.584112 * size\n        )\n        ptrCtx.bezierCurveTo(\n          0.514018 * size,\n          0.584112 * size,\n          0.509345 * size,\n          0.5 * size,\n          0.509345 * size,\n          0.5 * size\n        )\n        ptrCtx.lineTo(0.5 * size, 0.168224 * size)\n        ptrCtx.closePath()\n        grad = ptrCtx.createLinearGradient(\n          0,\n          0.168224 * size,\n          0,\n          0.584112 * size\n        )\n        grad.addColorStop(0, ptrColor.medium.getRgbaColor())\n        grad.addColorStop(1, ptrColor.dark.getRgbaColor())\n        ptrCtx.fillStyle = grad\n        ptrCtx.strokeStyle = ptrColor.dark.getRgbaColor()\n        ptrCtx.fill()\n        ptrCtx.stroke()\n        break\n\n      case 'type12':\n        // POINTER_TYPE12\n        ptrCtx.beginPath()\n        ptrCtx.moveTo(0.5 * size, 0.168224 * size)\n        ptrCtx.lineTo(0.485981 * size, 0.5 * size)\n        ptrCtx.lineTo(0.5 * size, 0.504672 * size)\n        ptrCtx.lineTo(0.509345 * size, 0.5 * size)\n        ptrCtx.lineTo(0.5 * size, 0.168224 * size)\n        ptrCtx.closePath()\n        grad = ptrCtx.createLinearGradient(\n          0,\n          0.168224 * size,\n          0,\n          0.504672 * size\n        )\n        grad.addColorStop(0, ptrColor.medium.getRgbaColor())\n        grad.addColorStop(1, ptrColor.dark.getRgbaColor())\n        ptrCtx.fillStyle = grad\n        ptrCtx.strokeStyle = ptrColor.dark.getRgbaColor()\n        ptrCtx.fill()\n        ptrCtx.stroke()\n        break\n\n      case 'type13':\n      // POINTER_TYPE13\n      // eslint-disable-next-line no-fallthrough\n      case 'type14':\n        // POINTER_TYPE14 (same shape as 13)\n        ptrCtx.beginPath()\n        ptrCtx.moveTo(0.485981 * size, 0.168224 * size)\n        ptrCtx.lineTo(0.5 * size, 0.130841 * size)\n        ptrCtx.lineTo(0.509345 * size, 0.168224 * size)\n        ptrCtx.lineTo(0.509345 * size, 0.509345 * size)\n        ptrCtx.lineTo(0.485981 * size, 0.509345 * size)\n        ptrCtx.lineTo(0.485981 * size, 0.168224 * size)\n        ptrCtx.closePath()\n        if (ptrType.type === 'type13') {\n          // TYPE13\n          grad = ptrCtx.createLinearGradient(0, 0.5 * size, 0, 0.130841 * size)\n          grad.addColorStop(0, lblColor.getRgbaColor())\n          grad.addColorStop(0.85, lblColor.getRgbaColor())\n          grad.addColorStop(0.85, ptrColor.medium.getRgbaColor())\n          grad.addColorStop(1, ptrColor.medium.getRgbaColor())\n          ptrCtx.fillStyle = grad\n        } else {\n          // TYPE14\n          grad = ptrCtx.createLinearGradient(\n            0.485981 * size,\n            0,\n            0.509345 * size,\n            0\n          )\n          grad.addColorStop(0, ptrColor.veryDark.getRgbaColor())\n          grad.addColorStop(0.5, ptrColor.light.getRgbaColor())\n          grad.addColorStop(1, ptrColor.veryDark.getRgbaColor())\n          ptrCtx.fillStyle = grad\n        }\n        ptrCtx.fill()\n        break\n\n      case 'type15':\n      // POINTER TYPE15 - Classic with crescent\n      // eslint-disable-next-line no-fallthrough\n      case 'type16':\n        // POINTER TYPE16 - Classic without crescent\n        ptrCtx.beginPath()\n        ptrCtx.moveTo(size * 0.509345, size * 0.457943)\n        ptrCtx.lineTo(size * 0.5015, size * 0.13)\n        ptrCtx.lineTo(size * 0.4985, size * 0.13)\n        ptrCtx.lineTo(size * 0.490654, size * 0.457943)\n        ptrCtx.bezierCurveTo(\n          size * 0.490654,\n          size * 0.457943,\n          size * 0.490654,\n          size * 0.457943,\n          size * 0.490654,\n          size * 0.457943\n        )\n        ptrCtx.bezierCurveTo(\n          size * 0.471962,\n          size * 0.462616,\n          size * 0.457943,\n          size * 0.481308,\n          size * 0.457943,\n          size * 0.5\n        )\n        ptrCtx.bezierCurveTo(\n          size * 0.457943,\n          size * 0.518691,\n          size * 0.471962,\n          size * 0.537383,\n          size * 0.490654,\n          size * 0.542056\n        )\n        ptrCtx.bezierCurveTo(\n          size * 0.490654,\n          size * 0.542056,\n          size * 0.490654,\n          size * 0.542056,\n          size * 0.490654,\n          size * 0.542056\n        )\n        if (ptrType.type === 'type15') {\n          ptrCtx.lineTo(size * 0.490654, size * 0.57)\n          ptrCtx.bezierCurveTo(\n            size * 0.46,\n            size * 0.58,\n            size * 0.46,\n            size * 0.62,\n            size * 0.490654,\n            size * 0.63\n          )\n          ptrCtx.bezierCurveTo(\n            size * 0.47,\n            size * 0.62,\n            size * 0.48,\n            size * 0.59,\n            size * 0.5,\n            size * 0.59\n          )\n          ptrCtx.bezierCurveTo(\n            size * 0.53,\n            size * 0.59,\n            size * 0.52,\n            size * 0.62,\n            size * 0.509345,\n            size * 0.63\n          )\n          ptrCtx.bezierCurveTo(\n            size * 0.54,\n            size * 0.62,\n            size * 0.54,\n            size * 0.58,\n            size * 0.509345,\n            size * 0.57\n          )\n          ptrCtx.lineTo(size * 0.509345, size * 0.57)\n        } else {\n          ptrCtx.lineTo(size * 0.490654, size * 0.621495)\n          ptrCtx.lineTo(size * 0.509345, size * 0.621495)\n        }\n        ptrCtx.lineTo(size * 0.509345, size * 0.542056)\n        ptrCtx.bezierCurveTo(\n          size * 0.509345,\n          size * 0.542056,\n          size * 0.509345,\n          size * 0.542056,\n          size * 0.509345,\n          size * 0.542056\n        )\n        ptrCtx.bezierCurveTo(\n          size * 0.528037,\n          size * 0.537383,\n          size * 0.542056,\n          size * 0.518691,\n          size * 0.542056,\n          size * 0.5\n        )\n        ptrCtx.bezierCurveTo(\n          size * 0.542056,\n          size * 0.481308,\n          size * 0.528037,\n          size * 0.462616,\n          size * 0.509345,\n          size * 0.457943\n        )\n        ptrCtx.bezierCurveTo(\n          size * 0.509345,\n          size * 0.457943,\n          size * 0.509345,\n          size * 0.457943,\n          size * 0.509345,\n          size * 0.457943\n        )\n        ptrCtx.closePath()\n        if (ptrType.type === 'type15') {\n          grad = ptrCtx.createLinearGradient(0, 0, 0, size * 0.63)\n        } else {\n          grad = ptrCtx.createLinearGradient(0, 0, 0, size * 0.621495)\n        }\n        grad.addColorStop(0, ptrColor.medium.getRgbaColor())\n        grad.addColorStop(0.388888, ptrColor.medium.getRgbaColor())\n        grad.addColorStop(0.5, ptrColor.light.getRgbaColor())\n        grad.addColorStop(0.611111, ptrColor.medium.getRgbaColor())\n        grad.addColorStop(1, ptrColor.medium.getRgbaColor())\n        ptrCtx.fillStyle = grad\n        ptrCtx.strokeStyle = ptrColor.dark.getRgbaColor()\n        ptrCtx.fill()\n        ptrCtx.stroke()\n        // Draw the rings\n        ptrCtx.beginPath()\n        radius = (size * 0.06542) / 2\n        ptrCtx.arc(size * 0.5, size * 0.5, radius, 0, TWO_PI)\n        grad = ptrCtx.createLinearGradient(\n          size * 0.5 - radius,\n          size * 0.5 + radius,\n          0,\n          size * 0.5 + radius\n        )\n        grad.addColorStop(0, '#e6b35c')\n        grad.addColorStop(0.01, '#e6b35c')\n        grad.addColorStop(0.99, '#c48200')\n        grad.addColorStop(1, '#c48200')\n        ptrCtx.fillStyle = grad\n        ptrCtx.closePath()\n        ptrCtx.fill()\n        ptrCtx.beginPath()\n        radius = (size * 0.046728) / 2\n        ptrCtx.arc(size * 0.5, size * 0.5, radius, 0, TWO_PI)\n        grad = ptrCtx.createRadialGradient(\n          size * 0.5,\n          size * 0.5,\n          0,\n          size * 0.5,\n          size * 0.5,\n          radius\n        )\n        grad.addColorStop(0, '#c5c5c5')\n        grad.addColorStop(0.19, '#c5c5c5')\n        grad.addColorStop(0.22, '#000000')\n        grad.addColorStop(0.8, '#000000')\n        grad.addColorStop(0.99, '#707070')\n        grad.addColorStop(1, '#707070')\n        ptrCtx.fillStyle = grad\n        ptrCtx.closePath()\n        ptrCtx.fill()\n        break\n\n      case 'type1':\n      /* falls through */\n      default:\n        grad = ptrCtx.createLinearGradient(\n          0,\n          size * 0.471962,\n          0,\n          size * 0.130841\n        )\n        grad.addColorStop(0, ptrColor.veryDark.getRgbaColor())\n        grad.addColorStop(0.3, ptrColor.medium.getRgbaColor())\n        grad.addColorStop(0.59, ptrColor.medium.getRgbaColor())\n        grad.addColorStop(1, ptrColor.veryDark.getRgbaColor())\n        ptrCtx.fillStyle = grad\n        ptrCtx.beginPath()\n        ptrCtx.moveTo(size * 0.518691, size * 0.471962)\n        ptrCtx.bezierCurveTo(\n          size * 0.514018,\n          size * 0.457943,\n          size * 0.509345,\n          size * 0.415887,\n          size * 0.509345,\n          size * 0.401869\n        )\n        ptrCtx.bezierCurveTo(\n          size * 0.504672,\n          size * 0.383177,\n          size * 0.5,\n          size * 0.130841,\n          size * 0.5,\n          size * 0.130841\n        )\n        ptrCtx.bezierCurveTo(\n          size * 0.5,\n          size * 0.130841,\n          size * 0.490654,\n          size * 0.383177,\n          size * 0.490654,\n          size * 0.397196\n        )\n        ptrCtx.bezierCurveTo(\n          size * 0.490654,\n          size * 0.415887,\n          size * 0.485981,\n          size * 0.457943,\n          size * 0.481308,\n          size * 0.471962\n        )\n        ptrCtx.bezierCurveTo(\n          size * 0.471962,\n          size * 0.481308,\n          size * 0.467289,\n          size * 0.490654,\n          size * 0.467289,\n          size * 0.5\n        )\n        ptrCtx.bezierCurveTo(\n          size * 0.467289,\n          size * 0.518691,\n          size * 0.481308,\n          size * 0.53271,\n          size * 0.5,\n          size * 0.53271\n        )\n        ptrCtx.bezierCurveTo(\n          size * 0.518691,\n          size * 0.53271,\n          size * 0.53271,\n          size * 0.518691,\n          size * 0.53271,\n          size * 0.5\n        )\n        ptrCtx.bezierCurveTo(\n          size * 0.53271,\n          size * 0.490654,\n          size * 0.528037,\n          size * 0.481308,\n          size * 0.518691,\n          size * 0.471962\n        )\n        ptrCtx.closePath()\n        ptrCtx.fill()\n        break\n    }\n    // cache buffer\n    drawPointerImage.cache[cacheKey] = ptrBuffer\n  }\n  ctx.drawImage(drawPointerImage.cache[cacheKey], 0, 0)\n  return this\n}\ndrawPointerImage.cache = {}\n\nexport default drawPointerImage\n","import { rgbaColor, ConicalGradient, createBuffer, TWO_PI } from './tools'\n\nconst drawFrame = function (\n  ctx,\n  frameDesign,\n  centerX,\n  centerY,\n  imageWidth,\n  imageHeight\n) {\n  let radFBuffer\n  let radFCtx\n  let grad\n  let outerX\n  let innerX\n  let fractions\n  let colors\n  const cacheKey = imageWidth.toString() + imageHeight + frameDesign.design\n\n  // check if we have already created and cached this buffer, if not create it\n  if (!drawFrame.cache[cacheKey]) {\n    // Setup buffer\n    radFBuffer = createBuffer(imageWidth, imageHeight)\n    radFCtx = radFBuffer.getContext('2d')\n\n    // outer gray frame\n    radFCtx.fillStyle = '#848484'\n    radFCtx.strokeStyle = 'rgba(132, 132, 132, 0.5)'\n    radFCtx.beginPath()\n    radFCtx.arc(centerX, centerY, imageWidth / 2, 0, TWO_PI, true)\n    radFCtx.closePath()\n    radFCtx.fill()\n    radFCtx.stroke()\n\n    radFCtx.beginPath()\n    radFCtx.arc(centerX, centerY, (imageWidth * 0.990654) / 2, 0, TWO_PI, true)\n    radFCtx.closePath()\n\n    // main gradient frame\n    switch (frameDesign.design) {\n      case 'metal':\n        grad = radFCtx.createLinearGradient(\n          0,\n          imageWidth * 0.004672,\n          0,\n          imageHeight * 0.990654\n        )\n        grad.addColorStop(0, '#fefefe')\n        grad.addColorStop(0.07, 'rgb(210, 210, 210)')\n        grad.addColorStop(0.12, 'rgb(179, 179, 179)')\n        grad.addColorStop(1, 'rgb(213, 213, 213)')\n        radFCtx.fillStyle = grad\n        radFCtx.fill()\n        break\n\n      case 'brass':\n        grad = radFCtx.createLinearGradient(\n          0,\n          imageWidth * 0.004672,\n          0,\n          imageHeight * 0.990654\n        )\n        grad.addColorStop(0, 'rgb(249, 243, 155)')\n        grad.addColorStop(0.05, 'rgb(246, 226, 101)')\n        grad.addColorStop(0.1, 'rgb(240, 225, 132)')\n        grad.addColorStop(0.5, 'rgb(90, 57, 22)')\n        grad.addColorStop(0.9, 'rgb(249, 237, 139)')\n        grad.addColorStop(0.95, 'rgb(243, 226, 108)')\n        grad.addColorStop(1, 'rgb(202, 182, 113)')\n        radFCtx.fillStyle = grad\n        radFCtx.fill()\n        break\n\n      case 'steel':\n        grad = radFCtx.createLinearGradient(\n          0,\n          imageWidth * 0.004672,\n          0,\n          imageHeight * 0.990654\n        )\n        grad.addColorStop(0, 'rgb(231, 237, 237)')\n        grad.addColorStop(0.05, 'rgb(189, 199, 198)')\n        grad.addColorStop(0.1, 'rgb(192, 201, 200)')\n        grad.addColorStop(0.5, 'rgb(23, 31, 33)')\n        grad.addColorStop(0.9, 'rgb(196, 205, 204)')\n        grad.addColorStop(0.95, 'rgb(194, 204, 203)')\n        grad.addColorStop(1, 'rgb(189, 201, 199)')\n        radFCtx.fillStyle = grad\n        radFCtx.fill()\n        break\n\n      case 'gold':\n        grad = radFCtx.createLinearGradient(\n          0,\n          imageWidth * 0.004672,\n          0,\n          imageHeight * 0.990654\n        )\n        grad.addColorStop(0, 'rgb(255, 255, 207)')\n        grad.addColorStop(0.15, 'rgb(255, 237, 96)')\n        grad.addColorStop(0.22, 'rgb(254, 199, 57)')\n        grad.addColorStop(0.3, 'rgb(255, 249, 203)')\n        grad.addColorStop(0.38, 'rgb(255, 199, 64)')\n        grad.addColorStop(0.44, 'rgb(252, 194, 60)')\n        grad.addColorStop(0.51, 'rgb(255, 204, 59)')\n        grad.addColorStop(0.6, 'rgb(213, 134, 29)')\n        grad.addColorStop(0.68, 'rgb(255, 201, 56)')\n        grad.addColorStop(0.75, 'rgb(212, 135, 29)')\n        grad.addColorStop(1, 'rgb(247, 238, 101)')\n        radFCtx.fillStyle = grad\n        radFCtx.fill()\n        break\n\n      case 'anthracite':\n        grad = radFCtx.createLinearGradient(\n          0,\n          0.004672 * imageHeight,\n          0,\n          0.995326 * imageHeight\n        )\n        grad.addColorStop(0, 'rgb(118, 117, 135)')\n        grad.addColorStop(0.06, 'rgb(74, 74, 82)')\n        grad.addColorStop(0.12, 'rgb(50, 50, 54)')\n        grad.addColorStop(1, 'rgb(79, 79, 87)')\n        radFCtx.fillStyle = grad\n        radFCtx.fill()\n        break\n\n      case 'tiltedGray':\n        grad = radFCtx.createLinearGradient(\n          0.233644 * imageWidth,\n          0.084112 * imageHeight,\n          0.81258 * imageWidth,\n          0.910919 * imageHeight\n        )\n        grad.addColorStop(0, '#ffffff')\n        grad.addColorStop(0.07, 'rgb(210, 210, 210)')\n        grad.addColorStop(0.16, 'rgb(179, 179, 179)')\n        grad.addColorStop(0.33, '#ffffff')\n        grad.addColorStop(0.55, '#c5c5c5')\n        grad.addColorStop(0.79, '#ffffff')\n        grad.addColorStop(1, '#666666')\n        radFCtx.fillStyle = grad\n        radFCtx.fill()\n        break\n\n      case 'tiltedBlack':\n        grad = radFCtx.createLinearGradient(\n          0.228971 * imageWidth,\n          0.079439 * imageHeight,\n          0.802547 * imageWidth,\n          0.898591 * imageHeight\n        )\n        grad.addColorStop(0, '#666666')\n        grad.addColorStop(0.21, '#000000')\n        grad.addColorStop(0.47, '#666666')\n        grad.addColorStop(0.99, '#000000')\n        grad.addColorStop(1, '#000000')\n        radFCtx.fillStyle = grad\n        radFCtx.fill()\n        break\n\n      case 'glossyMetal':\n        grad = radFCtx.createRadialGradient(\n          0.5 * imageWidth,\n          0.5 * imageHeight,\n          0,\n          0.5 * imageWidth,\n          0.5 * imageWidth,\n          0.5 * imageWidth\n        )\n        grad.addColorStop(0, 'rgb(207, 207, 207)')\n        grad.addColorStop(0.96, 'rgb(205, 204, 205)')\n        grad.addColorStop(1, 'rgb(244, 244, 244)')\n        radFCtx.fillStyle = grad\n        radFCtx.fill()\n        radFCtx.beginPath()\n        radFCtx.arc(\n          0.5 * imageWidth,\n          0.5 * imageHeight,\n          (0.973962 * imageWidth) / 2,\n          0,\n          TWO_PI\n        )\n        radFCtx.closePath()\n        grad = radFCtx.createLinearGradient(\n          0,\n          imageHeight - 0.971962 * imageHeight,\n          0,\n          0.971962 * imageHeight\n        )\n        grad.addColorStop(0, 'rgb(249, 249, 249)')\n        grad.addColorStop(0.23, 'rgb(200, 195, 191)')\n        grad.addColorStop(0.36, '#ffffff')\n        grad.addColorStop(0.59, 'rgb(29, 29, 29)')\n        grad.addColorStop(0.76, 'rgb(200, 194, 192)')\n        grad.addColorStop(1, 'rgb(209, 209, 209)')\n        radFCtx.fillStyle = grad\n        radFCtx.fill()\n\n        radFCtx.beginPath()\n        radFCtx.arc(\n          0.5 * imageWidth,\n          0.5 * imageHeight,\n          (0.869158 * imageWidth) / 2,\n          0,\n          TWO_PI\n        )\n        radFCtx.closePath()\n        radFCtx.fillStyle = '#f6f6f6'\n        radFCtx.fill()\n\n        radFCtx.beginPath()\n        radFCtx.arc(\n          0.5 * imageWidth,\n          0.5 * imageHeight,\n          (0.85 * imageWidth) / 2,\n          0,\n          TWO_PI\n        )\n        radFCtx.closePath()\n        radFCtx.fillStyle = '#333333'\n        radFCtx.fill()\n        break\n\n      case 'blackMetal':\n        fractions = [0, 0.125, 0.347222, 0.5, 0.680555, 0.875, 1]\n\n        colors = [\n          new rgbaColor(254, 254, 254, 1),\n          new rgbaColor(0, 0, 0, 1),\n          new rgbaColor(153, 153, 153, 1),\n          new rgbaColor(0, 0, 0, 1),\n          new rgbaColor(153, 153, 153, 1),\n          new rgbaColor(0, 0, 0, 1),\n          new rgbaColor(254, 254, 254, 1)\n        ]\n\n        radFCtx.save()\n        radFCtx.arc(\n          centerX,\n          centerY,\n          (imageWidth * 0.990654) / 2,\n          0,\n          TWO_PI,\n          true\n        )\n        radFCtx.clip()\n        outerX = imageWidth * 0.495327\n        innerX = imageWidth * 0.42056\n        grad = new ConicalGradient(fractions, colors)\n        grad.fillCircle(radFCtx, centerX, centerY, innerX, outerX)\n        // fade outer edge\n        radFCtx.strokeStyle = '#848484'\n        radFCtx.strokeStyle = 'rgba(132, 132, 132, 0.8)'\n        radFCtx.beginPath()\n        radFCtx.lineWidth = imageWidth / 90\n        radFCtx.arc(centerX, centerY, imageWidth / 2, 0, TWO_PI, true)\n        radFCtx.closePath()\n        radFCtx.stroke()\n        radFCtx.restore()\n        break\n\n      case 'shinyMetal':\n        fractions = [0, 0.125, 0.25, 0.347222, 0.5, 0.652777, 0.75, 0.875, 1]\n\n        colors = [\n          new rgbaColor(254, 254, 254, 1),\n          new rgbaColor(210, 210, 210, 1),\n          new rgbaColor(179, 179, 179, 1),\n          new rgbaColor(238, 238, 238, 1),\n          new rgbaColor(160, 160, 160, 1),\n          new rgbaColor(238, 238, 238, 1),\n          new rgbaColor(179, 179, 179, 1),\n          new rgbaColor(210, 210, 210, 1),\n          new rgbaColor(254, 254, 254, 1)\n        ]\n\n        radFCtx.save()\n        radFCtx.arc(\n          centerX,\n          centerY,\n          (imageWidth * 0.990654) / 2,\n          0,\n          TWO_PI,\n          true\n        )\n        radFCtx.clip()\n        outerX = imageWidth * 0.495327\n        innerX = imageWidth * 0.42056\n        grad = new ConicalGradient(fractions, colors)\n        grad.fillCircle(radFCtx, centerX, centerY, innerX, outerX)\n        // fade outer edge\n        radFCtx.strokeStyle = '#848484'\n        radFCtx.strokeStyle = 'rgba(132, 132, 132, 0.8)'\n        radFCtx.beginPath()\n        radFCtx.lineWidth = imageWidth / 90\n        radFCtx.arc(centerX, centerY, imageWidth / 2, 0, TWO_PI, true)\n        radFCtx.closePath()\n        radFCtx.stroke()\n        radFCtx.restore()\n        break\n\n      case 'chrome':\n        fractions = [\n          0,\n          0.09,\n          0.12,\n          0.16,\n          0.25,\n          0.29,\n          0.33,\n          0.38,\n          0.48,\n          0.52,\n          0.63,\n          0.68,\n          0.8,\n          0.83,\n          0.87,\n          0.97,\n          1\n        ]\n\n        colors = [\n          new rgbaColor(255, 255, 255, 1),\n          new rgbaColor(255, 255, 255, 1),\n          new rgbaColor(136, 136, 138, 1),\n          new rgbaColor(164, 185, 190, 1),\n          new rgbaColor(158, 179, 182, 1),\n          new rgbaColor(112, 112, 112, 1),\n          new rgbaColor(221, 227, 227, 1),\n          new rgbaColor(155, 176, 179, 1),\n          new rgbaColor(156, 176, 177, 1),\n          new rgbaColor(254, 255, 255, 1),\n          new rgbaColor(255, 255, 255, 1),\n          new rgbaColor(156, 180, 180, 1),\n          new rgbaColor(198, 209, 211, 1),\n          new rgbaColor(246, 248, 247, 1),\n          new rgbaColor(204, 216, 216, 1),\n          new rgbaColor(164, 188, 190, 1),\n          new rgbaColor(255, 255, 255, 1)\n        ]\n\n        radFCtx.save()\n        radFCtx.arc(\n          centerX,\n          centerY,\n          (imageWidth * 0.990654) / 2,\n          0,\n          TWO_PI,\n          true\n        )\n        radFCtx.clip()\n        outerX = imageWidth * 0.495327\n        innerX = imageWidth * 0.42056\n        grad = new ConicalGradient(fractions, colors)\n        grad.fillCircle(radFCtx, centerX, centerY, innerX, outerX)\n        // fade outer edge\n        radFCtx.strokeStyle = '#848484'\n        radFCtx.strokeStyle = 'rgba(132, 132, 132, 0.8)'\n        radFCtx.beginPath()\n        radFCtx.lineWidth = imageWidth / 90\n        radFCtx.arc(centerX, centerY, imageWidth / 2, 0, TWO_PI, true)\n        radFCtx.closePath()\n        radFCtx.stroke()\n        radFCtx.restore()\n\n        break\n    }\n\n    // inner bright frame\n    radFCtx.fillStyle = 'rgb(191, 191, 191)'\n    radFCtx.beginPath()\n    radFCtx.arc(centerX, centerY, (imageWidth * 0.841121) / 2, 0, TWO_PI, true)\n    radFCtx.closePath()\n    radFCtx.fill()\n\n    // clip out center so it is transparent if the background is not visible\n    radFCtx.globalCompositeOperation = 'destination-out'\n    // Background ellipse\n    radFCtx.beginPath()\n    radFCtx.arc(centerX, centerY, (imageWidth * 0.83) / 2, 0, TWO_PI, true)\n    radFCtx.closePath()\n    radFCtx.fill()\n\n    // cache the buffer\n    drawFrame.cache[cacheKey] = radFBuffer\n  }\n  ctx.drawImage(drawFrame.cache[cacheKey], 0, 0)\n  return this\n}\ndrawFrame.cache = {}\n\nexport default drawFrame\n","import { drawToBuffer } from './tools'\n\nconst carbonBuffer = drawToBuffer(12, 12, function (ctx) {\n  const imageWidth = ctx.canvas.width\n  const imageHeight = ctx.canvas.height\n  let offsetY = 0\n  let grad\n\n  ctx.save()\n\n  // RULB\n  ctx.save()\n  ctx.beginPath()\n  ctx.rect(0, 0, imageWidth * 0.5, imageHeight * 0.5)\n  ctx.closePath()\n  ctx.restore()\n\n  grad = ctx.createLinearGradient(\n    0,\n    offsetY * imageHeight,\n    0,\n    0.5 * imageHeight + offsetY * imageHeight\n  )\n  grad.addColorStop(0, 'rgb(35, 35, 35)')\n  grad.addColorStop(1, 'rgb(23, 23, 23)')\n  ctx.fillStyle = grad\n  ctx.fill()\n\n  // RULF\n  ctx.save()\n  ctx.beginPath()\n  ctx.rect(\n    imageWidth * 0.083333,\n    0,\n    imageWidth * 0.333333,\n    imageHeight * 0.416666\n  )\n  ctx.closePath()\n  ctx.restore()\n  offsetY = 0\n  grad = ctx.createLinearGradient(\n    0,\n    offsetY * imageHeight,\n    0,\n    0.416666 * imageHeight + offsetY * imageHeight\n  )\n  grad.addColorStop(0, 'rgb(38, 38, 38)')\n  grad.addColorStop(1, 'rgb(30, 30, 30)')\n  ctx.fillStyle = grad\n  ctx.fill()\n\n  // RLRB\n  ctx.save()\n  ctx.beginPath()\n  ctx.rect(\n    imageWidth * 0.5,\n    imageHeight * 0.5,\n    imageWidth * 0.5,\n    imageHeight * 0.5\n  )\n  ctx.closePath()\n  ctx.restore()\n  offsetY = 0.5\n  grad = ctx.createLinearGradient(\n    0,\n    offsetY * imageHeight,\n    0,\n    0.5 * imageHeight + offsetY * imageHeight\n  )\n  grad.addColorStop(0, 'rgb(35, 35, 35)')\n  grad.addColorStop(1, 'rgb(23, 23, 23)')\n  ctx.fillStyle = grad\n  ctx.fill()\n\n  // RLRF\n  ctx.save()\n  ctx.beginPath()\n  ctx.rect(\n    imageWidth * 0.583333,\n    imageHeight * 0.5,\n    imageWidth * 0.333333,\n    imageHeight * 0.416666\n  )\n  ctx.closePath()\n  ctx.restore()\n  offsetY = 0.5\n  grad = ctx.createLinearGradient(\n    0,\n    offsetY * imageHeight,\n    0,\n    0.416666 * imageHeight + offsetY * imageHeight\n  )\n  grad.addColorStop(0, 'rgb(38, 38, 38)')\n  grad.addColorStop(1, 'rgb(30, 30, 30)')\n  ctx.fillStyle = grad\n  ctx.fill()\n\n  // RURB\n  ctx.save()\n  ctx.beginPath()\n  ctx.rect(imageWidth * 0.5, 0, imageWidth * 0.5, imageHeight * 0.5)\n  ctx.closePath()\n  ctx.restore()\n  offsetY = 0\n  grad = ctx.createLinearGradient(\n    0,\n    offsetY * imageHeight,\n    0,\n    0.5 * imageHeight + offsetY * imageHeight\n  )\n  grad.addColorStop(0, '#303030')\n  grad.addColorStop(1, 'rgb(40, 40, 40)')\n  ctx.fillStyle = grad\n  ctx.fill()\n\n  // RURF\n  ctx.save()\n  ctx.beginPath()\n  ctx.rect(\n    imageWidth * 0.583333,\n    imageHeight * 0.083333,\n    imageWidth * 0.333333,\n    imageHeight * 0.416666\n  )\n  ctx.closePath()\n  ctx.restore()\n  offsetY = 0.083333\n  grad = ctx.createLinearGradient(\n    0,\n    offsetY * imageHeight,\n    0,\n    0.416666 * imageHeight + offsetY * imageHeight\n  )\n  grad.addColorStop(0, 'rgb(53, 53, 53)')\n  grad.addColorStop(1, 'rgb(45, 45, 45)')\n  ctx.fillStyle = grad\n  ctx.fill()\n\n  // RLLB\n  ctx.save()\n  ctx.beginPath()\n  ctx.rect(0, imageHeight * 0.5, imageWidth * 0.5, imageHeight * 0.5)\n  ctx.closePath()\n  ctx.restore()\n  offsetY = 0.5\n  grad = ctx.createLinearGradient(\n    0,\n    offsetY * imageHeight,\n    0,\n    0.5 * imageHeight + offsetY * imageHeight\n  )\n  grad.addColorStop(0, '#303030')\n  grad.addColorStop(1, '#282828')\n  ctx.fillStyle = grad\n  ctx.fill()\n\n  // RLLF\n  ctx.save()\n  ctx.beginPath()\n  ctx.rect(\n    imageWidth * 0.083333,\n    imageHeight * 0.583333,\n    imageWidth * 0.333333,\n    imageHeight * 0.416666\n  )\n  ctx.closePath()\n  ctx.restore()\n  offsetY = 0.583333\n  grad = ctx.createLinearGradient(\n    0,\n    offsetY * imageHeight,\n    0,\n    0.416666 * imageHeight + offsetY * imageHeight\n  )\n  grad.addColorStop(0, '#353535')\n  grad.addColorStop(1, '#2d2d2d')\n  ctx.fillStyle = grad\n  ctx.fill()\n\n  ctx.restore()\n})\n\nexport default carbonBuffer\n","import { drawToBuffer } from './tools'\n\nconst punchedSheetBuffer = drawToBuffer(15, 15, function (ctx) {\n  const imageWidth = ctx.canvas.width\n  const imageHeight = ctx.canvas.height\n  let grad\n\n  ctx.save()\n\n  // BACK\n  ctx.save()\n  ctx.beginPath()\n  ctx.rect(0, 0, imageWidth, imageHeight)\n  ctx.closePath()\n  ctx.restore()\n  ctx.fillStyle = '#1D2123'\n  ctx.fill()\n\n  // ULB\n  ctx.save()\n  ctx.beginPath()\n  ctx.moveTo(0, imageHeight * 0.266666)\n  ctx.bezierCurveTo(\n    0,\n    imageHeight * 0.4,\n    imageWidth * 0.066666,\n    imageHeight * 0.466666,\n    imageWidth * 0.2,\n    imageHeight * 0.466666\n  )\n  ctx.bezierCurveTo(\n    imageWidth * 0.333333,\n    imageHeight * 0.466666,\n    imageWidth * 0.4,\n    imageHeight * 0.4,\n    imageWidth * 0.4,\n    imageHeight * 0.266666\n  )\n  ctx.bezierCurveTo(\n    imageWidth * 0.4,\n    imageHeight * 0.133333,\n    imageWidth * 0.333333,\n    imageHeight * 0.066666,\n    imageWidth * 0.2,\n    imageHeight * 0.066666\n  )\n  ctx.bezierCurveTo(\n    imageWidth * 0.066666,\n    imageHeight * 0.066666,\n    0,\n    imageHeight * 0.133333,\n    0,\n    imageHeight * 0.266666\n  )\n  ctx.closePath()\n  grad = ctx.createLinearGradient(\n    0,\n    0.066666 * imageHeight,\n    0,\n    0.466666 * imageHeight\n  )\n  grad.addColorStop(0, '#000000')\n  grad.addColorStop(1, '#444444')\n  ctx.fillStyle = grad\n  ctx.fill()\n\n  // ULF\n  ctx.save()\n  ctx.beginPath()\n  ctx.moveTo(0, imageHeight * 0.2)\n  ctx.bezierCurveTo(\n    0,\n    imageHeight * 0.333333,\n    imageWidth * 0.066666,\n    imageHeight * 0.4,\n    imageWidth * 0.2,\n    imageHeight * 0.4\n  )\n  ctx.bezierCurveTo(\n    imageWidth * 0.333333,\n    imageHeight * 0.4,\n    imageWidth * 0.4,\n    imageHeight * 0.333333,\n    imageWidth * 0.4,\n    imageHeight * 0.2\n  )\n  ctx.bezierCurveTo(\n    imageWidth * 0.4,\n    imageHeight * 0.066666,\n    imageWidth * 0.333333,\n    0,\n    imageWidth * 0.2,\n    0\n  )\n  ctx.bezierCurveTo(\n    imageWidth * 0.066666,\n    0,\n    0,\n    imageHeight * 0.066666,\n    0,\n    imageHeight * 0.2\n  )\n  ctx.closePath()\n  ctx.fillStyle = '#050506'\n  ctx.fill()\n\n  // LRB\n  ctx.save()\n  ctx.beginPath()\n  ctx.moveTo(imageWidth * 0.466666, imageHeight * 0.733333)\n  ctx.bezierCurveTo(\n    imageWidth * 0.466666,\n    imageHeight * 0.866666,\n    imageWidth * 0.533333,\n    imageHeight * 0.933333,\n    imageWidth * 0.666666,\n    imageHeight * 0.933333\n  )\n  ctx.bezierCurveTo(\n    imageWidth * 0.8,\n    imageHeight * 0.933333,\n    imageWidth * 0.866666,\n    imageHeight * 0.866666,\n    imageWidth * 0.866666,\n    imageHeight * 0.733333\n  )\n  ctx.bezierCurveTo(\n    imageWidth * 0.866666,\n    imageHeight * 0.6,\n    imageWidth * 0.8,\n    imageHeight * 0.533333,\n    imageWidth * 0.666666,\n    imageHeight * 0.533333\n  )\n  ctx.bezierCurveTo(\n    imageWidth * 0.533333,\n    imageHeight * 0.533333,\n    imageWidth * 0.466666,\n    imageHeight * 0.6,\n    imageWidth * 0.466666,\n    imageHeight * 0.733333\n  )\n  ctx.closePath()\n  grad = ctx.createLinearGradient(\n    0,\n    0.533333 * imageHeight,\n    0,\n    0.933333 * imageHeight\n  )\n  grad.addColorStop(0, '#000000')\n  grad.addColorStop(1, '#444444')\n  ctx.fillStyle = grad\n  ctx.fill()\n\n  // LRF\n  ctx.save()\n  ctx.beginPath()\n  ctx.moveTo(imageWidth * 0.466666, imageHeight * 0.666666)\n  ctx.bezierCurveTo(\n    imageWidth * 0.466666,\n    imageHeight * 0.8,\n    imageWidth * 0.533333,\n    imageHeight * 0.866666,\n    imageWidth * 0.666666,\n    imageHeight * 0.866666\n  )\n  ctx.bezierCurveTo(\n    imageWidth * 0.8,\n    imageHeight * 0.866666,\n    imageWidth * 0.866666,\n    imageHeight * 0.8,\n    imageWidth * 0.866666,\n    imageHeight * 0.666666\n  )\n  ctx.bezierCurveTo(\n    imageWidth * 0.866666,\n    imageHeight * 0.533333,\n    imageWidth * 0.8,\n    imageHeight * 0.466666,\n    imageWidth * 0.666666,\n    imageHeight * 0.466666\n  )\n  ctx.bezierCurveTo(\n    imageWidth * 0.533333,\n    imageHeight * 0.466666,\n    imageWidth * 0.466666,\n    imageHeight * 0.533333,\n    imageWidth * 0.466666,\n    imageHeight * 0.666666\n  )\n  ctx.closePath()\n  ctx.fillStyle = '#050506'\n  ctx.fill()\n\n  ctx.restore()\n})\n\nexport default punchedSheetBuffer\n","import { createBuffer, PI } from './tools'\n\nconst brushedMetalTexture = function (color, radius, amount, monochrome, shine) {\n  this.fill = function (startX, startY, endX, endY) {\n    let i\n    let x\n    let y // loop counters\n    let sinArr\n    // alpha = color & 0xff000000;\n    const alpha = 255\n    const red = (color >> 16) & 0xff\n    const green = (color >> 8) & 0xff\n    const blue = color & 0xff\n    let n = 0\n    const variation = 255 * amount\n    let indx\n    let tr\n    let tg\n    let tb\n    let f\n\n    startX = Math.floor(startX)\n    startY = Math.floor(startY)\n    endX = Math.ceil(endX)\n    endY = Math.ceil(endY)\n\n    const width = endX - startX\n    const height = endY - startY\n\n    // Create output canvas\n    const outCanvas = createBuffer(width, height)\n    const outCanvasContext = outCanvas.getContext('2d')\n\n    // Create pixel arrays\n    const inPixels = outCanvasContext.createImageData(width, height)\n    const outPixels = outCanvasContext.createImageData(width, height)\n\n    // Precreate sin() values\n    if (shine !== 0) {\n      sinArr = []\n      for (i = 0; i < width; i++) {\n        sinArr[i] = (255 * shine * Math.sin((i / width) * PI)) | 0\n      }\n    }\n\n    for (y = 0; y < height; y++) {\n      for (x = 0; x < width; x++) {\n        indx = y * width * 4 + x * 4\n        tr = red\n        tg = green\n        tb = blue\n        if (shine !== 0) {\n          f = sinArr[x]\n          tr += f\n          tg += f\n          tb += f\n        }\n\n        if (monochrome) {\n          n = ((2 * Math.random() - 1) * variation) | 0\n          inPixels.data[indx] = clamp(tr + n)\n          inPixels.data[indx + 1] = clamp(tg + n)\n          inPixels.data[indx + 2] = clamp(tb + n)\n          inPixels.data[indx + 3] = alpha\n        } else {\n          inPixels.data[indx] = random(tr, variation)\n          inPixels.data[indx + 1] = random(tg, variation)\n          inPixels.data[indx + 2] = random(tb, variation)\n          inPixels.data[indx + 3] = alpha\n        }\n      }\n    }\n\n    if (radius > 0) {\n      horizontalBlur(inPixels, outPixels, width, height, radius, alpha)\n      outCanvasContext.putImageData(outPixels, startX, startY)\n    } else {\n      outCanvasContext.putImageData(inPixels, startX, startY)\n    }\n    return outCanvas\n  }\n\n  function random (x, vari) {\n    x += ((2 * Math.random() - 1) * vari) | 0\n    return x < 0 ? 0 : x > 255 ? 255 : x\n  }\n\n  function clamp (C) {\n    return C < 0 ? 0 : C > 255 ? 255 : C\n  }\n\n  function horizontalBlur (inPix, outPix, width, height, radius, alpha) {\n    let x\n    let y // loop counters\n    let i\n    let indx\n    let totR\n    let totG\n    let totB\n\n    if (radius >= width) {\n      radius = width - 1\n    }\n    const mul = 1 / (radius * 2 + 1)\n    indx = 0\n    for (y = 0; y < height; y++) {\n      totR = totG = totB = 0\n      for (x = 0; x < radius; x++) {\n        i = (indx + x) * 4\n        totR += inPix.data[i]\n        totG += inPix.data[i + 1]\n        totB += inPix.data[i + 2]\n      }\n      for (x = 0; x < width; x++) {\n        if (x > radius) {\n          i = (indx - radius - 1) * 4\n          totR -= inPix.data[i]\n          totG -= inPix.data[i + 1]\n          totB -= inPix.data[i + 2]\n        }\n        if (x + radius < width) {\n          i = (indx + radius) * 4\n          totR += inPix.data[i]\n          totG += inPix.data[i + 1]\n          totB += inPix.data[i + 2]\n        }\n        i = indx * 4\n        outPix.data[i] = (totR * mul) | 0\n        outPix.data[i + 1] = (totG * mul) | 0\n        outPix.data[i + 2] = (totB * mul) | 0\n        outPix.data[i + 3] = alpha\n        indx++\n      }\n    }\n  }\n\n  return this\n}\n\nexport default brushedMetalTexture\n","import carbonBuffer from './carbonBuffer'\nimport punchedSheetBuffer from './punchedSheetBuffer'\nimport brushedMetalTexture from './brushedMetalTexture'\nimport {\n  rgbaColor,\n  ConicalGradient,\n  createBuffer,\n  TWO_PI,\n  RAD_FACTOR\n} from './tools'\n\nconst drawBackground = function (\n  ctx,\n  backgroundColor,\n  centerX,\n  centerY,\n  imageWidth,\n  imageHeight\n) {\n  let radBBuffer\n  let radBCtx\n  let grad\n  let fractions\n  let colors\n  const backgroundOffsetX = (imageWidth * 0.831775) / 2\n  let mono\n  let textureColor\n  let texture\n  let radius\n  let turnRadius\n  let stepSize\n  let end\n  let i\n  const cacheKey = imageWidth.toString() + imageHeight + backgroundColor.name\n\n  // check if we have already created and cached this buffer, if not create it\n  if (!drawBackground.cache[cacheKey]) {\n    // Setup buffer\n    radBBuffer = createBuffer(imageWidth, imageHeight)\n    radBCtx = radBBuffer.getContext('2d')\n\n    // Background ellipse\n    radBCtx.beginPath()\n    radBCtx.arc(centerX, centerY, backgroundOffsetX, 0, TWO_PI, true)\n    radBCtx.closePath()\n\n    // If the backgroundColor is a texture fill it with the texture instead of the gradient\n    if (\n      backgroundColor.name === 'CARBON' ||\n      backgroundColor.name === 'PUNCHED_SHEET' ||\n      backgroundColor.name === 'BRUSHED_METAL' ||\n      backgroundColor.name === 'BRUSHED_STAINLESS'\n    ) {\n      if (backgroundColor.name === 'CARBON') {\n        radBCtx.fillStyle = radBCtx.createPattern(carbonBuffer, 'repeat')\n        radBCtx.fill()\n      }\n\n      if (backgroundColor.name === 'PUNCHED_SHEET') {\n        radBCtx.fillStyle = radBCtx.createPattern(punchedSheetBuffer, 'repeat')\n        radBCtx.fill()\n      }\n\n      // Add another inner shadow to make the look more realistic\n      grad = radBCtx.createLinearGradient(\n        backgroundOffsetX,\n        0,\n        imageWidth - backgroundOffsetX,\n        0\n      )\n      grad.addColorStop(0, 'rgba(0, 0, 0, 0.25)')\n      grad.addColorStop(0.5, 'rgba(0, 0, 0, 0)')\n      grad.addColorStop(1, 'rgba(0, 0, 0, 0.25)')\n      radBCtx.fillStyle = grad\n      radBCtx.beginPath()\n      radBCtx.arc(centerX, centerY, backgroundOffsetX, 0, TWO_PI, true)\n      radBCtx.closePath()\n      radBCtx.fill()\n\n      if (\n        backgroundColor.name === 'BRUSHED_METAL' ||\n        backgroundColor.name === 'BRUSHED_STAINLESS'\n      ) {\n        mono = backgroundColor.name === 'BRUSHED_METAL'\n        textureColor = parseInt(\n          backgroundColor.gradientStop.getHexColor().substr(-6),\n          16\n        )\n        texture = brushedMetalTexture(textureColor, 5, 0.1, mono, 0.5)\n        radBCtx.fillStyle = radBCtx.createPattern(\n          texture.fill(0, 0, imageWidth, imageHeight),\n          'no-repeat'\n        )\n        radBCtx.fill()\n      }\n    } else if (\n      backgroundColor.name === 'STAINLESS' ||\n      backgroundColor.name === 'TURNED'\n    ) {\n      // Define the fractions of the conical gradient paint\n      fractions = [\n        0,\n        0.03,\n        0.1,\n        0.14,\n        0.24,\n        0.33,\n        0.38,\n        0.5,\n        0.62,\n        0.67,\n        0.76,\n        0.81,\n        0.85,\n        0.97,\n        1\n      ]\n\n      // Define the colors of the conical gradient paint\n      colors = [\n        new rgbaColor('#FDFDFD'),\n        new rgbaColor('#FDFDFD'),\n        new rgbaColor('#B2B2B4'),\n        new rgbaColor('#ACACAE'),\n        new rgbaColor('#FDFDFD'),\n        new rgbaColor('#8E8E8E'),\n        new rgbaColor('#8E8E8E'),\n        new rgbaColor('#FDFDFD'),\n        new rgbaColor('#8E8E8E'),\n        new rgbaColor('#8E8E8E'),\n        new rgbaColor('#FDFDFD'),\n        new rgbaColor('#ACACAE'),\n        new rgbaColor('#B2B2B4'),\n        new rgbaColor('#FDFDFD'),\n        new rgbaColor('#FDFDFD')\n      ]\n\n      grad = new ConicalGradient(fractions, colors)\n      grad.fillCircle(radBCtx, centerX, centerY, 0, backgroundOffsetX)\n\n      if (backgroundColor.name === 'TURNED') {\n        // Define the turning radius\n        radius = backgroundOffsetX\n        turnRadius = radius * 0.55\n        // Step size proporational to radius\n        stepSize = RAD_FACTOR * (500 / radius)\n        // Save before we start\n        radBCtx.save()\n        // restrict the turnings to the desired area\n        radBCtx.beginPath()\n        radBCtx.arc(centerX, centerY, radius, 0, TWO_PI)\n        radBCtx.closePath()\n        radBCtx.clip()\n        // set the style for the turnings\n        radBCtx.lineWidth = 0.5\n        end = TWO_PI - stepSize * 0.3\n        // Step the engine round'n'round\n        for (i = 0; i < end; i += stepSize) {\n          // draw a 'turn'\n          radBCtx.strokeStyle = 'rgba(240, 240, 255, 0.25)'\n          radBCtx.beginPath()\n          radBCtx.arc(centerX + turnRadius, centerY, turnRadius, 0, TWO_PI)\n          radBCtx.stroke()\n          // rotate the 'piece' a fraction to draw 'shadow'\n          radBCtx.translate(centerX, centerY)\n          radBCtx.rotate(stepSize * 0.3)\n          radBCtx.translate(-centerX, -centerY)\n          // draw a 'turn'\n          radBCtx.strokeStyle = 'rgba(25, 10, 10, 0.1)'\n          radBCtx.beginPath()\n          radBCtx.arc(centerX + turnRadius, centerY, turnRadius, 0, TWO_PI)\n          radBCtx.stroke()\n          // now rotate on to the next 'scribe' position minus the 'fraction'\n          radBCtx.translate(centerX, centerY)\n          radBCtx.rotate(stepSize - stepSize * 0.3)\n          radBCtx.translate(-centerX, -centerY)\n        }\n        // Restore canvas now we are done\n        radBCtx.restore()\n      }\n    } else {\n      grad = radBCtx.createLinearGradient(\n        0,\n        imageWidth * 0.084112,\n        0,\n        backgroundOffsetX * 2\n      )\n      grad.addColorStop(0, backgroundColor.gradientStart.getRgbaColor())\n      grad.addColorStop(0.4, backgroundColor.gradientFraction.getRgbaColor())\n      grad.addColorStop(1, backgroundColor.gradientStop.getRgbaColor())\n      radBCtx.fillStyle = grad\n      radBCtx.fill()\n    }\n    // Inner shadow\n    grad = radBCtx.createRadialGradient(\n      centerX,\n      centerY,\n      0,\n      centerX,\n      centerY,\n      backgroundOffsetX\n    )\n    grad.addColorStop(0, 'rgba(0, 0, 0, 0)')\n    grad.addColorStop(0.7, 'rgba(0, 0, 0, 0)')\n    grad.addColorStop(0.71, 'rgba(0, 0, 0, 0)')\n    grad.addColorStop(0.86, 'rgba(0, 0, 0, 0.03)')\n    grad.addColorStop(0.92, 'rgba(0, 0, 0, 0.07)')\n    grad.addColorStop(0.97, 'rgba(0, 0, 0, 0.15)')\n    grad.addColorStop(1, 'rgba(0, 0, 0, 0.3)')\n    radBCtx.fillStyle = grad\n\n    radBCtx.beginPath()\n    radBCtx.arc(centerX, centerY, backgroundOffsetX, 0, TWO_PI, true)\n    radBCtx.closePath()\n    radBCtx.fill()\n\n    // cache the buffer\n    drawBackground.cache[cacheKey] = radBBuffer\n  }\n  ctx.drawImage(drawBackground.cache[cacheKey], 0, 0)\n  return this\n}\ndrawBackground.cache = {}\n\nexport default drawBackground\n","import { TWO_PI } from './tools'\n\nconst drawRadialCustomImage = function (\n  ctx,\n  img,\n  centerX,\n  centerY,\n  imageWidth,\n  imageHeight\n) {\n  const drawWidth = imageWidth * 0.831775\n  const drawHeight = imageHeight * 0.831775\n  const x = (imageWidth - drawWidth) / 2\n  const y = (imageHeight - drawHeight) / 2\n\n  if (img !== null && img.height > 0 && img.width > 0) {\n    ctx.save()\n    // Set the clipping area\n    ctx.beginPath()\n    ctx.arc(centerX, centerY, (imageWidth * 0.831775) / 2, 0, TWO_PI, true)\n    ctx.clip()\n    // Add the image\n    ctx.drawImage(img, x, y, drawWidth, drawHeight)\n    ctx.restore()\n  }\n  return this\n}\n\nexport default drawRadialCustomImage\n","import { createBuffer, TWO_PI } from './tools'\n\nconst createKnobImage = function (size, knob, style) {\n  let knobBuffer\n  let knobCtx\n  const maxPostCenterX = size / 2\n  const maxPostCenterY = size / 2\n  let grad\n  const cacheKey = size.toString() + knob.type + style.style\n\n  // check if we have already created and cached this buffer, if not create it\n  if (!createKnobImage.cache[cacheKey]) {\n    knobBuffer = createBuffer(size * 1.18889, size * 1.18889)\n    knobCtx = knobBuffer.getContext('2d')\n\n    switch (knob.type) {\n      case 'metalKnob':\n        // METALKNOB_FRAME\n        knobCtx.beginPath()\n        knobCtx.moveTo(0, size * 0.5)\n        knobCtx.bezierCurveTo(\n          0,\n          size * 0.222222,\n          size * 0.222222,\n          0,\n          size * 0.5,\n          0\n        )\n        knobCtx.bezierCurveTo(\n          size * 0.777777,\n          0,\n          size,\n          size * 0.222222,\n          size,\n          size * 0.5\n        )\n        knobCtx.bezierCurveTo(\n          size,\n          size * 0.777777,\n          size * 0.777777,\n          size,\n          size * 0.5,\n          size\n        )\n        knobCtx.bezierCurveTo(\n          size * 0.222222,\n          size,\n          0,\n          size * 0.777777,\n          0,\n          size * 0.5\n        )\n        knobCtx.closePath()\n        grad = knobCtx.createLinearGradient(0, 0, 0, size)\n        grad.addColorStop(0, 'rgb(92, 95, 101)')\n        grad.addColorStop(0.47, 'rgb(46, 49, 53)')\n        grad.addColorStop(1, 'rgb(22, 23, 26)')\n        knobCtx.fillStyle = grad\n        knobCtx.fill()\n\n        // METALKNOB_MAIN\n        knobCtx.beginPath()\n        knobCtx.moveTo(size * 0.055555, size * 0.5)\n        knobCtx.bezierCurveTo(\n          size * 0.055555,\n          size * 0.277777,\n          size * 0.277777,\n          size * 0.055555,\n          size * 0.5,\n          size * 0.055555\n        )\n        knobCtx.bezierCurveTo(\n          size * 0.722222,\n          size * 0.055555,\n          size * 0.944444,\n          size * 0.277777,\n          size * 0.944444,\n          size * 0.5\n        )\n        knobCtx.bezierCurveTo(\n          size * 0.944444,\n          size * 0.722222,\n          size * 0.722222,\n          size * 0.944444,\n          size * 0.5,\n          size * 0.944444\n        )\n        knobCtx.bezierCurveTo(\n          size * 0.277777,\n          size * 0.944444,\n          size * 0.055555,\n          size * 0.722222,\n          size * 0.055555,\n          size * 0.5\n        )\n        knobCtx.closePath()\n        grad = knobCtx.createLinearGradient(\n          0,\n          0.055555 * size,\n          0,\n          0.944443 * size\n        )\n        switch (style.style) {\n          case 'black':\n            grad.addColorStop(0, 'rgb(43, 42, 47)')\n            grad.addColorStop(1, 'rgb(26, 27, 32)')\n            break\n\n          case 'brass':\n            grad.addColorStop(0, 'rgb(150, 110, 54)')\n            grad.addColorStop(1, 'rgb(124, 95, 61)')\n            break\n\n          case 'silver':\n          /* falls through */\n          default:\n            grad.addColorStop(0, 'rgb(204, 204, 204)')\n            grad.addColorStop(1, 'rgb(87, 92, 98)')\n            break\n        }\n        knobCtx.fillStyle = grad\n        knobCtx.fill()\n\n        // METALKNOB_LOWERHL\n        knobCtx.beginPath()\n        knobCtx.moveTo(size * 0.777777, size * 0.833333)\n        knobCtx.bezierCurveTo(\n          size * 0.722222,\n          size * 0.722222,\n          size * 0.611111,\n          size * 0.666666,\n          size * 0.5,\n          size * 0.666666\n        )\n        knobCtx.bezierCurveTo(\n          size * 0.388888,\n          size * 0.666666,\n          size * 0.277777,\n          size * 0.722222,\n          size * 0.222222,\n          size * 0.833333\n        )\n        knobCtx.bezierCurveTo(\n          size * 0.277777,\n          size * 0.888888,\n          size * 0.388888,\n          size * 0.944444,\n          size * 0.5,\n          size * 0.944444\n        )\n        knobCtx.bezierCurveTo(\n          size * 0.611111,\n          size * 0.944444,\n          size * 0.722222,\n          size * 0.888888,\n          size * 0.777777,\n          size * 0.833333\n        )\n        knobCtx.closePath()\n        grad = knobCtx.createRadialGradient(\n          0.555555 * size,\n          0.944444 * size,\n          0,\n          0.555555 * size,\n          0.944444 * size,\n          0.388888 * size\n        )\n        grad.addColorStop(0, 'rgba(255, 255, 255, 0.6)')\n        grad.addColorStop(1, 'rgba(255, 255, 255, 0)')\n        knobCtx.fillStyle = grad\n        knobCtx.fill()\n\n        // METALKNOB_UPPERHL\n        knobCtx.beginPath()\n        knobCtx.moveTo(size * 0.944444, size * 0.277777)\n        knobCtx.bezierCurveTo(\n          size * 0.833333,\n          size * 0.111111,\n          size * 0.666666,\n          0,\n          size * 0.5,\n          0\n        )\n        knobCtx.bezierCurveTo(\n          size * 0.333333,\n          0,\n          size * 0.166666,\n          size * 0.111111,\n          size * 0.055555,\n          size * 0.277777\n        )\n        knobCtx.bezierCurveTo(\n          size * 0.166666,\n          size * 0.333333,\n          size * 0.333333,\n          size * 0.388888,\n          size * 0.5,\n          size * 0.388888\n        )\n        knobCtx.bezierCurveTo(\n          size * 0.666666,\n          size * 0.388888,\n          size * 0.833333,\n          size * 0.333333,\n          size * 0.944444,\n          size * 0.277777\n        )\n        knobCtx.closePath()\n        grad = knobCtx.createRadialGradient(\n          0.5 * size,\n          0,\n          0,\n          0.5 * size,\n          0,\n          0.583333 * size\n        )\n        grad.addColorStop(0, 'rgba(255, 255, 255, 0.749019)')\n        grad.addColorStop(1, 'rgba(255, 255, 255, 0)')\n        knobCtx.fillStyle = grad\n        knobCtx.fill()\n\n        // METALKNOB_INNERFRAME\n        knobCtx.beginPath()\n        knobCtx.moveTo(size * 0.277777, size * 0.555555)\n        knobCtx.bezierCurveTo(\n          size * 0.277777,\n          size * 0.388888,\n          size * 0.388888,\n          size * 0.277777,\n          size * 0.5,\n          size * 0.277777\n        )\n        knobCtx.bezierCurveTo(\n          size * 0.611111,\n          size * 0.277777,\n          size * 0.777777,\n          size * 0.388888,\n          size * 0.777777,\n          size * 0.555555\n        )\n        knobCtx.bezierCurveTo(\n          size * 0.777777,\n          size * 0.666666,\n          size * 0.611111,\n          size * 0.777777,\n          size * 0.5,\n          size * 0.777777\n        )\n        knobCtx.bezierCurveTo(\n          size * 0.388888,\n          size * 0.777777,\n          size * 0.277777,\n          size * 0.666666,\n          size * 0.277777,\n          size * 0.555555\n        )\n        knobCtx.closePath()\n        grad = knobCtx.createLinearGradient(\n          0,\n          0.277777 * size,\n          0,\n          0.722221 * size\n        )\n        grad.addColorStop(0, '#000000')\n        grad.addColorStop(1, 'rgb(204, 204, 204)')\n        knobCtx.fillStyle = grad\n        knobCtx.fill()\n\n        // METALKNOB_INNERBACKGROUND\n        knobCtx.beginPath()\n        knobCtx.moveTo(size * 0.333333, size * 0.555555)\n        knobCtx.bezierCurveTo(\n          size * 0.333333,\n          size * 0.444444,\n          size * 0.388888,\n          size * 0.333333,\n          size * 0.5,\n          size * 0.333333\n        )\n        knobCtx.bezierCurveTo(\n          size * 0.611111,\n          size * 0.333333,\n          size * 0.722222,\n          size * 0.444444,\n          size * 0.722222,\n          size * 0.555555\n        )\n        knobCtx.bezierCurveTo(\n          size * 0.722222,\n          size * 0.611111,\n          size * 0.611111,\n          size * 0.722222,\n          size * 0.5,\n          size * 0.722222\n        )\n        knobCtx.bezierCurveTo(\n          size * 0.388888,\n          size * 0.722222,\n          size * 0.333333,\n          size * 0.611111,\n          size * 0.333333,\n          size * 0.555555\n        )\n        knobCtx.closePath()\n        grad = knobCtx.createLinearGradient(\n          0,\n          0.333333 * size,\n          0,\n          0.666666 * size\n        )\n        grad.addColorStop(0, 'rgb(10, 9, 1)')\n        grad.addColorStop(1, 'rgb(42, 41, 37)')\n        knobCtx.fillStyle = grad\n        knobCtx.fill()\n        break\n\n      case 'standardKnob':\n        grad = knobCtx.createLinearGradient(0, 0, 0, size)\n        grad.addColorStop(0, 'rgb(180, 180, 180)')\n        grad.addColorStop(0.46, 'rgb(63, 63, 63)')\n        grad.addColorStop(1, 'rgb(40, 40, 40)')\n        knobCtx.fillStyle = grad\n        knobCtx.beginPath()\n        knobCtx.arc(maxPostCenterX, maxPostCenterY, size / 2, 0, TWO_PI, true)\n        knobCtx.closePath()\n        knobCtx.fill()\n        grad = knobCtx.createLinearGradient(\n          0,\n          size - size * 0.77,\n          0,\n          size - size * 0.77 + size * 0.77\n        )\n        switch (style.style) {\n          case 'black':\n            grad.addColorStop(0, 'rgb(191, 191, 191)')\n            grad.addColorStop(0.5, 'rgb(45, 44, 49)')\n            grad.addColorStop(1, 'rgb(125, 126, 128)')\n            break\n\n          case 'brass':\n            grad.addColorStop(0, 'rgb(223, 208, 174)')\n            grad.addColorStop(0.5, 'rgb(123, 95, 63)')\n            grad.addColorStop(1, 'rgb(207, 190, 157)')\n            break\n\n          case 'silver':\n          /* falls through */\n          default:\n            grad.addColorStop(0, 'rgb(215, 215, 215)')\n            grad.addColorStop(0.5, 'rgb(116, 116, 116)')\n            grad.addColorStop(1, 'rgb(215, 215, 215)')\n            break\n        }\n        knobCtx.fillStyle = grad\n        knobCtx.beginPath()\n        knobCtx.arc(\n          maxPostCenterX,\n          maxPostCenterY,\n          (size * 0.77) / 2,\n          0,\n          TWO_PI,\n          true\n        )\n        knobCtx.closePath()\n        knobCtx.fill()\n\n        grad = knobCtx.createRadialGradient(\n          maxPostCenterX,\n          maxPostCenterY,\n          0,\n          maxPostCenterX,\n          maxPostCenterY,\n          (size * 0.77) / 2\n        )\n        grad.addColorStop(0, 'rgba(0, 0, 0, 0)')\n        grad.addColorStop(0.75, 'rgba(0, 0, 0, 0)')\n        grad.addColorStop(0.76, 'rgba(0, 0, 0, 0.01)')\n        grad.addColorStop(1, 'rgba(0, 0, 0, 0.2)')\n        knobCtx.fillStyle = grad\n        knobCtx.beginPath()\n        knobCtx.arc(\n          maxPostCenterX,\n          maxPostCenterY,\n          (size * 0.77) / 2,\n          0,\n          TWO_PI,\n          true\n        )\n        knobCtx.closePath()\n        knobCtx.fill()\n        break\n    }\n\n    // cache the buffer\n    createKnobImage.cache[cacheKey] = knobBuffer\n  }\n  return createKnobImage.cache[cacheKey]\n}\ncreateKnobImage.cache = {}\n\nexport default createKnobImage\n","import { rgbaColor } from './tools'\n\nimport {\n  BackgroundColorDef,\n  LcdColorDef,\n  ColorDef,\n  LedColorDef,\n  GaugeTypeDef,\n  OrientationDef,\n  KnobTypeDef,\n  KnobStyleDef,\n  FrameDesignDef,\n  PointerTypeDef,\n  ForegroundTypeDef,\n  LabelNumberFormatDef,\n  TickLabelOrientationDef,\n  TrendStateDef\n} from './constants'\n\nexport const BackgroundColor = {\n  DARK_GRAY: new BackgroundColorDef(\n    new rgbaColor(0, 0, 0, 1),\n    new rgbaColor(51, 51, 51, 1),\n    new rgbaColor(153, 153, 153, 1),\n    new rgbaColor(255, 255, 255, 1),\n    new rgbaColor(180, 180, 180, 1),\n    'DARK_GRAY'\n  ),\n  SATIN_GRAY: new BackgroundColorDef(\n    new rgbaColor(45, 57, 57, 1),\n    new rgbaColor(45, 57, 57, 1),\n    new rgbaColor(45, 57, 57, 1),\n    new rgbaColor(167, 184, 180, 1),\n    new rgbaColor(137, 154, 150, 1),\n    'SATIN_GRAY'\n  ),\n  LIGHT_GRAY: new BackgroundColorDef(\n    new rgbaColor(130, 130, 130, 1),\n    new rgbaColor(181, 181, 181, 1),\n    new rgbaColor(253, 253, 253, 1),\n    new rgbaColor(0, 0, 0, 1),\n    new rgbaColor(80, 80, 80, 1),\n    'LIGHT_GRAY'\n  ),\n  WHITE: new BackgroundColorDef(\n    new rgbaColor(255, 255, 255, 1),\n    new rgbaColor(255, 255, 255, 1),\n    new rgbaColor(255, 255, 255, 1),\n    new rgbaColor(0, 0, 0, 1),\n    new rgbaColor(80, 80, 80, 1),\n    'WHITE'\n  ),\n  BLACK: new BackgroundColorDef(\n    new rgbaColor(0, 0, 0, 1),\n    new rgbaColor(0, 0, 0, 1),\n    new rgbaColor(0, 0, 0, 1),\n    new rgbaColor(255, 255, 255, 1),\n    new rgbaColor(150, 150, 150, 1),\n    'BLACK'\n  ),\n  BEIGE: new BackgroundColorDef(\n    new rgbaColor(178, 172, 150, 1),\n    new rgbaColor(204, 205, 184, 1),\n    new rgbaColor(231, 231, 214, 1),\n    new rgbaColor(0, 0, 0, 1),\n    new rgbaColor(80, 80, 80, 1),\n    'BEIGE'\n  ),\n  BROWN: new BackgroundColorDef(\n    new rgbaColor(245, 225, 193, 1),\n    new rgbaColor(245, 225, 193, 1),\n    new rgbaColor(255, 250, 240, 1),\n    new rgbaColor(109, 73, 47, 1),\n    new rgbaColor(89, 53, 27, 1),\n    'BROWN'\n  ),\n  RED: new BackgroundColorDef(\n    new rgbaColor(198, 93, 95, 1),\n    new rgbaColor(212, 132, 134, 1),\n    new rgbaColor(242, 218, 218, 1),\n    new rgbaColor(0, 0, 0, 1),\n    new rgbaColor(90, 0, 0, 1),\n    'RED'\n  ),\n  GREEN: new BackgroundColorDef(\n    new rgbaColor(65, 120, 40, 1),\n    new rgbaColor(129, 171, 95, 1),\n    new rgbaColor(218, 237, 202, 1),\n    new rgbaColor(0, 0, 0, 1),\n    new rgbaColor(0, 90, 0, 1),\n    'GREEN'\n  ),\n  BLUE: new BackgroundColorDef(\n    new rgbaColor(45, 83, 122, 1),\n    new rgbaColor(115, 144, 170, 1),\n    new rgbaColor(227, 234, 238, 1),\n    new rgbaColor(0, 0, 0, 1),\n    new rgbaColor(0, 0, 90, 1),\n    'BLUE'\n  ),\n  ANTHRACITE: new BackgroundColorDef(\n    new rgbaColor(50, 50, 54, 1),\n    new rgbaColor(47, 47, 51, 1),\n    new rgbaColor(69, 69, 74, 1),\n    new rgbaColor(250, 250, 250, 1),\n    new rgbaColor(180, 180, 180, 1),\n    'ANTHRACITE'\n  ),\n  MUD: new BackgroundColorDef(\n    new rgbaColor(80, 86, 82, 1),\n    new rgbaColor(70, 76, 72, 1),\n    new rgbaColor(57, 62, 58, 1),\n    new rgbaColor(255, 255, 240, 1),\n    new rgbaColor(225, 225, 210, 1),\n    'MUD'\n  ),\n  PUNCHED_SHEET: new BackgroundColorDef(\n    new rgbaColor(50, 50, 54, 1),\n    new rgbaColor(47, 47, 51, 1),\n    new rgbaColor(69, 69, 74, 1),\n    new rgbaColor(255, 255, 255, 1),\n    new rgbaColor(180, 180, 180, 1),\n    'PUNCHED_SHEET'\n  ),\n  CARBON: new BackgroundColorDef(\n    new rgbaColor(50, 50, 54, 1),\n    new rgbaColor(47, 47, 51, 1),\n    new rgbaColor(69, 69, 74, 1),\n    new rgbaColor(255, 255, 255, 1),\n    new rgbaColor(180, 180, 180, 1),\n    'CARBON'\n  ),\n  STAINLESS: new BackgroundColorDef(\n    new rgbaColor(130, 130, 130, 1),\n    new rgbaColor(181, 181, 181, 1),\n    new rgbaColor(253, 253, 253, 1),\n    new rgbaColor(0, 0, 0, 1),\n    new rgbaColor(80, 80, 80, 1),\n    'STAINLESS'\n  ),\n  BRUSHED_METAL: new BackgroundColorDef(\n    new rgbaColor(50, 50, 54, 1),\n    new rgbaColor(47, 47, 51, 1),\n    new rgbaColor(69, 69, 74, 1),\n    new rgbaColor(0, 0, 0, 1),\n    new rgbaColor(80, 80, 80, 1),\n    'BRUSHED_METAL'\n  ),\n  BRUSHED_STAINLESS: new BackgroundColorDef(\n    new rgbaColor(50, 50, 54, 1),\n    new rgbaColor(47, 47, 51, 1),\n    new rgbaColor(110, 110, 112, 1),\n    new rgbaColor(0, 0, 0, 1),\n    new rgbaColor(80, 80, 80, 1),\n    'BRUSHED_STAINLESS'\n  ),\n  TURNED: new BackgroundColorDef(\n    new rgbaColor(130, 130, 130, 1),\n    new rgbaColor(181, 181, 181, 1),\n    new rgbaColor(253, 253, 253, 1),\n    new rgbaColor(0, 0, 0, 1),\n    new rgbaColor(80, 80, 80, 1),\n    'TURNED'\n  )\n}\n\nexport const LcdColor = {\n  BEIGE: new LcdColorDef(\n    '#c8c8b1',\n    'rgb(241, 237, 207)',\n    'rgb(234, 230, 194)',\n    'rgb(225, 220, 183)',\n    'rgb(237, 232, 191)',\n    '#000000'\n  ),\n  BLUE: new LcdColorDef(\n    '#ffffff',\n    'rgb(231, 246, 255)',\n    'rgb(170, 224, 255)',\n    'rgb(136, 212, 255)',\n    'rgb(192, 232, 255)',\n    '#124564'\n  ),\n  ORANGE: new LcdColorDef(\n    '#ffffff',\n    'rgb(255, 245, 225)',\n    'rgb(255, 217, 147)',\n    'rgb(255, 201, 104)',\n    'rgb(255, 227, 173)',\n    '#503700'\n  ),\n  RED: new LcdColorDef(\n    '#ffffff',\n    'rgb(255, 225, 225)',\n    'rgb(253, 152, 152)',\n    'rgb(252, 114, 115)',\n    'rgb(254, 178, 178)',\n    '#4f0c0e'\n  ),\n  YELLOW: new LcdColorDef(\n    '#ffffff',\n    'rgb(245, 255, 186)',\n    'rgb(210, 255, 0)',\n    'rgb(158, 205, 0)',\n    'rgb(210, 255, 0)',\n    '#405300'\n  ),\n  WHITE: new LcdColorDef(\n    '#ffffff',\n    '#ffffff',\n    'rgb(241, 246, 242)',\n    'rgb(229, 239, 244)',\n    '#ffffff',\n    '#000000'\n  ),\n  GRAY: new LcdColorDef(\n    '#414141',\n    'rgb(117, 117, 117)',\n    'rgb(87, 87, 87)',\n    '#414141',\n    'rgb(81, 81, 81)',\n    '#ffffff'\n  ),\n  BLACK: new LcdColorDef(\n    '#414141',\n    '#666666',\n    '#333333',\n    '#000000',\n    '#333333',\n    '#cccccc'\n  ),\n  GREEN: new LcdColorDef(\n    'rgb(33, 67, 67)',\n    'rgb(33, 67, 67)',\n    'rgb(29, 58, 58)',\n    'rgb(28, 57, 57)',\n    'rgb(23, 46, 46)',\n    'rgba(0, 185, 165, 255)'\n  ),\n  BLUE2: new LcdColorDef(\n    'rgb(0, 68, 103)',\n    'rgb(8, 109, 165)',\n    'rgb(0, 72, 117)',\n    'rgb(0, 72, 117)',\n    'rgb(0, 68, 103)',\n    'rgb(111, 182, 228)'\n  ),\n  BLUE_BLACK: new LcdColorDef(\n    'rgb(22, 125, 212)',\n    'rgb(3, 162, 254)',\n    'rgb(3, 162, 254)',\n    'rgb(3, 162, 254)',\n    'rgb(11, 172, 244)',\n    '#000000'\n  ),\n  BLUE_DARKBLUE: new LcdColorDef(\n    'rgb(18, 33, 88)',\n    'rgb(18, 33, 88)',\n    'rgb(19, 30, 90)',\n    'rgb(17, 31, 94)',\n    'rgb(21, 25, 90)',\n    'rgb(23, 99, 221)'\n  ),\n  BLUE_GRAY: new LcdColorDef(\n    'rgb(135, 174, 255)',\n    'rgb(101, 159, 255)',\n    'rgb(44, 93, 255)',\n    'rgb(27, 65, 254)',\n    'rgb(12, 50, 255)',\n    '#b2b4ed'\n  ),\n  STANDARD: new LcdColorDef(\n    'rgb(131, 133, 119)',\n    'rgb(176, 183, 167)',\n    'rgb(165, 174, 153)',\n    'rgb(166, 175, 156)',\n    'rgb(175, 184, 165)',\n    'rgb(35, 42, 52)'\n  ),\n  STANDARD_GREEN: new LcdColorDef(\n    '#ffffff',\n    'rgb(219, 230, 220)',\n    'rgb(179, 194, 178)',\n    'rgb(153, 176, 151)',\n    'rgb(114, 138, 109)',\n    '#080C06'\n  ),\n  BLUE_BLUE: new LcdColorDef(\n    'rgb(100, 168, 253)',\n    'rgb(100, 168, 253)',\n    'rgb(95, 160, 250)',\n    'rgb(80, 144, 252)',\n    'rgb(74, 134, 255)',\n    '#002cbb'\n  ),\n  RED_DARKRED: new LcdColorDef(\n    'rgb(72, 36, 50)',\n    'rgb(185, 111, 110)',\n    'rgb(148, 66, 72)',\n    'rgb(83, 19, 20)',\n    'rgb(7, 6, 14)',\n    '#FE8B92'\n  ),\n  DARKBLUE: new LcdColorDef(\n    'rgb(14, 24, 31)',\n    'rgb(46, 105, 144)',\n    'rgb(19, 64, 96)',\n    'rgb(6, 20, 29)',\n    'rgb(8, 9, 10)',\n    '#3DB3FF'\n  ),\n  LILA: new LcdColorDef(\n    'rgb(175, 164, 255)',\n    'rgb(188, 168, 253)',\n    'rgb(176, 159, 255)',\n    'rgb(174, 147, 252)',\n    'rgb(168, 136, 233)',\n    '#076148'\n  ),\n  BLACKRED: new LcdColorDef(\n    'rgb(8, 12, 11)',\n    'rgb(10, 11, 13)',\n    'rgb(11, 10, 15)',\n    'rgb(7, 13, 9)',\n    'rgb(9, 13, 14)',\n    '#B50026'\n  ),\n  DARKGREEN: new LcdColorDef(\n    'rgb(25, 85, 0)',\n    'rgb(47, 154, 0)',\n    'rgb(30, 101, 0)',\n    'rgb(30, 101, 0)',\n    'rgb(25, 85, 0)',\n    '#233123'\n  ),\n  AMBER: new LcdColorDef(\n    'rgb(182, 71, 0)',\n    'rgb(236, 155, 25)',\n    'rgb(212, 93, 5)',\n    'rgb(212, 93, 5)',\n    'rgb(182, 71, 0)',\n    '#593A0A'\n  ),\n  LIGHTBLUE: new LcdColorDef(\n    'rgb(125, 146, 184)',\n    'rgb(197, 212, 231)',\n    'rgb(138, 155, 194)',\n    'rgb(138, 155, 194)',\n    'rgb(125, 146, 184)',\n    '#090051'\n  ),\n  SECTIONS: new LcdColorDef(\n    '#b2b2b2',\n    '#ffffff',\n    '#c4c4c4',\n    '#c4c4c4',\n    '#b2b2b2',\n    '#000000'\n  )\n}\n\nconst Color = {\n  RED: new ColorDef(\n    new rgbaColor(82, 0, 0, 1),\n    new rgbaColor(158, 0, 19, 1),\n    new rgbaColor(213, 0, 25, 1),\n    new rgbaColor(240, 82, 88, 1),\n    new rgbaColor(255, 171, 173, 1),\n    new rgbaColor(255, 217, 218, 1)\n  ),\n  GREEN: new ColorDef(\n    new rgbaColor(8, 54, 4, 1),\n    new rgbaColor(0, 107, 14, 1),\n    new rgbaColor(15, 148, 0, 1),\n    new rgbaColor(121, 186, 37, 1),\n    new rgbaColor(190, 231, 141, 1),\n    new rgbaColor(234, 247, 218, 1)\n  ),\n  BLUE: new ColorDef(\n    new rgbaColor(0, 11, 68, 1),\n    new rgbaColor(0, 73, 135, 1),\n    new rgbaColor(0, 108, 201, 1),\n    new rgbaColor(0, 141, 242, 1),\n    new rgbaColor(122, 200, 255, 1),\n    new rgbaColor(204, 236, 255, 1)\n  ),\n  ORANGE: new ColorDef(\n    new rgbaColor(118, 83, 30, 1),\n    new rgbaColor(215, 67, 0, 1),\n    new rgbaColor(240, 117, 0, 1),\n    new rgbaColor(255, 166, 0, 1),\n    new rgbaColor(255, 255, 128, 1),\n    new rgbaColor(255, 247, 194, 1)\n  ),\n  YELLOW: new ColorDef(\n    new rgbaColor(41, 41, 0, 1),\n    new rgbaColor(102, 102, 0, 1),\n    new rgbaColor(177, 165, 0, 1),\n    new rgbaColor(255, 242, 0, 1),\n    new rgbaColor(255, 250, 153, 1),\n    new rgbaColor(255, 252, 204, 1)\n  ),\n  CYAN: new ColorDef(\n    new rgbaColor(15, 109, 109, 1),\n    new rgbaColor(0, 109, 144, 1),\n    new rgbaColor(0, 144, 191, 1),\n    new rgbaColor(0, 174, 239, 1),\n    new rgbaColor(153, 223, 249, 1),\n    new rgbaColor(204, 239, 252, 1)\n  ),\n  MAGENTA: new ColorDef(\n    new rgbaColor(98, 0, 114, 1),\n    new rgbaColor(128, 24, 72, 1),\n    new rgbaColor(191, 36, 107, 1),\n    new rgbaColor(255, 48, 143, 1),\n    new rgbaColor(255, 172, 210, 1),\n    new rgbaColor(255, 214, 23, 1)\n  ),\n  WHITE: new ColorDef(\n    new rgbaColor(210, 210, 210, 1),\n    new rgbaColor(220, 220, 220, 1),\n    new rgbaColor(235, 235, 235, 1),\n    new rgbaColor(255, 255, 255, 1),\n    new rgbaColor(255, 255, 255, 1),\n    new rgbaColor(255, 255, 255, 1)\n  ),\n  GRAY: new ColorDef(\n    new rgbaColor(25, 25, 25, 1),\n    new rgbaColor(51, 51, 51, 1),\n    new rgbaColor(76, 76, 76, 1),\n    new rgbaColor(128, 128, 128, 1),\n    new rgbaColor(204, 204, 204, 1),\n    new rgbaColor(243, 243, 243, 1)\n  ),\n  BLACK: new ColorDef(\n    new rgbaColor(0, 0, 0, 1),\n    new rgbaColor(5, 5, 5, 1),\n    new rgbaColor(10, 10, 10, 1),\n    new rgbaColor(15, 15, 15, 1),\n    new rgbaColor(20, 20, 20, 1),\n    new rgbaColor(25, 25, 25, 1)\n  ),\n  RAITH: new ColorDef(\n    new rgbaColor(0, 32, 65, 1),\n    new rgbaColor(0, 65, 125, 1),\n    new rgbaColor(0, 106, 172, 1),\n    new rgbaColor(130, 180, 214, 1),\n    new rgbaColor(148, 203, 242, 1),\n    new rgbaColor(191, 229, 255, 1)\n  ),\n  GREEN_LCD: new ColorDef(\n    new rgbaColor(0, 55, 45, 1),\n    new rgbaColor(15, 109, 93, 1),\n    new rgbaColor(0, 185, 165, 1),\n    new rgbaColor(48, 255, 204, 1),\n    new rgbaColor(153, 255, 227, 1),\n    new rgbaColor(204, 255, 241, 1)\n  ),\n  JUG_GREEN: new ColorDef(\n    new rgbaColor(0, 56, 0, 1),\n    new rgbaColor(32, 69, 36, 1),\n    new rgbaColor(50, 161, 0, 1),\n    new rgbaColor(129, 206, 0, 1),\n    new rgbaColor(190, 231, 141, 1),\n    new rgbaColor(234, 247, 218, 1)\n  )\n}\nexport { Color as ColorDef }\n\nexport const LedColor = {\n  RED_LED: new LedColorDef(\n    '#FF9A89',\n    '#FF9A89',\n    '#FF3300',\n    '#FF8D70',\n    '#7E1C00',\n    '#7E1C00',\n    '#641B00'\n  ),\n  GREEN_LED: new LedColorDef(\n    '#9AFF89',\n    '#9AFF89',\n    '#59FF2A',\n    '#A5FF00',\n    '#1C7E00',\n    '#1C7E00',\n    '#1B6400'\n  ),\n  BLUE_LED: new LedColorDef(\n    '#899AFF',\n    '#899AFF',\n    '#0033FF',\n    '#708DFF',\n    '#001C7E',\n    '#001C7E',\n    '#001B64'\n  ),\n  ORANGE_LED: new LedColorDef(\n    '#FEA23F',\n    '#FEA23F',\n    '#FD6C00',\n    '#FD6C00',\n    '#592800',\n    '#592800',\n    '#421F00'\n  ),\n  YELLOW_LED: new LedColorDef(\n    '#FFFF62',\n    '#FFFF62',\n    '#FFFF00',\n    '#FFFF00',\n    '#6B6D00',\n    '#6B6D00',\n    '#515300'\n  ),\n  CYAN_LED: new LedColorDef(\n    '#00FFFF',\n    '#00FFFF',\n    '#1BC3C3',\n    '#00FFFF',\n    '#083B3B',\n    '#083B3B',\n    '#052727'\n  ),\n  MAGENTA_LED: new LedColorDef(\n    '#D300FF',\n    '#D300FF',\n    '#8600CB',\n    '#C300FF',\n    '#38004B',\n    '#38004B',\n    '#280035'\n  )\n}\n\nexport const GaugeType = {\n  TYPE1: new GaugeTypeDef('type1'),\n  TYPE2: new GaugeTypeDef('type2'),\n  TYPE3: new GaugeTypeDef('type3'),\n  TYPE4: new GaugeTypeDef('type4'),\n  TYPE5: new GaugeTypeDef('type5')\n}\n\nexport const Orientation = {\n  NORTH: new OrientationDef('north'),\n  SOUTH: new OrientationDef('south'),\n  EAST: new OrientationDef('east'),\n  WEST: new OrientationDef('west')\n}\n\nexport const KnobType = {\n  STANDARD_KNOB: new KnobTypeDef('standardKnob'),\n  METAL_KNOB: new KnobTypeDef('metalKnob')\n}\n\nexport const KnobStyle = {\n  BLACK: new KnobStyleDef('black'),\n  BRASS: new KnobStyleDef('brass'),\n  SILVER: new KnobStyleDef('silver')\n}\n\nexport const FrameDesign = {\n  BLACK_METAL: new FrameDesignDef('blackMetal'),\n  METAL: new FrameDesignDef('metal'),\n  SHINY_METAL: new FrameDesignDef('shinyMetal'),\n  BRASS: new FrameDesignDef('brass'),\n  STEEL: new FrameDesignDef('steel'),\n  CHROME: new FrameDesignDef('chrome'),\n  GOLD: new FrameDesignDef('gold'),\n  ANTHRACITE: new FrameDesignDef('anthracite'),\n  TILTED_GRAY: new FrameDesignDef('tiltedGray'),\n  TILTED_BLACK: new FrameDesignDef('tiltedBlack'),\n  GLOSSY_METAL: new FrameDesignDef('glossyMetal')\n}\n\nexport const PointerType = {\n  TYPE1: new PointerTypeDef('type1'),\n  TYPE2: new PointerTypeDef('type2'),\n  TYPE3: new PointerTypeDef('type3'),\n  TYPE4: new PointerTypeDef('type4'),\n  TYPE5: new PointerTypeDef('type5'),\n  TYPE6: new PointerTypeDef('type6'),\n  TYPE7: new PointerTypeDef('type7'),\n  TYPE8: new PointerTypeDef('type8'),\n  TYPE9: new PointerTypeDef('type9'),\n  TYPE10: new PointerTypeDef('type10'),\n  TYPE11: new PointerTypeDef('type11'),\n  TYPE12: new PointerTypeDef('type12'),\n  TYPE13: new PointerTypeDef('type13'),\n  TYPE14: new PointerTypeDef('type14'),\n  TYPE15: new PointerTypeDef('type15'),\n  TYPE16: new PointerTypeDef('type16')\n}\n\nexport const ForegroundType = {\n  TYPE1: new ForegroundTypeDef('type1'),\n  TYPE2: new ForegroundTypeDef('type2'),\n  TYPE3: new ForegroundTypeDef('type3'),\n  TYPE4: new ForegroundTypeDef('type4'),\n  TYPE5: new ForegroundTypeDef('type5')\n}\n\nexport const LabelNumberFormat = {\n  STANDARD: new LabelNumberFormatDef('standard'),\n  FRACTIONAL: new LabelNumberFormatDef('fractional'),\n  SCIENTIFIC: new LabelNumberFormatDef('scientific')\n}\n\nexport const TickLabelOrientation = {\n  NORMAL: new TickLabelOrientationDef('normal'),\n  HORIZONTAL: new TickLabelOrientationDef('horizontal'),\n  TANGENT: new TickLabelOrientationDef('tangent')\n}\n\nexport const TrendState = {\n  UP: new TrendStateDef('up'),\n  STEADY: new TrendStateDef('steady'),\n  DOWN: new TrendStateDef('down'),\n  OFF: new TrendStateDef('off')\n}\n","import createKnobImage from './createKnobImage'\nimport { createBuffer } from './tools'\n\nimport { GaugeType, Orientation } from './definitions'\n\nconst drawForeground = function (\n  ctx,\n  foregroundType,\n  imageWidth,\n  imageHeight,\n  withCenterKnob,\n  knob,\n  style,\n  gaugeType,\n  orientation\n) {\n  let radFgBuffer\n  let radFgCtx\n  const knobSize = Math.ceil(imageHeight * 0.084112)\n  let knobX = imageWidth * 0.5 - knobSize / 2\n  let knobY = imageHeight * 0.5 - knobSize / 2\n  const shadowOffset = imageWidth * 0.008\n  let gradHighlight\n  let gradHighlight2\n  const cacheKey =\n    foregroundType.type +\n    imageWidth +\n    imageHeight +\n    withCenterKnob +\n    (knob !== undefined ? knob.type : '-') +\n    (style !== undefined ? style.style : '-') +\n    (orientation !== undefined ? orientation.type : '-')\n\n  // check if we have already created and cached this buffer, if so return it and exit\n  if (!drawForeground.cache[cacheKey]) {\n    // Setup buffer\n    radFgBuffer = createBuffer(imageWidth, imageHeight)\n    radFgCtx = radFgBuffer.getContext('2d')\n\n    // center post\n    if (withCenterKnob) {\n      // Set the pointer shadow params\n      radFgCtx.shadowColor = 'rgba(0, 0, 0, 0.8)'\n      radFgCtx.shadowOffsetX = radFgCtx.shadowOffsetY = shadowOffset\n      radFgCtx.shadowBlur = shadowOffset * 2\n\n      if (gaugeType === GaugeType.TYPE5) {\n        if (Orientation.WEST === orientation) {\n          knobX = imageWidth * 0.733644 - knobSize / 2\n          radFgCtx.drawImage(\n            createKnobImage(knobSize, knob, style),\n            knobX,\n            knobY\n          )\n        } else if (Orientation.EAST === orientation) {\n          knobX = imageWidth * (1 - 0.733644) - knobSize / 2\n          radFgCtx.drawImage(\n            createKnobImage(knobSize, knob, style),\n            knobX,\n            knobY\n          )\n        } else {\n          knobY = imageHeight * 0.733644 - knobSize / 2\n          radFgCtx.drawImage(\n            createKnobImage(knobSize, knob, style),\n            knobX,\n            imageHeight * 0.6857\n          )\n        }\n      } else {\n        radFgCtx.drawImage(\n          createKnobImage(knobSize, knob, style),\n          knobX,\n          knobY\n        )\n      }\n      // Undo shadow drawing\n      radFgCtx.shadowOffsetX = radFgCtx.shadowOffsetY = 0\n      radFgCtx.shadowBlur = 0\n    }\n\n    // highlight\n    switch (foregroundType.type) {\n      case 'type2':\n        radFgCtx.beginPath()\n        radFgCtx.moveTo(imageWidth * 0.135514, imageHeight * 0.696261)\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.214953,\n          imageHeight * 0.588785,\n          imageWidth * 0.317757,\n          imageHeight * 0.5,\n          imageWidth * 0.462616,\n          imageHeight * 0.425233\n        )\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.612149,\n          imageHeight * 0.345794,\n          imageWidth * 0.733644,\n          imageHeight * 0.317757,\n          imageWidth * 0.873831,\n          imageHeight * 0.322429\n        )\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.766355,\n          imageHeight * 0.112149,\n          imageWidth * 0.528037,\n          imageHeight * 0.023364,\n          imageWidth * 0.313084,\n          imageHeight * 0.130841\n        )\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.09813,\n          imageHeight * 0.238317,\n          imageWidth * 0.028037,\n          imageHeight * 0.485981,\n          imageWidth * 0.135514,\n          imageHeight * 0.696261\n        )\n        radFgCtx.closePath()\n        gradHighlight = radFgCtx.createLinearGradient(\n          0.313084 * imageWidth,\n          0.135514 * imageHeight,\n          0.495528 * imageWidth,\n          0.493582 * imageHeight\n        )\n        gradHighlight.addColorStop(0, 'rgba(255, 255, 255, 0.275)')\n        gradHighlight.addColorStop(1, 'rgba(255, 255, 255, 0.015)')\n        break\n\n      case 'type3':\n        radFgCtx.beginPath()\n        radFgCtx.moveTo(imageWidth * 0.084112, imageHeight * 0.509345)\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.21028,\n          imageHeight * 0.556074,\n          imageWidth * 0.462616,\n          imageHeight * 0.560747,\n          imageWidth * 0.5,\n          imageHeight * 0.560747\n        )\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.537383,\n          imageHeight * 0.560747,\n          imageWidth * 0.794392,\n          imageHeight * 0.560747,\n          imageWidth * 0.915887,\n          imageHeight * 0.509345\n        )\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.915887,\n          imageHeight * 0.2757,\n          imageWidth * 0.738317,\n          imageHeight * 0.084112,\n          imageWidth * 0.5,\n          imageHeight * 0.084112\n        )\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.261682,\n          imageHeight * 0.084112,\n          imageWidth * 0.084112,\n          imageHeight * 0.2757,\n          imageWidth * 0.084112,\n          imageHeight * 0.509345\n        )\n        radFgCtx.closePath()\n        gradHighlight = radFgCtx.createLinearGradient(\n          0,\n          0.093457 * imageHeight,\n          0,\n          0.556073 * imageHeight\n        )\n        gradHighlight.addColorStop(0, 'rgba(255, 255, 255, 0.275)')\n        gradHighlight.addColorStop(1, 'rgba(255, 255, 255, 0.015)')\n        break\n\n      case 'type4':\n        radFgCtx.beginPath()\n        radFgCtx.moveTo(imageWidth * 0.67757, imageHeight * 0.24299)\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.771028,\n          imageHeight * 0.308411,\n          imageWidth * 0.822429,\n          imageHeight * 0.411214,\n          imageWidth * 0.813084,\n          imageHeight * 0.528037\n        )\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.799065,\n          imageHeight * 0.654205,\n          imageWidth * 0.719626,\n          imageHeight * 0.757009,\n          imageWidth * 0.593457,\n          imageHeight * 0.799065\n        )\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.485981,\n          imageHeight * 0.831775,\n          imageWidth * 0.369158,\n          imageHeight * 0.808411,\n          imageWidth * 0.285046,\n          imageHeight * 0.728971\n        )\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.2757,\n          imageHeight * 0.719626,\n          imageWidth * 0.252336,\n          imageHeight * 0.714953,\n          imageWidth * 0.233644,\n          imageHeight * 0.728971\n        )\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.214953,\n          imageHeight * 0.747663,\n          imageWidth * 0.219626,\n          imageHeight * 0.771028,\n          imageWidth * 0.228971,\n          imageHeight * 0.7757\n        )\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.331775,\n          imageHeight * 0.878504,\n          imageWidth * 0.476635,\n          imageHeight * 0.915887,\n          imageWidth * 0.616822,\n          imageHeight * 0.869158\n        )\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.771028,\n          imageHeight * 0.822429,\n          imageWidth * 0.873831,\n          imageHeight * 0.691588,\n          imageWidth * 0.88785,\n          imageHeight * 0.53271\n        )\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.897196,\n          imageHeight * 0.38785,\n          imageWidth * 0.836448,\n          imageHeight * 0.257009,\n          imageWidth * 0.719626,\n          imageHeight * 0.182242\n        )\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.705607,\n          imageHeight * 0.172897,\n          imageWidth * 0.682242,\n          imageHeight * 0.163551,\n          imageWidth * 0.663551,\n          imageHeight * 0.186915\n        )\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.654205,\n          imageHeight * 0.205607,\n          imageWidth * 0.668224,\n          imageHeight * 0.238317,\n          imageWidth * 0.67757,\n          imageHeight * 0.24299\n        )\n        radFgCtx.closePath()\n        gradHighlight = radFgCtx.createRadialGradient(\n          0.5 * imageWidth,\n          0.5 * imageHeight,\n          0,\n          0.5 * imageWidth,\n          0.5 * imageHeight,\n          0.38785 * imageWidth\n        )\n        gradHighlight.addColorStop(0, 'rgba(255, 255, 255, 0)')\n        gradHighlight.addColorStop(0.82, 'rgba(255, 255, 255, 0)')\n        gradHighlight.addColorStop(0.83, 'rgba(255, 255, 255, 0)')\n        gradHighlight.addColorStop(1, 'rgba(255, 255, 255, 0.15)')\n\n        radFgCtx.beginPath()\n        radFgCtx.moveTo(imageWidth * 0.261682, imageHeight * 0.224299)\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.285046,\n          imageHeight * 0.238317,\n          imageWidth * 0.252336,\n          imageHeight * 0.285046,\n          imageWidth * 0.24299,\n          imageHeight * 0.317757\n        )\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.24299,\n          imageHeight * 0.350467,\n          imageWidth * 0.271028,\n          imageHeight * 0.383177,\n          imageWidth * 0.271028,\n          imageHeight * 0.397196\n        )\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.2757,\n          imageHeight * 0.415887,\n          imageWidth * 0.261682,\n          imageHeight * 0.457943,\n          imageWidth * 0.238317,\n          imageHeight * 0.509345\n        )\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.224299,\n          imageHeight * 0.542056,\n          imageWidth * 0.17757,\n          imageHeight * 0.612149,\n          imageWidth * 0.158878,\n          imageHeight * 0.612149\n        )\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.144859,\n          imageHeight * 0.612149,\n          imageWidth * 0.088785,\n          imageHeight * 0.546728,\n          imageWidth * 0.130841,\n          imageHeight * 0.369158\n        )\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.140186,\n          imageHeight * 0.336448,\n          imageWidth * 0.214953,\n          imageHeight * 0.200934,\n          imageWidth * 0.261682,\n          imageHeight * 0.224299\n        )\n        radFgCtx.closePath()\n        gradHighlight2 = radFgCtx.createLinearGradient(\n          0.130841 * imageWidth,\n          0.369158 * imageHeight,\n          0.273839 * imageWidth,\n          0.412877 * imageHeight\n        )\n        gradHighlight2.addColorStop(0, 'rgba(255, 255, 255, 0.275)')\n        gradHighlight2.addColorStop(1, 'rgba(255, 255, 255, 0.015)')\n        radFgCtx.fillStyle = gradHighlight2\n        radFgCtx.fill()\n        break\n\n      case 'type5':\n        radFgCtx.beginPath()\n        radFgCtx.moveTo(imageWidth * 0.084112, imageHeight * 0.5)\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.084112,\n          imageHeight * 0.271028,\n          imageWidth * 0.271028,\n          imageHeight * 0.084112,\n          imageWidth * 0.5,\n          imageHeight * 0.084112\n        )\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.700934,\n          imageHeight * 0.084112,\n          imageWidth * 0.864485,\n          imageHeight * 0.224299,\n          imageWidth * 0.906542,\n          imageHeight * 0.411214\n        )\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.911214,\n          imageHeight * 0.439252,\n          imageWidth * 0.911214,\n          imageHeight * 0.518691,\n          imageWidth * 0.845794,\n          imageHeight * 0.537383\n        )\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.794392,\n          imageHeight * 0.546728,\n          imageWidth * 0.551401,\n          imageHeight * 0.411214,\n          imageWidth * 0.392523,\n          imageHeight * 0.457943\n        )\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.168224,\n          imageHeight * 0.509345,\n          imageWidth * 0.135514,\n          imageHeight * 0.7757,\n          imageWidth * 0.093457,\n          imageHeight * 0.593457\n        )\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.088785,\n          imageHeight * 0.560747,\n          imageWidth * 0.084112,\n          imageHeight * 0.53271,\n          imageWidth * 0.084112,\n          imageHeight * 0.5\n        )\n        radFgCtx.closePath()\n        gradHighlight = radFgCtx.createLinearGradient(\n          0,\n          0.084112 * imageHeight,\n          0,\n          0.644859 * imageHeight\n        )\n        gradHighlight.addColorStop(0, 'rgba(255, 255, 255, 0.275)')\n        gradHighlight.addColorStop(1, 'rgba(255, 255, 255, 0.015)')\n        break\n\n      case 'type1':\n      /* falls through */\n      default:\n        radFgCtx.beginPath()\n        radFgCtx.moveTo(imageWidth * 0.084112, imageHeight * 0.509345)\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.205607,\n          imageHeight * 0.448598,\n          imageWidth * 0.336448,\n          imageHeight * 0.415887,\n          imageWidth * 0.5,\n          imageHeight * 0.415887\n        )\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.672897,\n          imageHeight * 0.415887,\n          imageWidth * 0.789719,\n          imageHeight * 0.443925,\n          imageWidth * 0.915887,\n          imageHeight * 0.509345\n        )\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.915887,\n          imageHeight * 0.2757,\n          imageWidth * 0.738317,\n          imageHeight * 0.084112,\n          imageWidth * 0.5,\n          imageHeight * 0.084112\n        )\n        radFgCtx.bezierCurveTo(\n          imageWidth * 0.261682,\n          imageHeight * 0.084112,\n          imageWidth * 0.084112,\n          imageHeight * 0.2757,\n          imageWidth * 0.084112,\n          imageHeight * 0.509345\n        )\n        radFgCtx.closePath()\n        gradHighlight = radFgCtx.createLinearGradient(\n          0,\n          0.088785 * imageHeight,\n          0,\n          0.490654 * imageHeight\n        )\n        gradHighlight.addColorStop(0, 'rgba(255, 255, 255, 0.275)')\n        gradHighlight.addColorStop(1, 'rgba(255, 255, 255, 0.015)')\n        break\n    }\n    radFgCtx.fillStyle = gradHighlight\n    radFgCtx.fill()\n\n    // cache the buffer\n    drawForeground.cache[cacheKey] = radFgBuffer\n  }\n  ctx.drawImage(drawForeground.cache[cacheKey], 0, 0)\n  return this\n}\ndrawForeground.cache = {}\n\nexport default drawForeground\n","import { setAlpha, createBuffer, TWO_PI } from './tools'\n\nconst createLedImage = function (size, state, ledColor) {\n  let ledBuffer\n  let ledCtx\n  // Bug in Chrome browser, radialGradients do not draw correctly if the center is not an integer value\n  const ledCenterX = 2 * Math.round(size / 4)\n  const ledCenterY = 2 * Math.round(size / 4)\n  let grad\n  const cacheKey = size.toString() + state + ledColor.outerColor_ON\n\n  // check if we have already created and cached this buffer, if not create it\n  if (!createLedImage.cache[cacheKey]) {\n    ledBuffer = createBuffer(size, size)\n    ledCtx = ledBuffer.getContext('2d')\n\n    switch (state) {\n      case 0: // LED OFF\n        // OFF Gradient\n        grad = ledCtx.createRadialGradient(\n          ledCenterX,\n          ledCenterY,\n          0,\n          ledCenterX,\n          ledCenterY,\n          (size * 0.5) / 2\n        )\n        grad.addColorStop(0, ledColor.innerColor1_OFF)\n        grad.addColorStop(0.2, ledColor.innerColor2_OFF)\n        grad.addColorStop(1, ledColor.outerColor_OFF)\n        ledCtx.fillStyle = grad\n\n        ledCtx.beginPath()\n        ledCtx.arc(ledCenterX, ledCenterY, (size * 0.5) / 2, 0, TWO_PI, true)\n        ledCtx.closePath()\n        ledCtx.fill()\n\n        // InnerShadow\n        grad = ledCtx.createRadialGradient(\n          ledCenterX,\n          ledCenterY,\n          0,\n          ledCenterX,\n          ledCenterY,\n          (size * 0.5) / 2\n        )\n        grad.addColorStop(0, 'rgba(0, 0, 0, 0)')\n        grad.addColorStop(0.8, 'rgba(0, 0, 0, 0)')\n        grad.addColorStop(1, 'rgba(0, 0, 0, 0.4)')\n        ledCtx.fillStyle = grad\n\n        ledCtx.beginPath()\n        ledCtx.arc(ledCenterX, ledCenterY, (size * 0.5) / 2, 0, TWO_PI, true)\n        ledCtx.closePath()\n        ledCtx.fill()\n\n        // LightReflex\n        grad = ledCtx.createLinearGradient(\n          0,\n          0.35 * size,\n          0,\n          0.35 * size + 0.15 * size\n        )\n        grad.addColorStop(0, 'rgba(255, 255, 255, 0.4)')\n        grad.addColorStop(1, 'rgba(255, 255, 255, 0)')\n        ledCtx.fillStyle = grad\n\n        ledCtx.beginPath()\n        ledCtx.arc(\n          ledCenterX,\n          0.35 * size + (0.2 * size) / 2,\n          size * 0.2,\n          0,\n          TWO_PI,\n          true\n        )\n        ledCtx.closePath()\n        ledCtx.fill()\n        break\n\n      case 1: // LED ON\n        // ON Gradient\n        grad = ledCtx.createRadialGradient(\n          ledCenterX,\n          ledCenterY,\n          0,\n          ledCenterX,\n          ledCenterY,\n          (size * 0.5) / 2\n        )\n        grad.addColorStop(0, ledColor.innerColor1_ON)\n        grad.addColorStop(0.2, ledColor.innerColor2_ON)\n        grad.addColorStop(1, ledColor.outerColor_ON)\n        ledCtx.fillStyle = grad\n\n        ledCtx.beginPath()\n        ledCtx.arc(ledCenterX, ledCenterY, (size * 0.5) / 2, 0, TWO_PI, true)\n        ledCtx.closePath()\n        ledCtx.fill()\n\n        // InnerShadow\n        grad = ledCtx.createRadialGradient(\n          ledCenterX,\n          ledCenterY,\n          0,\n          ledCenterX,\n          ledCenterY,\n          (size * 0.5) / 2\n        )\n        grad.addColorStop(0, 'rgba(0, 0, 0, 0)')\n        grad.addColorStop(0.8, 'rgba(0, 0, 0, 0)')\n        grad.addColorStop(1, 'rgba(0, 0, 0, 0.4)')\n        ledCtx.fillStyle = grad\n\n        ledCtx.beginPath()\n        ledCtx.arc(ledCenterX, ledCenterY, (size * 0.5) / 2, 0, TWO_PI, true)\n        ledCtx.closePath()\n        ledCtx.fill()\n\n        // LightReflex\n        grad = ledCtx.createLinearGradient(\n          0,\n          0.35 * size,\n          0,\n          0.35 * size + 0.15 * size\n        )\n        grad.addColorStop(0, 'rgba(255, 255, 255, 0.4)')\n        grad.addColorStop(1, 'rgba(255, 255, 255, 0)')\n        ledCtx.fillStyle = grad\n\n        ledCtx.beginPath()\n        ledCtx.arc(\n          ledCenterX,\n          0.35 * size + (0.2 * size) / 2,\n          size * 0.2,\n          0,\n          TWO_PI,\n          true\n        )\n        ledCtx.closePath()\n        ledCtx.fill()\n\n        // Corona\n        grad = ledCtx.createRadialGradient(\n          ledCenterX,\n          ledCenterY,\n          0,\n          ledCenterX,\n          ledCenterY,\n          size / 2\n        )\n        grad.addColorStop(0, setAlpha(ledColor.coronaColor, 0))\n        grad.addColorStop(0.6, setAlpha(ledColor.coronaColor, 0.4))\n        grad.addColorStop(0.7, setAlpha(ledColor.coronaColor, 0.25))\n        grad.addColorStop(0.8, setAlpha(ledColor.coronaColor, 0.15))\n        grad.addColorStop(0.85, setAlpha(ledColor.coronaColor, 0.05))\n        grad.addColorStop(1, setAlpha(ledColor.coronaColor, 0))\n        ledCtx.fillStyle = grad\n\n        ledCtx.beginPath()\n        ledCtx.arc(ledCenterX, ledCenterY, size / 2, 0, TWO_PI, true)\n        ledCtx.closePath()\n        ledCtx.fill()\n        break\n    }\n    // cache the buffer\n    createLedImage.cache[cacheKey] = ledBuffer\n  }\n  return createLedImage.cache[cacheKey]\n}\ncreateLedImage.cache = {}\n\nexport default createLedImage\n","import { roundedRectangle, createBuffer } from './tools'\n\nconst createLcdBackgroundImage = function (width, height, lcdColor) {\n  let lcdBuffer\n  let lcdCtx\n  const xB = 0\n  const yB = 0\n  const wB = width\n  const hB = height\n  const rB = Math.min(width, height) * 0.095\n  let grad\n  const xF = 1\n  const yF = 1\n  const wF = width - 2\n  const hF = height - 2\n  const rF = rB - 1\n  const cacheKey = width.toString() + height + JSON.stringify(lcdColor)\n\n  // check if we have already created and cached this buffer, if not create it\n  if (!createLcdBackgroundImage.cache[cacheKey]) {\n    lcdBuffer = createBuffer(width, height)\n    lcdCtx = lcdBuffer.getContext('2d')\n    // background\n    grad = lcdCtx.createLinearGradient(0, yB, 0, yB + hB)\n    grad.addColorStop(0, '#4c4c4c')\n    grad.addColorStop(0.08, '#666666')\n    grad.addColorStop(0.92, '#666666')\n    grad.addColorStop(1, '#e6e6e6')\n    lcdCtx.fillStyle = grad\n    roundedRectangle(lcdCtx, xB, yB, wB, hB, rB)\n    lcdCtx.fill()\n\n    // foreground\n    grad = lcdCtx.createLinearGradient(0, yF, 0, yF + hF)\n    grad.addColorStop(0, lcdColor.gradientStartColor)\n    grad.addColorStop(0.03, lcdColor.gradientFraction1Color)\n    grad.addColorStop(0.49, lcdColor.gradientFraction2Color)\n    grad.addColorStop(0.5, lcdColor.gradientFraction3Color)\n    grad.addColorStop(1, lcdColor.gradientStopColor)\n    lcdCtx.fillStyle = grad\n    roundedRectangle(lcdCtx, xF, yF, wF, hF, rF)\n    lcdCtx.fill()\n    // cache the buffer\n    createLcdBackgroundImage.cache[cacheKey] = lcdBuffer\n  }\n  return createLcdBackgroundImage.cache[cacheKey]\n}\ncreateLcdBackgroundImage.cache = {}\n\nexport default createLcdBackgroundImage\n","import { doc } from './tools'\n\nconst createMeasuredValueImage = function (\n  size,\n  indicatorColor,\n  radial,\n  vertical\n) {\n  let indicatorBuffer\n  let indicatorCtx\n  const cacheKey = size.toString() + indicatorColor + radial + vertical\n\n  // check if we have already created and cached this buffer, if so return it and exit\n  if (!createMeasuredValueImage.cache[cacheKey]) {\n    indicatorBuffer = doc.createElement('canvas')\n    indicatorCtx = indicatorBuffer.getContext('2d')\n    indicatorBuffer.width = size\n    indicatorBuffer.height = size\n    indicatorCtx.fillStyle = indicatorColor\n    if (radial) {\n      indicatorCtx.beginPath()\n      indicatorCtx.moveTo(size * 0.5, size)\n      indicatorCtx.lineTo(0, 0)\n      indicatorCtx.lineTo(size, 0)\n      indicatorCtx.closePath()\n      indicatorCtx.fill()\n    } else {\n      if (vertical) {\n        indicatorCtx.beginPath()\n        indicatorCtx.moveTo(size, size * 0.5)\n        indicatorCtx.lineTo(0, 0)\n        indicatorCtx.lineTo(0, size)\n        indicatorCtx.closePath()\n        indicatorCtx.fill()\n      } else {\n        indicatorCtx.beginPath()\n        indicatorCtx.moveTo(size * 0.5, 0)\n        indicatorCtx.lineTo(size, size)\n        indicatorCtx.lineTo(0, size)\n        indicatorCtx.closePath()\n        indicatorCtx.fill()\n      }\n    }\n    // cache the buffer\n    createMeasuredValueImage.cache[cacheKey] = indicatorBuffer\n  }\n  return createMeasuredValueImage.cache[cacheKey]\n}\ncreateMeasuredValueImage.cache = {}\n\nexport default createMeasuredValueImage\n","import { setAlpha, createBuffer, TWO_PI } from './tools'\n\nconst createTrendIndicator = function (width, onSection, colors) {\n  const height = width * 2\n  let trendBuffer\n  let trendCtx\n  let fill\n  const cacheKey = onSection.state + width + JSON.stringify(colors)\n\n  const drawUpArrow = function () {\n    // draw up arrow (red)\n    const ledColor = colors[0]\n\n    if (onSection.state === 'up') {\n      fill = trendCtx.createRadialGradient(\n        0.5 * width,\n        0.2 * height,\n        0,\n        0.5 * width,\n        0.2 * height,\n        0.5 * width\n      )\n      fill.addColorStop(0, ledColor.innerColor1_ON)\n      fill.addColorStop(0.2, ledColor.innerColor2_ON)\n      fill.addColorStop(1, ledColor.outerColor_ON)\n    } else {\n      fill = trendCtx.createLinearGradient(0, 0, 0, 0.5 * height)\n      fill.addColorStop(0, '#323232')\n      fill.addColorStop(1, '#5c5c5c')\n    }\n    trendCtx.fillStyle = fill\n    trendCtx.beginPath()\n    trendCtx.moveTo(0.5 * width, 0)\n    trendCtx.lineTo(width, 0.2 * height)\n    trendCtx.lineTo(0.752 * width, 0.2 * height)\n    trendCtx.lineTo(0.752 * width, 0.37 * height)\n    trendCtx.lineTo(0.252 * width, 0.37 * height)\n    trendCtx.lineTo(0.252 * width, 0.2 * height)\n    trendCtx.lineTo(0, 0.2 * height)\n    trendCtx.closePath()\n    trendCtx.fill()\n    if (onSection.state !== 'up') {\n      // Inner shadow\n      trendCtx.strokeStyle = 'rgba(0, 0, 0, 0.4)'\n      trendCtx.beginPath()\n      trendCtx.moveTo(0, 0.2 * height)\n      trendCtx.lineTo(0.5 * width, 0)\n      trendCtx.lineTo(width, 0.2 * height)\n      trendCtx.moveTo(0.252 * width, 0.2 * height)\n      trendCtx.lineTo(0.252 * width, 0.37 * height)\n      trendCtx.stroke()\n      // Inner highlight\n      trendCtx.strokeStyle = 'rgba(255, 255, 255, 0.3)'\n      trendCtx.beginPath()\n      trendCtx.moveTo(0.252 * width, 0.37 * height)\n      trendCtx.lineTo(0.752 * width, 0.37 * height)\n      trendCtx.lineTo(0.752 * width, 0.2 * height)\n      trendCtx.lineTo(width, 0.2 * height)\n      trendCtx.stroke()\n    } else {\n      // draw halo\n      fill = trendCtx.createRadialGradient(\n        0.5 * width,\n        0.2 * height,\n        0,\n        0.5 * width,\n        0.2 * height,\n        0.7 * width\n      )\n      fill.addColorStop(0, setAlpha(ledColor.coronaColor, 0))\n      fill.addColorStop(0.5, setAlpha(ledColor.coronaColor, 0.3))\n      fill.addColorStop(0.7, setAlpha(ledColor.coronaColor, 0.2))\n      fill.addColorStop(0.8, setAlpha(ledColor.coronaColor, 0.1))\n      fill.addColorStop(0.85, setAlpha(ledColor.coronaColor, 0.05))\n      fill.addColorStop(1, setAlpha(ledColor.coronaColor, 0))\n      trendCtx.fillStyle = fill\n\n      trendCtx.beginPath()\n      trendCtx.arc(0.5 * width, 0.2 * height, 0.7 * width, 0, TWO_PI, true)\n      trendCtx.closePath()\n      trendCtx.fill()\n    }\n  }\n\n  const drawEquals = function () {\n    // draw equal symbol\n    const ledColor = colors[1]\n\n    trendCtx.beginPath()\n    if (onSection.state === 'steady') {\n      fill = ledColor.outerColor_ON\n      trendCtx.fillStyle = fill\n      trendCtx.rect(\n        0.128 * width,\n        0.41 * height,\n        0.744 * width,\n        0.074 * height\n      )\n      trendCtx.rect(\n        0.128 * width,\n        0.516 * height,\n        0.744 * width,\n        0.074 * height\n      )\n      trendCtx.closePath()\n      trendCtx.fill()\n    } else {\n      fill = trendCtx.createLinearGradient(\n        0,\n        0.41 * height,\n        0,\n        0.41 * height + 0.074 * height\n      )\n      fill.addColorStop(0, '#323232')\n      fill.addColorStop(1, '#5c5c5c')\n      trendCtx.fillStyle = fill\n      trendCtx.rect(\n        0.128 * width,\n        0.41 * height,\n        0.744 * width,\n        0.074 * height\n      )\n      trendCtx.closePath()\n      trendCtx.fill()\n      fill = trendCtx.createLinearGradient(\n        0,\n        0.516 * height,\n        0,\n        0.516 * height + 0.074 * height\n      )\n      fill.addColorStop(0, '#323232')\n      fill.addColorStop(1, '#5c5c5c')\n      trendCtx.fillStyle = fill\n      trendCtx.rect(\n        0.128 * width,\n        0.516 * height,\n        0.744 * width,\n        0.074 * height\n      )\n      trendCtx.closePath()\n      trendCtx.fill()\n    }\n    if (onSection.state !== 'steady') {\n      // inner shadow\n      trendCtx.strokeStyle = 'rgba(0, 0, 0, 0.4)'\n      trendCtx.beginPath()\n      trendCtx.moveTo(0.128 * width, 0.41 * height + 0.074 * height)\n      trendCtx.lineTo(0.128 * width, 0.41 * height)\n      trendCtx.lineTo(0.128 * width + 0.744 * width, 0.41 * height)\n      trendCtx.stroke()\n      trendCtx.beginPath()\n      trendCtx.moveTo(0.128 * width, 0.516 * height + 0.074 * height)\n      trendCtx.lineTo(0.128 * width, 0.516 * height)\n      trendCtx.lineTo(0.128 * width + 0.744 * width, 0.516 * height)\n      trendCtx.stroke()\n      // inner highlight\n      trendCtx.strokeStyle = 'rgba(255, 255, 255, 0.3)'\n      trendCtx.beginPath()\n      trendCtx.moveTo(0.128 * width + 0.744 * width, 0.41 * height)\n      trendCtx.lineTo(\n        0.128 * width + 0.744 * width,\n        0.41 * height + 0.074 * height\n      )\n      trendCtx.lineTo(0.128 * width, 0.41 * height + 0.074 * height)\n      trendCtx.stroke()\n      trendCtx.beginPath()\n      trendCtx.moveTo(0.128 * width + 0.744 * width, 0.516 * height)\n      trendCtx.lineTo(\n        0.128 * width + 0.744 * width,\n        0.516 * height + 0.074 * height\n      )\n      trendCtx.lineTo(0.128 * width, 0.516 * height + 0.074 * height)\n      trendCtx.stroke()\n    } else {\n      // draw halo\n      fill = trendCtx.createRadialGradient(\n        0.5 * width,\n        0.5 * height,\n        0,\n        0.5 * width,\n        0.5 * height,\n        0.7 * width\n      )\n      fill.addColorStop(0, setAlpha(ledColor.coronaColor, 0))\n      fill.addColorStop(0.5, setAlpha(ledColor.coronaColor, 0.3))\n      fill.addColorStop(0.7, setAlpha(ledColor.coronaColor, 0.2))\n      fill.addColorStop(0.8, setAlpha(ledColor.coronaColor, 0.1))\n      fill.addColorStop(0.85, setAlpha(ledColor.coronaColor, 0.05))\n      fill.addColorStop(1, setAlpha(ledColor.coronaColor, 0))\n      trendCtx.fillStyle = fill\n      trendCtx.beginPath()\n      trendCtx.arc(0.5 * width, 0.5 * height, 0.7 * width, 0, TWO_PI, true)\n      trendCtx.closePath()\n      trendCtx.fill()\n    }\n  }\n\n  const drawDownArrow = function () {\n    // draw down arrow\n    const ledColor = colors[2]\n    if (onSection.state === 'down') {\n      fill = trendCtx.createRadialGradient(\n        0.5 * width,\n        0.8 * height,\n        0,\n        0.5 * width,\n        0.8 * height,\n        0.5 * width\n      )\n      fill.addColorStop(0, ledColor.innerColor1_ON)\n      fill.addColorStop(0.2, ledColor.innerColor2_ON)\n      fill.addColorStop(1, ledColor.outerColor_ON)\n    } else {\n      fill = trendCtx.createLinearGradient(0, 0.63 * height, 0, height)\n      fill.addColorStop(0, '#323232')\n      fill.addColorStop(1, '#5c5c5c')\n    }\n    trendCtx.beginPath()\n    trendCtx.fillStyle = fill\n    trendCtx.moveTo(0.5 * width, height)\n    trendCtx.lineTo(width, 0.8 * height)\n    trendCtx.lineTo(0.725 * width, 0.8 * height)\n    trendCtx.lineTo(0.725 * width, 0.63 * height)\n    trendCtx.lineTo(0.252 * width, 0.63 * height)\n    trendCtx.lineTo(0.252 * width, 0.8 * height)\n    trendCtx.lineTo(0, 0.8 * height)\n    trendCtx.closePath()\n    trendCtx.fill()\n    if (onSection.state !== 'down') {\n      // Inner shadow\n      trendCtx.strokeStyle = 'rgba(0, 0, 0, 0.4)'\n      trendCtx.beginPath()\n      trendCtx.moveTo(0, 0.8 * height)\n      trendCtx.lineTo(0.252 * width, 0.8 * height)\n      trendCtx.moveTo(0.252 * width, 0.63 * height)\n      trendCtx.lineTo(0.752 * width, 0.63 * height)\n      trendCtx.stroke()\n      trendCtx.beginPath()\n      trendCtx.moveTo(0.752 * width, 0.8 * height)\n      trendCtx.lineTo(width, 0.8 * height)\n      trendCtx.stroke()\n      // Inner highlight\n      trendCtx.strokeStyle = 'rgba(255, 255, 255, 0.3)'\n      trendCtx.beginPath()\n      trendCtx.moveTo(0, 0.8 * height)\n      trendCtx.lineTo(0.5 * width, height)\n      trendCtx.lineTo(width, 0.8 * height)\n      trendCtx.stroke()\n      trendCtx.beginPath()\n      trendCtx.moveTo(0.752 * width, 0.8 * height)\n      trendCtx.lineTo(0.752 * width, 0.63 * height)\n      trendCtx.stroke()\n    } else {\n      // draw halo\n      fill = trendCtx.createRadialGradient(\n        0.5 * width,\n        0.8 * height,\n        0,\n        0.5 * width,\n        0.8 * height,\n        0.7 * width\n      )\n      fill.addColorStop(0, setAlpha(ledColor.coronaColor, 0))\n      fill.addColorStop(0.5, setAlpha(ledColor.coronaColor, 0.3))\n      fill.addColorStop(0.7, setAlpha(ledColor.coronaColor, 0.2))\n      fill.addColorStop(0.8, setAlpha(ledColor.coronaColor, 0.1))\n      fill.addColorStop(0.85, setAlpha(ledColor.coronaColor, 0.05))\n      fill.addColorStop(1, setAlpha(ledColor.coronaColor, 0))\n      trendCtx.fillStyle = fill\n      trendCtx.beginPath()\n      trendCtx.arc(0.5 * width, 0.8 * height, 0.7 * width, 0, TWO_PI, true)\n      trendCtx.closePath()\n      trendCtx.fill()\n    }\n  }\n\n  // Check if we have already cached this indicator, if not create it\n  if (!createTrendIndicator.cache[cacheKey]) {\n    // create oversized buffer for the glow\n    trendBuffer = createBuffer(width * 2, width * 4)\n    trendCtx = trendBuffer.getContext('2d')\n    trendCtx.translate(width * 0.5, width * 0.5)\n    // Must draw the active section last so the 'glow' is on top\n    switch (onSection.state) {\n      case 'up':\n        drawDownArrow()\n        drawEquals()\n        drawUpArrow()\n        break\n      case 'steady':\n        drawDownArrow()\n        drawUpArrow()\n        drawEquals()\n        break\n      case 'down':\n      /* falls through */\n      default:\n        drawUpArrow()\n        drawEquals()\n        drawDownArrow()\n        break\n    }\n    // cache the buffer\n    createTrendIndicator.cache[cacheKey] = trendBuffer\n  }\n  return createTrendIndicator.cache[cacheKey]\n}\ncreateTrendIndicator.cache = {}\n\nexport default createTrendIndicator\n","import { stdFontName } from './tools'\n\nimport { GaugeType } from './definitions'\n\nconst drawTitleImage = function (\n  ctx,\n  imageWidth,\n  imageHeight,\n  titleString,\n  unitString,\n  backgroundColor,\n  vertical,\n  radial,\n  altPos,\n  gaugeType\n) {\n  gaugeType =\n    undefined === gaugeType ? (gaugeType = GaugeType.TYPE1) : gaugeType\n  ctx.save()\n  ctx.textAlign = radial ? 'center' : 'left'\n  ctx.textBaseline = 'middle'\n  ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor()\n  ctx.fillStyle = backgroundColor.labelColor.getRgbaColor()\n\n  if (radial) {\n    ctx.font = 0.046728 * imageWidth + 'px ' + stdFontName\n    ctx.fillText(\n      titleString,\n      imageWidth / 2,\n      imageHeight * 0.3,\n      imageWidth * 0.3\n    )\n    ctx.fillText(\n      unitString,\n      imageWidth / 2,\n      imageHeight * 0.38,\n      imageWidth * 0.3\n    )\n  } else {\n    // linear\n    if (vertical) {\n      ctx.font = 0.1 * imageWidth + 'px ' + stdFontName\n      ctx.save()\n      ctx.translate(0.671428 * imageWidth, 0.1375 * imageHeight)\n      ctx.rotate(1.570796)\n      ctx.fillText(titleString, 0, 0)\n      ctx.translate(-0.671428 * imageWidth, -0.1375 * imageHeight)\n      ctx.restore()\n      ctx.font = 0.071428 * imageWidth + 'px ' + stdFontName\n      if (altPos) {\n        // LCD visible\n        if (gaugeType.type === 'type2') {\n          ctx.textAlign = 'right'\n          ctx.fillText(\n            unitString,\n            0.36 * imageWidth,\n            imageHeight * 0.79,\n            imageWidth * 0.25\n          )\n        } else {\n          ctx.fillText(\n            unitString,\n            0.63 * imageWidth,\n            imageHeight * 0.85,\n            imageWidth * 0.2\n          )\n        }\n      } else {\n        // LCD hidden\n        ctx.textAlign = 'center'\n        if (gaugeType.type === 'type2') {\n          ctx.fillText(\n            unitString,\n            imageWidth / 2,\n            imageHeight * 0.92,\n            imageWidth * 0.2\n          )\n        } else {\n          ctx.fillText(\n            unitString,\n            imageWidth / 2,\n            imageHeight * 0.89,\n            imageWidth * 0.2\n          )\n        }\n      }\n    } else {\n      // linear horizontal\n      ctx.font = 0.035 * imageWidth + 'px ' + stdFontName\n      ctx.fillText(\n        titleString,\n        imageWidth * 0.15,\n        imageHeight * 0.25,\n        imageWidth * 0.3\n      )\n      ctx.font = 0.025 * imageWidth + 'px ' + stdFontName\n      ctx.fillText(\n        unitString,\n        imageWidth * 0.0625,\n        imageHeight * 0.7,\n        imageWidth * 0.07\n      )\n    }\n  }\n  ctx.restore()\n}\n\nexport default drawTitleImage\n","import Tween from './tween.js'\nimport { createBuffer, requestAnimFrame, getCanvasContext } from './tools'\n\nconst Odometer = function (canvas, parameters) {\n  parameters = parameters || {}\n\n  // parameters\n  const _context =\n    undefined === parameters._context ? null : parameters._context\n  let height = undefined === parameters.height ? 0 : parameters.height\n  const digits = undefined === parameters.digits ? 6 : parameters.digits\n  const decimals = undefined === parameters.decimals ? 1 : parameters.decimals\n  const decimalBackColor =\n    undefined === parameters.decimalBackColor\n      ? '#F0F0F0'\n      : parameters.decimalBackColor\n  const decimalForeColor =\n    undefined === parameters.decimalForeColor\n      ? '#F01010'\n      : parameters.decimalForeColor\n  const font = undefined === parameters.font ? 'sans-serif' : parameters.font\n  let value = undefined === parameters.value ? 0 : parameters.value\n  const valueBackColor =\n    undefined === parameters.valueBackColor\n      ? '#050505'\n      : parameters.valueBackColor\n  const valueForeColor =\n    undefined === parameters.valueForeColor\n      ? '#F8F8F8'\n      : parameters.valueForeColor\n  const wobbleFactor =\n    undefined === parameters.wobbleFactor ? 0.07 : parameters.wobbleFactor\n  //\n  let initialized = false\n  let tween\n  let ctx\n  let repainting = false\n  const wobble = []\n  // End of variables\n\n  // Get the canvas context and clear it\n  if (_context) {\n    ctx = _context\n  } else {\n    ctx = getCanvasContext(canvas)\n  }\n\n  // Has a height been specified?\n  if (height === 0) {\n    height = ctx.canvas.height\n  }\n\n  // Cannot display negative values yet\n  if (value < 0) {\n    value = 0\n  }\n\n  const digitHeight = Math.floor(height * 0.85)\n  const stdFont = '600 ' + digitHeight + 'px ' + font\n\n  const digitWidth = Math.floor(height * 0.68)\n  const width = digitWidth * (digits + decimals)\n  const columnHeight = digitHeight * 11\n  const verticalSpace = columnHeight / 12\n  const zeroOffset = verticalSpace * 0.81\n\n  // Resize and clear the main context\n  ctx.canvas.width = width\n  ctx.canvas.height = height\n\n  // Create buffers\n  const backgroundBuffer = createBuffer(width, height)\n  const backgroundContext = backgroundBuffer.getContext('2d')\n\n  const foregroundBuffer = createBuffer(width, height)\n  const foregroundContext = foregroundBuffer.getContext('2d')\n\n  const digitBuffer = createBuffer(digitWidth, columnHeight * 1.1)\n  const digitContext = digitBuffer.getContext('2d')\n\n  const decimalBuffer = createBuffer(digitWidth, columnHeight * 1.1)\n  const decimalContext = decimalBuffer.getContext('2d')\n\n  function init () {\n    let i\n\n    initialized = true\n\n    // Create the foreground\n    foregroundContext.rect(0, 0, width, height)\n    const grad = foregroundContext.createLinearGradient(0, 0, 0, height)\n    grad.addColorStop(0, 'rgba(0, 0, 0, 1)')\n    grad.addColorStop(0.1, 'rgba(0, 0, 0, 0.4)')\n    grad.addColorStop(0.33, 'rgba(255, 255, 255, 0.45)')\n    grad.addColorStop(0.46, 'rgba(255, 255, 255, 0)')\n    grad.addColorStop(0.9, 'rgba(0, 0, 0, 0.4)')\n    grad.addColorStop(1, 'rgba(0, 0, 0, 1)')\n    foregroundContext.fillStyle = grad\n    foregroundContext.fill()\n\n    // Create a digit column\n    // background\n    digitContext.rect(0, 0, digitWidth, columnHeight * 1.1)\n    digitContext.fillStyle = valueBackColor\n    digitContext.fill()\n    // edges\n    digitContext.strokeStyle = '#f0f0f0'\n    digitContext.lineWidth = '1px' // height * 0.1 + 'px';\n    digitContext.moveTo(0, 0)\n    digitContext.lineTo(0, columnHeight * 1.1)\n    digitContext.stroke()\n    digitContext.strokeStyle = '#202020'\n    digitContext.moveTo(digitWidth, 0)\n    digitContext.lineTo(digitWidth, columnHeight * 1.1)\n    digitContext.stroke()\n    // numerals\n    digitContext.textAlign = 'center'\n    digitContext.textBaseline = 'middle'\n    digitContext.font = stdFont\n    digitContext.fillStyle = valueForeColor\n    // put the digits 901234567890 vertically into the buffer\n    for (i = 9; i < 21; i++) {\n      digitContext.fillText(\n        i % 10,\n        digitWidth * 0.5,\n        verticalSpace * (i - 9) + verticalSpace / 2\n      )\n    }\n\n    // Create a decimal column\n    if (decimals > 0) {\n      // background\n      decimalContext.rect(0, 0, digitWidth, columnHeight * 1.1)\n      decimalContext.fillStyle = decimalBackColor\n      decimalContext.fill()\n      // edges\n      decimalContext.strokeStyle = '#f0f0f0'\n      decimalContext.lineWidth = '1px' // height * 0.1 + 'px';\n      decimalContext.moveTo(0, 0)\n      decimalContext.lineTo(0, columnHeight * 1.1)\n      decimalContext.stroke()\n      decimalContext.strokeStyle = '#202020'\n      decimalContext.moveTo(digitWidth, 0)\n      decimalContext.lineTo(digitWidth, columnHeight * 1.1)\n      decimalContext.stroke()\n      // numerals\n      decimalContext.textAlign = 'center'\n      decimalContext.textBaseline = 'middle'\n      decimalContext.font = stdFont\n      decimalContext.fillStyle = decimalForeColor\n      // put the digits 901234567890 vertically into the buffer\n      for (i = 9; i < 21; i++) {\n        decimalContext.fillText(\n          i % 10,\n          digitWidth * 0.5,\n          verticalSpace * (i - 9) + verticalSpace / 2\n        )\n      }\n    }\n    // wobble factors\n    for (i = 0; i < digits + decimals; i++) {\n      wobble[i] =\n        Math.random() * wobbleFactor * height - (wobbleFactor * height) / 2\n    }\n  }\n\n  function drawDigits () {\n    let pos = 1\n    let val = value\n    let i\n    let num\n    let numb\n    let frac\n    let prevNum\n\n    // do not use Math.pow() - rounding errors!\n    for (i = 0; i < decimals; i++) {\n      val *= 10\n    }\n\n    numb = Math.floor(val)\n    frac = val - numb\n    numb = String(numb)\n    prevNum = 9\n\n    for (i = 0; i < decimals + digits; i++) {\n      num = +numb.substring(numb.length - i - 1, numb.length - i) || 0\n      if (prevNum !== 9) {\n        frac = 0\n      }\n      if (i < decimals) {\n        backgroundContext.drawImage(\n          decimalBuffer,\n          width - digitWidth * pos,\n          -(verticalSpace * (num + frac) + zeroOffset + wobble[i])\n        )\n      } else {\n        backgroundContext.drawImage(\n          digitBuffer,\n          width - digitWidth * pos,\n          -(verticalSpace * (num + frac) + zeroOffset + wobble[i])\n        )\n      }\n      pos++\n      prevNum = num\n    }\n  }\n\n  this.setValueAnimated = function (newVal, callback) {\n    const gauge = this\n    newVal = parseFloat(newVal)\n\n    if (newVal < 0) {\n      newVal = 0\n    }\n    if (value !== newVal) {\n      if (undefined !== tween && tween.isPlaying) {\n        tween.stop()\n      }\n\n      tween = new Tween({}, '', Tween.strongEaseOut, value, newVal, 2)\n      tween.onMotionChanged = function (event) {\n        value = event.target._pos\n        if (!repainting) {\n          repainting = true\n          requestAnimFrame(gauge.repaint)\n        }\n      }\n\n      // do we have a callback function to process?\n      if (callback && typeof callback === 'function') {\n        tween.onMotionFinished = callback\n      }\n\n      tween.start()\n    }\n    this.repaint()\n    return this\n  }\n\n  this.setValue = function (newVal) {\n    value = parseFloat(newVal)\n    if (value < 0) {\n      value = 0\n    }\n    this.repaint()\n    return this\n  }\n\n  this.getValue = function () {\n    return value\n  }\n\n  this.repaint = function () {\n    if (!initialized) {\n      init()\n    }\n\n    // draw digits\n    drawDigits()\n\n    // draw the foreground\n    backgroundContext.drawImage(foregroundBuffer, 0, 0)\n\n    // paint back to the main context\n    ctx.drawImage(backgroundBuffer, 0, 0)\n\n    repainting = false\n  }\n\n  this.repaint()\n}\n\nexport default Odometer\n","import Tween from './tween.js'\nimport drawPointerImage from './drawPointerImage'\nimport drawFrame from './drawFrame'\nimport drawBackground from './drawBackground'\nimport drawRadialCustomImage from './drawRadialCustomImage'\nimport drawForeground from './drawForeground'\nimport createKnobImage from './createKnobImage'\nimport createLedImage from './createLedImage'\nimport createLcdBackgroundImage from './createLcdBackgroundImage'\nimport createMeasuredValueImage from './createMeasuredValueImage'\nimport createTrendIndicator from './createTrendIndicator'\nimport drawTitleImage from './drawTitleImage'\nimport {\n  calcNiceNumber,\n  createBuffer,\n  requestAnimFrame,\n  getCanvasContext,\n  HALF_PI,\n  TWO_PI,\n  PI,\n  RAD_FACTOR,\n  doc,\n  lcdFontName,\n  stdFontName\n} from './tools'\n\nimport {\n  BackgroundColor,\n  LcdColor,\n  ColorDef,\n  LedColor,\n  GaugeType,\n  KnobType,\n  KnobStyle,\n  FrameDesign,\n  PointerType,\n  ForegroundType,\n  LabelNumberFormat,\n  TickLabelOrientation,\n  TrendState\n} from './definitions'\n\nimport Odometer from './Odometer'\n\nconst Radial = function (canvas, parameters) {\n  parameters = parameters || {}\n  const gaugeType =\n    undefined === parameters.gaugeType ? GaugeType.TYPE4 : parameters.gaugeType\n  let size = undefined === parameters.size ? 0 : parameters.size\n  let minValue = undefined === parameters.minValue ? 0 : parameters.minValue\n  let maxValue =\n    undefined === parameters.maxValue ? minValue + 100 : parameters.maxValue\n  const niceScale =\n    undefined === parameters.niceScale ? true : parameters.niceScale\n  let threshold =\n    undefined === parameters.threshold\n      ? (maxValue - minValue) / 2 + minValue\n      : parameters.threshold\n  let thresholdRising =\n    undefined === parameters.thresholdRising\n      ? true\n      : parameters.thresholdRising\n  let section = undefined === parameters.section ? null : parameters.section\n  let area = undefined === parameters.area ? null : parameters.area\n  let titleString =\n    undefined === parameters.titleString ? '' : parameters.titleString\n  let unitString =\n    undefined === parameters.unitString ? '' : parameters.unitString\n  let frameDesign =\n    undefined === parameters.frameDesign\n      ? FrameDesign.METAL\n      : parameters.frameDesign\n  const frameVisible =\n    undefined === parameters.frameVisible ? true : parameters.frameVisible\n  let backgroundColor =\n    undefined === parameters.backgroundColor\n      ? BackgroundColor.DARK_GRAY\n      : parameters.backgroundColor\n  const backgroundVisible =\n    undefined === parameters.backgroundVisible\n      ? true\n      : parameters.backgroundVisible\n  let pointerType =\n    undefined === parameters.pointerType\n      ? PointerType.TYPE1\n      : parameters.pointerType\n  let pointerColor =\n    undefined === parameters.pointerColor\n      ? ColorDef.RED\n      : parameters.pointerColor\n  const knobType =\n    undefined === parameters.knobType\n      ? KnobType.STANDARD_KNOB\n      : parameters.knobType\n  const knobStyle =\n    undefined === parameters.knobStyle\n      ? KnobStyle.SILVER\n      : parameters.knobStyle\n  let lcdColor =\n    undefined === parameters.lcdColor ? LcdColor.STANDARD : parameters.lcdColor\n  const lcdVisible =\n    undefined === parameters.lcdVisible ? true : parameters.lcdVisible\n  let lcdDecimals =\n    undefined === parameters.lcdDecimals ? 2 : parameters.lcdDecimals\n  const digitalFont =\n    undefined === parameters.digitalFont ? false : parameters.digitalFont\n  let fractionalScaleDecimals =\n    undefined === parameters.fractionalScaleDecimals\n      ? 1\n      : parameters.fractionalScaleDecimals\n  let ledColor =\n    undefined === parameters.ledColor ? LedColor.RED_LED : parameters.ledColor\n  let ledVisible =\n    undefined === parameters.ledVisible ? true : parameters.ledVisible\n  let userLedColor =\n    undefined === parameters.userLedColor\n      ? LedColor.GREEN_LED\n      : parameters.userLedColor\n  let userLedVisible =\n    undefined === parameters.userLedVisible ? false : parameters.userLedVisible\n  let thresholdVisible =\n    undefined === parameters.thresholdVisible\n      ? true\n      : parameters.thresholdVisible\n  let minMeasuredValueVisible =\n    undefined === parameters.minMeasuredValueVisible\n      ? false\n      : parameters.minMeasuredValueVisible\n  let maxMeasuredValueVisible =\n    undefined === parameters.maxMeasuredValueVisible\n      ? false\n      : parameters.maxMeasuredValueVisible\n  let foregroundType =\n    undefined === parameters.foregroundType\n      ? ForegroundType.TYPE1\n      : parameters.foregroundType\n  const foregroundVisible =\n    undefined === parameters.foregroundVisible\n      ? true\n      : parameters.foregroundVisible\n  let labelNumberFormat =\n    undefined === parameters.labelNumberFormat\n      ? LabelNumberFormat.STANDARD\n      : parameters.labelNumberFormat\n  const playAlarm =\n    undefined === parameters.playAlarm ? false : parameters.playAlarm\n  const alarmSound =\n    undefined === parameters.alarmSound ? false : parameters.alarmSound\n  const customLayer =\n    undefined === parameters.customLayer ? null : parameters.customLayer\n  const tickLabelOrientation =\n    undefined === parameters.tickLabelOrientation\n      ? gaugeType === GaugeType.TYPE1\n        ? TickLabelOrientation.TANGENT\n        : TickLabelOrientation.NORMAL\n      : parameters.tickLabelOrientation\n  let trendVisible =\n    undefined === parameters.trendVisible ? false : parameters.trendVisible\n  const trendColors =\n    undefined === parameters.trendColors\n      ? [LedColor.RED_LED, LedColor.GREEN_LED, LedColor.CYAN_LED]\n      : parameters.trendColors\n  const useOdometer =\n    undefined === parameters.useOdometer ? false : parameters.useOdometer\n  const odometerParams =\n    undefined === parameters.odometerParams ? {} : parameters.odometerParams\n  const odometerUseValue =\n    undefined === parameters.odometerUseValue\n      ? false\n      : parameters.odometerUseValue\n  const fullScaleDeflectionTime =\n    undefined === parameters.fullScaleDeflectionTime\n      ? 2.5\n      : parameters.fullScaleDeflectionTime\n\n  // Get the canvas context and clear it\n  const mainCtx = getCanvasContext(canvas)\n  // Has a size been specified?\n  if (size === 0) {\n    size = Math.min(mainCtx.canvas.width, mainCtx.canvas.height)\n  }\n\n  // Set the size - also clears the canvas\n  mainCtx.canvas.width = size\n  mainCtx.canvas.height = size\n\n  // Create audio tag for alarm sound\n  let audioElement\n  if (playAlarm && alarmSound !== false) {\n    audioElement = doc.createElement('audio')\n    audioElement.setAttribute('src', alarmSound)\n    audioElement.setAttribute('preload', 'auto')\n  }\n\n  let value = minValue\n  let odoValue = minValue\n  const self = this\n\n  // Properties\n  let minMeasuredValue = maxValue\n  let maxMeasuredValue = minValue\n\n  let ledBlinking = false\n  let userLedBlinking = false\n\n  let ledTimerId = 0\n  let userLedTimerId = 0\n  let tween\n  let repainting = false\n\n  let trendIndicator = TrendState.OFF\n  const trendSize = size * 0.06\n  const trendPosX = size * 0.29\n  const trendPosY = size * 0.36\n\n  // GaugeType specific private variables\n  let freeAreaAngle\n  let rotationOffset\n  let angleRange\n  let angleStep\n\n  let angle = rotationOffset + (value - minValue) * angleStep\n\n  const imageWidth = size\n  const imageHeight = size\n\n  const centerX = imageWidth / 2\n  const centerY = imageHeight / 2\n\n  // Misc\n  const ledSize = size * 0.093457\n  const ledPosX = 0.6 * imageWidth\n  const ledPosY = 0.4 * imageHeight\n  const userLedPosX =\n    gaugeType === GaugeType.TYPE3 ? 0.6 * imageWidth : centerX - ledSize / 2\n  const userLedPosY =\n    gaugeType === GaugeType.TYPE3 ? 0.72 * imageHeight : 0.75 * imageHeight\n  const lcdFontHeight = Math.floor(imageWidth / 10)\n  const stdFont = lcdFontHeight + 'px ' + stdFontName\n  const lcdFont = lcdFontHeight + 'px ' + lcdFontName\n  const lcdHeight = imageHeight * 0.13\n  const lcdWidth = imageWidth * 0.4\n  const lcdPosX = (imageWidth - lcdWidth) / 2\n  const lcdPosY = imageHeight * 0.57\n  let odoPosX\n  const odoPosY = imageHeight * 0.61\n  const shadowOffset = imageWidth * 0.006\n\n  // Constants\n  let initialized = false\n\n  // Tickmark specific private variables\n  let niceMinValue = minValue\n  let niceMaxValue = maxValue\n  let niceRange = maxValue - minValue\n  let range = niceMaxValue - niceMinValue\n  let minorTickSpacing = 0\n  let majorTickSpacing = 0\n  const maxNoOfMinorTicks = 10\n  const maxNoOfMajorTicks = 10\n\n  // Method to calculate nice values for min, max and range for the tickmarks\n  const calculate = function calculate () {\n    if (niceScale) {\n      niceRange = calcNiceNumber(maxValue - minValue, false)\n      majorTickSpacing = calcNiceNumber(\n        niceRange / (maxNoOfMajorTicks - 1),\n        true\n      )\n      niceMinValue = Math.floor(minValue / majorTickSpacing) * majorTickSpacing\n      niceMaxValue = Math.ceil(maxValue / majorTickSpacing) * majorTickSpacing\n      minorTickSpacing = calcNiceNumber(\n        majorTickSpacing / (maxNoOfMinorTicks - 1),\n        true\n      )\n      minValue = niceMinValue\n      maxValue = niceMaxValue\n      range = maxValue - minValue\n    } else {\n      niceRange = maxValue - minValue\n      niceMinValue = minValue\n      niceMaxValue = maxValue\n      range = niceRange\n      majorTickSpacing = calcNiceNumber(\n        niceRange / (maxNoOfMajorTicks - 1),\n        true\n      )\n      minorTickSpacing = calcNiceNumber(\n        majorTickSpacing / (maxNoOfMinorTicks - 1),\n        true\n      )\n    }\n    // Make sure values are still in range\n    value = value < minValue ? minValue : value > maxValue ? maxValue : value\n    minMeasuredValue =\n      minMeasuredValue < minValue\n        ? minValue\n        : minMeasuredValue > maxValue\n          ? maxValue\n          : minMeasuredValue\n    maxMeasuredValue =\n      maxMeasuredValue < minValue\n        ? minValue\n        : maxMeasuredValue > maxValue\n          ? maxValue\n          : maxMeasuredValue\n    threshold =\n      threshold < minValue\n        ? minValue\n        : threshold > maxValue\n          ? maxValue\n          : threshold\n\n    switch (gaugeType.type) {\n      case 'type1':\n        freeAreaAngle = 0\n        rotationOffset = PI\n        angleRange = HALF_PI\n        angleStep = angleRange / range\n        break\n\n      case 'type2':\n        freeAreaAngle = 0\n        rotationOffset = PI\n        angleRange = PI\n        angleStep = angleRange / range\n        break\n\n      case 'type3':\n        freeAreaAngle = 0\n        rotationOffset = HALF_PI\n        angleRange = 1.5 * PI\n        angleStep = angleRange / range\n        break\n\n      case 'type4':\n      /* falls through */\n      default:\n        freeAreaAngle = 60 * RAD_FACTOR\n        rotationOffset = HALF_PI + freeAreaAngle / 2\n        angleRange = TWO_PI - freeAreaAngle\n        angleStep = angleRange / range\n        break\n    }\n    angle = rotationOffset + (value - minValue) * angleStep\n  }\n\n  // **************   Buffer creation  ********************\n  // Buffer for the frame\n  const frameBuffer = createBuffer(size, size)\n  let frameContext = frameBuffer.getContext('2d')\n\n  // Buffer for the background\n  const backgroundBuffer = createBuffer(size, size)\n  let backgroundContext = backgroundBuffer.getContext('2d')\n\n  let lcdBuffer\n\n  // Buffer for led on painting code\n  const ledBufferOn = createBuffer(ledSize, ledSize)\n  let ledContextOn = ledBufferOn.getContext('2d')\n\n  // Buffer for led off painting code\n  const ledBufferOff = createBuffer(ledSize, ledSize)\n  let ledContextOff = ledBufferOff.getContext('2d')\n\n  // Buffer for current led painting code\n  let ledBuffer = ledBufferOff\n\n  // Buffer for user led on painting code\n  const userLedBufferOn = createBuffer(ledSize, ledSize)\n  let userLedContextOn = userLedBufferOn.getContext('2d')\n\n  // Buffer for user led off painting code\n  const userLedBufferOff = createBuffer(ledSize, ledSize)\n  let userLedContextOff = userLedBufferOff.getContext('2d')\n\n  // Buffer for current user led painting code\n  let userLedBuffer = userLedBufferOff\n\n  // Buffer for the minMeasuredValue indicator\n  const minMeasuredValueBuffer = createBuffer(\n    Math.ceil(size * 0.028037),\n    Math.ceil(size * 0.028037)\n  )\n  const minMeasuredValueCtx = minMeasuredValueBuffer.getContext('2d')\n\n  // Buffer for the maxMeasuredValue indicator\n  const maxMeasuredValueBuffer = createBuffer(\n    Math.ceil(size * 0.028037),\n    Math.ceil(size * 0.028037)\n  )\n  const maxMeasuredValueCtx = maxMeasuredValueBuffer.getContext('2d')\n\n  // Buffer for pointer image painting code\n  const pointerBuffer = createBuffer(size, size)\n  let pointerContext = pointerBuffer.getContext('2d')\n\n  // Buffer for static foreground painting code\n  const foregroundBuffer = createBuffer(size, size)\n  let foregroundContext = foregroundBuffer.getContext('2d')\n\n  // Buffers for trend indicators\n  let trendUpBuffer\n  let trendSteadyBuffer\n  let trendDownBuffer\n  let trendOffBuffer\n\n  // Buffer for odometer\n  let odoGauge\n  let odoBuffer\n  let odoContext\n  if (useOdometer && lcdVisible) {\n    odoBuffer = createBuffer(10, 10) // size doesn't matter, it will get reset by odometer code\n    odoContext = odoBuffer.getContext('2d')\n  }\n\n  // **************   Image creation  ********************\n  const drawLcdText = function (ctx, value) {\n    ctx.restore()\n    ctx.save()\n    ctx.textAlign = 'right'\n    ctx.strokeStyle = lcdColor.textColor\n    ctx.fillStyle = lcdColor.textColor\n\n    if (\n      lcdColor === LcdColor.STANDARD ||\n      lcdColor === LcdColor.STANDARD_GREEN\n    ) {\n      ctx.shadowColor = 'gray'\n      ctx.shadowOffsetX = imageWidth * 0.007\n      ctx.shadowOffsetY = imageWidth * 0.007\n      ctx.shadowBlur = imageWidth * 0.007\n    }\n    if (digitalFont) {\n      ctx.font = lcdFont\n    } else {\n      ctx.font = stdFont\n    }\n    ctx.fillText(\n      value.toFixed(lcdDecimals),\n      lcdPosX + lcdWidth - lcdWidth * 0.05,\n      lcdPosY + lcdHeight * 0.5 + lcdFontHeight * 0.38,\n      lcdWidth * 0.9\n    )\n\n    ctx.restore()\n  }\n\n  const drawPostsImage = function (ctx) {\n    ctx.save()\n\n    if (gaugeType.type === 'type1') {\n      // Draw max center top post\n      ctx.drawImage(\n        createKnobImage(\n          Math.ceil(imageHeight * 0.037383),\n          KnobType.STANDARD_KNOB,\n          knobStyle\n        ),\n        imageWidth * 0.523364,\n        imageHeight * 0.130841\n      )\n    }\n\n    if (gaugeType.type === 'type1' || gaugeType.type === 'type2') {\n      // Draw min left post\n      ctx.drawImage(\n        createKnobImage(\n          Math.ceil(imageHeight * 0.037383),\n          KnobType.STANDARD_KNOB,\n          knobStyle\n        ),\n        imageWidth * 0.130841,\n        imageHeight * 0.514018\n      )\n    }\n\n    if (gaugeType.type === 'type2' || gaugeType.type === 'type3') {\n      // Draw max right post\n      ctx.drawImage(\n        createKnobImage(\n          Math.ceil(imageHeight * 0.037383),\n          KnobType.STANDARD_KNOB,\n          knobStyle\n        ),\n        imageWidth * 0.831775,\n        imageHeight * 0.514018\n      )\n    }\n\n    if (gaugeType.type === 'type3') {\n      // Draw min center bottom post\n      ctx.drawImage(\n        createKnobImage(\n          Math.ceil(imageHeight * 0.037383),\n          KnobType.STANDARD_KNOB,\n          knobStyle\n        ),\n        imageWidth * 0.523364,\n        imageHeight * 0.831775\n      )\n    }\n\n    if (gaugeType.type === 'type4') {\n      // Min post\n      ctx.drawImage(\n        createKnobImage(\n          Math.ceil(imageHeight * 0.037383),\n          KnobType.STANDARD_KNOB,\n          knobStyle\n        ),\n        imageWidth * 0.336448,\n        imageHeight * 0.803738\n      )\n\n      // Max post\n      ctx.drawImage(\n        createKnobImage(\n          Math.ceil(imageHeight * 0.037383),\n          KnobType.STANDARD_KNOB,\n          knobStyle\n        ),\n        imageWidth * 0.626168,\n        imageHeight * 0.803738\n      )\n    }\n\n    ctx.restore()\n  }\n\n  const createThresholdImage = function () {\n    const thresholdBuffer = doc.createElement('canvas')\n    thresholdBuffer.width = Math.ceil(size * 0.046728)\n    thresholdBuffer.height = Math.ceil(thresholdBuffer.width * 0.9)\n    const thresholdCtx = thresholdBuffer.getContext('2d')\n\n    thresholdCtx.save()\n    const gradThreshold = thresholdCtx.createLinearGradient(\n      0,\n      0.1,\n      0,\n      thresholdBuffer.height * 0.9\n    )\n    gradThreshold.addColorStop(0, '#520000')\n    gradThreshold.addColorStop(0.3, '#fc1d00')\n    gradThreshold.addColorStop(0.59, '#fc1d00')\n    gradThreshold.addColorStop(1, '#520000')\n    thresholdCtx.fillStyle = gradThreshold\n\n    thresholdCtx.beginPath()\n    thresholdCtx.moveTo(thresholdBuffer.width * 0.5, 0.1)\n    thresholdCtx.lineTo(\n      thresholdBuffer.width * 0.9,\n      thresholdBuffer.height * 0.9\n    )\n    thresholdCtx.lineTo(\n      thresholdBuffer.width * 0.1,\n      thresholdBuffer.height * 0.9\n    )\n    thresholdCtx.lineTo(thresholdBuffer.width * 0.5, 0.1)\n    thresholdCtx.closePath()\n\n    thresholdCtx.fill()\n    thresholdCtx.strokeStyle = '#FFFFFF'\n    thresholdCtx.stroke()\n\n    thresholdCtx.restore()\n\n    return thresholdBuffer\n  }\n\n  const drawAreaSectionImage = function (ctx, start, stop, color, filled) {\n    if (start < minValue) {\n      start = minValue\n    } else if (start > maxValue) {\n      start = maxValue\n    }\n    if (stop < minValue) {\n      stop = minValue\n    } else if (stop > maxValue) {\n      stop = maxValue\n    }\n    if (start >= stop) {\n      return\n    }\n    ctx.save()\n    ctx.strokeStyle = color\n    ctx.fillStyle = color\n    ctx.lineWidth = imageWidth * 0.035\n    const startAngle =\n      (angleRange / range) * start - (angleRange / range) * minValue\n    const stopAngle = startAngle + (stop - start) / (range / angleRange)\n    ctx.translate(centerX, centerY)\n    ctx.rotate(rotationOffset)\n    ctx.beginPath()\n    if (filled) {\n      ctx.moveTo(0, 0)\n      ctx.arc(\n        0,\n        0,\n        imageWidth * 0.365 - ctx.lineWidth / 2,\n        startAngle,\n        stopAngle,\n        false\n      )\n    } else {\n      ctx.arc(0, 0, imageWidth * 0.365, startAngle, stopAngle, false)\n    }\n    if (filled) {\n      ctx.moveTo(0, 0)\n      ctx.fill()\n    } else {\n      ctx.stroke()\n    }\n\n    ctx.translate(-centerX, -centerY)\n    ctx.restore()\n  }\n\n  const drawTickmarksImage = function (ctx, labelNumberFormat) {\n    const fontSize = Math.ceil(imageWidth * 0.04)\n    let alpha = rotationOffset // Tracks total rotation\n    const rotationStep = angleStep * minorTickSpacing\n    let textRotationAngle\n    let valueCounter = minValue\n    let majorTickCounter = maxNoOfMinorTicks - 1\n    const OUTER_POINT = imageWidth * 0.38\n    const MAJOR_INNER_POINT = imageWidth * 0.35\n    const MED_INNER_POINT = imageWidth * 0.355\n    const MINOR_INNER_POINT = imageWidth * 0.36\n    const TEXT_TRANSLATE_X = imageWidth * 0.3\n    let TEXT_WIDTH = imageWidth * 0.1\n    const HALF_MAX_NO_OF_MINOR_TICKS = maxNoOfMinorTicks / 2\n    const MAX_VALUE_ROUNDED = parseFloat(maxValue.toFixed(2))\n    let i\n\n    backgroundColor.labelColor.setAlpha(1)\n    ctx.save()\n    ctx.textAlign = 'center'\n    ctx.textBaseline = 'middle'\n    ctx.font = fontSize + 'px ' + stdFontName\n    ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor()\n    ctx.fillStyle = backgroundColor.labelColor.getRgbaColor()\n    ctx.translate(centerX, centerY)\n    ctx.rotate(rotationOffset)\n\n    if (gaugeType.type === 'type1' || gaugeType.type === 'type2') {\n      TEXT_WIDTH = imageWidth * 0.04\n    }\n\n    for (\n      i = minValue;\n      parseFloat(i.toFixed(2)) <= MAX_VALUE_ROUNDED;\n      i += minorTickSpacing\n    ) {\n      textRotationAngle = rotationStep + HALF_PI\n      majorTickCounter++\n      // Draw major tickmarks\n      if (majorTickCounter === maxNoOfMinorTicks) {\n        ctx.lineWidth = 1.5\n        ctx.beginPath()\n        ctx.moveTo(OUTER_POINT, 0)\n        ctx.lineTo(MAJOR_INNER_POINT, 0)\n        ctx.closePath()\n        ctx.stroke()\n        ctx.save()\n        ctx.translate(TEXT_TRANSLATE_X, 0)\n\n        switch (tickLabelOrientation.type) {\n          case 'horizontal':\n            textRotationAngle = -alpha\n            break\n\n          case 'tangent':\n            textRotationAngle = alpha <= HALF_PI + PI ? PI : 0\n            break\n\n          case 'normal':\n          /* falls through */\n          default:\n            textRotationAngle = HALF_PI\n            break\n        }\n        ctx.rotate(textRotationAngle)\n\n        switch (labelNumberFormat.format) {\n          case 'fractional':\n            ctx.fillText(\n              valueCounter.toFixed(fractionalScaleDecimals),\n              0,\n              0,\n              TEXT_WIDTH\n            )\n            break\n\n          case 'scientific':\n            ctx.fillText(valueCounter.toPrecision(2), 0, 0, TEXT_WIDTH)\n            break\n\n          case 'standard':\n          /* falls through */\n          default:\n            ctx.fillText(valueCounter.toFixed(0), 0, 0, TEXT_WIDTH)\n            break\n        }\n        ctx.translate(-TEXT_TRANSLATE_X, 0)\n        ctx.restore()\n\n        valueCounter += majorTickSpacing\n        majorTickCounter = 0\n        ctx.rotate(rotationStep)\n        alpha += rotationStep\n        continue\n      }\n\n      // Draw tickmark every minor tickmark spacing\n      if (\n        maxNoOfMinorTicks % 2 === 0 &&\n        majorTickCounter === HALF_MAX_NO_OF_MINOR_TICKS\n      ) {\n        ctx.lineWidth = 1\n        ctx.beginPath()\n        ctx.moveTo(OUTER_POINT, 0)\n        ctx.lineTo(MED_INNER_POINT, 0)\n        ctx.closePath()\n        ctx.stroke()\n      } else {\n        ctx.lineWidth = 0.5\n        ctx.beginPath()\n        ctx.moveTo(OUTER_POINT, 0)\n        ctx.lineTo(MINOR_INNER_POINT, 0)\n        ctx.closePath()\n        ctx.stroke()\n      }\n      ctx.rotate(rotationStep)\n      alpha += rotationStep\n    }\n\n    ctx.translate(-centerX, -centerY)\n    ctx.restore()\n  }\n\n  // **************   Initialization  ********************\n  // Draw all static painting code to background\n  const init = function (parameters) {\n    parameters = parameters || {}\n    const drawFrame2 =\n      undefined === parameters.frame ? false : parameters.frame\n    const drawBackground2 =\n      undefined === parameters.background ? false : parameters.background\n    const drawLed = undefined === parameters.led ? false : parameters.led\n    const drawUserLed =\n      undefined === parameters.userLed ? false : parameters.userLed\n    const drawPointer =\n      undefined === parameters.pointer ? false : parameters.pointer\n    const drawForeground2 =\n      undefined === parameters.foreground ? false : parameters.foreground\n    const drawTrend = undefined === parameters.trend ? false : parameters.trend\n    const drawOdo = undefined === parameters.odo ? false : parameters.odo\n\n    initialized = true\n\n    // Calculate the current min and max values and the range\n    calculate()\n\n    // Create frame in frame buffer (backgroundBuffer)\n    if (drawFrame2 && frameVisible) {\n      drawFrame(\n        frameContext,\n        frameDesign,\n        centerX,\n        centerY,\n        imageWidth,\n        imageHeight\n      )\n    }\n\n    // Create background in background buffer (backgroundBuffer)\n    if (drawBackground2 && backgroundVisible) {\n      drawBackground(\n        backgroundContext,\n        backgroundColor,\n        centerX,\n        centerY,\n        imageWidth,\n        imageHeight\n      )\n\n      // Create custom layer in background buffer (backgroundBuffer)\n      drawRadialCustomImage(\n        backgroundContext,\n        customLayer,\n        centerX,\n        centerY,\n        imageWidth,\n        imageHeight\n      )\n    }\n\n    if (drawLed) {\n      // Draw LED ON in ledBuffer_ON\n      ledContextOn.drawImage(\n        createLedImage(Math.ceil(size * 0.093457), 1, ledColor),\n        0,\n        0\n      )\n\n      // Draw LED OFF in ledBuffer_OFF\n      ledContextOff.drawImage(\n        createLedImage(Math.ceil(size * 0.093457), 0, ledColor),\n        0,\n        0\n      )\n    }\n\n    if (drawUserLed) {\n      // Draw user LED ON in userLedBuffer_ON\n      userLedContextOn.drawImage(\n        createLedImage(Math.ceil(size * 0.093457), 1, userLedColor),\n        0,\n        0\n      )\n\n      // Draw user LED OFF in userLedBuffer_OFF\n      userLedContextOff.drawImage(\n        createLedImage(Math.ceil(size * 0.093457), 0, userLedColor),\n        0,\n        0\n      )\n    }\n\n    // Draw min measured value indicator in minMeasuredValueBuffer\n    if (minMeasuredValueVisible) {\n      minMeasuredValueCtx.drawImage(\n        createMeasuredValueImage(\n          Math.ceil(size * 0.028037),\n          ColorDef.BLUE.dark.getRgbaColor(),\n          true,\n          true\n        ),\n        0,\n        0\n      )\n    }\n\n    // Draw max measured value indicator in maxMeasuredValueBuffer\n    if (maxMeasuredValueVisible) {\n      maxMeasuredValueCtx.drawImage(\n        createMeasuredValueImage(\n          Math.ceil(size * 0.028037),\n          ColorDef.RED.medium.getRgbaColor(),\n          true\n        ),\n        0,\n        0\n      )\n    }\n\n    // Create alignment posts in background buffer (backgroundBuffer)\n    if (drawBackground2 && backgroundVisible) {\n      drawPostsImage(backgroundContext)\n\n      // Create section in background buffer (backgroundBuffer)\n      if (section !== null && section.length > 0) {\n        let sectionIndex = section.length\n        do {\n          sectionIndex--\n          drawAreaSectionImage(\n            backgroundContext,\n            section[sectionIndex].start,\n            section[sectionIndex].stop,\n            section[sectionIndex].color,\n            false\n          )\n        } while (sectionIndex > 0)\n      }\n\n      // Create area in background buffer (backgroundBuffer)\n      if (area !== null && area.length > 0) {\n        let areaIndex = area.length\n        do {\n          areaIndex--\n          drawAreaSectionImage(\n            backgroundContext,\n            area[areaIndex].start,\n            area[areaIndex].stop,\n            area[areaIndex].color,\n            true\n          )\n        } while (areaIndex > 0)\n      }\n\n      // Create tickmarks in background buffer (backgroundBuffer)\n      drawTickmarksImage(backgroundContext, labelNumberFormat)\n\n      // Create title in background buffer (backgroundBuffer)\n      drawTitleImage(\n        backgroundContext,\n        imageWidth,\n        imageHeight,\n        titleString,\n        unitString,\n        backgroundColor,\n        true,\n        true\n      )\n    }\n\n    // Draw threshold image to background context\n    if (drawBackground2 && thresholdVisible) {\n      backgroundContext.save()\n      backgroundContext.translate(centerX, centerY)\n      backgroundContext.rotate(\n        rotationOffset + (threshold - minValue) * angleStep + HALF_PI\n      )\n      backgroundContext.translate(-centerX, -centerY)\n      backgroundContext.drawImage(\n        createThresholdImage(),\n        imageWidth * 0.475,\n        imageHeight * 0.13\n      )\n      backgroundContext.translate(centerX, centerY)\n      backgroundContext.restore()\n    }\n\n    // Create lcd background if selected in background buffer (backgroundBuffer)\n    if (drawBackground2 && lcdVisible) {\n      if (useOdometer && drawOdo) {\n        odoGauge = new Odometer('', {\n          _context: odoContext,\n          height: size * 0.075,\n          decimals: odometerParams.decimals,\n          digits:\n            odometerParams.digits === undefined ? 5 : odometerParams.digits,\n          valueForeColor: odometerParams.valueForeColor,\n          valueBackColor: odometerParams.valueBackColor,\n          decimalForeColor: odometerParams.decimalForeColor,\n          decimalBackColor: odometerParams.decimalBackColor,\n          font: odometerParams.font,\n          value: value\n        })\n        odoPosX = (imageWidth - odoBuffer.width) / 2\n      } else if (!useOdometer) {\n        lcdBuffer = createLcdBackgroundImage(lcdWidth, lcdHeight, lcdColor)\n        backgroundContext.drawImage(lcdBuffer, lcdPosX, lcdPosY)\n      }\n    }\n\n    // Create pointer image in pointer buffer (contentBuffer)\n    if (drawPointer) {\n      drawPointerImage(\n        pointerContext,\n        imageWidth,\n        pointerType,\n        pointerColor,\n        backgroundColor.labelColor\n      )\n    }\n\n    // Create foreground in foreground buffer (foregroundBuffer)\n    if (drawForeground2 && foregroundVisible) {\n      const knobVisible =\n        !(pointerType.type === 'type15' || pointerType.type === 'type16')\n      drawForeground(\n        foregroundContext,\n        foregroundType,\n        imageWidth,\n        imageHeight,\n        knobVisible,\n        knobType,\n        knobStyle,\n        gaugeType\n      )\n    }\n\n    // Create the trend indicator buffers\n    if (drawTrend && trendVisible) {\n      trendUpBuffer = createTrendIndicator(\n        trendSize,\n        TrendState.UP,\n        trendColors\n      )\n      trendSteadyBuffer = createTrendIndicator(\n        trendSize,\n        TrendState.STEADY,\n        trendColors\n      )\n      trendDownBuffer = createTrendIndicator(\n        trendSize,\n        TrendState.DOWN,\n        trendColors\n      )\n      trendOffBuffer = createTrendIndicator(\n        trendSize,\n        TrendState.OFF,\n        trendColors\n      )\n    }\n  }\n\n  const resetBuffers = function (buffers) {\n    buffers = buffers || {}\n    const resetFrame = undefined === buffers.frame ? false : buffers.frame\n    const resetBackground =\n      undefined === buffers.background ? false : buffers.background\n    const resetLed = undefined === buffers.led ? false : buffers.led\n    const resetUserLed =\n      undefined === buffers.userLed ? false : buffers.userLed\n    const resetPointer =\n      undefined === buffers.pointer ? false : buffers.pointer\n    const resetForeground =\n      undefined === buffers.foreground ? false : buffers.foreground\n\n    if (resetFrame) {\n      frameBuffer.width = size\n      frameBuffer.height = size\n      frameContext = frameBuffer.getContext('2d')\n    }\n\n    if (resetBackground) {\n      backgroundBuffer.width = size\n      backgroundBuffer.height = size\n      backgroundContext = backgroundBuffer.getContext('2d')\n    }\n\n    if (resetLed) {\n      ledBufferOn.width = Math.ceil(size * 0.093457)\n      ledBufferOn.height = Math.ceil(size * 0.093457)\n      ledContextOn = ledBufferOn.getContext('2d')\n\n      ledBufferOff.width = Math.ceil(size * 0.093457)\n      ledBufferOff.height = Math.ceil(size * 0.093457)\n      ledContextOff = ledBufferOff.getContext('2d')\n\n      // Buffer for current led painting code\n      ledBuffer = ledBufferOff\n    }\n\n    if (resetUserLed) {\n      userLedBufferOn.width = Math.ceil(size * 0.093457)\n      userLedBufferOn.height = Math.ceil(size * 0.093457)\n      userLedContextOn = userLedBufferOn.getContext('2d')\n\n      userLedBufferOff.width = Math.ceil(size * 0.093457)\n      userLedBufferOff.height = Math.ceil(size * 0.093457)\n      userLedContextOff = userLedBufferOff.getContext('2d')\n\n      // Buffer for current user led painting code\n      userLedBuffer = userLedBufferOff\n    }\n\n    if (resetPointer) {\n      pointerBuffer.width = size\n      pointerBuffer.height = size\n      pointerContext = pointerBuffer.getContext('2d')\n    }\n\n    if (resetForeground) {\n      foregroundBuffer.width = size\n      foregroundBuffer.height = size\n      foregroundContext = foregroundBuffer.getContext('2d')\n    }\n  }\n\n  const toggleAndRepaintLed = function () {\n    if (ledVisible) {\n      if (ledBuffer === ledBufferOn) {\n        ledBuffer = ledBufferOff\n      } else {\n        ledBuffer = ledBufferOn\n      }\n      if (!repainting) {\n        repainting = true\n        requestAnimFrame(self.repaint)\n      }\n    }\n  }\n\n  const toggleAndRepaintUserLed = function () {\n    if (userLedVisible) {\n      if (userLedBuffer === userLedBufferOn) {\n        userLedBuffer = userLedBufferOff\n      } else {\n        userLedBuffer = userLedBufferOn\n      }\n      if (!repainting) {\n        repainting = true\n        requestAnimFrame(self.repaint)\n      }\n    }\n  }\n\n  const blink = function (blinking) {\n    if (blinking) {\n      ledTimerId = setInterval(toggleAndRepaintLed, 1000)\n    } else {\n      clearInterval(ledTimerId)\n      ledBuffer = ledBufferOff\n    }\n  }\n\n  const blinkUser = function (blinking) {\n    if (blinking) {\n      userLedTimerId = setInterval(toggleAndRepaintUserLed, 1000)\n    } else {\n      clearInterval(userLedTimerId)\n      userLedBuffer = userLedBufferOff\n    }\n  }\n\n  //* *********************************** Public methods **************************************\n  this.setValue = function (newValue) {\n    newValue = parseFloat(newValue)\n    const targetValue =\n      newValue < minValue\n        ? minValue\n        : newValue > maxValue\n          ? maxValue\n          : newValue\n    if (value !== targetValue) {\n      value = targetValue\n\n      if (value > maxMeasuredValue) {\n        maxMeasuredValue = value\n      }\n      if (value < minMeasuredValue) {\n        minMeasuredValue = value\n      }\n\n      if (\n        (value >= threshold && !ledBlinking && thresholdRising) ||\n        (value <= threshold && !ledBlinking && !thresholdRising)\n      ) {\n        ledBlinking = true\n        blink(ledBlinking)\n        if (playAlarm) {\n          audioElement.play()\n        }\n      } else if (\n        (value < threshold && ledBlinking && thresholdRising) ||\n        (value > threshold && ledBlinking && !thresholdRising)\n      ) {\n        ledBlinking = false\n        blink(ledBlinking)\n        if (playAlarm) {\n          audioElement.pause()\n        }\n      }\n      this.repaint()\n    }\n    return this\n  }\n\n  this.getValue = function () {\n    return value\n  }\n\n  this.setOdoValue = function (newValue) {\n    newValue = parseFloat(newValue)\n    const targetValue = newValue < 0 ? 0 : newValue\n    if (odoValue !== targetValue) {\n      odoValue = targetValue\n      this.repaint()\n    }\n    return this\n  }\n\n  this.getOdoValue = function () {\n    return odoValue\n  }\n\n  this.setValueAnimated = function (newValue, callback) {\n    newValue = parseFloat(newValue)\n    const targetValue =\n      newValue < minValue\n        ? minValue\n        : newValue > maxValue\n          ? maxValue\n          : newValue\n    const gauge = this\n    let time\n\n    if (value !== targetValue) {\n      if (undefined !== tween && tween.isPlaying) {\n        tween.stop()\n      }\n      time =\n        (fullScaleDeflectionTime * Math.abs(targetValue - value)) /\n        (maxValue - minValue)\n      time = Math.max(time, fullScaleDeflectionTime / 5)\n      tween = new Tween(\n        {},\n        '',\n        Tween.regularEaseInOut,\n        value,\n        targetValue,\n        time\n      )\n      // tween = new Tween({}, '', Tween.regularEaseInOut, value, targetValue, 1);\n      // tween = new Tween(new Object(), '', Tween.strongEaseInOut, value, targetValue, 1);\n\n      tween.onMotionChanged = function (event) {\n        value = event.target._pos\n\n        if (\n          (value >= threshold && !ledBlinking && thresholdRising) ||\n          (value <= threshold && !ledBlinking && !thresholdRising)\n        ) {\n          ledBlinking = true\n          blink(ledBlinking)\n          if (playAlarm) {\n            audioElement.play()\n          }\n        } else if (\n          (value < threshold && ledBlinking && thresholdRising) ||\n          (value > threshold && ledBlinking && !thresholdRising)\n        ) {\n          ledBlinking = false\n          blink(ledBlinking)\n          if (playAlarm) {\n            audioElement.pause()\n          }\n        }\n\n        if (value > maxMeasuredValue) {\n          maxMeasuredValue = value\n        }\n        if (value < minMeasuredValue) {\n          minMeasuredValue = value\n        }\n        if (!repainting) {\n          repainting = true\n          requestAnimFrame(gauge.repaint)\n        }\n      }\n\n      // do we have a callback function to process?\n      if (callback && typeof callback === 'function') {\n        tween.onMotionFinished = callback\n      }\n\n      tween.start()\n    }\n    return this\n  }\n\n  this.resetMinMeasuredValue = function () {\n    minMeasuredValue = value\n    this.repaint()\n  }\n\n  this.resetMaxMeasuredValue = function () {\n    maxMeasuredValue = value\n    this.repaint()\n    return this\n  }\n\n  this.setMinMeasuredValueVisible = function (visible) {\n    minMeasuredValueVisible = !!visible\n    this.repaint()\n    return this\n  }\n\n  this.setMaxMeasuredValueVisible = function (visible) {\n    maxMeasuredValueVisible = !!visible\n    this.repaint()\n    return this\n  }\n\n  this.setMaxMeasuredValue = function (newValue) {\n    newValue = parseFloat(newValue)\n    const targetValue =\n      newValue < minValue\n        ? minValue\n        : newValue > maxValue\n          ? maxValue\n          : newValue\n    maxMeasuredValue = targetValue\n    this.repaint()\n    return this\n  }\n\n  this.setMinMeasuredValue = function (newValue) {\n    newValue = parseFloat(newValue)\n    const targetValue =\n      newValue < minValue\n        ? minValue\n        : newValue > maxValue\n          ? maxValue\n          : newValue\n    minMeasuredValue = targetValue\n    this.repaint()\n    return this\n  }\n\n  this.setTitleString = function (title) {\n    titleString = title\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setUnitString = function (unit) {\n    unitString = unit\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setMinValue = function (newValue) {\n    minValue = parseFloat(newValue)\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.getMinValue = function () {\n    return minValue\n  }\n\n  this.setMaxValue = function (newValue) {\n    maxValue = parseFloat(newValue)\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.getMaxValue = function () {\n    return maxValue\n  }\n\n  this.setThreshold = function (newValue) {\n    newValue = parseFloat(newValue)\n    const targetValue =\n      newValue < minValue\n        ? minValue\n        : newValue > maxValue\n          ? maxValue\n          : newValue\n    threshold = targetValue\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setArea = function (areaVal) {\n    area = areaVal\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setSection = function (areaSec) {\n    section = areaSec\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setThresholdVisible = function (visible) {\n    thresholdVisible = !!visible\n    this.repaint()\n    return this\n  }\n\n  this.setThresholdRising = function (rising) {\n    thresholdRising = !!rising\n    // reset existing threshold alerts\n    ledBlinking = !ledBlinking\n    blink(ledBlinking)\n    this.repaint()\n    return this\n  }\n\n  this.setLcdDecimals = function (decimals) {\n    lcdDecimals = parseInt(decimals, 10)\n    this.repaint()\n    return this\n  }\n\n  this.setFrameDesign = function (newFrameDesign) {\n    resetBuffers({\n      frame: true\n    })\n    frameDesign = newFrameDesign\n    init({\n      frame: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setBackgroundColor = function (newBackgroundColor) {\n    resetBuffers({\n      background: true,\n      pointer:\n        !!(pointerType.type === 'type2' || pointerType.type === 'type13') // type2 & 13 depend on background\n    })\n    backgroundColor = newBackgroundColor\n    init({\n      background: true, // type2 & 13 depend on background\n      pointer:\n        !!(pointerType.type === 'type2' || pointerType.type === 'type13')\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setForegroundType = function (newForegroundType) {\n    resetBuffers({\n      foreground: true\n    })\n    foregroundType = newForegroundType\n    init({\n      foreground: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setPointerType = function (newPointerType) {\n    resetBuffers({\n      pointer: true,\n      foreground: true\n    })\n    pointerType = newPointerType\n    init({\n      pointer: true,\n      foreground: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setPointerColor = function (newPointerColor) {\n    resetBuffers({\n      pointer: true\n    })\n    pointerColor = newPointerColor\n    init({\n      pointer: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setLedColor = function (newLedColor) {\n    resetBuffers({\n      led: true\n    })\n    ledColor = newLedColor\n    init({\n      led: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setUserLedColor = function (newLedColor) {\n    resetBuffers({\n      userLed: true\n    })\n    userLedColor = newLedColor\n    init({\n      userLed: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.toggleUserLed = function () {\n    if (userLedBuffer === userLedBufferOn) {\n      userLedBuffer = userLedBufferOff\n    } else {\n      userLedBuffer = userLedBufferOn\n    }\n    this.repaint()\n    return this\n  }\n\n  this.setUserLedOnOff = function (on) {\n    if (on === true) {\n      userLedBuffer = userLedBufferOn\n    } else {\n      userLedBuffer = userLedBufferOff\n    }\n    this.repaint()\n    return this\n  }\n\n  this.blinkUserLed = function (blink) {\n    if (blink) {\n      if (!userLedBlinking) {\n        blinkUser(true)\n        userLedBlinking = true\n      }\n    } else {\n      if (userLedBlinking) {\n        clearInterval(userLedTimerId)\n        userLedBlinking = false\n      }\n    }\n    return this\n  }\n\n  this.setLedVisible = function (visible) {\n    ledVisible = !!visible\n    this.repaint()\n    return this\n  }\n\n  this.setUserLedVisible = function (visible) {\n    userLedVisible = !!visible\n    this.repaint()\n    return this\n  }\n\n  this.setLcdColor = function (newLcdColor) {\n    lcdColor = newLcdColor\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setTrend = function (newValue) {\n    trendIndicator = newValue\n    this.repaint()\n    return this\n  }\n\n  this.setTrendVisible = function (visible) {\n    trendVisible = !!visible\n    this.repaint()\n    return this\n  }\n\n  this.setFractionalScaleDecimals = function (decimals) {\n    fractionalScaleDecimals = parseInt(decimals, 10)\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setLabelNumberFormat = function (format) {\n    labelNumberFormat = format\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.repaint = function () {\n    if (!initialized) {\n      init({\n        frame: true,\n        background: true,\n        led: true,\n        userLed: true,\n        pointer: true,\n        trend: true,\n        foreground: true,\n        odo: true\n      })\n    }\n    mainCtx.clearRect(0, 0, size, size)\n\n    // Draw frame\n    if (frameVisible) {\n      mainCtx.drawImage(frameBuffer, 0, 0)\n    }\n\n    // Draw buffered image to visible canvas\n    mainCtx.drawImage(backgroundBuffer, 0, 0)\n\n    // Draw lcd display\n    if (lcdVisible) {\n      if (useOdometer) {\n        odoGauge.setValue(odometerUseValue ? value : odoValue)\n        mainCtx.drawImage(odoBuffer, odoPosX, odoPosY)\n      } else {\n        drawLcdText(mainCtx, value)\n      }\n    }\n\n    // Draw led\n    if (ledVisible) {\n      mainCtx.drawImage(ledBuffer, ledPosX, ledPosY)\n    }\n\n    // Draw user led\n    if (userLedVisible) {\n      mainCtx.drawImage(userLedBuffer, userLedPosX, userLedPosY)\n    }\n\n    // Draw the trend indicator\n    if (trendVisible) {\n      switch (trendIndicator.state) {\n        case 'up':\n          mainCtx.drawImage(trendUpBuffer, trendPosX, trendPosY)\n          break\n        case 'steady':\n          mainCtx.drawImage(trendSteadyBuffer, trendPosX, trendPosY)\n          break\n        case 'down':\n          mainCtx.drawImage(trendDownBuffer, trendPosX, trendPosY)\n          break\n        case 'off':\n          mainCtx.drawImage(trendOffBuffer, trendPosX, trendPosY)\n          break\n      }\n    }\n\n    // Draw min measured value indicator\n    if (minMeasuredValueVisible) {\n      mainCtx.save()\n      mainCtx.translate(centerX, centerY)\n      mainCtx.rotate(\n        rotationOffset + HALF_PI + (minMeasuredValue - minValue) * angleStep\n      )\n      mainCtx.translate(-centerX, -centerY)\n      mainCtx.drawImage(\n        minMeasuredValueBuffer,\n        mainCtx.canvas.width * 0.4865,\n        mainCtx.canvas.height * 0.105\n      )\n      mainCtx.restore()\n    }\n\n    // Draw max measured value indicator\n    if (maxMeasuredValueVisible) {\n      mainCtx.save()\n      mainCtx.translate(centerX, centerY)\n      mainCtx.rotate(\n        rotationOffset + HALF_PI + (maxMeasuredValue - minValue) * angleStep\n      )\n      mainCtx.translate(-centerX, -centerY)\n      mainCtx.drawImage(\n        maxMeasuredValueBuffer,\n        mainCtx.canvas.width * 0.4865,\n        mainCtx.canvas.height * 0.105\n      )\n      mainCtx.restore()\n    }\n\n    angle = rotationOffset + HALF_PI + (value - minValue) * angleStep\n\n    // Define rotation center\n    mainCtx.save()\n    mainCtx.translate(centerX, centerY)\n    mainCtx.rotate(angle)\n    mainCtx.translate(-centerX, -centerY)\n    // Set the pointer shadow params\n    mainCtx.shadowColor = 'rgba(0, 0, 0, 0.8)'\n    mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset\n    mainCtx.shadowBlur = shadowOffset * 2\n    // Draw the pointer\n    mainCtx.drawImage(pointerBuffer, 0, 0)\n    // Undo the translations & shadow settings\n    mainCtx.restore()\n\n    // Draw foreground\n    if (foregroundVisible) {\n      mainCtx.drawImage(foregroundBuffer, 0, 0)\n    }\n\n    repainting = false\n  }\n\n  // Visualize the component\n  this.repaint()\n\n  return this\n}\n\nexport default Radial\n","import Tween from './tween.js'\nimport drawFrame from './drawFrame'\nimport drawBackground from './drawBackground'\nimport drawRadialCustomImage from './drawRadialCustomImage'\nimport drawForeground from './drawForeground'\nimport createLedImage from './createLedImage'\nimport createLcdBackgroundImage from './createLcdBackgroundImage'\nimport createTrendIndicator from './createTrendIndicator'\nimport drawTitleImage from './drawTitleImage'\nimport {\n  calcNiceNumber,\n  createBuffer,\n  customColorDef,\n  requestAnimFrame,\n  getCanvasContext,\n  HALF_PI,\n  TWO_PI,\n  PI,\n  RAD_FACTOR,\n  DEG_FACTOR,\n  doc,\n  lcdFontName,\n  stdFontName\n} from './tools'\n\nimport {\n  BackgroundColor,\n  LcdColor,\n  ColorDef,\n  LedColor,\n  GaugeType,\n  FrameDesign,\n  ForegroundType,\n  LabelNumberFormat,\n  TickLabelOrientation,\n  TrendState\n} from './definitions'\n\nconst RadialBargraph = function (canvas, parameters) {\n  parameters = parameters || {}\n  const gaugeType =\n    undefined === parameters.gaugeType ? GaugeType.TYPE4 : parameters.gaugeType\n  let size = undefined === parameters.size ? 0 : parameters.size\n  let minValue = undefined === parameters.minValue ? 0 : parameters.minValue\n  let maxValue =\n    undefined === parameters.maxValue ? minValue + 100 : parameters.maxValue\n  const niceScale =\n    undefined === parameters.niceScale ? true : parameters.niceScale\n  let threshold =\n    undefined === parameters.threshold\n      ? (maxValue - minValue) / 2 + minValue\n      : parameters.threshold\n  let thresholdRising =\n    undefined === parameters.thresholdRising\n      ? true\n      : parameters.thresholdRising\n  let section = undefined === parameters.section ? null : parameters.section\n  let useSectionColors =\n    undefined === parameters.useSectionColors\n      ? false\n      : parameters.useSectionColors\n  let titleString =\n    undefined === parameters.titleString ? '' : parameters.titleString\n  let unitString =\n    undefined === parameters.unitString ? '' : parameters.unitString\n  let frameDesign =\n    undefined === parameters.frameDesign\n      ? FrameDesign.METAL\n      : parameters.frameDesign\n  const frameVisible =\n    undefined === parameters.frameVisible ? true : parameters.frameVisible\n  let backgroundColor =\n    undefined === parameters.backgroundColor\n      ? BackgroundColor.DARK_GRAY\n      : parameters.backgroundColor\n  const backgroundVisible =\n    undefined === parameters.backgroundVisible\n      ? true\n      : parameters.backgroundVisible\n  let valueColor =\n    undefined === parameters.valueColor ? ColorDef.RED : parameters.valueColor\n  let lcdColor =\n    undefined === parameters.lcdColor ? LcdColor.STANDARD : parameters.lcdColor\n  const lcdVisible =\n    undefined === parameters.lcdVisible ? true : parameters.lcdVisible\n  let lcdDecimals =\n    undefined === parameters.lcdDecimals ? 2 : parameters.lcdDecimals\n  const digitalFont =\n    undefined === parameters.digitalFont ? false : parameters.digitalFont\n  let fractionalScaleDecimals =\n    undefined === parameters.fractionalScaleDecimals\n      ? 1\n      : parameters.fractionalScaleDecimals\n  const customLayer =\n    undefined === parameters.customLayer ? null : parameters.customLayer\n  let ledColor =\n    undefined === parameters.ledColor ? LedColor.RED_LED : parameters.ledColor\n  let ledVisible =\n    undefined === parameters.ledVisible ? true : parameters.ledVisible\n  let userLedColor =\n    undefined === parameters.userLedColor\n      ? LedColor.GREEN_LED\n      : parameters.userLedColor\n  let userLedVisible =\n    undefined === parameters.userLedVisible ? false : parameters.userLedVisible\n  let labelNumberFormat =\n    undefined === parameters.labelNumberFormat\n      ? LabelNumberFormat.STANDARD\n      : parameters.labelNumberFormat\n  let foregroundType =\n    undefined === parameters.foregroundType\n      ? ForegroundType.TYPE1\n      : parameters.foregroundType\n  const foregroundVisible =\n    undefined === parameters.foregroundVisible\n      ? true\n      : parameters.foregroundVisible\n  const playAlarm =\n    undefined === parameters.playAlarm ? false : parameters.playAlarm\n  const alarmSound =\n    undefined === parameters.alarmSound ? false : parameters.alarmSound\n  let valueGradient =\n    undefined === parameters.valueGradient ? null : parameters.valueGradient\n  let useValueGradient =\n    undefined === parameters.useValueGradient\n      ? false\n      : parameters.useValueGradient\n  const tickLabelOrientation =\n    undefined === parameters.tickLabelOrientation\n      ? gaugeType === GaugeType.TYPE1\n        ? TickLabelOrientation.TANGENT\n        : TickLabelOrientation.NORMAL\n      : parameters.tickLabelOrientation\n  let trendVisible =\n    undefined === parameters.trendVisible ? false : parameters.trendVisible\n  const trendColors =\n    undefined === parameters.trendColors\n      ? [LedColor.RED_LED, LedColor.GREEN_LED, LedColor.CYAN_LED]\n      : parameters.trendColors\n  const fullScaleDeflectionTime =\n    undefined === parameters.fullScaleDeflectionTime\n      ? 2.5\n      : parameters.fullScaleDeflectionTime\n\n  // Get the canvas context and clear it\n  const mainCtx = getCanvasContext(canvas)\n  // Has a size been specified?\n  if (size === 0) {\n    size = Math.min(mainCtx.canvas.width, mainCtx.canvas.height)\n  }\n\n  // Set the size - also clears the canvas\n  mainCtx.canvas.width = size\n  mainCtx.canvas.height = size\n\n  let audioElement\n\n  // Create audio tag for alarm sound\n  if (playAlarm && alarmSound !== false) {\n    audioElement = doc.createElement('audio')\n    audioElement.setAttribute('src', alarmSound)\n    audioElement.setAttribute('preload', 'auto')\n  }\n\n  let value = minValue\n  let minMeasuredValue = minValue\n  let maxMeasuredValue = maxValue\n  let range = maxValue - minValue\n  let ledBlinking = false\n  let ledTimerId = 0\n  let userLedBlinking = false\n  let userLedTimerId = 0\n  let tween\n  const self = this\n  let repainting = false\n\n  // GaugeType specific private variables\n  let freeAreaAngle\n  let rotationOffset\n  let bargraphOffset\n  let angleRange\n  let degAngleRange\n  let angleStep\n\n  let sectionAngles = []\n  let isSectionsVisible = false\n  let isGradientVisible = false\n\n  const imageWidth = size\n  const imageHeight = size\n\n  const centerX = imageWidth / 2\n  const centerY = imageHeight / 2\n\n  // Misc\n  const lcdFontHeight = Math.floor(imageWidth / 10)\n  const stdFont = lcdFontHeight + 'px ' + stdFontName\n  const lcdFont = lcdFontHeight + 'px ' + lcdFontName\n  const lcdHeight = imageHeight * 0.13\n  const lcdWidth = imageWidth * 0.4\n  const lcdPosX = (imageWidth - lcdWidth) / 2\n  const lcdPosY = imageHeight / 2 - lcdHeight / 2\n\n  // Constants\n  const ACTIVE_LED_POS_X = imageWidth * 0.116822\n  const ACTIVE_LED_POS_Y = imageWidth * 0.485981\n  const LED_SIZE = Math.ceil(size * 0.093457)\n  // let LED_POS_X = imageWidth * 0.453271;\n  const LED_POS_X = imageWidth * 0.53\n  const LED_POS_Y = imageHeight * 0.61\n  const USER_LED_POS_X =\n    gaugeType === GaugeType.TYPE3 ? 0.7 * imageWidth : centerX - LED_SIZE / 2\n  const USER_LED_POS_Y =\n    gaugeType === GaugeType.TYPE3 ? 0.61 * imageHeight : 0.75 * imageHeight\n\n  let trendIndicator = TrendState.OFF\n  const trendSize = size * 0.06\n  const trendPosX = size * 0.38\n  const trendPosY = size * 0.57\n\n  switch (gaugeType.type) {\n    case 'type1':\n      freeAreaAngle = 0\n      rotationOffset = PI\n      bargraphOffset = 0\n      angleRange = HALF_PI\n      degAngleRange = angleRange * DEG_FACTOR\n      angleStep = angleRange / range\n      break\n\n    case 'type2':\n      freeAreaAngle = 0\n      rotationOffset = PI\n      bargraphOffset = 0\n      angleRange = PI\n      degAngleRange = angleRange * DEG_FACTOR\n      angleStep = angleRange / range\n      break\n\n    case 'type3':\n      freeAreaAngle = 0\n      rotationOffset = HALF_PI\n      bargraphOffset = -HALF_PI\n      angleRange = 1.5 * PI\n      degAngleRange = angleRange * DEG_FACTOR\n      angleStep = angleRange / range\n      break\n\n    case 'type4':\n    /* falls through */\n    default:\n      freeAreaAngle = 60 * RAD_FACTOR\n      rotationOffset = HALF_PI + freeAreaAngle / 2\n      bargraphOffset = -TWO_PI / 6\n      angleRange = TWO_PI - freeAreaAngle\n      degAngleRange = angleRange * DEG_FACTOR\n      angleStep = angleRange / range\n      break\n  }\n\n  // Buffer for the frame\n  const frameBuffer = createBuffer(size, size)\n  let frameContext = frameBuffer.getContext('2d')\n\n  // Buffer for static background painting code\n  const backgroundBuffer = createBuffer(size, size)\n  let backgroundContext = backgroundBuffer.getContext('2d')\n\n  let lcdBuffer\n\n  // Buffer for active bargraph led\n  const activeLedBuffer = createBuffer(\n    Math.ceil(size * 0.060747),\n    Math.ceil(size * 0.023364)\n  )\n  let activeLedContext = activeLedBuffer.getContext('2d')\n\n  // Buffer for led on painting code\n  const ledBufferOn = createBuffer(LED_SIZE, LED_SIZE)\n  let ledContextOn = ledBufferOn.getContext('2d')\n\n  // Buffer for led off painting code\n  const ledBufferOff = createBuffer(LED_SIZE, LED_SIZE)\n  let ledContextOff = ledBufferOff.getContext('2d')\n\n  // Buffer for current led painting code\n  let ledBuffer = ledBufferOff\n\n  // Buffer for user led on painting code\n  const userLedBufferOn = createBuffer(LED_SIZE, LED_SIZE)\n  let userLedContextOn = userLedBufferOn.getContext('2d')\n\n  // Buffer for user led off painting code\n  const userLedBufferOff = createBuffer(LED_SIZE, LED_SIZE)\n  let userLedContextOff = userLedBufferOff.getContext('2d')\n\n  // Buffer for current user led painting code\n  let userLedBuffer = userLedBufferOff\n\n  // Buffer for static foreground painting code\n  const foregroundBuffer = createBuffer(size, size)\n  let foregroundContext = foregroundBuffer.getContext('2d')\n\n  // Buffers for trend indicators\n  let trendUpBuffer\n  let trendSteadyBuffer\n  let trendDownBuffer\n  let trendOffBuffer\n\n  let initialized = false\n\n  // Tickmark specific private variables\n  let niceMinValue = minValue\n  let niceMaxValue = maxValue\n  let niceRange = maxValue - minValue\n  range = niceMaxValue - niceMinValue\n  let minorTickSpacing = 0\n  let majorTickSpacing = 0\n  const maxNoOfMinorTicks = 10\n  const maxNoOfMajorTicks = 10\n\n  // Method to calculate nice values for min, max and range for the tickmarks\n  const calculate = function calculate () {\n    if (niceScale) {\n      niceRange = calcNiceNumber(maxValue - minValue, false)\n      majorTickSpacing = calcNiceNumber(\n        niceRange / (maxNoOfMajorTicks - 1),\n        true\n      )\n      niceMinValue = Math.floor(minValue / majorTickSpacing) * majorTickSpacing\n      niceMaxValue = Math.ceil(maxValue / majorTickSpacing) * majorTickSpacing\n      minorTickSpacing = calcNiceNumber(\n        majorTickSpacing / (maxNoOfMinorTicks - 1),\n        true\n      )\n      minValue = niceMinValue\n      maxValue = niceMaxValue\n      range = maxValue - minValue\n    } else {\n      niceRange = maxValue - minValue\n      niceMinValue = minValue\n      niceMaxValue = maxValue\n      range = niceRange\n      // minorTickSpacing = 1;\n      // majorTickSpacing = 10;\n      majorTickSpacing = calcNiceNumber(\n        niceRange / (maxNoOfMajorTicks - 1),\n        true\n      )\n      minorTickSpacing = calcNiceNumber(\n        majorTickSpacing / (maxNoOfMinorTicks - 1),\n        true\n      )\n    }\n    // Make sure values are still in range\n    value = value < minValue ? minValue : value > maxValue ? maxValue : value\n    minMeasuredValue =\n      minMeasuredValue < minValue\n        ? minValue\n        : minMeasuredValue > maxValue\n          ? maxValue\n          : minMeasuredValue\n    maxMeasuredValue =\n      maxMeasuredValue < minValue\n        ? minValue\n        : maxMeasuredValue > maxValue\n          ? maxValue\n          : maxMeasuredValue\n    threshold =\n      threshold < minValue\n        ? minValue\n        : threshold > maxValue\n          ? maxValue\n          : threshold\n\n    switch (gaugeType.type) {\n      case 'type1':\n        freeAreaAngle = 0\n        rotationOffset = PI\n        angleRange = HALF_PI\n        angleStep = angleRange / range\n        break\n\n      case 'type2':\n        freeAreaAngle = 0\n        rotationOffset = PI\n        angleRange = PI\n        angleStep = angleRange / range\n        break\n\n      case 'type3':\n        freeAreaAngle = 0\n        rotationOffset = HALF_PI\n        angleRange = 1.5 * PI\n        angleStep = angleRange / range\n        break\n\n      case 'type4': // fall through\n      /* falls through */\n      default:\n        freeAreaAngle = 60 * RAD_FACTOR\n        rotationOffset = HALF_PI + freeAreaAngle / 2\n        angleRange = TWO_PI - freeAreaAngle\n        angleStep = angleRange / range\n        break\n    }\n  }\n\n  //* ******************************** Private methods *********************************\n  // Draw all static painting code to background\n  const init = function (parameters) {\n    parameters = parameters || {}\n    const drawFrame2 =\n      undefined === parameters.frame ? false : parameters.frame\n    const drawBackground2 =\n      undefined === parameters.background ? false : parameters.background\n    const drawLed = undefined === parameters.led ? false : parameters.led\n    const drawUserLed =\n      undefined === parameters.userLed ? false : parameters.userLed\n    const drawValue = undefined === parameters.value ? false : parameters.value\n    const drawForeground2 =\n      undefined === parameters.foreground ? false : parameters.foreground\n    const drawTrend = undefined === parameters.trend ? false : parameters.trend\n\n    initialized = true\n\n    calculate()\n\n    // Create frame in frame buffer (frameBuffer)\n    if (drawFrame2 && frameVisible) {\n      drawFrame(\n        frameContext,\n        frameDesign,\n        centerX,\n        centerY,\n        imageWidth,\n        imageHeight\n      )\n    }\n\n    // Create background in background buffer (backgroundBuffer)\n    if (drawBackground2 && backgroundVisible) {\n      drawBackground(\n        backgroundContext,\n        backgroundColor,\n        centerX,\n        centerY,\n        imageWidth,\n        imageHeight\n      )\n\n      // Create custom layer in background buffer (backgroundBuffer)\n      drawRadialCustomImage(\n        backgroundContext,\n        customLayer,\n        centerX,\n        centerY,\n        imageWidth,\n        imageHeight\n      )\n    }\n\n    if (drawLed) {\n      // Draw LED ON in ledBuffer_ON\n      ledContextOn.drawImage(createLedImage(LED_SIZE, 1, ledColor), 0, 0)\n\n      // Draw LED OFF in ledBuffer_OFF\n      ledContextOff.drawImage(createLedImage(LED_SIZE, 0, ledColor), 0, 0)\n    }\n\n    if (drawUserLed) {\n      // Draw user LED ON in userLedBuffer_ON\n      userLedContextOn.drawImage(\n        createLedImage(Math.ceil(LED_SIZE), 1, userLedColor),\n        0,\n        0\n      )\n\n      // Draw user LED OFF in userLedBuffer_OFF\n      userLedContextOff.drawImage(\n        createLedImage(Math.ceil(LED_SIZE), 0, userLedColor),\n        0,\n        0\n      )\n    }\n\n    if (drawBackground2) {\n      // Create bargraphtrack in background buffer (backgroundBuffer)\n      drawBargraphTrackImage(backgroundContext)\n    }\n\n    // Create tickmarks in background buffer (backgroundBuffer)\n    if (drawBackground2 && backgroundVisible) {\n      drawTickmarksImage(backgroundContext, labelNumberFormat)\n\n      // Create title in background buffer (backgroundBuffer)\n      drawTitleImage(\n        backgroundContext,\n        imageWidth,\n        imageHeight,\n        titleString,\n        unitString,\n        backgroundColor,\n        true,\n        true\n      )\n    }\n\n    // Create lcd background if selected in background buffer (backgroundBuffer)\n    if (drawBackground2 && lcdVisible) {\n      lcdBuffer = createLcdBackgroundImage(lcdWidth, lcdHeight, lcdColor)\n      backgroundContext.drawImage(lcdBuffer, lcdPosX, lcdPosY)\n    }\n\n    // Convert Section values into angles\n    isSectionsVisible = false\n    if (useSectionColors && section !== null && section.length > 0) {\n      isSectionsVisible = true\n      let sectionIndex = section.length\n      sectionAngles = []\n      do {\n        sectionIndex--\n        sectionAngles.push({\n          start:\n            ((section[sectionIndex].start + Math.abs(minValue)) /\n              (maxValue - minValue)) *\n            degAngleRange,\n          stop:\n            ((section[sectionIndex].stop + Math.abs(minValue)) /\n              (maxValue - minValue)) *\n            degAngleRange,\n          color: customColorDef(section[sectionIndex].color)\n        })\n      } while (sectionIndex > 0)\n    }\n\n    // Use a gradient for the valueColor?\n    isGradientVisible = false\n    if (useValueGradient && valueGradient !== null) {\n      // force section colors off!\n      isSectionsVisible = false\n      isGradientVisible = true\n    }\n\n    // Create an image of an active led in active led buffer (activeLedBuffer)\n    if (drawValue) {\n      drawActiveLed(activeLedContext, valueColor)\n    }\n\n    // Create foreground in foreground buffer (foregroundBuffer)\n    if (drawForeground2 && foregroundVisible) {\n      drawForeground(\n        foregroundContext,\n        foregroundType,\n        imageWidth,\n        imageHeight,\n        false\n      )\n    }\n\n    // Create the trend indicator buffers\n    if (drawTrend && trendVisible) {\n      trendUpBuffer = createTrendIndicator(\n        trendSize,\n        TrendState.UP,\n        trendColors\n      )\n      trendSteadyBuffer = createTrendIndicator(\n        trendSize,\n        TrendState.STEADY,\n        trendColors\n      )\n      trendDownBuffer = createTrendIndicator(\n        trendSize,\n        TrendState.DOWN,\n        trendColors\n      )\n      trendOffBuffer = createTrendIndicator(\n        trendSize,\n        TrendState.OFF,\n        trendColors\n      )\n    }\n  }\n\n  const resetBuffers = function (buffers) {\n    buffers = buffers || {}\n    const resetFrame = undefined === buffers.frame ? false : buffers.frame\n    const resetBackground =\n      undefined === buffers.background ? false : buffers.background\n    const resetLed = undefined === buffers.led ? false : buffers.led\n    const resetUserLed =\n      undefined === buffers.userLed ? false : buffers.userLed\n    const resetValue = undefined === buffers.value ? false : buffers.value\n    const resetForeground =\n      undefined === buffers.foreground ? false : buffers.foreground\n\n    // Buffer for the frame\n    if (resetFrame) {\n      frameBuffer.width = size\n      frameBuffer.height = size\n      frameContext = frameBuffer.getContext('2d')\n    }\n\n    // Buffer for static background painting code\n    if (resetBackground) {\n      backgroundBuffer.width = size\n      backgroundBuffer.height = size\n      backgroundContext = backgroundBuffer.getContext('2d')\n    }\n\n    // Buffer for active bargraph led\n    if (resetValue) {\n      activeLedBuffer.width = Math.ceil(size * 0.060747)\n      activeLedBuffer.height = Math.ceil(size * 0.023364)\n      activeLedContext = activeLedBuffer.getContext('2d')\n    }\n\n    if (resetLed) {\n      // Buffer for led on painting code\n      ledBufferOn.width = Math.ceil(LED_SIZE)\n      ledBufferOn.height = Math.ceil(LED_SIZE)\n      ledContextOn = ledBufferOn.getContext('2d')\n\n      // Buffer for led off painting code\n      ledBufferOff.width = Math.ceil(LED_SIZE)\n      ledBufferOff.height = Math.ceil(LED_SIZE)\n      ledContextOff = ledBufferOff.getContext('2d')\n\n      // Buffer for current led painting code\n      ledBuffer = ledBufferOff\n    }\n\n    if (resetUserLed) {\n      userLedBufferOn.width = Math.ceil(LED_SIZE)\n      userLedBufferOn.height = Math.ceil(LED_SIZE)\n      userLedContextOn = userLedBufferOn.getContext('2d')\n\n      userLedBufferOff.width = Math.ceil(LED_SIZE)\n      userLedBufferOff.height = Math.ceil(LED_SIZE)\n      userLedContextOff = userLedBufferOff.getContext('2d')\n\n      // Buffer for current user led painting code\n      userLedBuffer = userLedBufferOff\n    }\n\n    // Buffer for static foreground painting code\n    if (resetForeground) {\n      foregroundBuffer.width = size\n      foregroundBuffer.height = size\n      foregroundContext = foregroundBuffer.getContext('2d')\n    }\n  }\n\n  const drawBargraphTrackImage = function (ctx) {\n    ctx.save()\n\n    // Bargraphtrack\n\n    // Frame\n    ctx.save()\n    ctx.lineWidth = size * 0.085\n    ctx.beginPath()\n    ctx.translate(centerX, centerY)\n    ctx.rotate(rotationOffset - 4 * RAD_FACTOR)\n    ctx.translate(-centerX, -centerY)\n    ctx.arc(\n      centerX,\n      centerY,\n      imageWidth * 0.35514,\n      0,\n      angleRange + 8 * RAD_FACTOR,\n      false\n    )\n    ctx.rotate(-rotationOffset)\n    const ledTrackFrameGradient = ctx.createLinearGradient(\n      0,\n      0.107476 * imageHeight,\n      0,\n      0.897195 * imageHeight\n    )\n    ledTrackFrameGradient.addColorStop(0, '#000000')\n    ledTrackFrameGradient.addColorStop(0.22, '#333333')\n    ledTrackFrameGradient.addColorStop(0.76, '#333333')\n    ledTrackFrameGradient.addColorStop(1, '#cccccc')\n    ctx.strokeStyle = ledTrackFrameGradient\n    ctx.stroke()\n    ctx.restore()\n\n    // Main\n    ctx.save()\n    ctx.lineWidth = size * 0.075\n    ctx.beginPath()\n    ctx.translate(centerX, centerY)\n    ctx.rotate(rotationOffset - 4 * RAD_FACTOR)\n    ctx.translate(-centerX, -centerY)\n    ctx.arc(\n      centerX,\n      centerY,\n      imageWidth * 0.35514,\n      0,\n      angleRange + 8 * RAD_FACTOR,\n      false\n    )\n    ctx.rotate(-rotationOffset)\n    const ledTrackMainGradient = ctx.createLinearGradient(\n      0,\n      0.112149 * imageHeight,\n      0,\n      0.892523 * imageHeight\n    )\n    ledTrackMainGradient.addColorStop(0, '#111111')\n    ledTrackMainGradient.addColorStop(1, '#333333')\n    ctx.strokeStyle = ledTrackMainGradient\n    ctx.stroke()\n    ctx.restore()\n\n    // Draw inactive leds\n    const ledCenterX = (imageWidth * 0.116822 + imageWidth * 0.060747) / 2\n    const ledCenterY = (imageWidth * 0.485981 + imageWidth * 0.023364) / 2\n    const ledOffGradient = ctx.createRadialGradient(\n      ledCenterX,\n      ledCenterY,\n      0,\n      ledCenterX,\n      ledCenterY,\n      0.030373 * imageWidth\n    )\n    ledOffGradient.addColorStop(0, '#3c3c3c')\n    ledOffGradient.addColorStop(1, '#323232')\n    let angle = 0\n    for (angle = 0; angle <= degAngleRange; angle += 5) {\n      ctx.save()\n      ctx.translate(centerX, centerY)\n      ctx.rotate(angle * RAD_FACTOR + bargraphOffset)\n      ctx.translate(-centerX, -centerY)\n      ctx.beginPath()\n      ctx.rect(\n        imageWidth * 0.116822,\n        imageWidth * 0.485981,\n        imageWidth * 0.060747,\n        imageWidth * 0.023364\n      )\n      ctx.closePath()\n      ctx.fillStyle = ledOffGradient\n      ctx.fill()\n      ctx.restore()\n    }\n\n    ctx.restore()\n  }\n\n  const drawActiveLed = function (ctx, color) {\n    ctx.save()\n    ctx.beginPath()\n    ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height)\n    ctx.closePath()\n    const ledCenterX = ctx.canvas.width / 2\n    const ledCenterY = ctx.canvas.height / 2\n    const ledGradient = mainCtx.createRadialGradient(\n      ledCenterX,\n      ledCenterY,\n      0,\n      ledCenterX,\n      ledCenterY,\n      ctx.canvas.width / 2\n    )\n    ledGradient.addColorStop(0, color.light.getRgbaColor())\n    ledGradient.addColorStop(1, color.dark.getRgbaColor())\n    ctx.fillStyle = ledGradient\n    ctx.fill()\n    ctx.restore()\n  }\n\n  const drawLcdText = function (ctx, value) {\n    ctx.save()\n    ctx.textAlign = 'right'\n    ctx.strokeStyle = lcdColor.textColor\n    ctx.fillStyle = lcdColor.textColor\n\n    if (\n      lcdColor === LcdColor.STANDARD ||\n      lcdColor === LcdColor.STANDARD_GREEN\n    ) {\n      ctx.shadowColor = 'gray'\n      ctx.shadowOffsetX = imageWidth * 0.007\n      ctx.shadowOffsetY = imageWidth * 0.007\n      ctx.shadowBlur = imageWidth * 0.007\n    }\n\n    if (digitalFont) {\n      ctx.font = lcdFont\n    } else {\n      ctx.font = stdFont\n    }\n    ctx.fillText(\n      value.toFixed(lcdDecimals),\n      lcdPosX + lcdWidth - lcdWidth * 0.05,\n      lcdPosY + lcdHeight * 0.5 + lcdFontHeight * 0.38,\n      lcdWidth * 0.9\n    )\n\n    ctx.restore()\n  }\n\n  const drawTickmarksImage = function (ctx, labelNumberFormat) {\n    let alpha = rotationOffset // Tracks total rotation\n    const rotationStep = angleStep * minorTickSpacing\n    let textRotationAngle\n    const fontSize = Math.ceil(imageWidth * 0.04)\n    let valueCounter = minValue\n    let majorTickCounter = maxNoOfMinorTicks - 1\n    const TEXT_TRANSLATE_X = imageWidth * 0.28\n    let TEXT_WIDTH = imageWidth * 0.1\n    const MAX_VALUE_ROUNDED = parseFloat(maxValue.toFixed(2))\n    let i\n\n    backgroundColor.labelColor.setAlpha(1)\n    ctx.save()\n    ctx.textAlign = 'center'\n    ctx.textBaseline = 'middle'\n    ctx.font = fontSize + 'px ' + stdFontName\n    ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor()\n    ctx.fillStyle = backgroundColor.labelColor.getRgbaColor()\n    ctx.translate(centerX, centerY)\n    ctx.rotate(rotationOffset)\n\n    if (gaugeType.type === 'type1' || gaugeType.type === 'type2') {\n      TEXT_WIDTH = imageWidth * 0.0375\n    }\n\n    for (\n      i = minValue;\n      parseFloat(i.toFixed(2)) <= MAX_VALUE_ROUNDED;\n      i += minorTickSpacing\n    ) {\n      textRotationAngle = +rotationStep + HALF_PI\n      majorTickCounter++\n      // Draw major tickmarks\n      if (majorTickCounter === maxNoOfMinorTicks) {\n        ctx.save()\n        ctx.translate(TEXT_TRANSLATE_X, 0)\n\n        switch (tickLabelOrientation.type) {\n          case 'horizontal':\n            textRotationAngle = -alpha\n            break\n\n          case 'tangent':\n            textRotationAngle = alpha <= HALF_PI + PI ? PI : 0\n            break\n\n          case 'normal':\n          /* falls through */\n          default:\n            textRotationAngle = HALF_PI\n            break\n        }\n        ctx.rotate(textRotationAngle)\n\n        switch (labelNumberFormat.format) {\n          case 'fractional':\n            ctx.fillText(\n              valueCounter.toFixed(fractionalScaleDecimals),\n              0,\n              0,\n              TEXT_WIDTH\n            )\n            break\n\n          case 'scientific':\n            ctx.fillText(valueCounter.toPrecision(2), 0, 0, TEXT_WIDTH)\n            break\n\n          case 'standard':\n          /* falls through */\n          default:\n            ctx.fillText(valueCounter.toFixed(0), 0, 0, TEXT_WIDTH)\n            break\n        }\n        ctx.translate(-TEXT_TRANSLATE_X, 0)\n        ctx.restore()\n\n        valueCounter += majorTickSpacing\n        majorTickCounter = 0\n        ctx.rotate(rotationStep)\n        alpha += rotationStep\n        continue\n      }\n      ctx.rotate(rotationStep)\n      alpha += rotationStep\n    }\n\n    ctx.translate(-centerX, -centerY)\n    ctx.restore()\n  }\n\n  const blink = function (blinking) {\n    if (blinking) {\n      ledTimerId = setInterval(toggleAndRepaintLed, 1000)\n    } else {\n      clearInterval(ledTimerId)\n      ledBuffer = ledBufferOff\n    }\n  }\n\n  const blinkUser = function (blinking) {\n    if (blinking) {\n      userLedTimerId = setInterval(toggleAndRepaintUserLed, 1000)\n    } else {\n      clearInterval(userLedTimerId)\n      userLedBuffer = userLedBufferOff\n    }\n  }\n\n  const toggleAndRepaintLed = function () {\n    if (ledVisible) {\n      if (ledBuffer === ledBufferOn) {\n        ledBuffer = ledBufferOff\n      } else {\n        ledBuffer = ledBufferOn\n      }\n      if (!repainting) {\n        repainting = true\n        requestAnimFrame(self.repaint)\n      }\n    }\n  }\n\n  const toggleAndRepaintUserLed = function () {\n    if (userLedVisible) {\n      if (userLedBuffer === userLedBufferOn) {\n        userLedBuffer = userLedBufferOff\n      } else {\n        userLedBuffer = userLedBufferOn\n      }\n      if (!repainting) {\n        repainting = true\n        requestAnimFrame(self.repaint)\n      }\n    }\n  }\n\n  //* ******************************** Public methods *********************************\n  this.setValue = function (newValue) {\n    newValue = parseFloat(newValue)\n    const targetValue =\n      newValue < minValue\n        ? minValue\n        : newValue > maxValue\n          ? maxValue\n          : newValue\n    if (value !== targetValue) {\n      value = targetValue\n      if (\n        (value >= threshold && !ledBlinking && thresholdRising) ||\n        (value <= threshold && !ledBlinking && !thresholdRising)\n      ) {\n        ledBlinking = true\n        blink(ledBlinking)\n        if (playAlarm) {\n          audioElement.play()\n        }\n      } else if (\n        (value < threshold && ledBlinking && thresholdRising) ||\n        (value > threshold && ledBlinking && !thresholdRising)\n      ) {\n        ledBlinking = false\n        blink(ledBlinking)\n        if (playAlarm) {\n          audioElement.pause()\n        }\n      }\n      this.repaint()\n    }\n    return this\n  }\n\n  this.getValue = function () {\n    return value\n  }\n\n  this.setValueAnimated = function (newValue, callback) {\n    newValue = parseFloat(newValue)\n    const targetValue =\n      newValue < minValue\n        ? minValue\n        : newValue > maxValue\n          ? maxValue\n          : newValue\n    const gauge = this\n    let time\n\n    if (value !== targetValue) {\n      if (undefined !== tween && tween.isPlaying) {\n        tween.stop()\n      }\n\n      time =\n        (fullScaleDeflectionTime * Math.abs(targetValue - value)) /\n        (maxValue - minValue)\n      time = Math.max(time, fullScaleDeflectionTime / 5)\n      tween = new Tween(\n        {},\n        '',\n        Tween.regularEaseInOut,\n        value,\n        targetValue,\n        time\n      )\n      // tween = new Tween({}, '', Tween.regularEaseInOut, value, targetValue, 1);\n      // tween = new Tween(new Object(), '', Tween.strongEaseInOut, this.value, targetValue, 1);\n      tween.onMotionChanged = function (event) {\n        value = event.target._pos\n\n        if (\n          (value >= threshold && !ledBlinking && thresholdRising) ||\n          (value <= threshold && !ledBlinking && !thresholdRising)\n        ) {\n          ledBlinking = true\n          blink(ledBlinking)\n          if (playAlarm) {\n            audioElement.play()\n          }\n        } else if (\n          (value < threshold && ledBlinking && thresholdRising) ||\n          (value > threshold && ledBlinking && !thresholdRising)\n        ) {\n          ledBlinking = false\n          blink(ledBlinking)\n          if (playAlarm) {\n            audioElement.pause()\n          }\n        }\n        if (!repainting) {\n          repainting = true\n          requestAnimFrame(gauge.repaint)\n        }\n      }\n\n      // do we have a callback function to process?\n      if (callback && typeof callback === 'function') {\n        tween.onMotionFinished = callback\n      }\n\n      tween.start()\n    }\n    return this\n  }\n\n  this.setFrameDesign = function (newFrameDesign) {\n    resetBuffers({\n      frame: true\n    })\n    frameDesign = newFrameDesign\n    init({\n      frame: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setBackgroundColor = function (newBackgroundColor) {\n    resetBuffers({\n      background: true,\n      led: true\n    })\n    backgroundColor = newBackgroundColor\n    init({\n      background: true,\n      led: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setForegroundType = function (newForegroundType) {\n    resetBuffers({\n      foreground: true\n    })\n    foregroundType = newForegroundType\n    init({\n      foreground: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setValueColor = function (newValueColor) {\n    resetBuffers({\n      value: true\n    })\n    valueColor = newValueColor\n    init({\n      value: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setLedColor = function (newLedColor) {\n    resetBuffers({\n      led: true\n    })\n    ledColor = newLedColor\n    init({\n      led: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setUserLedColor = function (newLedColor) {\n    resetBuffers({\n      userLed: true\n    })\n    userLedColor = newLedColor\n    init({\n      userLed: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.toggleUserLed = function () {\n    if (userLedBuffer === userLedBufferOn) {\n      userLedBuffer = userLedBufferOff\n    } else {\n      userLedBuffer = userLedBufferOn\n    }\n    this.repaint()\n    return this\n  }\n\n  this.setUserLedOnOff = function (on) {\n    if (on === true) {\n      userLedBuffer = userLedBufferOn\n    } else {\n      userLedBuffer = userLedBufferOff\n    }\n    this.repaint()\n    return this\n  }\n\n  this.blinkUserLed = function (blink) {\n    if (blink) {\n      if (!userLedBlinking) {\n        blinkUser(true)\n        userLedBlinking = true\n      }\n    } else {\n      if (userLedBlinking) {\n        clearInterval(userLedTimerId)\n        userLedBlinking = false\n      }\n    }\n    return this\n  }\n\n  this.setLedVisible = function (visible) {\n    ledVisible = !!visible\n    this.repaint()\n    return this\n  }\n\n  this.setUserLedVisible = function (visible) {\n    userLedVisible = !!visible\n    this.repaint()\n    return this\n  }\n\n  this.setLcdColor = function (newLcdColor) {\n    lcdColor = newLcdColor\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setLcdDecimals = function (decimals) {\n    lcdDecimals = parseInt(decimals, 10)\n    this.repaint()\n    return this\n  }\n\n  this.setSection = function (areaSec) {\n    section = areaSec\n    init()\n    this.repaint()\n    return this\n  }\n\n  this.setSectionActive = function (value) {\n    useSectionColors = value\n    init()\n    this.repaint()\n    return this\n  }\n\n  this.setGradient = function (grad) {\n    valueGradient = grad\n    init()\n    this.repaint()\n    return this\n  }\n\n  this.setGradientActive = function (value) {\n    useValueGradient = value\n    init()\n    this.repaint()\n    return this\n  }\n\n  this.setMinValue = function (newValue) {\n    minValue = newValue\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.getMinValue = function () {\n    return minValue\n  }\n\n  this.setMaxValue = function (newValue) {\n    maxValue = newValue\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.getMaxValue = function () {\n    return maxValue\n  }\n\n  this.setThreshold = function (newValue) {\n    newValue = parseFloat(newValue)\n    const targetValue =\n      newValue < minValue\n        ? minValue\n        : newValue > maxValue\n          ? maxValue\n          : newValue\n    threshold = targetValue\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setThresholdRising = function (rising) {\n    thresholdRising = !!rising\n    // reset existing threshold alerts\n    ledBlinking = !ledBlinking\n    blink(ledBlinking)\n    this.repaint()\n    return this\n  }\n\n  this.setTitleString = function (title) {\n    titleString = title\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setUnitString = function (unit) {\n    unitString = unit\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setTrend = function (newValue) {\n    trendIndicator = newValue\n    this.repaint()\n    return this\n  }\n\n  this.setTrendVisible = function (visible) {\n    trendVisible = !!visible\n    this.repaint()\n    return this\n  }\n\n  this.setFractionalScaleDecimals = function (decimals) {\n    fractionalScaleDecimals = parseInt(decimals, 10)\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n  }\n\n  this.setLabelNumberFormat = function (format) {\n    labelNumberFormat = format\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.repaint = function () {\n    const activeLedAngle =\n      ((value - minValue) / (maxValue - minValue)) * degAngleRange\n    let activeLedColor\n    let lastActiveLedColor = valueColor\n    let angle\n    let i\n    let currentValue\n    let gradRange\n    let fraction\n\n    if (!initialized) {\n      init({\n        frame: true,\n        background: true,\n        led: true,\n        userLed: true,\n        value: true,\n        trend: true,\n        foreground: true\n      })\n    }\n\n    mainCtx.clearRect(0, 0, size, size)\n\n    // Draw frame image\n    if (frameVisible) {\n      mainCtx.drawImage(frameBuffer, 0, 0)\n    }\n\n    // Draw buffered image to visible canvas\n    mainCtx.drawImage(backgroundBuffer, 0, 0)\n\n    // Draw active leds\n    for (angle = 0; angle <= activeLedAngle; angle += 5) {\n      // check for LED color\n      activeLedColor = valueColor\n      // Use a gradient for value colors?\n      if (isGradientVisible) {\n        // Convert angle back to value\n        currentValue =\n          minValue + (angle / degAngleRange) * (maxValue - minValue)\n        gradRange = valueGradient.getEnd() - valueGradient.getStart()\n        fraction = (currentValue - minValue) / gradRange\n        fraction = Math.max(Math.min(fraction, 1), 0)\n        activeLedColor = customColorDef(\n          valueGradient.getColorAt(fraction).getRgbaColor()\n        )\n      } else if (isSectionsVisible) {\n        for (i = 0; i < sectionAngles.length; i++) {\n          if (\n            angle >= sectionAngles[i].start &&\n            angle < sectionAngles[i].stop\n          ) {\n            activeLedColor = sectionAngles[i].color\n            break\n          }\n        }\n      }\n      // Has LED color changed? If so redraw the buffer\n      if (\n        lastActiveLedColor.medium.getHexColor() !==\n        activeLedColor.medium.getHexColor()\n      ) {\n        drawActiveLed(activeLedContext, activeLedColor)\n        lastActiveLedColor = activeLedColor\n      }\n      mainCtx.save()\n      mainCtx.translate(centerX, centerY)\n      mainCtx.rotate(angle * RAD_FACTOR + bargraphOffset)\n      mainCtx.translate(-centerX, -centerY)\n      mainCtx.drawImage(activeLedBuffer, ACTIVE_LED_POS_X, ACTIVE_LED_POS_Y)\n      mainCtx.restore()\n    }\n\n    // Draw lcd display\n    if (lcdVisible) {\n      drawLcdText(mainCtx, value)\n    }\n\n    // Draw led\n    if (ledVisible) {\n      mainCtx.drawImage(ledBuffer, LED_POS_X, LED_POS_Y)\n    }\n\n    // Draw user led\n    if (userLedVisible) {\n      mainCtx.drawImage(userLedBuffer, USER_LED_POS_X, USER_LED_POS_Y)\n    }\n\n    // Draw the trend indicator\n    if (trendVisible) {\n      switch (trendIndicator.state) {\n        case 'up':\n          mainCtx.drawImage(trendUpBuffer, trendPosX, trendPosY)\n          break\n        case 'steady':\n          mainCtx.drawImage(trendSteadyBuffer, trendPosX, trendPosY)\n          break\n        case 'down':\n          mainCtx.drawImage(trendDownBuffer, trendPosX, trendPosY)\n          break\n        case 'off':\n          mainCtx.drawImage(trendOffBuffer, trendPosX, trendPosY)\n          break\n      }\n    }\n\n    // Draw foreground\n    if (foregroundVisible) {\n      mainCtx.drawImage(foregroundBuffer, 0, 0)\n    }\n\n    repainting = false\n  }\n\n  // Visualize the component\n  this.repaint()\n\n  return this\n}\n\nexport default RadialBargraph\n","import Tween from './tween.js'\nimport drawPointerImage from './drawPointerImage'\nimport drawFrame from './drawFrame'\nimport drawBackground from './drawBackground'\nimport drawForeground from './drawForeground'\nimport createKnobImage from './createKnobImage'\nimport createLedImage from './createLedImage'\nimport createMeasuredValueImage from './createMeasuredValueImage'\nimport {\n  calcNiceNumber,\n  createBuffer,\n  requestAnimFrame,\n  getCanvasContext,\n  HALF_PI,\n  PI,\n  doc,\n  stdFontName\n} from './tools'\n\nimport {\n  BackgroundColor,\n  ColorDef,\n  LedColor,\n  GaugeType,\n  Orientation,\n  KnobType,\n  KnobStyle,\n  FrameDesign,\n  PointerType,\n  ForegroundType,\n  LabelNumberFormat\n} from './definitions'\n\nconst RadialVertical = function (canvas, parameters) {\n  parameters = parameters || {}\n  const orientation =\n    undefined === parameters.orientation\n      ? Orientation.NORTH\n      : parameters.orientation\n  let size = undefined === parameters.size ? 0 : parameters.size\n  let minValue = undefined === parameters.minValue ? 0 : parameters.minValue\n  let maxValue =\n    undefined === parameters.maxValue ? minValue + 100 : parameters.maxValue\n  const niceScale =\n    undefined === parameters.niceScale ? true : parameters.niceScale\n  let threshold =\n    undefined === parameters.threshold\n      ? (maxValue - minValue) / 2 + minValue\n      : parameters.threshold\n  const section = undefined === parameters.section ? null : parameters.section\n  const area = undefined === parameters.area ? null : parameters.area\n  const titleString =\n    undefined === parameters.titleString ? '' : parameters.titleString\n  const unitString =\n    undefined === parameters.unitString ? '' : parameters.unitString\n  let frameDesign =\n    undefined === parameters.frameDesign\n      ? FrameDesign.METAL\n      : parameters.frameDesign\n  const frameVisible =\n    undefined === parameters.frameVisible ? true : parameters.frameVisible\n  let backgroundColor =\n    undefined === parameters.backgroundColor\n      ? BackgroundColor.DARK_GRAY\n      : parameters.backgroundColor\n  const backgroundVisible =\n    undefined === parameters.backgroundVisible\n      ? true\n      : parameters.backgroundVisible\n  let pointerType =\n    undefined === parameters.pointerType\n      ? PointerType.TYPE1\n      : parameters.pointerType\n  let pointerColor =\n    undefined === parameters.pointerColor\n      ? ColorDef.RED\n      : parameters.pointerColor\n  const knobType =\n    undefined === parameters.knobType\n      ? KnobType.STANDARD_KNOB\n      : parameters.knobType\n  const knobStyle =\n    undefined === parameters.knobStyle\n      ? KnobStyle.SILVER\n      : parameters.knobStyle\n  let ledColor =\n    undefined === parameters.ledColor ? LedColor.RED_LED : parameters.ledColor\n  let ledVisible =\n    undefined === parameters.ledVisible ? true : parameters.ledVisible\n  let thresholdVisible =\n    undefined === parameters.thresholdVisible\n      ? true\n      : parameters.thresholdVisible\n  let thresholdRising =\n    undefined === parameters.thresholdRising\n      ? true\n      : parameters.thresholdRising\n  let minMeasuredValueVisible =\n    undefined === parameters.minMeasuredValueVisible\n      ? false\n      : parameters.minMeasuredValueVisible\n  let maxMeasuredValueVisible =\n    undefined === parameters.maxMeasuredValueVisible\n      ? false\n      : parameters.maxMeasuredValueVisible\n  let foregroundType =\n    undefined === parameters.foregroundType\n      ? ForegroundType.TYPE1\n      : parameters.foregroundType\n  const foregroundVisible =\n    undefined === parameters.foregroundVisible\n      ? true\n      : parameters.foregroundVisible\n  const labelNumberFormat =\n    undefined === parameters.labelNumberFormat\n      ? LabelNumberFormat.STANDARD\n      : parameters.labelNumberFormat\n  const playAlarm =\n    undefined === parameters.playAlarm ? false : parameters.playAlarm\n  const alarmSound =\n    undefined === parameters.alarmSound ? false : parameters.alarmSound\n  const fullScaleDeflectionTime =\n    undefined === parameters.fullScaleDeflectionTime\n      ? 2.5\n      : parameters.fullScaleDeflectionTime\n\n  // Get the canvas context and clear it\n  const mainCtx = getCanvasContext(canvas)\n  // Has a size been specified?\n  if (size === 0) {\n    size = Math.min(mainCtx.canvas.width, mainCtx.canvas.height)\n  }\n\n  // Set the size - also clears the canvas\n  mainCtx.canvas.width = size\n  mainCtx.canvas.height = size\n\n  let audioElement\n\n  // Create audio tag for alarm sound\n  if (playAlarm && alarmSound !== false) {\n    audioElement = doc.createElement('audio')\n    audioElement.setAttribute('src', alarmSound)\n    audioElement.setAttribute('preload', 'auto')\n  }\n  const gaugeType = GaugeType.TYPE5\n\n  const self = this\n  let value = minValue\n\n  // Properties\n  let minMeasuredValue = maxValue\n  let maxMeasuredValue = minValue\n  const imageWidth = size\n  const imageHeight = size\n\n  let ledBlinking = false\n\n  let ledTimerId = 0\n  let tween\n  let repainting = false\n\n  // Tickmark specific private variables\n  let niceMinValue = minValue\n  let niceMaxValue = maxValue\n  let niceRange = maxValue - minValue\n  let range = niceMaxValue - niceMinValue\n  let minorTickSpacing = 0\n  let majorTickSpacing = 0\n  const maxNoOfMinorTicks = 10\n  const maxNoOfMajorTicks = 10\n\n  let rotationOffset = 1.25 * PI\n  let angleRange = HALF_PI\n  let angleStep = angleRange / range\n  const shadowOffset = imageWidth * 0.006\n  const pointerOffset = (imageWidth * 1.17) / 2\n\n  let initialized = false\n\n  let angle = rotationOffset + (value - minValue) * angleStep\n\n  const centerX = imageWidth / 2\n  const centerY = imageHeight * 0.733644\n\n  // Misc\n  const ledPosX = 0.455 * imageWidth\n  const ledPosY = 0.51 * imageHeight\n\n  // Method to calculate nice values for min, max and range for the tickmarks\n  const calculate = function calculate () {\n    if (niceScale) {\n      niceRange = calcNiceNumber(maxValue - minValue, false)\n      majorTickSpacing = calcNiceNumber(\n        niceRange / (maxNoOfMajorTicks - 1),\n        true\n      )\n      niceMinValue = Math.floor(minValue / majorTickSpacing) * majorTickSpacing\n      niceMaxValue = Math.ceil(maxValue / majorTickSpacing) * majorTickSpacing\n      minorTickSpacing = calcNiceNumber(\n        majorTickSpacing / (maxNoOfMinorTicks - 1),\n        true\n      )\n      minValue = niceMinValue\n      maxValue = niceMaxValue\n      range = maxValue - minValue\n    } else {\n      niceRange = maxValue - minValue\n      niceMinValue = minValue\n      niceMaxValue = maxValue\n      range = niceRange\n      minorTickSpacing = 1\n      majorTickSpacing = 10\n    }\n    // Make sure values are still in range\n    value = value < minValue ? minValue : value > maxValue ? maxValue : value\n    minMeasuredValue =\n      minMeasuredValue < minValue\n        ? minValue\n        : minMeasuredValue > maxValue\n          ? maxValue\n          : minMeasuredValue\n    maxMeasuredValue =\n      maxMeasuredValue < minValue\n        ? minValue\n        : maxMeasuredValue > maxValue\n          ? maxValue\n          : maxMeasuredValue\n    threshold =\n      threshold < minValue\n        ? minValue\n        : threshold > maxValue\n          ? maxValue\n          : threshold\n\n    rotationOffset = 1.25 * PI\n    angleRange = HALF_PI\n    angleStep = angleRange / range\n\n    angle = rotationOffset + (value - minValue) * angleStep\n  }\n\n  // **************   Buffer creation  ********************\n  // Buffer for the frame\n  const frameBuffer = createBuffer(size, size)\n  let frameContext = frameBuffer.getContext('2d')\n\n  // Buffer for the background\n  const backgroundBuffer = createBuffer(size, size)\n  let backgroundContext = backgroundBuffer.getContext('2d')\n\n  // Buffer for led on painting code\n  const ledBufferOn = createBuffer(size * 0.093457, size * 0.093457)\n  let ledContextOn = ledBufferOn.getContext('2d')\n\n  // Buffer for led off painting code\n  const ledBufferOff = createBuffer(size * 0.093457, size * 0.093457)\n  let ledContextOff = ledBufferOff.getContext('2d')\n\n  // Buffer for current led painting code\n  let ledBuffer = ledBufferOff\n\n  // Buffer for the minMeasuredValue indicator\n  const minMeasuredValueBuffer = createBuffer(\n    Math.ceil(size * 0.028037),\n    Math.ceil(size * 0.028037)\n  )\n  const minMeasuredValueCtx = minMeasuredValueBuffer.getContext('2d')\n\n  // Buffer for the maxMeasuredValue indicator\n  const maxMeasuredValueBuffer = createBuffer(\n    Math.ceil(size * 0.028037),\n    Math.ceil(size * 0.028037)\n  )\n  const maxMeasuredValueCtx = maxMeasuredValueBuffer.getContext('2d')\n\n  // Buffer for pointer image painting code\n  const pointerBuffer = createBuffer(size, size)\n  let pointerContext = pointerBuffer.getContext('2d')\n\n  // Buffer for static foreground painting code\n  const foregroundBuffer = createBuffer(size, size)\n  let foregroundContext = foregroundBuffer.getContext('2d')\n\n  // **************   Image creation  ********************\n  const drawPostsImage = function (ctx) {\n    if (gaugeType.type === 'type5') {\n      ctx.save()\n      if (orientation.type === 'west') {\n        // Min post\n        ctx.drawImage(\n          createKnobImage(\n            Math.ceil(imageHeight * 0.037383),\n            KnobType.STANDARD_KNOB,\n            knobStyle\n          ),\n          imageWidth * 0.44,\n          imageHeight * 0.8\n        )\n        // Max post\n        ctx.drawImage(\n          createKnobImage(\n            Math.ceil(imageHeight * 0.037383),\n            KnobType.STANDARD_KNOB,\n            knobStyle\n          ),\n          imageWidth * 0.44,\n          imageHeight * 0.16\n        )\n      } else if (orientation.type === 'east') {\n        // Min post\n        ctx.drawImage(\n          createKnobImage(\n            Math.ceil(imageHeight * 0.037383),\n            KnobType.STANDARD_KNOB,\n            knobStyle\n          ),\n          imageWidth * 0.52,\n          imageHeight * 0.8\n        )\n        // Max post\n        ctx.drawImage(\n          createKnobImage(\n            Math.ceil(imageHeight * 0.037383),\n            KnobType.STANDARD_KNOB,\n            knobStyle\n          ),\n          imageWidth * 0.52,\n          imageHeight * 0.16\n        )\n      } else {\n        // Min post\n        ctx.drawImage(\n          createKnobImage(\n            Math.ceil(imageHeight * 0.037383),\n            KnobType.STANDARD_KNOB,\n            knobStyle\n          ),\n          imageWidth * 0.2 - imageHeight * 0.037383,\n          imageHeight * 0.446666\n        )\n        // Max post\n        ctx.drawImage(\n          createKnobImage(\n            Math.ceil(imageHeight * 0.037383),\n            KnobType.STANDARD_KNOB,\n            knobStyle\n          ),\n          imageWidth * 0.8,\n          imageHeight * 0.446666\n        )\n      }\n      ctx.restore()\n    }\n  }\n\n  const createThresholdImage = function () {\n    const thresholdBuffer = doc.createElement('canvas')\n    thresholdBuffer.width = Math.ceil(size * 0.046728)\n    thresholdBuffer.height = Math.ceil(thresholdBuffer.width * 0.9)\n    const thresholdCtx = thresholdBuffer.getContext('2d')\n\n    thresholdCtx.save()\n    const gradThreshold = thresholdCtx.createLinearGradient(\n      0,\n      0.1,\n      0,\n      thresholdBuffer.height * 0.9\n    )\n    gradThreshold.addColorStop(0, '#520000')\n    gradThreshold.addColorStop(0.3, '#fc1d00')\n    gradThreshold.addColorStop(0.59, '#fc1d00')\n    gradThreshold.addColorStop(1, '#520000')\n    thresholdCtx.fillStyle = gradThreshold\n\n    thresholdCtx.beginPath()\n    thresholdCtx.moveTo(thresholdBuffer.width * 0.5, 0.1)\n    thresholdCtx.lineTo(\n      thresholdBuffer.width * 0.9,\n      thresholdBuffer.height * 0.9\n    )\n    thresholdCtx.lineTo(\n      thresholdBuffer.width * 0.1,\n      thresholdBuffer.height * 0.9\n    )\n    thresholdCtx.lineTo(thresholdBuffer.width * 0.5, 0.1)\n    thresholdCtx.closePath()\n\n    thresholdCtx.fill()\n    thresholdCtx.strokeStyle = '#FFFFFF'\n    thresholdCtx.stroke()\n\n    thresholdCtx.restore()\n\n    return thresholdBuffer\n  }\n\n  const drawAreaSectionImage = function (ctx, start, stop, color, filled) {\n    ctx.save()\n    ctx.strokeStyle = color\n    ctx.fillStyle = color\n    ctx.lineWidth = imageWidth * 0.035\n    const startAngle =\n      (angleRange / range) * start - (angleRange / range) * minValue\n    const stopAngle = startAngle + (stop - start) / (range / angleRange)\n    ctx.translate(centerX, centerY)\n    ctx.rotate(rotationOffset)\n    ctx.beginPath()\n    if (filled) {\n      ctx.moveTo(0, 0)\n      ctx.arc(\n        0,\n        0,\n        imageWidth * 0.365 - ctx.lineWidth / 2,\n        startAngle,\n        stopAngle,\n        false\n      )\n    } else {\n      ctx.arc(0, 0, imageWidth * 0.365, startAngle, stopAngle, false)\n    }\n    if (filled) {\n      ctx.moveTo(0, 0)\n      ctx.fill()\n    } else {\n      ctx.stroke()\n    }\n\n    ctx.translate(-centerX, -centerY)\n    ctx.restore()\n  }\n\n  const drawTitleImage = function (ctx) {\n    ctx.save()\n    ctx.textAlign = 'left'\n    ctx.textBaseline = 'middle'\n    ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor()\n    ctx.fillStyle = backgroundColor.labelColor.getRgbaColor()\n\n    ctx.font = 0.046728 * imageWidth + 'px ' + stdFontName\n    const titleWidth = ctx.measureText(titleString).width\n    ctx.fillText(\n      titleString,\n      (imageWidth - titleWidth) / 2,\n      imageHeight * 0.4,\n      imageWidth * 0.3\n    )\n    const unitWidth = ctx.measureText(unitString).width\n    ctx.fillText(\n      unitString,\n      (imageWidth - unitWidth) / 2,\n      imageHeight * 0.47,\n      imageWidth * 0.2\n    )\n\n    ctx.restore()\n  }\n\n  const drawTickmarksImage = function (ctx, labelNumberFormat) {\n    backgroundColor.labelColor.setAlpha(1)\n    ctx.save()\n\n    if (Orientation.WEST === orientation) {\n      ctx.translate(centerX, centerX)\n      ctx.rotate(-HALF_PI)\n      ctx.translate(-centerX, -centerX)\n    }\n    if (Orientation.EAST === orientation) {\n      ctx.translate(centerX, centerX)\n      ctx.rotate(HALF_PI)\n      ctx.translate(-centerX, -centerX)\n    }\n\n    ctx.textAlign = 'center'\n    ctx.textBaseline = 'middle'\n    const fontSize = Math.ceil(imageWidth * 0.04)\n    ctx.font = fontSize + 'px ' + stdFontName\n    ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor()\n    ctx.fillStyle = backgroundColor.labelColor.getRgbaColor()\n    ctx.translate(centerX, centerY)\n    ctx.rotate(rotationOffset)\n    const rotationStep = angleStep * minorTickSpacing\n    let textRotationAngle\n\n    let valueCounter = minValue\n    let majorTickCounter = maxNoOfMinorTicks - 1\n\n    const OUTER_POINT = imageWidth * 0.44\n    const MAJOR_INNER_POINT = imageWidth * 0.41\n    const MED_INNER_POINT = imageWidth * 0.415\n    const MINOR_INNER_POINT = imageWidth * 0.42\n    const TEXT_TRANSLATE_X = imageWidth * 0.48\n    const TEXT_WIDTH = imageWidth * 0.04\n    const HALF_MAX_NO_OF_MINOR_TICKS = maxNoOfMinorTicks / 2\n    const MAX_VALUE_ROUNDED = parseFloat(maxValue.toFixed(2))\n    let i\n\n    for (\n      i = minValue;\n      parseFloat(i.toFixed(2)) <= MAX_VALUE_ROUNDED;\n      i += minorTickSpacing\n    ) {\n      textRotationAngle = +rotationStep + HALF_PI\n      majorTickCounter++\n      // Draw major tickmarks\n      if (majorTickCounter === maxNoOfMinorTicks) {\n        ctx.lineWidth = 1.5\n        ctx.beginPath()\n        ctx.moveTo(OUTER_POINT, 0)\n        ctx.lineTo(MAJOR_INNER_POINT, 0)\n        ctx.closePath()\n        ctx.stroke()\n        ctx.save()\n        ctx.translate(TEXT_TRANSLATE_X, 0)\n        ctx.rotate(textRotationAngle)\n        switch (labelNumberFormat.format) {\n          case 'fractional':\n            ctx.fillText(valueCounter.toFixed(2), 0, 0, TEXT_WIDTH)\n            break\n\n          case 'scientific':\n            ctx.fillText(valueCounter.toPrecision(2), 0, 0, TEXT_WIDTH)\n            break\n\n          case 'standard':\n          /* falls through */\n          default:\n            ctx.fillText(valueCounter.toFixed(0), 0, 0, TEXT_WIDTH)\n            break\n        }\n        ctx.translate(-TEXT_TRANSLATE_X, 0)\n        ctx.restore()\n\n        valueCounter += majorTickSpacing\n        majorTickCounter = 0\n        ctx.rotate(rotationStep)\n        continue\n      }\n\n      // Draw tickmark every minor tickmark spacing\n      if (\n        maxNoOfMinorTicks % 2 === 0 &&\n        majorTickCounter === HALF_MAX_NO_OF_MINOR_TICKS\n      ) {\n        ctx.lineWidth = 1\n        ctx.beginPath()\n        ctx.moveTo(OUTER_POINT, 0)\n        ctx.lineTo(MED_INNER_POINT, 0)\n        ctx.closePath()\n        ctx.stroke()\n      } else {\n        ctx.lineWidth = 0.5\n        ctx.beginPath()\n        ctx.moveTo(OUTER_POINT, 0)\n        ctx.lineTo(MINOR_INNER_POINT, 0)\n        ctx.closePath()\n        ctx.stroke()\n      }\n      ctx.rotate(rotationStep)\n    }\n\n    ctx.translate(-centerX, -centerY)\n    ctx.restore()\n  }\n\n  // **************   Initialization  ********************\n  // Draw all static painting code to background\n  const init = function (parameters) {\n    parameters = parameters || {}\n    const drawFrame2 =\n      undefined === parameters.frame ? false : parameters.frame\n    const drawBackground2 =\n      undefined === parameters.background ? false : parameters.background\n    const drawLed = undefined === parameters.led ? false : parameters.led\n    const drawPointer =\n      undefined === parameters.pointer ? false : parameters.pointer\n    const drawForeground2 =\n      undefined === parameters.foreground ? false : parameters.foreground\n\n    initialized = true\n\n    // Calculate the current min and max values and the range\n    calculate()\n\n    // Create frame in frame buffer (backgroundBuffer)\n    if (drawFrame2 && frameVisible) {\n      drawFrame(\n        frameContext,\n        frameDesign,\n        centerX,\n        size / 2,\n        imageWidth,\n        imageHeight\n      )\n    }\n\n    // Create background in background buffer (backgroundBuffer)\n    if (drawBackground2 && backgroundVisible) {\n      drawBackground(\n        backgroundContext,\n        backgroundColor,\n        centerX,\n        size / 2,\n        imageWidth,\n        imageHeight\n      )\n    }\n\n    // Draw LED ON in ledBuffer_ON\n    if (drawLed) {\n      ledContextOn.drawImage(\n        createLedImage(Math.ceil(size * 0.093457), 1, ledColor),\n        0,\n        0\n      )\n\n      // Draw LED ON in ledBuffer_OFF\n      ledContextOff.drawImage(\n        createLedImage(Math.ceil(size * 0.093457), 0, ledColor),\n        0,\n        0\n      )\n    }\n\n    // Draw min measured value indicator in minMeasuredValueBuffer\n    if (minMeasuredValueVisible) {\n      minMeasuredValueCtx.drawImage(\n        createMeasuredValueImage(\n          Math.ceil(size * 0.028037),\n          ColorDef.BLUE.dark.getRgbaColor(),\n          true,\n          true\n        ),\n        0,\n        0\n      )\n      minMeasuredValueCtx.restore()\n    }\n\n    // Draw max measured value indicator in maxMeasuredValueBuffer\n    if (maxMeasuredValueVisible) {\n      maxMeasuredValueCtx.drawImage(\n        createMeasuredValueImage(\n          Math.ceil(size * 0.028037),\n          ColorDef.RED.medium.getRgbaColor(),\n          true\n        ),\n        0,\n        0\n      )\n      maxMeasuredValueCtx.restore()\n    }\n\n    // Create alignment posts in background buffer (backgroundBuffer)\n    if (drawBackground2 && backgroundVisible) {\n      drawPostsImage(backgroundContext)\n\n      // Create section in background buffer (backgroundBuffer)\n      if (section !== null && section.length > 0) {\n        backgroundContext.save()\n        if (Orientation.WEST === orientation) {\n          backgroundContext.translate(centerX, centerX)\n          backgroundContext.rotate(-HALF_PI)\n          backgroundContext.translate(-centerX, -centerX)\n        } else if (Orientation.EAST === orientation) {\n          backgroundContext.translate(centerX, centerX)\n          backgroundContext.rotate(HALF_PI)\n          backgroundContext.translate(-centerX, -centerX)\n        }\n        let sectionIndex = section.length\n        do {\n          sectionIndex--\n          drawAreaSectionImage(\n            backgroundContext,\n            section[sectionIndex].start,\n            section[sectionIndex].stop,\n            section[sectionIndex].color,\n            false\n          )\n        } while (sectionIndex > 0)\n        backgroundContext.restore()\n      }\n\n      // Create area in background buffer (backgroundBuffer)\n      if (area !== null && area.length > 0) {\n        if (Orientation.WEST === orientation) {\n          backgroundContext.translate(centerX, centerX)\n          backgroundContext.rotate(-HALF_PI)\n          backgroundContext.translate(-centerX, -centerX)\n        }\n        if (Orientation.EAST === orientation) {\n          backgroundContext.translate(centerX, centerX)\n          backgroundContext.rotate(HALF_PI)\n          backgroundContext.translate(-centerX, -centerX)\n        }\n        let areaIndex = area.length\n        do {\n          areaIndex--\n          drawAreaSectionImage(\n            backgroundContext,\n            area[areaIndex].start,\n            area[areaIndex].stop,\n            area[areaIndex].color,\n            true\n          )\n        } while (areaIndex > 0)\n        backgroundContext.restore()\n      }\n\n      // Create tickmarks in background buffer (backgroundBuffer)\n      drawTickmarksImage(backgroundContext, labelNumberFormat)\n\n      // Create title in background buffer (backgroundBuffer)\n      drawTitleImage(backgroundContext)\n    }\n\n    // Draw threshold image to background context\n    if (thresholdVisible) {\n      backgroundContext.save()\n      if (Orientation.WEST === orientation) {\n        backgroundContext.translate(centerX, centerX)\n        backgroundContext.rotate(-HALF_PI)\n        backgroundContext.translate(-centerX, -centerX)\n      }\n      if (Orientation.EAST === orientation) {\n        backgroundContext.translate(centerX, centerX)\n        backgroundContext.rotate(HALF_PI)\n        backgroundContext.translate(-centerX, -centerX)\n      }\n      backgroundContext.translate(centerX, centerY)\n      backgroundContext.rotate(\n        rotationOffset + (threshold - minValue) * angleStep + HALF_PI\n      )\n      backgroundContext.translate(-centerX, -centerY)\n      backgroundContext.drawImage(\n        createThresholdImage(),\n        imageWidth * 0.475,\n        imageHeight * 0.32\n      )\n      backgroundContext.restore()\n    }\n\n    // Create pointer image in pointer buffer (contentBuffer)\n    if (drawPointer) {\n      drawPointerImage(\n        pointerContext,\n        imageWidth * 1.17,\n        pointerType,\n        pointerColor,\n        backgroundColor.labelColor\n      )\n    }\n\n    // Create foreground in foreground buffer (foregroundBuffer)\n    if (drawForeground2 && foregroundVisible) {\n      const knobVisible =\n        !(pointerType.type === 'type15' || pointerType.type === 'type16')\n      drawForeground(\n        foregroundContext,\n        foregroundType,\n        imageWidth,\n        imageHeight,\n        knobVisible,\n        knobType,\n        knobStyle,\n        gaugeType,\n        orientation\n      )\n    }\n  }\n\n  const resetBuffers = function (buffers) {\n    buffers = buffers || {}\n    const resetFrame = undefined === buffers.frame ? false : buffers.frame\n    const resetBackground =\n      undefined === buffers.background ? false : buffers.background\n    const resetLed = undefined === buffers.led ? false : buffers.led\n    const resetPointer =\n      undefined === buffers.pointer ? false : buffers.pointer\n    const resetForeground =\n      undefined === buffers.foreground ? false : buffers.foreground\n\n    if (resetFrame) {\n      frameBuffer.width = size\n      frameBuffer.height = size\n      frameContext = frameBuffer.getContext('2d')\n    }\n\n    if (resetBackground) {\n      backgroundBuffer.width = size\n      backgroundBuffer.height = size\n      backgroundContext = backgroundBuffer.getContext('2d')\n    }\n\n    if (resetLed) {\n      ledBufferOn.width = Math.ceil(size * 0.093457)\n      ledBufferOn.height = Math.ceil(size * 0.093457)\n      ledContextOn = ledBufferOn.getContext('2d')\n\n      ledBufferOff.width = Math.ceil(size * 0.093457)\n      ledBufferOff.height = Math.ceil(size * 0.093457)\n      ledContextOff = ledBufferOff.getContext('2d')\n\n      // Buffer for current led painting code\n      ledBuffer = ledBufferOff\n    }\n\n    if (resetPointer) {\n      pointerBuffer.width = size\n      pointerBuffer.height = size\n      pointerContext = pointerBuffer.getContext('2d')\n    }\n\n    if (resetForeground) {\n      foregroundBuffer.width = size\n      foregroundBuffer.height = size\n      foregroundContext = foregroundBuffer.getContext('2d')\n    }\n  }\n\n  const blink = function (blinking) {\n    if (blinking) {\n      ledTimerId = setInterval(toggleAndRepaintLed, 1000)\n    } else {\n      clearInterval(ledTimerId)\n      ledBuffer = ledBufferOff\n    }\n  }\n\n  const toggleAndRepaintLed = function () {\n    if (ledVisible) {\n      if (ledBuffer === ledBufferOn) {\n        ledBuffer = ledBufferOff\n      } else {\n        ledBuffer = ledBufferOn\n      }\n      if (!repainting) {\n        repainting = true\n        requestAnimFrame(self.repaint)\n      }\n    }\n  }\n\n  //* *********************************** Public methods **************************************\n  this.setValue = function (newValue) {\n    newValue = parseFloat(newValue)\n    const targetValue =\n      newValue < minValue\n        ? minValue\n        : newValue > maxValue\n          ? maxValue\n          : newValue\n    if (value !== targetValue) {\n      value = targetValue\n\n      if (value > maxMeasuredValue) {\n        maxMeasuredValue = value\n      }\n      if (value < minMeasuredValue) {\n        minMeasuredValue = value\n      }\n\n      if (\n        (value >= threshold && !ledBlinking && thresholdRising) ||\n        (value <= threshold && !ledBlinking && !thresholdRising)\n      ) {\n        ledBlinking = true\n        blink(ledBlinking)\n        if (playAlarm) {\n          audioElement.play()\n        }\n      } else if (\n        (value < threshold && ledBlinking && thresholdRising) ||\n        (value > threshold && ledBlinking && !thresholdRising)\n      ) {\n        ledBlinking = false\n        blink(ledBlinking)\n        if (playAlarm) {\n          audioElement.pause()\n        }\n      }\n\n      this.repaint()\n    }\n    return this\n  }\n\n  this.getValue = function () {\n    return value\n  }\n\n  this.setValueAnimated = function (newValue, callback) {\n    newValue = parseFloat(newValue)\n    const targetValue =\n      newValue < minValue\n        ? minValue\n        : newValue > maxValue\n          ? maxValue\n          : newValue\n    const gauge = this\n    let time\n\n    if (value !== targetValue) {\n      if (undefined !== tween && tween.isPlaying) {\n        tween.stop()\n      }\n\n      time =\n        (fullScaleDeflectionTime * Math.abs(targetValue - value)) /\n        (maxValue - minValue)\n      time = Math.max(time, fullScaleDeflectionTime / 5)\n      tween = new Tween(\n        {},\n        '',\n        Tween.regularEaseInOut,\n        value,\n        targetValue,\n        time\n      )\n      // tween = new Tween({}, '', Tween.regularEaseInOut, value, targetValue, 1);\n      // tween = new Tween(new Object(), '', Tween.strongEaseInOut, value, targetValue, 1);\n      tween.onMotionChanged = function (event) {\n        value = event.target._pos\n\n        if (\n          (value >= threshold && !ledBlinking && thresholdRising) ||\n          (value <= threshold && !ledBlinking && !thresholdRising)\n        ) {\n          ledBlinking = true\n          blink(ledBlinking)\n          if (playAlarm) {\n            audioElement.play()\n          }\n        } else if (\n          (value < threshold && ledBlinking && thresholdRising) ||\n          (value > threshold && ledBlinking && !thresholdRising)\n        ) {\n          ledBlinking = false\n          blink(ledBlinking)\n          if (playAlarm) {\n            audioElement.pause()\n          }\n        }\n\n        if (value > maxMeasuredValue) {\n          maxMeasuredValue = value\n        }\n        if (value < minMeasuredValue) {\n          minMeasuredValue = value\n        }\n\n        if (!repainting) {\n          repainting = true\n          requestAnimFrame(gauge.repaint)\n        }\n      }\n\n      // do we have a callback function to process?\n      if (callback && typeof callback === 'function') {\n        tween.onMotionFinished = callback\n      }\n\n      tween.start()\n    }\n    return this\n  }\n\n  this.setMinValue = function (newValue) {\n    minValue = parseFloat(newValue)\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.getMinValue = function () {\n    return minValue\n  }\n\n  this.setMaxValue = function (newValue) {\n    maxValue = parseFloat(newValue)\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.getMaxValue = function () {\n    return maxValue\n  }\n\n  this.setMaxMeasuredValue = function (newValue) {\n    newValue = parseFloat(newValue)\n    const targetValue =\n      newValue < minValue\n        ? minValue\n        : newValue > maxValue\n          ? maxValue\n          : newValue\n    maxMeasuredValue = targetValue\n    this.repaint()\n    return this\n  }\n\n  this.setMinMeasuredValue = function (newValue) {\n    newValue = parseFloat(newValue)\n    const targetValue =\n      newValue < minValue\n        ? minValue\n        : newValue > maxValue\n          ? maxValue\n          : newValue\n    minMeasuredValue = targetValue\n    this.repaint()\n    return this\n  }\n\n  this.resetMinMeasuredValue = function () {\n    minMeasuredValue = value\n    this.repaint()\n    return this\n  }\n\n  this.resetMaxMeasuredValue = function () {\n    maxMeasuredValue = value\n    this.repaint()\n    return this\n  }\n\n  this.setMinMeasuredValueVisible = function (visible) {\n    minMeasuredValueVisible = !!visible\n    this.repaint()\n    return this\n  }\n\n  this.setMaxMeasuredValueVisible = function (visible) {\n    maxMeasuredValueVisible = !!visible\n    this.repaint()\n    return this\n  }\n\n  this.setThresholdVisible = function (visible) {\n    thresholdVisible = !!visible\n    this.repaint()\n    return this\n  }\n\n  this.setThresholdRising = function (rising) {\n    thresholdRising = !!rising\n    // reset existing threshold alerts\n    ledBlinking = !ledBlinking\n    blink(ledBlinking)\n    this.repaint()\n    return this\n  }\n\n  this.setFrameDesign = function (newFrameDesign) {\n    resetBuffers({\n      frame: true\n    })\n    frameDesign = newFrameDesign\n    init({\n      frame: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setBackgroundColor = function (newBackgroundColor) {\n    resetBuffers({\n      background: true,\n      pointer:\n        !!(pointerType.type === 'type2' || pointerType.type === 'type13') // type2 & 13 depend on background\n    })\n    backgroundColor = newBackgroundColor\n    init({\n      background: true,\n      pointer:\n        !!(pointerType.type === 'type2' || pointerType.type === 'type13') // type2 & 13 depend on background\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setForegroundType = function (newForegroundType) {\n    resetBuffers({\n      foreground: true\n    })\n    foregroundType = newForegroundType\n    init({\n      foreground: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setPointerType = function (newPointerType) {\n    resetBuffers({\n      pointer: true,\n      foreground: true // Required as type15 does not need a knob\n    })\n    pointerType = newPointerType\n    init({\n      pointer: true,\n      foreground: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setPointerColor = function (newPointerColor) {\n    resetBuffers({\n      pointer: true\n    })\n    pointerColor = newPointerColor\n    init({\n      pointer: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setLedColor = function (newLedColor) {\n    resetBuffers({\n      led: true\n    })\n    ledColor = newLedColor\n    init({\n      led: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setLedVisible = function (visible) {\n    ledVisible = !!visible\n    this.repaint()\n    return this\n  }\n\n  this.repaint = function () {\n    if (!initialized) {\n      init({\n        frame: true,\n        background: true,\n        led: true,\n        pointer: true,\n        foreground: true\n      })\n    }\n\n    mainCtx.clearRect(0, 0, size, size)\n    mainCtx.save()\n\n    // Draw frame\n    if (frameVisible) {\n      mainCtx.drawImage(frameBuffer, 0, 0)\n    }\n\n    // Draw buffered image to visible canvas\n    mainCtx.drawImage(backgroundBuffer, 0, 0)\n\n    // Draw led\n    if (ledVisible) {\n      mainCtx.drawImage(ledBuffer, ledPosX, ledPosY)\n    }\n\n    if (Orientation.WEST === orientation) {\n      mainCtx.translate(centerX, centerX)\n      mainCtx.rotate(-HALF_PI)\n      mainCtx.translate(-centerX, -centerX)\n    }\n    if (Orientation.EAST === orientation) {\n      mainCtx.translate(centerX, centerX)\n      mainCtx.rotate(HALF_PI)\n      mainCtx.translate(-centerX, -centerX)\n    }\n\n    // Draw min measured value indicator\n    if (minMeasuredValueVisible) {\n      mainCtx.save()\n      mainCtx.translate(centerX, centerY)\n      mainCtx.rotate(\n        rotationOffset + HALF_PI + (minMeasuredValue - minValue) * angleStep\n      )\n      mainCtx.translate(-centerX, -centerY)\n      mainCtx.drawImage(\n        minMeasuredValueBuffer,\n        mainCtx.canvas.width * 0.4865,\n        mainCtx.canvas.height * 0.27\n      )\n      mainCtx.restore()\n    }\n\n    // Draw max measured value indicator\n    if (maxMeasuredValueVisible) {\n      mainCtx.save()\n      mainCtx.translate(centerX, centerY)\n      mainCtx.rotate(\n        rotationOffset + HALF_PI + (maxMeasuredValue - minValue) * angleStep\n      )\n      mainCtx.translate(-centerX, -centerY)\n      mainCtx.drawImage(\n        maxMeasuredValueBuffer,\n        mainCtx.canvas.width * 0.4865,\n        mainCtx.canvas.height * 0.27\n      )\n      mainCtx.restore()\n    }\n\n    angle = rotationOffset + HALF_PI + (value - minValue) * angleStep\n\n    // Define rotation center\n    mainCtx.save()\n    mainCtx.translate(centerX, centerY)\n    mainCtx.rotate(angle)\n    // Set the pointer shadow params\n    mainCtx.shadowColor = 'rgba(0, 0, 0, 0.8)'\n    mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset\n    mainCtx.shadowBlur = shadowOffset * 2\n    // Draw pointer\n    mainCtx.translate(-pointerOffset, -pointerOffset)\n    mainCtx.drawImage(pointerBuffer, 0, 0)\n    // Undo the translations & shadow settings\n    mainCtx.restore()\n\n    // Draw foreground\n    if (foregroundVisible) {\n      if (Orientation.WEST === orientation) {\n        mainCtx.translate(centerX, centerX)\n        mainCtx.rotate(HALF_PI)\n        mainCtx.translate(-centerX, -centerX)\n      } else if (Orientation.EAST === orientation) {\n        mainCtx.translate(centerX, centerX)\n        mainCtx.rotate(-HALF_PI)\n        mainCtx.translate(-centerX, -centerX)\n      }\n      mainCtx.drawImage(foregroundBuffer, 0, 0)\n    }\n    mainCtx.restore()\n\n    repainting = false\n  }\n\n  // Visualize the component\n  this.repaint()\n\n  return this\n}\n\nexport default RadialVertical\n","import carbonBuffer from './carbonBuffer'\nimport punchedSheetBuffer from './punchedSheetBuffer'\nimport brushedMetalTexture from './brushedMetalTexture'\nimport {\n  rgbaColor,\n  ConicalGradient,\n  roundedRectangle,\n  createBuffer,\n  TWO_PI\n} from './tools'\n\nconst drawLinearBackgroundImage = function (\n  ctx,\n  backgroundColor,\n  imageWidth,\n  imageHeight,\n  vertical\n) {\n  let i\n  let end\n  let grad\n  let fractions\n  let colors\n  let frameWidth\n  let linBBuffer\n  let linBCtx\n  let radius\n  let turnRadius\n  let centerX\n  let centerY\n  let stepSize\n  let mono\n  let textureColor\n  let texture\n  const cacheKey =\n    imageWidth.toString() + imageHeight + vertical + backgroundColor.name\n\n  // check if we have already created and cached this buffer, if not create it\n  if (!drawLinearBackgroundImage.cache[cacheKey]) {\n    frameWidth =\n      Math.sqrt(imageWidth * imageWidth + imageHeight * imageHeight) * 0.04\n    frameWidth =\n      Math.ceil(\n        Math.min(frameWidth, (vertical ? imageWidth : imageHeight) * 0.1)\n      ) - 1\n\n    const CORNER_RADIUS = Math.floor(\n      (vertical ? imageWidth : imageHeight) * 0.028571\n    )\n    // Setup buffer\n    linBBuffer = createBuffer(imageWidth, imageHeight)\n    linBCtx = linBBuffer.getContext('2d')\n    linBCtx.lineWidth = 0\n\n    roundedRectangle(\n      linBCtx,\n      frameWidth,\n      frameWidth,\n      imageWidth - frameWidth * 2,\n      imageHeight - frameWidth * 2,\n      CORNER_RADIUS\n    )\n\n    // If the backgroundColor is a texture fill it with the texture instead of the gradient\n    if (\n      backgroundColor.name === 'CARBON' ||\n      backgroundColor.name === 'PUNCHED_SHEET' ||\n      backgroundColor.name === 'STAINLESS' ||\n      backgroundColor.name === 'BRUSHED_METAL' ||\n      backgroundColor.name === 'BRUSHED_STAINLESS' ||\n      backgroundColor.name === 'TURNED'\n    ) {\n      if (backgroundColor.name === 'CARBON') {\n        linBCtx.fillStyle = linBCtx.createPattern(carbonBuffer, 'repeat')\n        linBCtx.fill()\n      }\n\n      if (backgroundColor.name === 'PUNCHED_SHEET') {\n        linBCtx.fillStyle = linBCtx.createPattern(punchedSheetBuffer, 'repeat')\n        linBCtx.fill()\n      }\n\n      if (\n        backgroundColor.name === 'STAINLESS' ||\n        backgroundColor.name === 'TURNED'\n      ) {\n        // Define the fraction of the conical gradient paint\n        fractions = [\n          0,\n          0.03,\n          0.1,\n          0.14,\n          0.24,\n          0.33,\n          0.38,\n          0.5,\n          0.62,\n          0.67,\n          0.76,\n          0.81,\n          0.85,\n          0.97,\n          1\n        ]\n\n        // Define the colors of the conical gradient paint\n        colors = [\n          new rgbaColor('#FDFDFD'),\n          new rgbaColor('#FDFDFD'),\n          new rgbaColor('#B2B2B4'),\n          new rgbaColor('#ACACAE'),\n          new rgbaColor('#FDFDFD'),\n          new rgbaColor('#8E8E8E'),\n          new rgbaColor('#8E8E8E'),\n          new rgbaColor('#FDFDFD'),\n          new rgbaColor('#8E8E8E'),\n          new rgbaColor('#8E8E8E'),\n          new rgbaColor('#FDFDFD'),\n          new rgbaColor('#ACACAE'),\n          new rgbaColor('#B2B2B4'),\n          new rgbaColor('#FDFDFD'),\n          new rgbaColor('#FDFDFD')\n        ]\n        grad = new ConicalGradient(fractions, colors)\n        // Set a clip as we will be drawing outside the required area\n        linBCtx.clip()\n        grad.fillRect(\n          linBCtx,\n          imageWidth / 2,\n          imageHeight / 2,\n          imageWidth - frameWidth * 2,\n          imageHeight - frameWidth * 2,\n          imageWidth / 2,\n          imageHeight / 2\n        )\n        // Add an additional inner shadow to fade out brightness at the top\n        grad = linBCtx.createLinearGradient(\n          0,\n          frameWidth,\n          0,\n          imageHeight - frameWidth * 2\n        )\n        grad.addColorStop(0, 'rgba(0, 0, 0, 0.25)')\n        grad.addColorStop(0.1, 'rgba(0, 0, 0, 0.05)')\n        grad.addColorStop(1, 'rgba(0, 0, 0, 0)')\n        linBCtx.fillStyle = grad\n        linBCtx.fill()\n\n        if (backgroundColor.name === 'TURNED') {\n          // Define the turning radius\n          radius =\n            Math.sqrt(\n              (imageWidth - frameWidth * 2) * (imageWidth - frameWidth * 2) +\n                (imageHeight - frameWidth * 2) * (imageHeight - frameWidth * 2)\n            ) / 2\n          turnRadius = radius * 0.55\n          centerX = imageWidth / 2\n          centerY = imageHeight / 2\n          // Step size proporational to radius\n          stepSize = (TWO_PI / 360) * (400 / radius)\n\n          // Save before we start\n          linBCtx.save()\n\n          // Set a clip as we will be drawing outside the required area\n          roundedRectangle(\n            linBCtx,\n            frameWidth,\n            frameWidth,\n            imageWidth - frameWidth * 2,\n            imageHeight - frameWidth * 2,\n            CORNER_RADIUS\n          )\n          linBCtx.clip()\n\n          // set the style for the turnings\n          linBCtx.lineWidth = 0.5\n          end = TWO_PI - stepSize * 0.3\n          // Step the engine round'n'round\n          for (i = 0; i < end; i += stepSize) {\n            // draw a 'turn'\n            linBCtx.strokeStyle = 'rgba(240, 240, 255, 0.25)'\n            linBCtx.beginPath()\n            linBCtx.arc(centerX + turnRadius, centerY, turnRadius, 0, TWO_PI)\n            linBCtx.stroke()\n            // rotate the 'piece'\n            linBCtx.translate(centerX, centerY)\n            linBCtx.rotate(stepSize * 0.3)\n            linBCtx.translate(-centerX, -centerY)\n            // draw a 'turn'\n            linBCtx.strokeStyle = 'rgba(25, 10, 10, 0.1)'\n            linBCtx.beginPath()\n            linBCtx.arc(centerX + turnRadius, centerY, turnRadius, 0, TWO_PI)\n            linBCtx.stroke()\n            linBCtx.translate(centerX, centerY)\n            linBCtx.rotate(-stepSize * 0.3)\n            linBCtx.translate(-centerX, -centerY)\n\n            // rotate the 'piece'\n            linBCtx.translate(centerX, centerY)\n            linBCtx.rotate(stepSize)\n            linBCtx.translate(-centerX, -centerY)\n          }\n          // Restore canvas now we are done\n          linBCtx.restore()\n        }\n      }\n      // Add an additional inner shadow to make the look more realistic\n      grad = linBCtx.createLinearGradient(\n        frameWidth,\n        frameWidth,\n        imageWidth - frameWidth * 2,\n        imageHeight - frameWidth * 2\n      )\n      grad.addColorStop(0, 'rgba(0, 0, 0, 0.25)')\n      grad.addColorStop(0.5, 'rgba(0, 0, 0, 0)')\n      grad.addColorStop(1, 'rgba(0, 0, 0, 0.25)')\n      linBCtx.fillStyle = grad\n      roundedRectangle(\n        linBCtx,\n        frameWidth,\n        frameWidth,\n        imageWidth - frameWidth * 2,\n        imageHeight - frameWidth * 2,\n        CORNER_RADIUS\n      )\n      linBCtx.fill()\n\n      if (\n        backgroundColor.name === 'BRUSHED_METAL' ||\n        backgroundColor.name === 'BRUSHED_STAINLESS'\n      ) {\n        mono = backgroundColor.name === 'BRUSHED_METAL'\n        textureColor = parseInt(\n          backgroundColor.gradientStop.getHexColor().substr(-6),\n          16\n        )\n        texture = brushedMetalTexture(textureColor, 5, 0.1, mono, 0.5)\n        linBCtx.fillStyle = linBCtx.createPattern(\n          texture.fill(0, 0, imageWidth, imageHeight),\n          'no-repeat'\n        )\n        linBCtx.fill()\n      }\n    } else {\n      grad = linBCtx.createLinearGradient(\n        0,\n        frameWidth,\n        0,\n        imageHeight - frameWidth * 2\n      )\n      grad.addColorStop(0, backgroundColor.gradientStart.getRgbaColor())\n      grad.addColorStop(0.4, backgroundColor.gradientFraction.getRgbaColor())\n      grad.addColorStop(1, backgroundColor.gradientStop.getRgbaColor())\n      linBCtx.fillStyle = grad\n      linBCtx.fill()\n    }\n    // Add a simple inner shadow\n    colors = [\n      'rgba(0, 0, 0, 0.30)',\n      'rgba(0, 0, 0, 0.20)',\n      'rgba(0, 0, 0, 0.13)',\n      'rgba(0, 0, 0, 0.09)',\n      'rgba(0, 0, 0, 0.06)',\n      'rgba(0, 0, 0, 0.04)',\n      'rgba(0, 0, 0, 0.03)'\n    ]\n    for (i = 0; i < 7; i++) {\n      linBCtx.strokeStyle = colors[i]\n      roundedRectangle(\n        linBCtx,\n        frameWidth + i,\n        frameWidth + i,\n        imageWidth - frameWidth * 2 - 2 * i,\n        imageHeight - frameWidth * 2 - 2 * i,\n        CORNER_RADIUS\n      )\n      linBCtx.stroke()\n    }\n    // cache the buffer\n    drawLinearBackgroundImage.cache[cacheKey] = linBBuffer\n  }\n  ctx.drawImage(drawLinearBackgroundImage.cache[cacheKey], 0, 0)\n  return this\n}\ndrawLinearBackgroundImage.cache = {}\n\nexport default drawLinearBackgroundImage\n","import { createBuffer } from './tools'\n\nconst drawLinearForegroundImage = function (\n  ctx,\n  imageWidth,\n  imageHeight,\n  vertical\n) {\n  let linFgBuffer\n  let linFgCtx\n  let foregroundGradient\n  let frameWidth\n  let fgOffset\n  let fgOffset2\n  const cacheKey = imageWidth.toString() + imageHeight + vertical\n\n  // check if we have already created and cached this buffer, if not create it\n  if (!drawLinearForegroundImage.cache[cacheKey]) {\n    // Setup buffer\n    linFgBuffer = createBuffer(imageWidth, imageHeight)\n    linFgCtx = linFgBuffer.getContext('2d')\n\n    frameWidth =\n      Math.sqrt(imageWidth * imageWidth + imageHeight * imageHeight) * 0.04\n    frameWidth = Math.min(\n      frameWidth,\n      (vertical ? imageWidth : imageHeight) * 0.1\n    )\n    fgOffset = frameWidth * 1.3\n    fgOffset2 = fgOffset * 1.33\n\n    linFgCtx.beginPath()\n    linFgCtx.moveTo(fgOffset, imageHeight - fgOffset)\n    linFgCtx.lineTo(imageWidth - fgOffset, imageHeight - fgOffset)\n    linFgCtx.bezierCurveTo(\n      imageWidth - fgOffset,\n      imageHeight - fgOffset,\n      imageWidth - fgOffset2,\n      imageHeight * 0.7,\n      imageWidth - fgOffset2,\n      imageHeight * 0.5\n    )\n    linFgCtx.bezierCurveTo(\n      imageWidth - fgOffset2,\n      fgOffset2,\n      imageWidth - fgOffset,\n      fgOffset,\n      imageWidth - frameWidth,\n      fgOffset\n    )\n    linFgCtx.lineTo(fgOffset, fgOffset)\n    linFgCtx.bezierCurveTo(\n      fgOffset,\n      fgOffset,\n      fgOffset2,\n      imageHeight * 0.285714,\n      fgOffset2,\n      imageHeight * 0.5\n    )\n    linFgCtx.bezierCurveTo(\n      fgOffset2,\n      imageHeight * 0.7,\n      fgOffset,\n      imageHeight - fgOffset,\n      frameWidth,\n      imageHeight - fgOffset\n    )\n    linFgCtx.closePath()\n\n    foregroundGradient = linFgCtx.createLinearGradient(\n      0,\n      imageHeight - frameWidth,\n      0,\n      frameWidth\n    )\n    foregroundGradient.addColorStop(0, 'rgba(255, 255, 255, 0)')\n    foregroundGradient.addColorStop(0.06, 'rgba(255, 255, 255, 0)')\n    foregroundGradient.addColorStop(0.07, 'rgba(255, 255, 255, 0)')\n    foregroundGradient.addColorStop(0.12, 'rgba(255, 255, 255, 0)')\n    foregroundGradient.addColorStop(0.17, 'rgba(255, 255, 255, 0.013546)')\n    foregroundGradient.addColorStop(0.1701, 'rgba(255, 255, 255, 0)')\n    foregroundGradient.addColorStop(0.79, 'rgba(255, 255, 255, 0)')\n    foregroundGradient.addColorStop(0.8, 'rgba(255, 255, 255, 0)')\n    foregroundGradient.addColorStop(0.84, 'rgba(255, 255, 255, 0.082217)')\n    foregroundGradient.addColorStop(0.93, 'rgba(255, 255, 255, 0.288702)')\n    foregroundGradient.addColorStop(0.94, 'rgba(255, 255, 255, 0.298039)')\n    foregroundGradient.addColorStop(0.96, 'rgba(255, 255, 255, 0.119213)')\n    foregroundGradient.addColorStop(0.97, 'rgba(255, 255, 255, 0)')\n    foregroundGradient.addColorStop(1, 'rgba(255, 255, 255, 0)')\n    linFgCtx.fillStyle = foregroundGradient\n    linFgCtx.fill()\n\n    // cache the buffer\n    drawLinearForegroundImage.cache[cacheKey] = linFgBuffer\n  }\n  ctx.drawImage(drawLinearForegroundImage.cache[cacheKey], 0, 0)\n  return this\n}\ndrawLinearForegroundImage.cache = {}\n\nexport default drawLinearForegroundImage\n","import {\n  rgbaColor,\n  ConicalGradient,\n  roundedRectangle,\n  createBuffer\n} from './tools'\n\nconst drawLinearFrameImage = function (\n  ctx,\n  frameDesign,\n  imageWidth,\n  imageHeight,\n  vertical\n) {\n  let frameWidth\n  let linFBuffer\n  let linFCtx\n  let OUTER_FRAME_CORNER_RADIUS\n  let FRAME_MAIN_CORNER_RADIUS\n  let SUBTRACT_CORNER_RADIUS\n  let grad\n  let fractions = []\n  let colors = []\n  const cacheKey =\n    imageWidth.toString() + imageHeight + frameDesign.design + vertical\n\n  // check if we have already created and cached this buffer, if not create it\n  if (!drawLinearFrameImage.cache[cacheKey]) {\n    frameWidth =\n      Math.sqrt(imageWidth * imageWidth + imageHeight * imageHeight) * 0.04\n    frameWidth = Math.ceil(\n      Math.min(frameWidth, (vertical ? imageWidth : imageHeight) * 0.1)\n    )\n\n    // Setup buffer\n    linFBuffer = createBuffer(imageWidth, imageHeight)\n    linFCtx = linFBuffer.getContext('2d')\n\n    // Calculate corner radii\n    if (vertical) {\n      OUTER_FRAME_CORNER_RADIUS = Math.ceil(imageWidth * 0.05)\n      FRAME_MAIN_CORNER_RADIUS = OUTER_FRAME_CORNER_RADIUS - 1\n      SUBTRACT_CORNER_RADIUS = Math.floor(imageWidth * 0.028571)\n    } else {\n      OUTER_FRAME_CORNER_RADIUS = Math.ceil(imageHeight * 0.05)\n      FRAME_MAIN_CORNER_RADIUS = OUTER_FRAME_CORNER_RADIUS - 1\n      SUBTRACT_CORNER_RADIUS = Math.floor(imageHeight * 0.028571)\n    }\n\n    roundedRectangle(\n      linFCtx,\n      0,\n      0,\n      imageWidth,\n      imageHeight,\n      OUTER_FRAME_CORNER_RADIUS\n    )\n    linFCtx.fillStyle = '#838383'\n    linFCtx.fill()\n\n    roundedRectangle(\n      linFCtx,\n      1,\n      1,\n      imageWidth - 2,\n      imageHeight - 2,\n      FRAME_MAIN_CORNER_RADIUS\n    )\n\n    // main gradient frame\n    switch (frameDesign.design) {\n      case 'metal':\n        grad = linFCtx.createLinearGradient(\n          0,\n          imageWidth * 0.004672,\n          0,\n          imageHeight * 0.990654\n        )\n        grad.addColorStop(0, '#fefefe')\n        grad.addColorStop(0.07, 'rgb(210, 210, 210)')\n        grad.addColorStop(0.12, 'rgb(179, 179, 179)')\n        grad.addColorStop(1, 'rgb(213, 213, 213)')\n        linFCtx.fillStyle = grad\n        linFCtx.fill()\n        break\n\n      case 'brass':\n        grad = linFCtx.createLinearGradient(\n          0,\n          imageWidth * 0.004672,\n          0,\n          imageHeight * 0.990654\n        )\n        grad.addColorStop(0, 'rgb(249, 243, 155)')\n        grad.addColorStop(0.05, 'rgb(246, 226, 101)')\n        grad.addColorStop(0.1, 'rgb(240, 225, 132)')\n        grad.addColorStop(0.5, 'rgb(90, 57, 22)')\n        grad.addColorStop(0.9, 'rgb(249, 237, 139)')\n        grad.addColorStop(0.95, 'rgb(243, 226, 108)')\n        grad.addColorStop(1, 'rgb(202, 182, 113)')\n        linFCtx.fillStyle = grad\n        linFCtx.fill()\n        break\n\n      case 'steel':\n        grad = linFCtx.createLinearGradient(\n          0,\n          imageWidth * 0.004672,\n          0,\n          imageHeight * 0.990654\n        )\n        grad.addColorStop(0, 'rgb(231, 237, 237)')\n        grad.addColorStop(0.05, 'rgb(189, 199, 198)')\n        grad.addColorStop(0.1, 'rgb(192, 201, 200)')\n        grad.addColorStop(0.5, 'rgb(23, 31, 33)')\n        grad.addColorStop(0.9, 'rgb(196, 205, 204)')\n        grad.addColorStop(0.95, 'rgb(194, 204, 203)')\n        grad.addColorStop(1, 'rgb(189, 201, 199)')\n        linFCtx.fillStyle = grad\n        linFCtx.fill()\n        break\n\n      case 'gold':\n        grad = linFCtx.createLinearGradient(\n          0,\n          imageWidth * 0.004672,\n          0,\n          imageHeight * 0.990654\n        )\n        grad.addColorStop(0, 'rgb(255, 255, 207)')\n        grad.addColorStop(0.15, 'rgb(255, 237, 96)')\n        grad.addColorStop(0.22, 'rgb(254, 199, 57)')\n        grad.addColorStop(0.3, 'rgb(255, 249, 203)')\n        grad.addColorStop(0.38, 'rgb(255, 199, 64)')\n        grad.addColorStop(0.44, 'rgb(252, 194, 60)')\n        grad.addColorStop(0.51, 'rgb(255, 204, 59)')\n        grad.addColorStop(0.6, 'rgb(213, 134, 29)')\n        grad.addColorStop(0.68, 'rgb(255, 201, 56)')\n        grad.addColorStop(0.75, 'rgb(212, 135, 29)')\n        grad.addColorStop(1, 'rgb(247, 238, 101)')\n        linFCtx.fillStyle = grad\n        linFCtx.fill()\n        break\n\n      case 'anthracite':\n        grad = linFCtx.createLinearGradient(\n          0,\n          0.004672 * imageHeight,\n          0,\n          0.995326 * imageHeight\n        )\n        grad.addColorStop(0, 'rgb(118, 117, 135)')\n        grad.addColorStop(0.06, 'rgb(74, 74, 82)')\n        grad.addColorStop(0.12, 'rgb(50, 50, 54)')\n        grad.addColorStop(1, 'rgb(79, 79, 87)')\n        linFCtx.fillStyle = grad\n        linFCtx.fill()\n        break\n\n      case 'tiltedGray':\n        grad = linFCtx.createLinearGradient(\n          0.233644 * imageWidth,\n          0.084112 * imageHeight,\n          0.81258 * imageWidth,\n          0.910919 * imageHeight\n        )\n        grad.addColorStop(0, '#ffffff')\n        grad.addColorStop(0.07, 'rgb(210, 210, 210)')\n        grad.addColorStop(0.16, 'rgb(179, 179, 179)')\n        grad.addColorStop(0.33, '#ffffff')\n        grad.addColorStop(0.55, '#c5c5c5')\n        grad.addColorStop(0.79, '#ffffff')\n        grad.addColorStop(1, '#666666')\n        linFCtx.fillStyle = grad\n        linFCtx.fill()\n        break\n\n      case 'tiltedBlack':\n        grad = linFCtx.createLinearGradient(\n          0.228971 * imageWidth,\n          0.079439 * imageHeight,\n          0.802547 * imageWidth,\n          0.898591 * imageHeight\n        )\n        grad.addColorStop(0, '#666666')\n        grad.addColorStop(0.21, '#000000')\n        grad.addColorStop(0.47, '#666666')\n        grad.addColorStop(0.99, '#000000')\n        grad.addColorStop(1, '#000000')\n        linFCtx.fillStyle = grad\n        linFCtx.fill()\n        break\n\n      case 'glossyMetal':\n        roundedRectangle(\n          linFCtx,\n          1,\n          1,\n          imageWidth - 2,\n          imageHeight - 2,\n          OUTER_FRAME_CORNER_RADIUS\n        )\n        linFCtx.clip()\n        grad = linFCtx.createLinearGradient(0, 1, 0, imageHeight - 2)\n        // The fractions from the Java version of linear gauge\n        /*\n                    grad.addColorStop(0, 'rgb(249, 249, 249)');\n                    grad.addColorStop(0.1, 'rgb(200, 195, 191)');\n                    grad.addColorStop(0.26, '#ffffff');\n                    grad.addColorStop(0.73, 'rgb(29, 29, 29)');\n                    grad.addColorStop(1, 'rgb(209, 209, 209)');\n        */\n        // Modified fractions from the radial gauge - looks better imho\n        grad.addColorStop(0, 'rgb(249, 249, 249)')\n        grad.addColorStop(0.2, 'rgb(200, 195, 191)')\n        grad.addColorStop(0.3, '#ffffff')\n        grad.addColorStop(0.6, 'rgb(29, 29, 29)')\n        grad.addColorStop(0.8, 'rgb(200, 194, 192)')\n        grad.addColorStop(1, 'rgb(209, 209, 209)')\n        linFCtx.fillStyle = grad\n        linFCtx.fill()\n\n        // Inner frame bright\n        roundedRectangle(\n          linFCtx,\n          frameWidth - 2,\n          frameWidth - 2,\n          imageWidth - (frameWidth - 2) * 2,\n          imageHeight - (frameWidth - 2) * 2,\n          SUBTRACT_CORNER_RADIUS\n        )\n        linFCtx.clip()\n        linFCtx.fillStyle = '#f6f6f6'\n        linFCtx.fill()\n\n        // Inner frame dark\n        roundedRectangle(\n          linFCtx,\n          frameWidth - 1,\n          frameWidth - 1,\n          imageWidth - (frameWidth - 1) * 2,\n          imageHeight - (frameWidth - 1) * 2,\n          SUBTRACT_CORNER_RADIUS\n        )\n        linFCtx.clip()\n        linFCtx.fillStyle = '#333333'\n        //                linFCtx.fill();\n        break\n\n      case 'blackMetal':\n        fractions = [0, 0.125, 0.347222, 0.5, 0.680555, 0.875, 1]\n\n        colors = [\n          new rgbaColor('#FFFFFF'),\n          new rgbaColor('#000000'),\n          new rgbaColor('#999999'),\n          new rgbaColor('#000000'),\n          new rgbaColor('#999999'),\n          new rgbaColor('#000000'),\n          new rgbaColor('#FFFFFF')\n        ]\n        // Set the clip\n        linFCtx.beginPath()\n        roundedRectangle(\n          linFCtx,\n          1,\n          1,\n          imageWidth - 2,\n          imageHeight - 2,\n          OUTER_FRAME_CORNER_RADIUS\n        )\n        linFCtx.closePath()\n        linFCtx.clip()\n        grad = new ConicalGradient(fractions, colors)\n        grad.fillRect(\n          linFCtx,\n          imageWidth / 2,\n          imageHeight / 2,\n          imageWidth,\n          imageHeight,\n          frameWidth,\n          frameWidth\n        )\n        break\n\n      case 'shinyMetal':\n        fractions = [0, 0.125, 0.25, 0.347222, 0.5, 0.652777, 0.75, 0.875, 1]\n\n        colors = [\n          new rgbaColor('#FFFFFF'),\n          new rgbaColor('#D2D2D2'),\n          new rgbaColor('#B3B3B3'),\n          new rgbaColor('#EEEEEE'),\n          new rgbaColor('#A0A0A0'),\n          new rgbaColor('#EEEEEE'),\n          new rgbaColor('#B3B3B3'),\n          new rgbaColor('#D2D2D2'),\n          new rgbaColor('#FFFFFF')\n        ]\n        // Set the clip\n        linFCtx.beginPath()\n        roundedRectangle(\n          linFCtx,\n          1,\n          1,\n          imageWidth - 2,\n          imageHeight - 2,\n          OUTER_FRAME_CORNER_RADIUS\n        )\n        linFCtx.closePath()\n        linFCtx.clip()\n        grad = new ConicalGradient(fractions, colors)\n        grad.fillRect(\n          linFCtx,\n          imageWidth / 2,\n          imageHeight / 2,\n          imageWidth,\n          imageHeight,\n          frameWidth,\n          frameWidth\n        )\n        break\n\n      case 'chrome':\n        fractions = [\n          0,\n          0.09,\n          0.12,\n          0.16,\n          0.25,\n          0.29,\n          0.33,\n          0.38,\n          0.48,\n          0.52,\n          0.63,\n          0.68,\n          0.8,\n          0.83,\n          0.87,\n          0.97,\n          1\n        ]\n\n        colors = [\n          new rgbaColor('#FFFFFF'),\n          new rgbaColor('#FFFFFF'),\n          new rgbaColor('#888890'),\n          new rgbaColor('#A4B9BE'),\n          new rgbaColor('#9EB3B6'),\n          new rgbaColor('#707070'),\n          new rgbaColor('#DDE3E3'),\n          new rgbaColor('#9BB0B3'),\n          new rgbaColor('#9CB0B1'),\n          new rgbaColor('#FEFFFF'),\n          new rgbaColor('#FFFFFF'),\n          new rgbaColor('#9CB4B4'),\n          new rgbaColor('#C6D1D3'),\n          new rgbaColor('#F6F8F7'),\n          new rgbaColor('#CCD8D8'),\n          new rgbaColor('#A4BCBE'),\n          new rgbaColor('#FFFFFF')\n        ]\n        // Set the clip\n        linFCtx.beginPath()\n        roundedRectangle(\n          linFCtx,\n          1,\n          1,\n          imageWidth - 2,\n          imageHeight - 2,\n          OUTER_FRAME_CORNER_RADIUS\n        )\n        linFCtx.closePath()\n        linFCtx.clip()\n        grad = new ConicalGradient(fractions, colors)\n        grad.fillRect(\n          linFCtx,\n          imageWidth / 2,\n          imageHeight / 2,\n          imageWidth,\n          imageHeight,\n          frameWidth,\n          frameWidth\n        )\n        break\n    }\n\n    roundedRectangle(\n      linFCtx,\n      frameWidth,\n      frameWidth,\n      imageWidth - frameWidth * 2,\n      imageHeight - frameWidth * 2,\n      SUBTRACT_CORNER_RADIUS\n    )\n    linFCtx.fillStyle = 'rgb(192, 192, 192)'\n\n    // clip out the center of the frame for transparent backgrounds\n    linFCtx.globalCompositeOperation = 'destination-out'\n    roundedRectangle(\n      linFCtx,\n      frameWidth,\n      frameWidth,\n      imageWidth - frameWidth * 2,\n      imageHeight - frameWidth * 2,\n      SUBTRACT_CORNER_RADIUS\n    )\n    linFCtx.fill()\n\n    // cache the buffer\n    drawLinearFrameImage.cache[cacheKey] = linFBuffer\n  }\n  ctx.drawImage(drawLinearFrameImage.cache[cacheKey], 0, 0)\n  return this\n}\ndrawLinearFrameImage.cache = {}\n\nexport default drawLinearFrameImage\n","import Tween from './tween.js'\nimport drawLinearBackgroundImage from './drawLinearBackgroundImage'\nimport drawLinearForegroundImage from './drawLinearForegroundImage'\nimport drawLinearFrameImage from './drawLinearFrameImage'\nimport createLedImage from './createLedImage'\nimport createLcdBackgroundImage from './createLcdBackgroundImage'\nimport createMeasuredValueImage from './createMeasuredValueImage'\nimport drawTitleImage from './drawTitleImage'\nimport {\n  calcNiceNumber,\n  createBuffer,\n  requestAnimFrame,\n  getCanvasContext,\n  HALF_PI,\n  doc,\n  lcdFontName,\n  stdFontName\n} from './tools'\n\nimport {\n  BackgroundColor,\n  LcdColor,\n  ColorDef,\n  LedColor,\n  GaugeType,\n  FrameDesign,\n  LabelNumberFormat\n} from './definitions'\n\nconst Linear = function (canvas, parameters) {\n  parameters = parameters || {}\n  let gaugeType =\n    undefined === parameters.gaugeType ? GaugeType.TYPE1 : parameters.gaugeType\n  let width = undefined === parameters.width ? 0 : parameters.width\n  let height = undefined === parameters.height ? 0 : parameters.height\n  let minValue = undefined === parameters.minValue ? 0 : parameters.minValue\n  let maxValue =\n    undefined === parameters.maxValue ? minValue + 100 : parameters.maxValue\n  const niceScale =\n    undefined === parameters.niceScale ? true : parameters.niceScale\n  let threshold =\n    undefined === parameters.threshold\n      ? (maxValue - minValue) / 2 + minValue\n      : parameters.threshold\n  let titleString =\n    undefined === parameters.titleString ? '' : parameters.titleString\n  let unitString =\n    undefined === parameters.unitString ? '' : parameters.unitString\n  let frameDesign =\n    undefined === parameters.frameDesign\n      ? FrameDesign.METAL\n      : parameters.frameDesign\n  const frameVisible =\n    undefined === parameters.frameVisible ? true : parameters.frameVisible\n  let backgroundColor =\n    undefined === parameters.backgroundColor\n      ? BackgroundColor.DARK_GRAY\n      : parameters.backgroundColor\n  const backgroundVisible =\n    undefined === parameters.backgroundVisible\n      ? true\n      : parameters.backgroundVisible\n  let valueColor =\n    undefined === parameters.valueColor ? ColorDef.RED : parameters.valueColor\n  let lcdColor =\n    undefined === parameters.lcdColor ? LcdColor.STANDARD : parameters.lcdColor\n  const lcdVisible =\n    undefined === parameters.lcdVisible ? true : parameters.lcdVisible\n  let lcdDecimals =\n    undefined === parameters.lcdDecimals ? 2 : parameters.lcdDecimals\n  const digitalFont =\n    undefined === parameters.digitalFont ? false : parameters.digitalFont\n  let ledColor =\n    undefined === parameters.ledColor ? LedColor.RED_LED : parameters.ledColor\n  let ledVisible =\n    undefined === parameters.ledVisible ? true : parameters.ledVisible\n  let thresholdVisible =\n    undefined === parameters.thresholdVisible\n      ? true\n      : parameters.thresholdVisible\n  let thresholdRising =\n    undefined === parameters.thresholdRising\n      ? true\n      : parameters.thresholdRising\n  let minMeasuredValueVisible =\n    undefined === parameters.minMeasuredValueVisible\n      ? false\n      : parameters.minMeasuredValueVisible\n  let maxMeasuredValueVisible =\n    undefined === parameters.maxMeasuredValueVisible\n      ? false\n      : parameters.maxMeasuredValueVisible\n  const labelNumberFormat =\n    undefined === parameters.labelNumberFormat\n      ? LabelNumberFormat.STANDARD\n      : parameters.labelNumberFormat\n  const foregroundVisible =\n    undefined === parameters.foregroundVisible\n      ? true\n      : parameters.foregroundVisible\n  const playAlarm =\n    undefined === parameters.playAlarm ? false : parameters.playAlarm\n  const alarmSound =\n    undefined === parameters.alarmSound ? false : parameters.alarmSound\n  const fullScaleDeflectionTime =\n    undefined === parameters.fullScaleDeflectionTime\n      ? 2.5\n      : parameters.fullScaleDeflectionTime\n\n  // Get the canvas context and clear it\n  const mainCtx = getCanvasContext(canvas)\n  // Has a size been specified?\n  if (width === 0) {\n    width = mainCtx.canvas.width\n  }\n  if (height === 0) {\n    height = mainCtx.canvas.height\n  }\n\n  // Set the size - also clears the canvas\n  mainCtx.canvas.width = width\n  mainCtx.canvas.height = height\n\n  const imageWidth = width\n  const imageHeight = height\n  let audioElement\n\n  // Create audio tag for alarm sound\n  if (playAlarm && alarmSound !== false) {\n    audioElement = doc.createElement('audio')\n    audioElement.setAttribute('src', alarmSound)\n    // audioElement.setAttribute('src', 'js/alarm.mp3');\n    audioElement.setAttribute('preload', 'auto')\n  }\n\n  const self = this\n  let value = minValue\n\n  // Properties\n  let minMeasuredValue = maxValue\n  let maxMeasuredValue = minValue\n\n  // Check gaugeType is 1 or 2\n  if (gaugeType.type !== 'type1' && gaugeType.type !== 'type2') {\n    gaugeType = GaugeType.TYPE1\n  }\n\n  let tween\n  let ledBlinking = false\n  let repainting = false\n\n  let ledTimerId = 0\n\n  const vertical = width <= height\n\n  // Constants\n  let ledPosX\n  let ledPosY\n  const ledSize = Math.round((vertical ? height : width) * 0.05)\n  const minMaxIndSize = Math.round((vertical ? width : height) * 0.05)\n  let stdFont\n  let lcdFont\n\n  // Misc\n  if (vertical) {\n    ledPosX = imageWidth / 2 - ledSize / 2\n    ledPosY = (gaugeType.type === 'type1' ? 0.053 : 0.038) * imageHeight\n    stdFont = Math.floor(imageHeight / 22) + 'px ' + stdFontName\n    lcdFont = Math.floor(imageHeight / 22) + 'px ' + lcdFontName\n  } else {\n    ledPosX = 0.89 * imageWidth\n    ledPosY = imageHeight / 2 - ledSize / 2\n    stdFont = Math.floor(imageHeight / 10) + 'px ' + stdFontName\n    lcdFont = Math.floor(imageHeight / 10) + 'px ' + lcdFontName\n  }\n\n  let initialized = false\n\n  // Tickmark specific private variables\n  let niceMinValue = minValue\n  let niceMaxValue = maxValue\n  let niceRange = maxValue - minValue\n  let minorTickSpacing = 0\n  let majorTickSpacing = 0\n  const maxNoOfMinorTicks = 10\n  const maxNoOfMajorTicks = 10\n\n  // Method to calculate nice values for min, max and range for the tickmarks\n  const calculate = function calculate () {\n    if (niceScale) {\n      niceRange = calcNiceNumber(maxValue - minValue, false)\n      majorTickSpacing = calcNiceNumber(\n        niceRange / (maxNoOfMajorTicks - 1),\n        true\n      )\n      niceMinValue = Math.floor(minValue / majorTickSpacing) * majorTickSpacing\n      niceMaxValue = Math.ceil(maxValue / majorTickSpacing) * majorTickSpacing\n      minorTickSpacing = calcNiceNumber(\n        majorTickSpacing / (maxNoOfMinorTicks - 1),\n        true\n      )\n      minValue = niceMinValue\n      maxValue = niceMaxValue\n    } else {\n      niceRange = maxValue - minValue\n      niceMinValue = minValue\n      niceMaxValue = maxValue\n      minorTickSpacing = 1\n      majorTickSpacing = 10\n    }\n    // Make sure values are still in range\n    value = value < minValue ? minValue : value > maxValue ? maxValue : value\n    minMeasuredValue =\n      minMeasuredValue < minValue\n        ? minValue\n        : minMeasuredValue > maxValue\n          ? maxValue\n          : minMeasuredValue\n    maxMeasuredValue =\n      maxMeasuredValue < minValue\n        ? minValue\n        : maxMeasuredValue > maxValue\n          ? maxValue\n          : maxMeasuredValue\n    threshold =\n      threshold < minValue\n        ? minValue\n        : threshold > maxValue\n          ? maxValue\n          : threshold\n  }\n\n  // **************   Buffer creation  ********************\n  // Buffer for the frame\n  const frameBuffer = createBuffer(width, height)\n  let frameContext = frameBuffer.getContext('2d')\n\n  // Buffer for the background\n  const backgroundBuffer = createBuffer(width, height)\n  let backgroundContext = backgroundBuffer.getContext('2d')\n\n  let lcdBuffer\n\n  // Buffer for led on painting code\n  const ledBufferOn = createBuffer(ledSize, ledSize)\n  let ledContextOn = ledBufferOn.getContext('2d')\n\n  // Buffer for led off painting code\n  const ledBufferOff = createBuffer(ledSize, ledSize)\n  let ledContextOff = ledBufferOff.getContext('2d')\n\n  // Buffer for current led painting code\n  let ledBuffer = ledBufferOff\n\n  // Buffer for the minMeasuredValue indicator\n  const minMeasuredValueBuffer = createBuffer(minMaxIndSize, minMaxIndSize)\n  const minMeasuredValueCtx = minMeasuredValueBuffer.getContext('2d')\n\n  // Buffer for the maxMeasuredValue indicator\n  const maxMeasuredValueBuffer = createBuffer(minMaxIndSize, minMaxIndSize)\n  const maxMeasuredValueCtx = maxMeasuredValueBuffer.getContext('2d')\n\n  // Buffer for static foreground painting code\n  const foregroundBuffer = createBuffer(width, height)\n  let foregroundContext = foregroundBuffer.getContext('2d')\n\n  // **************   Image creation  ********************\n  const drawLcdText = function (ctx, value, vertical) {\n    ctx.save()\n    ctx.textAlign = 'right'\n    ctx.textBaseline = 'middle'\n    ctx.strokeStyle = lcdColor.textColor\n    ctx.fillStyle = lcdColor.textColor\n\n    if (\n      lcdColor === LcdColor.STANDARD ||\n      lcdColor === LcdColor.STANDARD_GREEN\n    ) {\n      ctx.shadowColor = 'gray'\n      if (vertical) {\n        ctx.shadowOffsetX = imageHeight * 0.003\n        ctx.shadowOffsetY = imageHeight * 0.003\n        ctx.shadowBlur = imageHeight * 0.004\n      } else {\n        ctx.shadowOffsetX = imageHeight * 0.007\n        ctx.shadowOffsetY = imageHeight * 0.007\n        ctx.shadowBlur = imageHeight * 0.009\n      }\n    }\n\n    let lcdTextX\n    let lcdTextY\n    let lcdTextWidth\n\n    if (digitalFont) {\n      ctx.font = lcdFont\n    } else {\n      ctx.font = stdFont\n    }\n\n    if (vertical) {\n      lcdTextX =\n        (imageWidth - imageWidth * 0.571428) / 2 + imageWidth * 0.571428 - 2\n      lcdTextY = imageHeight * 0.88 + 1 + (imageHeight * 0.055 - 2) / 2\n      lcdTextWidth = imageWidth * 0.7 - 2\n    } else {\n      lcdTextX = imageWidth * 0.695 + imageWidth * 0.18 - 2\n      lcdTextY = imageHeight * 0.22 + 1 + (imageHeight * 0.15 - 2) / 2\n      lcdTextWidth = imageHeight * 0.22 - 2\n    }\n\n    ctx.fillText(value.toFixed(lcdDecimals), lcdTextX, lcdTextY, lcdTextWidth)\n\n    ctx.restore()\n  }\n\n  const createThresholdImage = function (vertical) {\n    const thresholdBuffer = doc.createElement('canvas')\n    const thresholdCtx = thresholdBuffer.getContext('2d')\n    thresholdBuffer.height = thresholdBuffer.width = minMaxIndSize\n\n    thresholdCtx.save()\n    const gradThreshold = thresholdCtx.createLinearGradient(\n      0,\n      0.1,\n      0,\n      thresholdBuffer.height * 0.9\n    )\n    gradThreshold.addColorStop(0, '#520000')\n    gradThreshold.addColorStop(0.3, '#fc1d00')\n    gradThreshold.addColorStop(0.59, '#fc1d00')\n    gradThreshold.addColorStop(1, '#520000')\n    thresholdCtx.fillStyle = gradThreshold\n\n    if (vertical) {\n      thresholdCtx.beginPath()\n      thresholdCtx.moveTo(0.1, thresholdBuffer.height * 0.5)\n      thresholdCtx.lineTo(thresholdBuffer.width * 0.9, 0.1)\n      thresholdCtx.lineTo(\n        thresholdBuffer.width * 0.9,\n        thresholdBuffer.height * 0.9\n      )\n      thresholdCtx.closePath()\n    } else {\n      thresholdCtx.beginPath()\n      thresholdCtx.moveTo(0.1, 0.1)\n      thresholdCtx.lineTo(thresholdBuffer.width * 0.9, 0.1)\n      thresholdCtx.lineTo(\n        thresholdBuffer.width * 0.5,\n        thresholdBuffer.height * 0.9\n      )\n      thresholdCtx.closePath()\n    }\n\n    thresholdCtx.fill()\n    thresholdCtx.strokeStyle = '#FFFFFF'\n    thresholdCtx.stroke()\n\n    thresholdCtx.restore()\n\n    return thresholdBuffer\n  }\n\n  const drawTickmarksImage = function (ctx, labelNumberFormat, vertical) {\n    backgroundColor.labelColor.setAlpha(1)\n    ctx.save()\n    ctx.textBaseline = 'middle'\n    const TEXT_WIDTH = imageWidth * 0.1\n    ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor()\n    ctx.fillStyle = backgroundColor.labelColor.getRgbaColor()\n\n    let valueCounter = minValue\n    let majorTickCounter = maxNoOfMinorTicks - 1\n    let tickCounter\n    let currentPos\n    let scaleBoundsX\n    let scaleBoundsY\n    let scaleBoundsW\n    let scaleBoundsH\n    let tickSpaceScaling = 1\n\n    let minorTickStart\n    let minorTickStop\n    let mediumTickStart\n    let mediumTickStop\n    let majorTickStart\n    let majorTickStop\n    if (vertical) {\n      minorTickStart = 0.34 * imageWidth\n      minorTickStop = 0.36 * imageWidth\n      mediumTickStart = 0.33 * imageWidth\n      mediumTickStop = 0.36 * imageWidth\n      majorTickStart = 0.32 * imageWidth\n      majorTickStop = 0.36 * imageWidth\n      ctx.textAlign = 'right'\n      scaleBoundsX = 0\n      scaleBoundsY = imageHeight * 0.12864\n      scaleBoundsW = 0\n      if (gaugeType.type === 'type1') {\n        scaleBoundsH = imageHeight * 0.856796 - imageHeight * 0.12864\n      } else {\n        scaleBoundsH = imageHeight * 0.7475 - imageHeight * 0.12864\n      }\n      tickSpaceScaling = scaleBoundsH / (maxValue - minValue)\n    } else {\n      minorTickStart = 0.65 * imageHeight\n      minorTickStop = 0.63 * imageHeight\n      mediumTickStart = 0.66 * imageHeight\n      mediumTickStop = 0.63 * imageHeight\n      majorTickStart = 0.67 * imageHeight\n      majorTickStop = 0.63 * imageHeight\n      ctx.textAlign = 'center'\n      scaleBoundsY = 0\n      if (gaugeType.type === 'type1') {\n        scaleBoundsX = imageWidth * 0.142857\n        scaleBoundsW = imageWidth * 0.871012 - scaleBoundsX\n      } else {\n        scaleBoundsX = imageWidth * 0.19857\n        scaleBoundsW = imageWidth * 0.82 - scaleBoundsX\n      }\n      scaleBoundsH = 0\n      tickSpaceScaling = scaleBoundsW / (maxValue - minValue)\n    }\n\n    let labelCounter\n    for (\n      labelCounter = minValue, tickCounter = 0;\n      labelCounter <= maxValue;\n      labelCounter += minorTickSpacing, tickCounter += minorTickSpacing\n    ) {\n      // Calculate the bounds of the scaling\n      if (vertical) {\n        currentPos =\n          scaleBoundsY + scaleBoundsH - tickCounter * tickSpaceScaling\n      } else {\n        currentPos = scaleBoundsX + tickCounter * tickSpaceScaling\n      }\n\n      majorTickCounter++\n\n      // Draw tickmark every major tickmark spacing\n      if (majorTickCounter === maxNoOfMinorTicks) {\n        // Draw the major tickmarks\n        ctx.lineWidth = 1.5\n        drawLinearTicks(\n          ctx,\n          majorTickStart,\n          majorTickStop,\n          currentPos,\n          vertical\n        )\n\n        // Draw the standard tickmark labels\n        if (vertical) {\n          // Vertical orientation\n          switch (labelNumberFormat.format) {\n            case 'fractional':\n              ctx.fillText(\n                valueCounter.toFixed(2),\n                imageWidth * 0.28,\n                currentPos,\n                TEXT_WIDTH\n              )\n              break\n\n            case 'scientific':\n              ctx.fillText(\n                valueCounter.toPrecision(2),\n                imageWidth * 0.28,\n                currentPos,\n                TEXT_WIDTH\n              )\n              break\n\n            case 'standard':\n            /* falls through */\n            default:\n              ctx.fillText(\n                valueCounter.toFixed(0),\n                imageWidth * 0.28,\n                currentPos,\n                TEXT_WIDTH\n              )\n              break\n          }\n        } else {\n          // Horizontal orientation\n          switch (labelNumberFormat.format) {\n            case 'fractional':\n              ctx.fillText(\n                valueCounter.toFixed(2),\n                currentPos,\n                imageHeight * 0.73,\n                TEXT_WIDTH\n              )\n              break\n\n            case 'scientific':\n              ctx.fillText(\n                valueCounter.toPrecision(2),\n                currentPos,\n                imageHeight * 0.73,\n                TEXT_WIDTH\n              )\n              break\n\n            case 'standard':\n            /* falls through */\n            default:\n              ctx.fillText(\n                valueCounter.toFixed(0),\n                currentPos,\n                imageHeight * 0.73,\n                TEXT_WIDTH\n              )\n              break\n          }\n        }\n\n        valueCounter += majorTickSpacing\n        majorTickCounter = 0\n        continue\n      }\n\n      // Draw tickmark every minor tickmark spacing\n      if (\n        maxNoOfMinorTicks % 2 === 0 &&\n        majorTickCounter === maxNoOfMinorTicks / 2\n      ) {\n        ctx.lineWidth = 1\n        drawLinearTicks(\n          ctx,\n          mediumTickStart,\n          mediumTickStop,\n          currentPos,\n          vertical\n        )\n      } else {\n        ctx.lineWidth = 0.5\n        drawLinearTicks(\n          ctx,\n          minorTickStart,\n          minorTickStop,\n          currentPos,\n          vertical\n        )\n      }\n    }\n\n    ctx.restore()\n  }\n\n  const drawLinearTicks = function (\n    ctx,\n    tickStart,\n    tickStop,\n    currentPos,\n    vertical\n  ) {\n    if (vertical) {\n      // Vertical orientation\n      ctx.beginPath()\n      ctx.moveTo(tickStart, currentPos)\n      ctx.lineTo(tickStop, currentPos)\n      ctx.closePath()\n      ctx.stroke()\n    } else {\n      // Horizontal orientation\n      ctx.beginPath()\n      ctx.moveTo(currentPos, tickStart)\n      ctx.lineTo(currentPos, tickStop)\n      ctx.closePath()\n      ctx.stroke()\n    }\n  }\n\n  // **************   Initialization  ********************\n  const init = function (parameters) {\n    parameters = parameters || {}\n    const drawFrame2 =\n      undefined === parameters.frame ? false : parameters.frame\n    const drawBackground2 =\n      undefined === parameters.background ? false : parameters.background\n    const drawLed = undefined === parameters.led ? false : parameters.led\n    const drawForeground2 =\n      undefined === parameters.foreground ? false : parameters.foreground\n\n    let yOffset\n    let yRange\n    let valuePos\n\n    initialized = true\n\n    // Calculate the current min and max values and the range\n    calculate()\n\n    // Create frame in frame buffer (backgroundBuffer)\n    if (drawFrame2 && frameVisible) {\n      drawLinearFrameImage(\n        frameContext,\n        frameDesign,\n        imageWidth,\n        imageHeight,\n        vertical\n      )\n    }\n\n    // Create background in background buffer (backgroundBuffer)\n    if (drawBackground2 && backgroundVisible) {\n      drawLinearBackgroundImage(\n        backgroundContext,\n        backgroundColor,\n        imageWidth,\n        imageHeight,\n        vertical\n      )\n    }\n\n    // draw Thermometer outline\n    if (drawBackground2 && gaugeType.type === 'type2') {\n      drawBackgroundImage(backgroundContext)\n    }\n\n    if (drawLed) {\n      if (vertical) {\n        // Draw LED ON in ledBuffer_ON\n        ledContextOn.drawImage(createLedImage(ledSize, 1, ledColor), 0, 0)\n\n        // Draw LED ON in ledBuffer_OFF\n        ledContextOff.drawImage(createLedImage(ledSize, 0, ledColor), 0, 0)\n      } else {\n        // Draw LED ON in ledBuffer_ON\n        ledContextOn.drawImage(createLedImage(ledSize, 1, ledColor), 0, 0)\n\n        // Draw LED ON in ledBuffer_OFF\n        ledContextOff.drawImage(createLedImage(ledSize, 0, ledColor), 0, 0)\n      }\n    }\n\n    // Draw min measured value indicator in minMeasuredValueBuffer\n    if (minMeasuredValueVisible) {\n      if (vertical) {\n        minMeasuredValueCtx.drawImage(\n          createMeasuredValueImage(\n            minMaxIndSize,\n            ColorDef.BLUE.dark.getRgbaColor(),\n            false,\n            vertical\n          ),\n          0,\n          0\n        )\n      } else {\n        minMeasuredValueCtx.drawImage(\n          createMeasuredValueImage(\n            minMaxIndSize,\n            ColorDef.BLUE.dark.getRgbaColor(),\n            false,\n            vertical\n          ),\n          0,\n          0\n        )\n      }\n    }\n\n    // Draw max measured value indicator in maxMeasuredValueBuffer\n    if (maxMeasuredValueVisible) {\n      if (vertical) {\n        maxMeasuredValueCtx.drawImage(\n          createMeasuredValueImage(\n            minMaxIndSize,\n            ColorDef.RED.medium.getRgbaColor(),\n            false,\n            vertical\n          ),\n          0,\n          0\n        )\n      } else {\n        maxMeasuredValueCtx.drawImage(\n          createMeasuredValueImage(\n            minMaxIndSize,\n            ColorDef.RED.medium.getRgbaColor(),\n            false,\n            vertical\n          ),\n          0,\n          0\n        )\n      }\n    }\n\n    // Create alignment posts in background buffer (backgroundBuffer)\n    if (drawBackground2 && backgroundVisible) {\n      // Create tickmarks in background buffer (backgroundBuffer)\n      drawTickmarksImage(backgroundContext, labelNumberFormat, vertical)\n\n      // Create title in background buffer (backgroundBuffer)\n      if (vertical) {\n        drawTitleImage(\n          backgroundContext,\n          imageWidth,\n          imageHeight,\n          titleString,\n          unitString,\n          backgroundColor,\n          vertical,\n          null,\n          lcdVisible,\n          gaugeType\n        )\n      } else {\n        drawTitleImage(\n          backgroundContext,\n          imageWidth,\n          imageHeight,\n          titleString,\n          unitString,\n          backgroundColor,\n          vertical,\n          null,\n          lcdVisible,\n          gaugeType\n        )\n      }\n    }\n\n    // Draw threshold image to background context\n    if (drawBackground2 && thresholdVisible) {\n      backgroundContext.save()\n      if (vertical) {\n        // Vertical orientation\n        yOffset = gaugeType.type === 'type1' ? 0.856796 : 0.7475\n        yRange = yOffset - 0.12864\n        valuePos =\n          imageHeight * yOffset -\n          (imageHeight * yRange * (threshold - minValue)) /\n            (maxValue - minValue)\n        backgroundContext.translate(\n          imageWidth * 0.365,\n          valuePos - minMaxIndSize / 2\n        )\n      } else {\n        // Horizontal orientation\n        yOffset = gaugeType.type === 'type1' ? 0.871012 : 0.82\n        yRange = yOffset - (gaugeType.type === 'type1' ? 0.142857 : 0.19857)\n        valuePos =\n          (imageWidth * yRange * (threshold - minValue)) /\n          (maxValue - minValue)\n        backgroundContext.translate(\n          imageWidth * (gaugeType.type === 'type1' ? 0.142857 : 0.19857) -\n            minMaxIndSize / 2 +\n            valuePos,\n          imageHeight * 0.58\n        )\n      }\n      backgroundContext.drawImage(createThresholdImage(vertical), 0, 0)\n      backgroundContext.restore()\n    }\n\n    // Create lcd background if selected in background buffer (backgroundBuffer)\n    if (drawBackground2 && lcdVisible) {\n      if (vertical) {\n        lcdBuffer = createLcdBackgroundImage(\n          imageWidth * 0.571428,\n          imageHeight * 0.055,\n          lcdColor\n        )\n        backgroundContext.drawImage(\n          lcdBuffer,\n          (imageWidth - imageWidth * 0.571428) / 2,\n          imageHeight * 0.88\n        )\n      } else {\n        lcdBuffer = createLcdBackgroundImage(\n          imageWidth * 0.18,\n          imageHeight * 0.15,\n          lcdColor\n        )\n        backgroundContext.drawImage(\n          lcdBuffer,\n          imageWidth * 0.695,\n          imageHeight * 0.22\n        )\n      }\n    }\n\n    // add thermometer stem foreground\n    if (drawForeground2 && gaugeType.type === 'type2') {\n      drawForegroundImage(foregroundContext)\n    }\n\n    // Create foreground in foreground buffer (foregroundBuffer)\n    if (drawForeground2 && foregroundVisible) {\n      drawLinearForegroundImage(\n        foregroundContext,\n        imageWidth,\n        imageHeight,\n        vertical,\n        false\n      )\n    }\n  }\n\n  const resetBuffers = function (buffers) {\n    buffers = buffers || {}\n    const resetFrame = undefined === buffers.frame ? false : buffers.frame\n    const resetBackground =\n      undefined === buffers.background ? false : buffers.background\n    const resetLed = undefined === buffers.led ? false : buffers.led\n    const resetForeground =\n      undefined === buffers.foreground ? false : buffers.foreground\n\n    if (resetFrame) {\n      frameBuffer.width = width\n      frameBuffer.height = height\n      frameContext = frameBuffer.getContext('2d')\n    }\n\n    if (resetBackground) {\n      backgroundBuffer.width = width\n      backgroundBuffer.height = height\n      backgroundContext = backgroundBuffer.getContext('2d')\n    }\n\n    if (resetLed) {\n      ledBufferOn.width = Math.ceil(width * 0.093457)\n      ledBufferOn.height = Math.ceil(height * 0.093457)\n      ledContextOn = ledBufferOn.getContext('2d')\n\n      ledBufferOff.width = Math.ceil(width * 0.093457)\n      ledBufferOff.height = Math.ceil(height * 0.093457)\n      ledContextOff = ledBufferOff.getContext('2d')\n\n      // Buffer for current led painting code\n      ledBuffer = ledBufferOff\n    }\n\n    if (resetForeground) {\n      foregroundBuffer.width = width\n      foregroundBuffer.height = height\n      foregroundContext = foregroundBuffer.getContext('2d')\n    }\n  }\n\n  const blink = function (blinking) {\n    if (blinking) {\n      ledTimerId = setInterval(toggleAndRepaintLed, 1000)\n    } else {\n      clearInterval(ledTimerId)\n      ledBuffer = ledBufferOff\n    }\n  }\n\n  const toggleAndRepaintLed = function () {\n    if (ledVisible) {\n      if (ledBuffer === ledBufferOn) {\n        ledBuffer = ledBufferOff\n      } else {\n        ledBuffer = ledBufferOn\n      }\n      if (!repainting) {\n        repainting = true\n        requestAnimFrame(self.repaint)\n      }\n    }\n  }\n\n  const drawValue = function (ctx, imageWidth, imageHeight) {\n    let top // position of max value\n    let bottom // position of min value\n    const labelColor = backgroundColor.labelColor\n    let fullSize\n    let valueSize\n    let valueTop\n    let valueStartX\n    let valueStartY\n    let valueStopX\n    let valueStopY\n    let valueBackgroundStartX\n    let valueBackgroundStartY\n    let valueBackgroundStopX\n    let valueBackgroundStopY\n    let valueBorderStartX\n    let valueBorderStartY\n    let valueBorderStopX\n    let valueBorderStopY\n    let valueForegroundStartX\n    let valueForegroundStartY\n    let valueForegroundStopX\n    let valueForegroundStopY\n\n    // Orientation dependend definitions\n    if (vertical) {\n      // Vertical orientation\n      top = imageHeight * 0.12864 // position of max value\n      if (gaugeType.type === 'type1') {\n        bottom = imageHeight * 0.856796 // position of min value\n      } else {\n        bottom = imageHeight * 0.7475\n      }\n      fullSize = bottom - top\n      valueSize = (fullSize * (value - minValue)) / (maxValue - minValue)\n      valueTop = bottom - valueSize\n      valueBackgroundStartX = 0\n      valueBackgroundStartY = top\n      valueBackgroundStopX = 0\n      valueBackgroundStopY = bottom\n    } else {\n      // Horizontal orientation\n      if (gaugeType.type === 'type1') {\n        top = imageWidth * 0.871012 // position of max value\n        bottom = imageWidth * 0.142857 // position of min value\n      } else {\n        top = imageWidth * 0.82 // position of max value\n        bottom = imageWidth * 0.19857 // position of min value\n      }\n      fullSize = top - bottom\n      valueSize = (fullSize * (value - minValue)) / (maxValue - minValue)\n      valueTop = bottom\n      valueBackgroundStartX = top\n      valueBackgroundStartY = 0\n      valueBackgroundStopX = bottom\n      valueBackgroundStopY = 0\n    }\n    if (gaugeType.type === 'type1') {\n      const darker =\n        backgroundColor === BackgroundColor.CARBON ||\n        backgroundColor === BackgroundColor.PUNCHED_SHEET ||\n        backgroundColor === BackgroundColor.STAINLESS ||\n        backgroundColor === BackgroundColor.BRUSHED_STAINLESS ||\n        backgroundColor === BackgroundColor.TURNED\n          ? 0.3\n          : 0\n      const valueBackgroundTrackGradient = ctx.createLinearGradient(\n        valueBackgroundStartX,\n        valueBackgroundStartY,\n        valueBackgroundStopX,\n        valueBackgroundStopY\n      )\n      labelColor.setAlpha(0.05 + darker)\n      valueBackgroundTrackGradient.addColorStop(0, labelColor.getRgbaColor())\n      labelColor.setAlpha(0.15 + darker)\n      valueBackgroundTrackGradient.addColorStop(\n        0.48,\n        labelColor.getRgbaColor()\n      )\n      labelColor.setAlpha(0.15 + darker)\n      valueBackgroundTrackGradient.addColorStop(\n        0.49,\n        labelColor.getRgbaColor()\n      )\n      labelColor.setAlpha(0.05 + darker)\n      valueBackgroundTrackGradient.addColorStop(1, labelColor.getRgbaColor())\n      ctx.fillStyle = valueBackgroundTrackGradient\n\n      if (vertical) {\n        ctx.fillRect(\n          imageWidth * 0.435714,\n          top,\n          imageWidth * 0.142857,\n          fullSize\n        )\n      } else {\n        ctx.fillRect(\n          imageWidth * 0.142857,\n          imageHeight * 0.435714,\n          fullSize,\n          imageHeight * 0.142857\n        )\n      }\n\n      if (vertical) {\n        // Vertical orientation\n        valueBorderStartX = 0\n        valueBorderStartY = top\n        valueBorderStopX = 0\n        valueBorderStopY = top + fullSize\n      } else {\n        // Horizontal orientation\n        valueBorderStartX = imageWidth * 0.142857 + fullSize\n        valueBorderStartY = 0\n        valueBorderStopX = imageWidth * 0.142857\n        valueBorderStopY = 0\n      }\n      const valueBorderGradient = ctx.createLinearGradient(\n        valueBorderStartX,\n        valueBorderStartY,\n        valueBorderStopX,\n        valueBorderStopY\n      )\n      labelColor.setAlpha(0.3 + darker)\n      valueBorderGradient.addColorStop(0, labelColor.getRgbaColor())\n      labelColor.setAlpha(0.69)\n      valueBorderGradient.addColorStop(0.48, labelColor.getRgbaColor())\n      labelColor.setAlpha(0.7)\n      valueBorderGradient.addColorStop(0.49, labelColor.getRgbaColor())\n      labelColor.setAlpha(0.4)\n      valueBorderGradient.addColorStop(1, labelColor.getRgbaColor())\n      ctx.fillStyle = valueBorderGradient\n      if (vertical) {\n        ctx.fillRect(\n          imageWidth * 0.435714,\n          top,\n          imageWidth * 0.007142,\n          fullSize\n        )\n        ctx.fillRect(\n          imageWidth * 0.571428,\n          top,\n          imageWidth * 0.007142,\n          fullSize\n        )\n      } else {\n        ctx.fillRect(\n          imageWidth * 0.142857,\n          imageHeight * 0.435714,\n          fullSize,\n          imageHeight * 0.007142\n        )\n        ctx.fillRect(\n          imageWidth * 0.142857,\n          imageHeight * 0.571428,\n          fullSize,\n          imageHeight * 0.007142\n        )\n      }\n    }\n    if (vertical) {\n      // Vertical orientation\n      if (gaugeType.type === 'type1') {\n        valueStartX = imageWidth * 0.45\n        valueStartY = 0\n        valueStopX = imageWidth * 0.45 + imageWidth * 0.114285\n        valueStopY = 0\n      } else {\n        valueStartX = imageWidth / 2 - (imageHeight * 0.0486) / 2\n        valueStartY = 0\n        valueStopX = valueStartX + imageHeight * 0.053\n        valueStopY = 0\n      }\n    } else {\n      // Horizontal orientation\n      if (gaugeType.type === 'type1') {\n        valueStartX = 0\n        valueStartY = imageHeight * 0.45\n        valueStopX = 0\n        valueStopY = imageHeight * 0.45 + imageHeight * 0.114285\n      } else {\n        valueStartX = 0\n        valueStartY = imageHeight / 2 - imageWidth * 0.025\n        valueStopX = 0\n        valueStopY = valueStartY + imageWidth * 0.053\n      }\n    }\n\n    const valueBackgroundGradient = ctx.createLinearGradient(\n      valueStartX,\n      valueStartY,\n      valueStopX,\n      valueStopY\n    )\n    valueBackgroundGradient.addColorStop(0, valueColor.medium.getRgbaColor())\n    valueBackgroundGradient.addColorStop(1, valueColor.light.getRgbaColor())\n    ctx.fillStyle = valueBackgroundGradient\n    const thermoTweak =\n      gaugeType.type === 'type1'\n        ? 0\n        : vertical\n          ? imageHeight * 0.05\n          : imageWidth * 0.05\n    if (vertical) {\n      ctx.fillRect(\n        valueStartX,\n        valueTop,\n        valueStopX - valueStartX,\n        valueSize + thermoTweak\n      )\n    } else {\n      ctx.fillRect(\n        valueTop - thermoTweak,\n        valueStartY,\n        valueSize + thermoTweak,\n        valueStopY - valueStartY\n      )\n    }\n\n    if (gaugeType.type === 'type1') {\n      // The light effect on the value\n      if (vertical) {\n        // Vertical orientation\n        valueForegroundStartX = imageWidth * 0.45\n        valueForegroundStartY = 0\n        valueForegroundStopX = valueForegroundStartX + imageWidth * 0.05\n        valueForegroundStopY = 0\n      } else {\n        // Horizontal orientation\n        valueForegroundStartX = 0\n        valueForegroundStartY = imageHeight * 0.45\n        valueForegroundStopX = 0\n        valueForegroundStopY = valueForegroundStartY + imageHeight * 0.05\n      }\n      const valueForegroundGradient = ctx.createLinearGradient(\n        valueForegroundStartX,\n        valueForegroundStartY,\n        valueForegroundStopX,\n        valueForegroundStopY\n      )\n      valueForegroundGradient.addColorStop(0, 'rgba(255, 255, 255, 0.7)')\n      valueForegroundGradient.addColorStop(0.98, 'rgba(255, 255, 255, 0.0)')\n      ctx.fillStyle = valueForegroundGradient\n      if (vertical) {\n        ctx.fillRect(\n          valueForegroundStartX,\n          valueTop,\n          valueForegroundStopX,\n          valueSize\n        )\n      } else {\n        ctx.fillRect(\n          valueTop,\n          valueForegroundStartY,\n          valueSize,\n          valueForegroundStopY - valueForegroundStartY\n        )\n      }\n    }\n  }\n\n  const drawForegroundImage = function (ctx) {\n    const foreSize = vertical ? imageHeight : imageWidth\n\n    ctx.save()\n    if (vertical) {\n      ctx.translate(imageWidth / 2, 0)\n    } else {\n      ctx.translate(imageWidth / 2, imageHeight / 2)\n      ctx.rotate(HALF_PI)\n      ctx.translate(0, -imageWidth / 2 + imageWidth * 0.05)\n    }\n\n    // draw bulb\n    ctx.beginPath()\n    ctx.moveTo(-0.049 * foreSize, 0.825 * foreSize)\n    ctx.bezierCurveTo(\n      -0.049 * foreSize,\n      0.7975 * foreSize,\n      -0.0264 * foreSize,\n      0.775 * foreSize,\n      0.0013 * foreSize,\n      0.775 * foreSize\n    )\n    ctx.bezierCurveTo(\n      0.0264 * foreSize,\n      0.775 * foreSize,\n      0.049 * foreSize,\n      0.7975 * foreSize,\n      0.049 * foreSize,\n      0.825 * foreSize\n    )\n    ctx.bezierCurveTo(\n      0.049 * foreSize,\n      0.85 * foreSize,\n      0.0264 * foreSize,\n      0.8725 * foreSize,\n      0.0013 * foreSize,\n      0.8725 * foreSize\n    )\n    ctx.bezierCurveTo(\n      -0.0264 * foreSize,\n      0.8725 * foreSize,\n      -0.049 * foreSize,\n      0.85 * foreSize,\n      -0.049 * foreSize,\n      0.825 * foreSize\n    )\n    ctx.closePath()\n    let grad = ctx.createRadialGradient(\n      0 * foreSize,\n      0.825 * foreSize,\n      0,\n      0 * foreSize,\n      0.825 * foreSize,\n      0.049 * foreSize\n    )\n    grad.addColorStop(0, valueColor.medium.getRgbaColor())\n    grad.addColorStop(0.3, valueColor.medium.getRgbaColor())\n    grad.addColorStop(1, valueColor.light.getRgbaColor())\n    ctx.fillStyle = grad\n    ctx.fill()\n\n    // draw bulb highlight\n    ctx.beginPath()\n    if (vertical) {\n      ctx.moveTo(-0.0365 * foreSize, 0.8075 * foreSize)\n      ctx.bezierCurveTo(\n        -0.0365 * foreSize,\n        0.7925 * foreSize,\n        -0.0214 * foreSize,\n        0.7875 * foreSize,\n        -0.0214 * foreSize,\n        0.7825 * foreSize\n      )\n      ctx.bezierCurveTo(\n        0.0189 * foreSize,\n        0.785 * foreSize,\n        0.0365 * foreSize,\n        0.7925 * foreSize,\n        0.0365 * foreSize,\n        0.8075 * foreSize\n      )\n      ctx.bezierCurveTo(\n        0.0365 * foreSize,\n        0.8175 * foreSize,\n        0.0214 * foreSize,\n        0.815 * foreSize,\n        0.0013 * foreSize,\n        0.8125 * foreSize\n      )\n      ctx.bezierCurveTo(\n        -0.0189 * foreSize,\n        0.8125 * foreSize,\n        -0.0365 * foreSize,\n        0.8175 * foreSize,\n        -0.0365 * foreSize,\n        0.8075 * foreSize\n      )\n      grad = ctx.createRadialGradient(\n        0,\n        0.8 * foreSize,\n        0,\n        0,\n        0.8 * foreSize,\n        0.0377 * foreSize\n      )\n    } else {\n      ctx.beginPath()\n      ctx.moveTo(-0.0214 * foreSize, 0.86 * foreSize)\n      ctx.bezierCurveTo(\n        -0.0365 * foreSize,\n        0.86 * foreSize,\n        -0.0415 * foreSize,\n        0.845 * foreSize,\n        -0.0465 * foreSize,\n        0.825 * foreSize\n      )\n      ctx.bezierCurveTo(\n        -0.0465 * foreSize,\n        0.805 * foreSize,\n        -0.0365 * foreSize,\n        0.7875 * foreSize,\n        -0.0214 * foreSize,\n        0.7875 * foreSize\n      )\n      ctx.bezierCurveTo(\n        -0.0113 * foreSize,\n        0.7875 * foreSize,\n        -0.0163 * foreSize,\n        0.8025 * foreSize,\n        -0.0163 * foreSize,\n        0.8225 * foreSize\n      )\n      ctx.bezierCurveTo(\n        -0.0163 * foreSize,\n        0.8425 * foreSize,\n        -0.0113 * foreSize,\n        0.86 * foreSize,\n        -0.0214 * foreSize,\n        0.86 * foreSize\n      )\n      grad = ctx.createRadialGradient(\n        -0.03 * foreSize,\n        0.8225 * foreSize,\n        0,\n        -0.03 * foreSize,\n        0.8225 * foreSize,\n        0.0377 * foreSize\n      )\n    }\n    grad.addColorStop(0.0, 'rgba(255, 255, 255, 0.55)')\n    grad.addColorStop(1.0, 'rgba(255, 255, 255, 0.05)')\n    ctx.fillStyle = grad\n    ctx.closePath()\n    ctx.fill()\n\n    // stem highlight\n    ctx.beginPath()\n    ctx.moveTo(-0.0214 * foreSize, 0.115 * foreSize)\n    ctx.bezierCurveTo(\n      -0.0214 * foreSize,\n      0.1075 * foreSize,\n      -0.0163 * foreSize,\n      0.1025 * foreSize,\n      -0.0113 * foreSize,\n      0.1025 * foreSize\n    )\n    ctx.bezierCurveTo(\n      -0.0113 * foreSize,\n      0.1025 * foreSize,\n      -0.0113 * foreSize,\n      0.1025 * foreSize,\n      -0.0113 * foreSize,\n      0.1025 * foreSize\n    )\n    ctx.bezierCurveTo(\n      -0.0038 * foreSize,\n      0.1025 * foreSize,\n      0.0013 * foreSize,\n      0.1075 * foreSize,\n      0.0013 * foreSize,\n      0.115 * foreSize\n    )\n    ctx.bezierCurveTo(\n      0.0013 * foreSize,\n      0.115 * foreSize,\n      0.0013 * foreSize,\n      0.76 * foreSize,\n      0.0013 * foreSize,\n      0.76 * foreSize\n    )\n    ctx.bezierCurveTo(\n      0.0013 * foreSize,\n      0.7675 * foreSize,\n      -0.0038 * foreSize,\n      0.7725 * foreSize,\n      -0.0113 * foreSize,\n      0.7725 * foreSize\n    )\n    ctx.bezierCurveTo(\n      -0.0113 * foreSize,\n      0.7725 * foreSize,\n      -0.0113 * foreSize,\n      0.7725 * foreSize,\n      -0.0113 * foreSize,\n      0.7725 * foreSize\n    )\n    ctx.bezierCurveTo(\n      -0.0163 * foreSize,\n      0.7725 * foreSize,\n      -0.0214 * foreSize,\n      0.7675 * foreSize,\n      -0.0214 * foreSize,\n      0.76 * foreSize\n    )\n    ctx.bezierCurveTo(\n      -0.0214 * foreSize,\n      0.76 * foreSize,\n      -0.0214 * foreSize,\n      0.115 * foreSize,\n      -0.0214 * foreSize,\n      0.115 * foreSize\n    )\n    ctx.closePath()\n    grad = ctx.createLinearGradient(\n      -0.0189 * foreSize,\n      0,\n      0.0013 * foreSize,\n      0\n    )\n    grad.addColorStop(0.0, 'rgba(255, 255, 255, 0.1)')\n    grad.addColorStop(0.34, 'rgba(255, 255, 255, 0.5)')\n    grad.addColorStop(1.0, 'rgba(255, 255, 255, 0.1)')\n    ctx.fillStyle = grad\n    ctx.fill()\n\n    ctx.restore()\n  }\n\n  const drawBackgroundImage = function (ctx) {\n    const backSize = vertical ? imageHeight : imageWidth\n    ctx.save()\n    if (vertical) {\n      ctx.translate(imageWidth / 2, 0)\n    } else {\n      ctx.translate(imageWidth / 2, imageHeight / 2)\n      ctx.rotate(HALF_PI)\n      ctx.translate(0, -imageWidth / 2 + imageWidth * 0.05)\n    }\n    ctx.beginPath()\n    ctx.moveTo(-0.0516 * backSize, 0.825 * backSize)\n    ctx.bezierCurveTo(\n      -0.0516 * backSize,\n      0.8525 * backSize,\n      -0.0289 * backSize,\n      0.875 * backSize,\n      0.0013 * backSize,\n      0.875 * backSize\n    )\n    ctx.bezierCurveTo(\n      0.0289 * backSize,\n      0.875 * backSize,\n      0.0516 * backSize,\n      0.8525 * backSize,\n      0.0516 * backSize,\n      0.825 * backSize\n    )\n    ctx.bezierCurveTo(\n      0.0516 * backSize,\n      0.8075 * backSize,\n      0.044 * backSize,\n      0.7925 * backSize,\n      0.0314 * backSize,\n      0.7825 * backSize\n    )\n    ctx.bezierCurveTo(\n      0.0314 * backSize,\n      0.7825 * backSize,\n      0.0314 * backSize,\n      0.12 * backSize,\n      0.0314 * backSize,\n      0.12 * backSize\n    )\n    ctx.bezierCurveTo(\n      0.0314 * backSize,\n      0.1025 * backSize,\n      0.0189 * backSize,\n      0.0875 * backSize,\n      0.0013 * backSize,\n      0.0875 * backSize\n    )\n    ctx.bezierCurveTo(\n      -0.0163 * backSize,\n      0.0875 * backSize,\n      -0.0289 * backSize,\n      0.1025 * backSize,\n      -0.0289 * backSize,\n      0.12 * backSize\n    )\n    ctx.bezierCurveTo(\n      -0.0289 * backSize,\n      0.12 * backSize,\n      -0.0289 * backSize,\n      0.7825 * backSize,\n      -0.0289 * backSize,\n      0.7825 * backSize\n    )\n    ctx.bezierCurveTo(\n      -0.0415 * backSize,\n      0.79 * backSize,\n      -0.0516 * backSize,\n      0.805 * backSize,\n      -0.0516 * backSize,\n      0.825 * backSize\n    )\n    ctx.closePath()\n    const grad = ctx.createLinearGradient(\n      -0.0163 * backSize,\n      0,\n      0.0289 * backSize,\n      0\n    )\n    grad.addColorStop(0, 'rgba(226, 226, 226, 0.5)')\n    grad.addColorStop(0.5, 'rgba(226, 226, 226, 0.2)')\n    grad.addColorStop(1, 'rgba(226, 226, 226, 0.5)')\n    ctx.fillStyle = grad\n    ctx.fill()\n    ctx.lineWidth = 1\n    ctx.strokeStyle = 'rgba(153, 153, 153, 0.5)'\n    ctx.stroke()\n    ctx.restore()\n  }\n\n  //* *********************************** Public methods **************************************\n  this.setValue = function (newValue) {\n    newValue = parseFloat(newValue)\n    const targetValue =\n      newValue < minValue\n        ? minValue\n        : newValue > maxValue\n          ? maxValue\n          : newValue\n    if (value !== targetValue) {\n      value = targetValue\n\n      if (value > maxMeasuredValue) {\n        maxMeasuredValue = value\n      }\n      if (value < minMeasuredValue) {\n        minMeasuredValue = value\n      }\n\n      if (\n        (value >= threshold && !ledBlinking && thresholdRising) ||\n        (value <= threshold && !ledBlinking && !thresholdRising)\n      ) {\n        ledBlinking = true\n        blink(ledBlinking)\n        if (playAlarm) {\n          audioElement.play()\n        }\n      } else if (\n        (value < threshold && ledBlinking && thresholdRising) ||\n        (value > threshold && ledBlinking && !thresholdRising)\n      ) {\n        ledBlinking = false\n        blink(ledBlinking)\n        if (playAlarm) {\n          audioElement.pause()\n        }\n      }\n\n      this.repaint()\n    }\n    return this\n  }\n\n  this.getValue = function () {\n    return value\n  }\n\n  this.setValueAnimated = function (newValue, callback) {\n    const gauge = this\n    let time\n    newValue = parseFloat(newValue)\n    const targetValue =\n      newValue < minValue\n        ? minValue\n        : newValue > maxValue\n          ? maxValue\n          : newValue\n    if (value !== targetValue) {\n      if (undefined !== tween && tween.isPlaying) {\n        tween.stop()\n      }\n\n      time =\n        (fullScaleDeflectionTime * Math.abs(targetValue - value)) /\n        (maxValue - minValue)\n      time = Math.max(time, fullScaleDeflectionTime / 5)\n      tween = new Tween(\n        {},\n        '',\n        Tween.regularEaseInOut,\n        value,\n        targetValue,\n        time\n      )\n      // tween = new Tween({}, '', Tween.regularEaseInOut, value, targetValue, 1);\n\n      tween.onMotionChanged = function (event) {\n        value = event.target._pos\n        if (value > maxMeasuredValue) {\n          maxMeasuredValue = value\n        }\n        if (value < minMeasuredValue) {\n          minMeasuredValue = value\n        }\n\n        if (\n          (value >= threshold && !ledBlinking && thresholdRising) ||\n          (value <= threshold && !ledBlinking && !thresholdRising)\n        ) {\n          ledBlinking = true\n          blink(ledBlinking)\n          if (playAlarm) {\n            audioElement.play()\n          }\n        } else if (\n          (value < threshold && ledBlinking && thresholdRising) ||\n          (value > threshold && ledBlinking && !thresholdRising)\n        ) {\n          ledBlinking = false\n          blink(ledBlinking)\n          if (playAlarm) {\n            audioElement.pause()\n          }\n        }\n        if (!repainting) {\n          repainting = true\n          requestAnimFrame(gauge.repaint)\n        }\n      }\n\n      // do we have a callback function to process?\n      if (callback && typeof callback === 'function') {\n        tween.onMotionFinished = callback\n      }\n\n      tween.start()\n    }\n    return this\n  }\n\n  this.resetMinMeasuredValue = function () {\n    minMeasuredValue = value\n    this.repaint()\n    return this\n  }\n\n  this.resetMaxMeasuredValue = function () {\n    maxMeasuredValue = value\n    this.repaint()\n    return this\n  }\n\n  this.setMinMeasuredValueVisible = function (visible) {\n    minMeasuredValueVisible = !!visible\n    this.repaint()\n    return this\n  }\n\n  this.setMaxMeasuredValueVisible = function (visible) {\n    maxMeasuredValueVisible = !!visible\n    this.repaint()\n    return this\n  }\n\n  this.setThreshold = function (threshVal) {\n    threshVal = parseFloat(threshVal)\n    const targetValue =\n      threshVal < minValue\n        ? minValue\n        : threshVal > maxValue\n          ? maxValue\n          : threshVal\n    threshold = targetValue\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setThresholdVisible = function (visible) {\n    thresholdVisible = !!visible\n    this.repaint()\n    return this\n  }\n\n  this.setThresholdRising = function (rising) {\n    thresholdRising = !!rising\n    // reset existing threshold alerts\n    ledBlinking = !ledBlinking\n    blink(ledBlinking)\n    this.repaint()\n    return this\n  }\n\n  this.setLcdDecimals = function (decimals) {\n    lcdDecimals = parseInt(decimals, 10)\n    this.repaint()\n    return this\n  }\n\n  this.setFrameDesign = function (newFrameDesign) {\n    resetBuffers({\n      frame: true\n    })\n    frameDesign = newFrameDesign\n    init({\n      frame: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setBackgroundColor = function (newBackgroundColor) {\n    resetBuffers({\n      background: true\n    })\n    backgroundColor = newBackgroundColor\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setValueColor = function (newValueColor) {\n    resetBuffers({\n      foreground: true\n    })\n    valueColor = newValueColor\n    init({\n      foreground: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setLedColor = function (newLedColor) {\n    resetBuffers({\n      led: true\n    })\n    ledColor = newLedColor\n    init({\n      led: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setLedVisible = function (visible) {\n    ledVisible = !!visible\n    this.repaint()\n    return this\n  }\n\n  this.setLcdColor = function (newLcdColor) {\n    resetBuffers({\n      background: true\n    })\n    lcdColor = newLcdColor\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setMaxMeasuredValue = function (newVal) {\n    newVal = parseFloat(newVal)\n    const targetValue =\n      newVal < minValue ? minValue : newVal > maxValue ? maxValue : newVal\n    maxMeasuredValue = targetValue\n    this.repaint()\n    return this\n  }\n\n  this.setMinMeasuredValue = function (newVal) {\n    newVal = parseFloat(newVal)\n    const targetValue =\n      newVal < minValue ? minValue : newVal > maxValue ? maxValue : newVal\n    minMeasuredValue = targetValue\n    this.repaint()\n    return this\n  }\n\n  this.setTitleString = function (title) {\n    titleString = title\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setUnitString = function (unit) {\n    unitString = unit\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setMinValue = function (newVal) {\n    resetBuffers({\n      background: true\n    })\n    minValue = parseFloat(newVal)\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.getMinValue = function () {\n    return minValue\n  }\n\n  this.setMaxValue = function (newVal) {\n    resetBuffers({\n      background: true\n    })\n    maxValue = parseFloat(newVal)\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.getMaxValue = function () {\n    return maxValue\n  }\n\n  this.repaint = function () {\n    if (!initialized) {\n      init({\n        frame: true,\n        background: true,\n        led: true,\n        foreground: true\n      })\n    }\n\n    mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height)\n\n    // Draw frame\n    if (frameVisible) {\n      mainCtx.drawImage(frameBuffer, 0, 0)\n    }\n\n    // Draw buffered image to visible canvas\n    mainCtx.drawImage(backgroundBuffer, 0, 0)\n\n    // Draw lcd display\n    if (lcdVisible) {\n      drawLcdText(mainCtx, value, vertical)\n    }\n\n    // Draw led\n    if (ledVisible) {\n      mainCtx.drawImage(ledBuffer, ledPosX, ledPosY)\n    }\n\n    let valuePos\n    let yOffset\n    let yRange\n    let minMaxX\n    let minMaxY\n    // Draw min measured value indicator\n    if (minMeasuredValueVisible) {\n      if (vertical) {\n        yOffset = gaugeType.type === 'type1' ? 0.856796 : 0.7475\n        yRange = yOffset - 0.12864\n        valuePos =\n          imageHeight * yOffset -\n          (imageHeight * yRange * (minMeasuredValue - minValue)) /\n            (maxValue - minValue)\n        minMaxX = imageWidth * 0.34 - minMeasuredValueBuffer.width\n        minMaxY = valuePos - minMeasuredValueBuffer.height / 2\n      } else {\n        yOffset = gaugeType.type === 'type1' ? 0.871012 : 0.82\n        yRange = yOffset - (gaugeType.type === 'type1' ? 0.142857 : 0.19857)\n        valuePos =\n          (imageWidth * yRange * (minMeasuredValue - minValue)) /\n          (maxValue - minValue)\n        minMaxX =\n          imageWidth * (gaugeType.type === 'type1' ? 0.142857 : 0.19857) -\n          minMeasuredValueBuffer.height / 2 +\n          valuePos\n        minMaxY = imageHeight * 0.65\n      }\n      mainCtx.drawImage(minMeasuredValueBuffer, minMaxX, minMaxY)\n    }\n\n    // Draw max measured value indicator\n    if (maxMeasuredValueVisible) {\n      if (vertical) {\n        valuePos =\n          imageHeight * yOffset -\n          (imageHeight * yRange * (maxMeasuredValue - minValue)) /\n            (maxValue - minValue)\n        minMaxX = imageWidth * 0.34 - maxMeasuredValueBuffer.width\n        minMaxY = valuePos - maxMeasuredValueBuffer.height / 2\n      } else {\n        yOffset = gaugeType.type === 'type1' ? 0.871012 : 0.8\n        yRange = yOffset - (gaugeType.type === 'type1' ? 0.14857 : 0.19857)\n        valuePos =\n          (imageWidth * yRange * (maxMeasuredValue - minValue)) /\n          (maxValue - minValue)\n        minMaxX =\n          imageWidth * (gaugeType.type === 'type1' ? 0.142857 : 0.19857) -\n          maxMeasuredValueBuffer.height / 2 +\n          valuePos\n        minMaxY = imageHeight * 0.65\n      }\n      mainCtx.drawImage(maxMeasuredValueBuffer, minMaxX, minMaxY)\n    }\n\n    mainCtx.save()\n    drawValue(mainCtx, imageWidth, imageHeight)\n    mainCtx.restore()\n\n    // Draw foreground\n    if (foregroundVisible || gaugeType.type === 'type2') {\n      mainCtx.drawImage(foregroundBuffer, 0, 0)\n    }\n\n    repainting = false\n  }\n\n  // Visualize the component\n  this.repaint()\n\n  return this\n}\n\nexport default Linear\n","import Tween from './tween.js'\nimport drawLinearBackgroundImage from './drawLinearBackgroundImage'\nimport drawLinearForegroundImage from './drawLinearForegroundImage'\nimport drawLinearFrameImage from './drawLinearFrameImage'\nimport createLedImage from './createLedImage'\nimport createLcdBackgroundImage from './createLcdBackgroundImage'\nimport createMeasuredValueImage from './createMeasuredValueImage'\nimport drawTitleImage from './drawTitleImage'\nimport {\n  calcNiceNumber,\n  createBuffer,\n  customColorDef,\n  requestAnimFrame,\n  getCanvasContext,\n  doc,\n  lcdFontName,\n  stdFontName\n} from './tools'\n\nimport {\n  BackgroundColor,\n  LcdColor,\n  ColorDef,\n  LedColor,\n  FrameDesign,\n  LabelNumberFormat\n} from './definitions'\n\nconst LinearBargraph = function (canvas, parameters) {\n  parameters = parameters || {}\n  let width = undefined === parameters.width ? 0 : parameters.width\n  let height = undefined === parameters.height ? 0 : parameters.height\n  let minValue = undefined === parameters.minValue ? 0 : parameters.minValue\n  let maxValue =\n    undefined === parameters.maxValue ? minValue + 100 : parameters.maxValue\n  let section = undefined === parameters.section ? null : parameters.section\n  const niceScale =\n    undefined === parameters.niceScale ? true : parameters.niceScale\n  let threshold =\n    undefined === parameters.threshold\n      ? (maxValue - minValue) / 2 + minValue\n      : parameters.threshold\n  let titleString =\n    undefined === parameters.titleString ? '' : parameters.titleString\n  let unitString =\n    undefined === parameters.unitString ? '' : parameters.unitString\n  let frameDesign =\n    undefined === parameters.frameDesign\n      ? FrameDesign.METAL\n      : parameters.frameDesign\n  const frameVisible =\n    undefined === parameters.frameVisible ? true : parameters.frameVisible\n  let backgroundColor =\n    undefined === parameters.backgroundColor\n      ? BackgroundColor.DARK_GRAY\n      : parameters.backgroundColor\n  const backgroundVisible =\n    undefined === parameters.backgroundVisible\n      ? true\n      : parameters.backgroundVisible\n  let valueColor =\n    undefined === parameters.valueColor ? ColorDef.RED : parameters.valueColor\n  let lcdColor =\n    undefined === parameters.lcdColor ? LcdColor.STANDARD : parameters.lcdColor\n  const lcdVisible =\n    undefined === parameters.lcdVisible ? true : parameters.lcdVisible\n  let lcdDecimals =\n    undefined === parameters.lcdDecimals ? 2 : parameters.lcdDecimals\n  const digitalFont =\n    undefined === parameters.digitalFont ? false : parameters.digitalFont\n  let ledColor =\n    undefined === parameters.ledColor ? LedColor.RED_LED : parameters.ledColor\n  let ledVisible =\n    undefined === parameters.ledVisible ? true : parameters.ledVisible\n  let thresholdVisible =\n    undefined === parameters.thresholdVisible\n      ? true\n      : parameters.thresholdVisible\n  let thresholdRising =\n    undefined === parameters.thresholdRising\n      ? true\n      : parameters.thresholdRising\n  let minMeasuredValueVisible =\n    undefined === parameters.minMeasuredValueVisible\n      ? false\n      : parameters.minMeasuredValueVisible\n  let maxMeasuredValueVisible =\n    undefined === parameters.maxMeasuredValueVisible\n      ? false\n      : parameters.maxMeasuredValueVisible\n  const labelNumberFormat =\n    undefined === parameters.labelNumberFormat\n      ? LabelNumberFormat.STANDARD\n      : parameters.labelNumberFormat\n  const foregroundVisible =\n    undefined === parameters.foregroundVisible\n      ? true\n      : parameters.foregroundVisible\n  const playAlarm =\n    undefined === parameters.playAlarm ? false : parameters.playAlarm\n  const alarmSound =\n    undefined === parameters.alarmSound ? false : parameters.alarmSound\n  let valueGradient =\n    undefined === parameters.valueGradient ? null : parameters.valueGradient\n  let useValueGradient =\n    undefined === parameters.useValueGradient\n      ? false\n      : parameters.useValueGradient\n  const fullScaleDeflectionTime =\n    undefined === parameters.fullScaleDeflectionTime\n      ? 2.5\n      : parameters.fullScaleDeflectionTime\n\n  // Get the canvas context and clear it\n  const mainCtx = getCanvasContext(canvas)\n  // Has a size been specified?\n  if (width === 0) {\n    width = mainCtx.canvas.width\n  }\n  if (height === 0) {\n    height = mainCtx.canvas.height\n  }\n\n  // Set the size - also clears the canvas\n  mainCtx.canvas.width = width\n  mainCtx.canvas.height = height\n\n  const imageWidth = width\n  const imageHeight = height\n\n  let audioElement\n\n  // Create audio tag for alarm sound\n  if (playAlarm && alarmSound !== false) {\n    audioElement = doc.createElement('audio')\n    audioElement.setAttribute('src', alarmSound)\n    audioElement.setAttribute('preload', 'auto')\n  }\n\n  const self = this\n  let value = minValue\n\n  // Properties\n  let minMeasuredValue = maxValue\n  let maxMeasuredValue = minValue\n\n  let tween\n  let ledBlinking = false\n  let repainting = false\n  let isSectionsVisible = false\n  let isGradientVisible = false\n  let sectionPixels = []\n  let ledTimerId = 0\n\n  const vertical = width <= height\n\n  // Constants\n  let ledPosX\n  let ledPosY\n  const ledSize = Math.round((vertical ? height : width) * 0.05)\n  const minMaxIndSize = Math.round((vertical ? width : height) * 0.05)\n  let stdFont\n  let lcdFont\n\n  if (vertical) {\n    ledPosX = imageWidth / 2 - ledSize / 2\n    ledPosY = 0.053 * imageHeight\n    stdFont = Math.floor(imageHeight / 22) + 'px ' + stdFontName\n    lcdFont = Math.floor(imageHeight / 22) + 'px ' + lcdFontName\n  } else {\n    ledPosX = 0.89 * imageWidth\n    ledPosY = imageHeight / 1.95 - ledSize / 2\n    stdFont = Math.floor(imageHeight / 10) + 'px ' + stdFontName\n    lcdFont = Math.floor(imageHeight / 10) + 'px ' + lcdFontName\n  }\n\n  let initialized = false\n\n  // Tickmark specific private variables\n  let niceMinValue = minValue\n  let niceMaxValue = maxValue\n  let niceRange = maxValue - minValue\n  let minorTickSpacing = 0\n  let majorTickSpacing = 0\n  const maxNoOfMinorTicks = 10\n  const maxNoOfMajorTicks = 10\n\n  // Method to calculate nice values for min, max and range for the tickmarks\n  const calculate = function calculate () {\n    if (niceScale) {\n      niceRange = calcNiceNumber(maxValue - minValue, false)\n      majorTickSpacing = calcNiceNumber(\n        niceRange / (maxNoOfMajorTicks - 1),\n        true\n      )\n      niceMinValue = Math.floor(minValue / majorTickSpacing) * majorTickSpacing\n      niceMaxValue = Math.ceil(maxValue / majorTickSpacing) * majorTickSpacing\n      minorTickSpacing = calcNiceNumber(\n        majorTickSpacing / (maxNoOfMinorTicks - 1),\n        true\n      )\n      minValue = niceMinValue\n      maxValue = niceMaxValue\n    } else {\n      niceRange = maxValue - minValue\n      niceMinValue = minValue\n      niceMaxValue = maxValue\n      minorTickSpacing = 1\n      majorTickSpacing = 10\n    }\n    // Make sure values are still in range\n    value = value < minValue ? minValue : value > maxValue ? maxValue : value\n    minMeasuredValue =\n      minMeasuredValue < minValue\n        ? minValue\n        : minMeasuredValue > maxValue\n          ? maxValue\n          : minMeasuredValue\n    maxMeasuredValue =\n      maxMeasuredValue < minValue\n        ? minValue\n        : maxMeasuredValue > maxValue\n          ? maxValue\n          : maxMeasuredValue\n    threshold =\n      threshold < minValue\n        ? minValue\n        : threshold > maxValue\n          ? maxValue\n          : threshold\n  }\n\n  // **************   Buffer creation  ********************\n  // Buffer for the frame\n  const frameBuffer = createBuffer(width, height)\n  let frameContext = frameBuffer.getContext('2d')\n\n  // Buffer for the background\n  const backgroundBuffer = createBuffer(width, height)\n  let backgroundContext = backgroundBuffer.getContext('2d')\n\n  let lcdBuffer\n\n  // Buffer for active bargraph led\n  const activeLedBuffer = doc.createElement('canvas')\n  if (vertical) {\n    activeLedBuffer.width = imageWidth * 0.121428\n    activeLedBuffer.height = imageHeight * 0.012135\n  } else {\n    activeLedBuffer.width = imageWidth * 0.012135\n    activeLedBuffer.height = imageHeight * 0.121428\n  }\n  let activeLedContext = activeLedBuffer.getContext('2d')\n\n  // Buffer for active bargraph led\n  const inActiveLedBuffer = doc.createElement('canvas')\n  if (vertical) {\n    inActiveLedBuffer.width = imageWidth * 0.121428\n    inActiveLedBuffer.height = imageHeight * 0.012135\n  } else {\n    inActiveLedBuffer.width = imageWidth * 0.012135\n    inActiveLedBuffer.height = imageHeight * 0.121428\n  }\n  let inActiveLedContext = inActiveLedBuffer.getContext('2d')\n\n  // Buffer for led on painting code\n  const ledBufferOn = createBuffer(ledSize, ledSize)\n  let ledContextOn = ledBufferOn.getContext('2d')\n\n  // Buffer for led off painting code\n  const ledBufferOff = createBuffer(ledSize, ledSize)\n  let ledContextOff = ledBufferOff.getContext('2d')\n\n  // Buffer for current led painting code\n  let ledBuffer = ledBufferOff\n\n  // Buffer for the minMeasuredValue indicator\n  const minMeasuredValueBuffer = createBuffer(minMaxIndSize, minMaxIndSize)\n  const minMeasuredValueCtx = minMeasuredValueBuffer.getContext('2d')\n\n  // Buffer for the maxMeasuredValue indicator\n  const maxMeasuredValueBuffer = createBuffer(minMaxIndSize, minMaxIndSize)\n  const maxMeasuredValueCtx = maxMeasuredValueBuffer.getContext('2d')\n\n  // Buffer for static foreground painting code\n  const foregroundBuffer = createBuffer(width, height)\n  let foregroundContext = foregroundBuffer.getContext('2d')\n\n  // **************   Image creation  ********************\n  const drawLcdText = function (ctx, value, vertical) {\n    ctx.save()\n    ctx.textAlign = 'right'\n    ctx.textBaseline = 'middle'\n    ctx.strokeStyle = lcdColor.textColor\n    ctx.fillStyle = lcdColor.textColor\n\n    if (\n      lcdColor === LcdColor.STANDARD ||\n      lcdColor === LcdColor.STANDARD_GREEN\n    ) {\n      ctx.shadowColor = 'gray'\n      if (vertical) {\n        ctx.shadowOffsetX = imageWidth * 0.007\n        ctx.shadowOffsetY = imageWidth * 0.007\n        ctx.shadowBlur = imageWidth * 0.009\n      } else {\n        ctx.shadowOffsetX = imageHeight * 0.007\n        ctx.shadowOffsetY = imageHeight * 0.007\n        ctx.shadowBlur = imageHeight * 0.009\n      }\n    }\n\n    let lcdTextX\n    let lcdTextY\n    let lcdTextWidth\n\n    if (digitalFont) {\n      ctx.font = lcdFont\n    } else {\n      ctx.font = stdFont\n    }\n\n    if (vertical) {\n      lcdTextX =\n        (imageWidth - imageWidth * 0.571428) / 2 +\n        1 +\n        imageWidth * 0.571428 -\n        2\n      lcdTextY = imageHeight * 0.88 + 1 + (imageHeight * 0.055 - 2) / 2\n      lcdTextWidth = imageWidth * 0.7 - 2\n    } else {\n      lcdTextX = imageWidth * 0.695 + imageWidth * 0.18 - 2\n      lcdTextY = imageHeight * 0.22 + 1 + (imageHeight * 0.15 - 2) / 2\n      lcdTextWidth = imageHeight * 0.22 - 2\n    }\n\n    ctx.fillText(value.toFixed(lcdDecimals), lcdTextX, lcdTextY, lcdTextWidth)\n\n    ctx.restore()\n  }\n\n  const createThresholdImage = function (vertical) {\n    const thresholdBuffer = doc.createElement('canvas')\n    thresholdBuffer.height = thresholdBuffer.width = minMaxIndSize\n    const thresholdCtx = thresholdBuffer.getContext('2d')\n\n    thresholdCtx.save()\n    const gradThreshold = thresholdCtx.createLinearGradient(\n      0,\n      0.1,\n      0,\n      thresholdBuffer.height * 0.9\n    )\n    gradThreshold.addColorStop(0, '#520000')\n    gradThreshold.addColorStop(0.3, '#fc1d00')\n    gradThreshold.addColorStop(0.59, '#fc1d00')\n    gradThreshold.addColorStop(1, '#520000')\n    thresholdCtx.fillStyle = gradThreshold\n\n    if (vertical) {\n      thresholdCtx.beginPath()\n      thresholdCtx.moveTo(0.1, thresholdBuffer.height * 0.5)\n      thresholdCtx.lineTo(thresholdBuffer.width * 0.9, 0.1)\n      thresholdCtx.lineTo(\n        thresholdBuffer.width * 0.9,\n        thresholdBuffer.height * 0.9\n      )\n      thresholdCtx.closePath()\n    } else {\n      thresholdCtx.beginPath()\n      thresholdCtx.moveTo(0.1, 0.1)\n      thresholdCtx.lineTo(thresholdBuffer.width * 0.9, 0.1)\n      thresholdCtx.lineTo(\n        thresholdBuffer.width * 0.5,\n        thresholdBuffer.height * 0.9\n      )\n      thresholdCtx.closePath()\n    }\n\n    thresholdCtx.fill()\n    thresholdCtx.strokeStyle = '#FFFFFF'\n    thresholdCtx.stroke()\n\n    thresholdCtx.restore()\n\n    return thresholdBuffer\n  }\n\n  const drawTickmarksImage = function (ctx, labelNumberFormat, vertical) {\n    backgroundColor.labelColor.setAlpha(1)\n    ctx.save()\n    ctx.textBaseline = 'middle'\n    const TEXT_WIDTH = imageWidth * 0.1\n    ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor()\n    ctx.fillStyle = backgroundColor.labelColor.getRgbaColor()\n\n    let valueCounter = minValue\n    let majorTickCounter = maxNoOfMinorTicks - 1\n    let tickCounter\n    let currentPos\n    let scaleBoundsX\n    let scaleBoundsY\n    let scaleBoundsW\n    let scaleBoundsH\n    let tickSpaceScaling = 1\n\n    let minorTickStart\n    let minorTickStop\n    let mediumTickStart\n    let mediumTickStop\n    let majorTickStart\n    let majorTickStop\n    if (vertical) {\n      minorTickStart = 0.34 * imageWidth\n      minorTickStop = 0.36 * imageWidth\n      mediumTickStart = 0.33 * imageWidth\n      mediumTickStop = 0.36 * imageWidth\n      majorTickStart = 0.32 * imageWidth\n      majorTickStop = 0.36 * imageWidth\n      ctx.textAlign = 'right'\n      scaleBoundsX = 0\n      scaleBoundsY = imageHeight * 0.12864\n      scaleBoundsW = 0\n      scaleBoundsH = imageHeight * 0.856796 - imageHeight * 0.12864\n      tickSpaceScaling = scaleBoundsH / (maxValue - minValue)\n    } else {\n      minorTickStart = 0.65 * imageHeight\n      minorTickStop = 0.63 * imageHeight\n      mediumTickStart = 0.66 * imageHeight\n      mediumTickStop = 0.63 * imageHeight\n      majorTickStart = 0.67 * imageHeight\n      majorTickStop = 0.63 * imageHeight\n      ctx.textAlign = 'center'\n      scaleBoundsX = imageWidth * 0.142857\n      scaleBoundsY = 0\n      scaleBoundsW = imageWidth * 0.871012 - imageWidth * 0.142857\n      scaleBoundsH = 0\n      tickSpaceScaling = scaleBoundsW / (maxValue - minValue)\n    }\n\n    let labelCounter\n    for (\n      labelCounter = minValue, tickCounter = 0;\n      labelCounter <= maxValue;\n      labelCounter += minorTickSpacing, tickCounter += minorTickSpacing\n    ) {\n      // Calculate the bounds of the scaling\n      if (vertical) {\n        currentPos =\n          scaleBoundsY + scaleBoundsH - tickCounter * tickSpaceScaling\n      } else {\n        currentPos = scaleBoundsX + tickCounter * tickSpaceScaling\n      }\n\n      majorTickCounter++\n\n      // Draw tickmark every major tickmark spacing\n      if (majorTickCounter === maxNoOfMinorTicks) {\n        // Draw the major tickmarks\n        ctx.lineWidth = 1.5\n        drawLinearTicks(\n          ctx,\n          majorTickStart,\n          majorTickStop,\n          currentPos,\n          vertical\n        )\n\n        // Draw the standard tickmark labels\n        if (vertical) {\n          // Vertical orientation\n          switch (labelNumberFormat.format) {\n            case 'fractional':\n              ctx.fillText(\n                valueCounter.toFixed(2),\n                imageWidth * 0.28,\n                currentPos,\n                TEXT_WIDTH\n              )\n              break\n\n            case 'scientific':\n              ctx.fillText(\n                valueCounter.toPrecision(2),\n                imageWidth * 0.28,\n                currentPos,\n                TEXT_WIDTH\n              )\n              break\n\n            case 'standard':\n            /* falls through */\n            default:\n              ctx.fillText(\n                valueCounter.toFixed(0),\n                imageWidth * 0.28,\n                currentPos,\n                TEXT_WIDTH\n              )\n              break\n          }\n        } else {\n          // Horizontal orientation\n          switch (labelNumberFormat.format) {\n            case 'fractional':\n              ctx.fillText(\n                valueCounter.toFixed(2),\n                currentPos,\n                imageHeight * 0.73,\n                TEXT_WIDTH\n              )\n              break\n\n            case 'scientific':\n              ctx.fillText(\n                valueCounter.toPrecision(2),\n                currentPos,\n                imageHeight * 0.73,\n                TEXT_WIDTH\n              )\n              break\n\n            case 'standard':\n            /* falls through */\n            default:\n              ctx.fillText(\n                valueCounter.toFixed(0),\n                currentPos,\n                imageHeight * 0.73,\n                TEXT_WIDTH\n              )\n              break\n          }\n        }\n\n        valueCounter += majorTickSpacing\n        majorTickCounter = 0\n        continue\n      }\n\n      // Draw tickmark every minor tickmark spacing\n      if (\n        maxNoOfMinorTicks % 2 === 0 &&\n        majorTickCounter === maxNoOfMinorTicks / 2\n      ) {\n        ctx.lineWidth = 1\n        drawLinearTicks(\n          ctx,\n          mediumTickStart,\n          mediumTickStop,\n          currentPos,\n          vertical\n        )\n      } else {\n        ctx.lineWidth = 0.5\n        drawLinearTicks(\n          ctx,\n          minorTickStart,\n          minorTickStop,\n          currentPos,\n          vertical\n        )\n      }\n    }\n\n    ctx.restore()\n  }\n\n  const drawLinearTicks = function (\n    ctx,\n    tickStart,\n    tickStop,\n    currentPos,\n    vertical\n  ) {\n    if (vertical) {\n      // Vertical orientation\n      ctx.beginPath()\n      ctx.moveTo(tickStart, currentPos)\n      ctx.lineTo(tickStop, currentPos)\n      ctx.closePath()\n      ctx.stroke()\n    } else {\n      // Horizontal orientation\n      ctx.beginPath()\n      ctx.moveTo(currentPos, tickStart)\n      ctx.lineTo(currentPos, tickStop)\n      ctx.closePath()\n      ctx.stroke()\n    }\n  }\n\n  // **************   Initialization  ********************\n  const init = function (parameters) {\n    parameters = parameters || {}\n    const drawFrame2 =\n      undefined === parameters.frame ? false : parameters.frame\n    const drawBackground2 =\n      undefined === parameters.background ? false : parameters.background\n    const drawLed = undefined === parameters.led ? false : parameters.led\n    const drawForeground2 =\n      undefined === parameters.foreground ? false : parameters.foreground\n    const drawBargraphLed =\n      undefined === parameters.bargraphled ? false : parameters.bargraphled\n\n    initialized = true\n\n    // Calculate the current min and max values and the range\n    calculate()\n\n    // Create frame in frame buffer (backgroundBuffer)\n    if (drawFrame2 && frameVisible) {\n      drawLinearFrameImage(\n        frameContext,\n        frameDesign,\n        imageWidth,\n        imageHeight,\n        vertical\n      )\n    }\n\n    // Create background in background buffer (backgroundBuffer)\n    if (drawBackground2 && backgroundVisible) {\n      drawLinearBackgroundImage(\n        backgroundContext,\n        backgroundColor,\n        imageWidth,\n        imageHeight,\n        vertical\n      )\n    }\n\n    if (drawLed) {\n      if (vertical) {\n        // Draw LED ON in ledBuffer_ON\n        ledContextOn.drawImage(createLedImage(ledSize, 1, ledColor), 0, 0)\n\n        // Draw LED ON in ledBuffer_OFF\n        ledContextOff.drawImage(createLedImage(ledSize, 0, ledColor), 0, 0)\n      } else {\n        // Draw LED ON in ledBuffer_ON\n        ledContextOn.drawImage(createLedImage(ledSize, 1, ledColor), 0, 0)\n\n        // Draw LED ON in ledBuffer_OFF\n        ledContextOff.drawImage(createLedImage(ledSize, 0, ledColor), 0, 0)\n      }\n    }\n\n    // Draw min measured value indicator in minMeasuredValueBuffer\n    if (minMeasuredValueVisible) {\n      if (vertical) {\n        minMeasuredValueCtx.drawImage(\n          createMeasuredValueImage(\n            minMaxIndSize,\n            ColorDef.BLUE.dark.getRgbaColor(),\n            false,\n            vertical\n          ),\n          0,\n          0\n        )\n      } else {\n        minMeasuredValueCtx.drawImage(\n          createMeasuredValueImage(\n            minMaxIndSize,\n            ColorDef.BLUE.dark.getRgbaColor(),\n            false,\n            vertical\n          ),\n          0,\n          0\n        )\n      }\n    }\n\n    // Draw max measured value indicator in maxMeasuredValueBuffer\n    if (maxMeasuredValueVisible) {\n      if (vertical) {\n        maxMeasuredValueCtx.drawImage(\n          createMeasuredValueImage(\n            minMaxIndSize,\n            ColorDef.RED.medium.getRgbaColor(),\n            false,\n            vertical\n          ),\n          0,\n          0\n        )\n      } else {\n        maxMeasuredValueCtx.drawImage(\n          createMeasuredValueImage(\n            minMaxIndSize,\n            ColorDef.RED.medium.getRgbaColor(),\n            false,\n            vertical\n          ),\n          0,\n          0\n        )\n      }\n    }\n\n    // Create alignment posts in background buffer (backgroundBuffer)\n    if (drawBackground2 && backgroundVisible) {\n      let valuePos\n      // Create tickmarks in background buffer (backgroundBuffer)\n      drawTickmarksImage(backgroundContext, labelNumberFormat, vertical)\n\n      // Draw threshold image to background context\n      if (thresholdVisible) {\n        backgroundContext.save()\n        if (vertical) {\n          // Vertical orientation\n          valuePos =\n            imageHeight * 0.856796 -\n            (imageHeight * 0.728155 * (threshold - minValue)) /\n              (maxValue - minValue)\n          backgroundContext.translate(\n            imageWidth * 0.365,\n            valuePos - minMaxIndSize / 2\n          )\n        } else {\n          // Horizontal orientation\n          valuePos =\n            ((imageWidth * 0.856796 - imageWidth * 0.12864) *\n              (threshold - minValue)) /\n            (maxValue - minValue)\n          backgroundContext.translate(\n            imageWidth * 0.142857 - minMaxIndSize / 2 + valuePos,\n            imageHeight * 0.58\n          )\n        }\n        backgroundContext.drawImage(createThresholdImage(vertical), 0, 0)\n        backgroundContext.restore()\n      }\n\n      // Create title in background buffer (backgroundBuffer)\n      if (vertical) {\n        drawTitleImage(\n          backgroundContext,\n          imageWidth,\n          imageHeight,\n          titleString,\n          unitString,\n          backgroundColor,\n          vertical,\n          null,\n          lcdVisible\n        )\n      } else {\n        drawTitleImage(\n          backgroundContext,\n          imageWidth,\n          imageHeight,\n          titleString,\n          unitString,\n          backgroundColor,\n          vertical,\n          null,\n          lcdVisible\n        )\n      }\n    }\n\n    // Create lcd background if selected in background buffer (backgroundBuffer)\n    if (drawBackground2 && lcdVisible) {\n      if (vertical) {\n        lcdBuffer = createLcdBackgroundImage(\n          imageWidth * 0.571428,\n          imageHeight * 0.055,\n          lcdColor\n        )\n        backgroundContext.drawImage(\n          lcdBuffer,\n          (imageWidth - imageWidth * 0.571428) / 2,\n          imageHeight * 0.88\n        )\n      } else {\n        lcdBuffer = createLcdBackgroundImage(\n          imageWidth * 0.18,\n          imageHeight * 0.15,\n          lcdColor\n        )\n        backgroundContext.drawImage(\n          lcdBuffer,\n          imageWidth * 0.695,\n          imageHeight * 0.22\n        )\n      }\n    }\n\n    // Draw leds of bargraph\n    if (drawBargraphLed) {\n      drawInActiveLed(inActiveLedContext)\n      drawActiveLed(activeLedContext, valueColor)\n    }\n\n    // Convert Section values into pixels\n    isSectionsVisible = false\n    if (section !== null && section.length > 0) {\n      isSectionsVisible = true\n      let sectionIndex = section.length\n      let top\n      let bottom\n      let fullSize\n      let ledWidth2\n\n      if (vertical) {\n        // Vertical orientation\n        top = imageHeight * 0.12864 // position of max value\n        bottom = imageHeight * 0.856796 // position of min value\n        fullSize = bottom - top\n        ledWidth2 = 0\n      } else {\n        // Horizontal orientation\n        top = imageWidth * 0.856796 // position of max value\n        bottom = imageWidth * 0.12864\n        fullSize = top - bottom\n        ledWidth2 = (imageWidth * 0.012135) / 2\n      }\n      sectionPixels = []\n      do {\n        sectionIndex--\n        sectionPixels.push({\n          start:\n            ((section[sectionIndex].start + Math.abs(minValue)) /\n              (maxValue - minValue)) *\n              fullSize -\n            ledWidth2,\n          stop:\n            ((section[sectionIndex].stop + Math.abs(minValue)) /\n              (maxValue - minValue)) *\n              fullSize -\n            ledWidth2,\n          color: customColorDef(section[sectionIndex].color)\n        })\n      } while (sectionIndex > 0)\n    }\n\n    // Use a gradient for the valueColor?\n    isGradientVisible = false\n    if (useValueGradient && valueGradient !== null) {\n      // force section colors off!\n      isSectionsVisible = false\n      isGradientVisible = true\n    }\n\n    // Create foreground in foreground buffer (foregroundBuffer)\n    if (drawForeground2 && foregroundVisible) {\n      drawLinearForegroundImage(\n        foregroundContext,\n        imageWidth,\n        imageHeight,\n        vertical,\n        false\n      )\n    }\n  }\n\n  const resetBuffers = function (buffers) {\n    buffers = buffers || {}\n    const resetFrame = undefined === buffers.frame ? false : buffers.frame\n    const resetBackground =\n      undefined === buffers.background ? false : buffers.background\n    const resetLed = undefined === buffers.led ? false : buffers.led\n    const resetBargraphLed =\n      undefined === buffers.bargraphled ? false : buffers.bargraphled\n    const resetForeground =\n      undefined === buffers.foreground ? false : buffers.foreground\n\n    if (resetFrame) {\n      frameBuffer.width = width\n      frameBuffer.height = height\n      frameContext = frameBuffer.getContext('2d')\n    }\n\n    if (resetBackground) {\n      backgroundBuffer.width = width\n      backgroundBuffer.height = height\n      backgroundContext = backgroundBuffer.getContext('2d')\n    }\n\n    if (resetBargraphLed) {\n      if (vertical) {\n        activeLedBuffer.width = width * 0.121428\n        activeLedBuffer.height = height * 0.012135\n      } else {\n        activeLedBuffer.width = width * 0.012135\n        activeLedBuffer.height = height * 0.121428\n      }\n      activeLedContext = activeLedBuffer.getContext('2d')\n\n      // Buffer for active bargraph led\n      if (vertical) {\n        inActiveLedBuffer.width = width * 0.121428\n        inActiveLedBuffer.height = height * 0.012135\n      } else {\n        inActiveLedBuffer.width = width * 0.012135\n        inActiveLedBuffer.height = height * 0.121428\n      }\n      inActiveLedContext = inActiveLedBuffer.getContext('2d')\n    }\n\n    if (resetLed) {\n      ledBufferOn.width = Math.ceil(width * 0.093457)\n      ledBufferOn.height = Math.ceil(height * 0.093457)\n      ledContextOn = ledBufferOn.getContext('2d')\n\n      ledBufferOff.width = Math.ceil(width * 0.093457)\n      ledBufferOff.height = Math.ceil(height * 0.093457)\n      ledContextOff = ledBufferOff.getContext('2d')\n\n      // Buffer for current led painting code\n      ledBuffer = ledBufferOff\n    }\n\n    if (resetForeground) {\n      foregroundBuffer.width = width\n      foregroundBuffer.height = height\n      foregroundContext = foregroundBuffer.getContext('2d')\n    }\n  }\n\n  const blink = function (blinking) {\n    if (blinking) {\n      ledTimerId = setInterval(toggleAndRepaintLed, 1000)\n    } else {\n      clearInterval(ledTimerId)\n      ledBuffer = ledBufferOff\n    }\n  }\n\n  const toggleAndRepaintLed = function () {\n    if (ledVisible) {\n      if (ledBuffer === ledBufferOn) {\n        ledBuffer = ledBufferOff\n      } else {\n        ledBuffer = ledBufferOn\n      }\n      if (!repainting) {\n        repainting = true\n        requestAnimFrame(self.repaint)\n      }\n    }\n  }\n\n  const drawValue = function (ctx, imageWidth, imageHeight) {\n    let top // position of max value\n    let bottom // position of min value\n    const labelColor = backgroundColor.labelColor\n    let fullSize\n    let valueBackgroundStartX\n    let valueBackgroundStartY\n    let valueBackgroundStopX\n    let valueBackgroundStopY\n    let valueBorderStartX\n    let valueBorderStartY\n    let valueBorderStopX\n    let valueBorderStopY\n    let currentValue\n    let gradRange\n    let fraction\n\n    // Orientation dependend definitions\n    if (vertical) {\n      // Vertical orientation\n      top = imageHeight * 0.12864 // position of max value\n      bottom = imageHeight * 0.856796 // position of min value\n      fullSize = bottom - top\n      valueBackgroundStartX = 0\n      valueBackgroundStartY = top\n      valueBackgroundStopX = 0\n      valueBackgroundStopY = top + fullSize * 1.014\n    } else {\n      // Horizontal orientation\n      top = imageWidth * 0.856796 // position of max value\n      bottom = imageWidth * 0.12864\n      fullSize = top - bottom\n      valueBackgroundStartX = imageWidth * 0.13\n      valueBackgroundStartY = imageHeight * 0.435714\n      valueBackgroundStopX = valueBackgroundStartX + fullSize * 1.035\n      valueBackgroundStopY = valueBackgroundStartY\n    }\n\n    const darker =\n      backgroundColor === BackgroundColor.CARBON ||\n      backgroundColor === BackgroundColor.PUNCHED_SHEET ||\n      backgroundColor === BackgroundColor.STAINLESS ||\n      backgroundColor === BackgroundColor.BRUSHED_STAINLESS ||\n      backgroundColor === BackgroundColor.TURNED\n        ? 0.3\n        : 0\n\n    const valueBackgroundTrackGradient = ctx.createLinearGradient(\n      valueBackgroundStartX,\n      valueBackgroundStartY,\n      valueBackgroundStopX,\n      valueBackgroundStopY\n    )\n    labelColor.setAlpha(0.047058 + darker)\n    valueBackgroundTrackGradient.addColorStop(0, labelColor.getRgbaColor())\n    labelColor.setAlpha(0.145098 + darker)\n    valueBackgroundTrackGradient.addColorStop(0.48, labelColor.getRgbaColor())\n    labelColor.setAlpha(0.149019 + darker)\n    valueBackgroundTrackGradient.addColorStop(0.49, labelColor.getRgbaColor())\n    labelColor.setAlpha(0.047058 + darker)\n    valueBackgroundTrackGradient.addColorStop(1, labelColor.getRgbaColor())\n    ctx.fillStyle = valueBackgroundTrackGradient\n\n    if (vertical) {\n      ctx.fillRect(\n        imageWidth * 0.435714,\n        top,\n        imageWidth * 0.15,\n        fullSize * 1.014\n      )\n    } else {\n      ctx.fillRect(\n        valueBackgroundStartX,\n        valueBackgroundStartY,\n        fullSize * 1.035,\n        imageHeight * 0.152857\n      )\n    }\n\n    if (vertical) {\n      // Vertical orientation\n      valueBorderStartX = 0\n      valueBorderStartY = top\n      valueBorderStopX = 0\n      valueBorderStopY = top + fullSize * 1.014\n    } else {\n      // Horizontal orientation                ;\n      valueBorderStartX = valueBackgroundStartX\n      valueBorderStartY = 0\n      valueBorderStopX = valueBackgroundStopX\n      valueBorderStopY = 0\n    }\n\n    const valueBorderGradient = ctx.createLinearGradient(\n      valueBorderStartX,\n      valueBorderStartY,\n      valueBorderStopX,\n      valueBorderStopY\n    )\n    labelColor.setAlpha(0.298039 + darker)\n    valueBorderGradient.addColorStop(0, labelColor.getRgbaColor())\n    labelColor.setAlpha(0.686274 + darker)\n    valueBorderGradient.addColorStop(0.48, labelColor.getRgbaColor())\n    labelColor.setAlpha(0.698039 + darker)\n    valueBorderGradient.addColorStop(0.49, labelColor.getRgbaColor())\n    labelColor.setAlpha(0.4 + darker)\n    valueBorderGradient.addColorStop(1, labelColor.getRgbaColor())\n    ctx.fillStyle = valueBorderGradient\n    if (vertical) {\n      ctx.fillRect(\n        imageWidth * 0.435714,\n        top,\n        imageWidth * 0.007142,\n        fullSize * 1.014\n      )\n      ctx.fillRect(\n        imageWidth * 0.571428,\n        top,\n        imageWidth * 0.007142,\n        fullSize * 1.014\n      )\n    } else {\n      ctx.fillRect(\n        imageWidth * 0.13,\n        imageHeight * 0.435714,\n        fullSize * 1.035,\n        imageHeight * 0.007142\n      )\n      ctx.fillRect(\n        imageWidth * 0.13,\n        imageHeight * 0.571428,\n        fullSize * 1.035,\n        imageHeight * 0.007142\n      )\n    }\n\n    // Prepare led specific variables\n    let ledX\n    let ledY\n    let ledW\n    let ledH\n    let activeLeds\n    let inactiveLeds\n    if (vertical) {\n      // VERTICAL\n      ledX = imageWidth * 0.45\n      ledY = imageHeight * 0.851941\n      ledW = imageWidth * 0.121428\n      ledH = imageHeight * 0.012135\n    } else {\n      // HORIZONTAL\n      ledX = imageWidth * 0.142857\n      ledY = imageHeight * 0.45\n      ledW = imageWidth * 0.012135\n      ledH = imageHeight * 0.121428\n    }\n\n    let translateX\n    let translateY\n    let activeLedColor\n    let lastActiveLedColor = valueColor\n    let i\n    // Draw the value\n    if (vertical) {\n      // Draw the inactive leds\n      inactiveLeds = fullSize\n      for (translateY = 0; translateY <= inactiveLeds; translateY += ledH + 1) {\n        ctx.translate(0, -translateY)\n        ctx.drawImage(inActiveLedBuffer, ledX, ledY)\n        ctx.translate(0, translateY)\n      }\n      // Draw the active leds in dependence on the current value\n      activeLeds = ((value - minValue) / (maxValue - minValue)) * fullSize\n      for (translateY = 0; translateY <= activeLeds; translateY += ledH + 1) {\n        // check for LED color\n        activeLedColor = valueColor\n        // Use a gradient for value colors?\n        if (isGradientVisible) {\n          // Convert pixel back to value\n          currentValue =\n            minValue + (translateY / fullSize) * (maxValue - minValue)\n          gradRange = valueGradient.getEnd() - valueGradient.getStart()\n          fraction = (currentValue - minValue) / gradRange\n          fraction = Math.max(Math.min(fraction, 1), 0)\n          activeLedColor = customColorDef(\n            valueGradient.getColorAt(fraction).getRgbaColor()\n          )\n        } else if (isSectionsVisible) {\n          for (i = 0; i < sectionPixels.length; i++) {\n            if (\n              translateY >= sectionPixels[i].start &&\n              translateY < sectionPixels[i].stop\n            ) {\n              activeLedColor = sectionPixels[i].color\n              break\n            }\n          }\n        }\n        // Has LED color changed? If so redraw the buffer\n        if (\n          lastActiveLedColor.medium.getHexColor() !==\n          activeLedColor.medium.getHexColor()\n        ) {\n          drawActiveLed(activeLedContext, activeLedColor)\n          lastActiveLedColor = activeLedColor\n        }\n        // Draw LED\n        ctx.translate(0, -translateY)\n        ctx.drawImage(activeLedBuffer, ledX, ledY)\n        ctx.translate(0, translateY)\n      }\n    } else {\n      // Draw the inactive leds\n      inactiveLeds = fullSize\n      for (\n        translateX = -(ledW / 2);\n        translateX <= inactiveLeds;\n        translateX += ledW + 1\n      ) {\n        ctx.translate(translateX, 0)\n        ctx.drawImage(inActiveLedBuffer, ledX, ledY)\n        ctx.translate(-translateX, 0)\n      }\n      // Draw the active leds in dependence on the current value\n      activeLeds = ((value - minValue) / (maxValue - minValue)) * fullSize\n      for (\n        translateX = -(ledW / 2);\n        translateX <= activeLeds;\n        translateX += ledW + 1\n      ) {\n        // check for LED color\n        activeLedColor = valueColor\n        if (isGradientVisible) {\n          // Convert pixel back to value\n          currentValue =\n            minValue + (translateX / fullSize) * (maxValue - minValue)\n          gradRange = valueGradient.getEnd() - valueGradient.getStart()\n          fraction = (currentValue - minValue) / gradRange\n          fraction = Math.max(Math.min(fraction, 1), 0)\n          activeLedColor = customColorDef(\n            valueGradient.getColorAt(fraction).getRgbaColor()\n          )\n        } else if (isSectionsVisible) {\n          for (i = 0; i < sectionPixels.length; i++) {\n            if (\n              translateX >= sectionPixels[i].start &&\n              translateX < sectionPixels[i].stop\n            ) {\n              activeLedColor = sectionPixels[i].color\n              break\n            }\n          }\n        }\n        // Has LED color changed? If so redraw the buffer\n        if (\n          lastActiveLedColor.medium.getHexColor() !==\n          activeLedColor.medium.getHexColor()\n        ) {\n          drawActiveLed(activeLedContext, activeLedColor)\n          lastActiveLedColor = activeLedColor\n        }\n        ctx.translate(translateX, 0)\n        ctx.drawImage(activeLedBuffer, ledX, ledY)\n        ctx.translate(-translateX, 0)\n      }\n    }\n  }\n\n  const drawInActiveLed = function (ctx) {\n    ctx.save()\n    ctx.beginPath()\n    ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height)\n    ctx.closePath()\n    const ledCenterX = ctx.canvas.width / 2\n    const ledCenterY = ctx.canvas.height / 2\n    const ledGradient = mainCtx.createRadialGradient(\n      ledCenterX,\n      ledCenterY,\n      0,\n      ledCenterX,\n      ledCenterY,\n      ctx.canvas.width / 2\n    )\n    ledGradient.addColorStop(0, '#3c3c3c')\n    ledGradient.addColorStop(1, '#323232')\n    ctx.fillStyle = ledGradient\n    ctx.fill()\n    ctx.restore()\n  }\n\n  const drawActiveLed = function (ctx, color) {\n    ctx.save()\n    ctx.beginPath()\n    ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height)\n    ctx.closePath()\n    const ledCenterX = ctx.canvas.width / 2\n    const ledCenterY = ctx.canvas.height / 2\n    let outerRadius\n    if (vertical) {\n      outerRadius = ctx.canvas.width / 2\n    } else {\n      outerRadius = ctx.canvas.height / 2\n    }\n    const ledGradient = mainCtx.createRadialGradient(\n      ledCenterX,\n      ledCenterY,\n      0,\n      ledCenterX,\n      ledCenterY,\n      outerRadius\n    )\n    ledGradient.addColorStop(0, color.light.getRgbaColor())\n    ledGradient.addColorStop(1, color.dark.getRgbaColor())\n    ctx.fillStyle = ledGradient\n    ctx.fill()\n    ctx.restore()\n  }\n\n  //* *********************************** Public methods **************************************\n  this.setValue = function (newValue) {\n    newValue = parseFloat(newValue)\n    const targetValue =\n      newValue < minValue\n        ? minValue\n        : newValue > maxValue\n          ? maxValue\n          : newValue\n    if (value !== targetValue) {\n      value = targetValue\n\n      if (value > maxMeasuredValue) {\n        maxMeasuredValue = value\n      }\n      if (value < minMeasuredValue) {\n        minMeasuredValue = value\n      }\n\n      if (\n        (value >= threshold && !ledBlinking && thresholdRising) ||\n        (value <= threshold && !ledBlinking && !thresholdRising)\n      ) {\n        ledBlinking = true\n        blink(ledBlinking)\n        if (playAlarm) {\n          audioElement.play()\n        }\n      } else if (\n        (value < threshold && ledBlinking && thresholdRising) ||\n        (value > threshold && ledBlinking && !thresholdRising)\n      ) {\n        ledBlinking = false\n        blink(ledBlinking)\n        if (playAlarm) {\n          audioElement.pause()\n        }\n      }\n\n      this.repaint()\n    }\n    return this\n  }\n\n  this.getValue = function () {\n    return value\n  }\n\n  this.setValueAnimated = function (newValue, callback) {\n    const gauge = this\n    let time\n    newValue = parseFloat(newValue)\n    const targetValue =\n      newValue < minValue\n        ? minValue\n        : newValue > maxValue\n          ? maxValue\n          : newValue\n\n    if (value !== targetValue) {\n      if (undefined !== tween && tween.isPlaying) {\n        tween.stop()\n      }\n\n      time =\n        (fullScaleDeflectionTime * Math.abs(targetValue - value)) /\n        (maxValue - minValue)\n      time = Math.max(time, fullScaleDeflectionTime / 5)\n      tween = new Tween(\n        {},\n        '',\n        Tween.regularEaseInOut,\n        value,\n        targetValue,\n        time\n      )\n      // tween = new Tween({}, '', Tween.regularEaseInOut, value, targetValue, 1);\n      // tween = new Tween(new Object(), '', Tween.strongEaseInOut, value, targetValue, 1);\n      tween.onMotionChanged = function (event) {\n        value = event.target._pos\n\n        if (\n          (value >= threshold && !ledBlinking && thresholdRising) ||\n          (value <= threshold && !ledBlinking && !thresholdRising)\n        ) {\n          ledBlinking = true\n          blink(ledBlinking)\n          if (playAlarm) {\n            audioElement.play()\n          }\n        } else if (\n          (value < threshold && ledBlinking && thresholdRising) ||\n          (value > threshold && ledBlinking && !thresholdRising)\n        ) {\n          ledBlinking = false\n          blink(ledBlinking)\n          if (playAlarm) {\n            audioElement.pause()\n          }\n        }\n\n        if (value > maxMeasuredValue) {\n          maxMeasuredValue = value\n        }\n        if (value < minMeasuredValue) {\n          minMeasuredValue = value\n        }\n\n        if (!repainting) {\n          repainting = true\n          requestAnimFrame(gauge.repaint)\n        }\n      }\n\n      // do we have a callback function to process?\n      if (callback && typeof callback === 'function') {\n        tween.onMotionFinished = callback\n      }\n\n      tween.start()\n    }\n    return this\n  }\n\n  this.resetMinMeasuredValue = function () {\n    minMeasuredValue = value\n    this.repaint()\n    return this\n  }\n\n  this.resetMaxMeasuredValue = function () {\n    maxMeasuredValue = value\n    this.repaint()\n    return this\n  }\n\n  this.setMinMeasuredValueVisible = function (visible) {\n    minMeasuredValueVisible = !!visible\n    this.repaint()\n    return this\n  }\n\n  this.setMaxMeasuredValueVisible = function (visible) {\n    maxMeasuredValueVisible = !!visible\n    this.repaint()\n    return this\n  }\n\n  this.setThresholdVisible = function (visible) {\n    thresholdVisible = !!visible\n    this.repaint()\n    return this\n  }\n\n  this.setThresholdRising = function (rising) {\n    thresholdRising = !!rising\n    // reset existing threshold alerts\n    ledBlinking = !ledBlinking\n    blink(ledBlinking)\n    this.repaint()\n    return this\n  }\n\n  this.setLcdDecimals = function (decimals) {\n    lcdDecimals = parseInt(decimals, 10)\n    this.repaint()\n    return this\n  }\n\n  this.setFrameDesign = function (newFrameDesign) {\n    resetBuffers({\n      frame: true\n    })\n    frameDesign = newFrameDesign\n    init({\n      frame: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setBackgroundColor = function (newBackgroundColor) {\n    resetBuffers({\n      background: true\n    })\n    backgroundColor = newBackgroundColor\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setValueColor = function (newValueColor) {\n    resetBuffers({\n      bargraphled: true\n    })\n    valueColor = newValueColor\n    init({\n      bargraphled: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setLedColor = function (newLedColor) {\n    resetBuffers({\n      led: true\n    })\n    ledColor = newLedColor\n    init({\n      led: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setLedVisible = function (visible) {\n    ledVisible = !!visible\n    this.repaint()\n    return this\n  }\n\n  this.setLcdColor = function (newLcdColor) {\n    lcdColor = newLcdColor\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setSection = function (areaSec) {\n    section = areaSec\n    init()\n    this.repaint()\n    return this\n  }\n\n  this.setSectionActive = function (value) {\n    init()\n    this.repaint()\n    return this\n  }\n\n  this.setGradient = function (grad) {\n    valueGradient = grad\n    init()\n    this.repaint()\n    return this\n  }\n\n  this.setGradientActive = function (value) {\n    useValueGradient = value\n    init()\n    this.repaint()\n    return this\n  }\n\n  this.setMaxMeasuredValue = function (newValue) {\n    newValue = parseFloat(newValue)\n    const targetValue =\n      newValue < minValue\n        ? minValue\n        : newValue > maxValue\n          ? maxValue\n          : newValue\n    if (maxMeasuredValue !== targetValue) {\n      maxMeasuredValue = targetValue\n      this.repaint()\n    }\n    return this\n  }\n\n  this.setMinMeasuredValue = function (newValue) {\n    newValue = parseFloat(newValue)\n    const targetValue =\n      newValue < minValue\n        ? minValue\n        : newValue > maxValue\n          ? maxValue\n          : newValue\n    if (minMeasuredValue !== targetValue) {\n      minMeasuredValue = targetValue\n      this.repaint()\n    }\n    return this\n  }\n\n  this.setTitleString = function (title) {\n    titleString = title\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setUnitString = function (unit) {\n    unitString = unit\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setMinValue = function (newValue) {\n    minValue = parseFloat(newValue)\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.getMinValue = function () {\n    return minValue\n  }\n\n  this.setMaxValue = function (newValue) {\n    maxValue = parseFloat(newValue)\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.getMaxValue = function () {\n    return maxValue\n  }\n\n  this.setThreshold = function (newValue) {\n    newValue = parseFloat(newValue)\n    const targetValue =\n      newValue < minValue\n        ? minValue\n        : newValue > maxValue\n          ? maxValue\n          : newValue\n    if (threshold !== targetValue) {\n      threshold = targetValue\n      resetBuffers({\n        background: true\n      })\n      init({\n        background: true\n      })\n      this.repaint()\n    }\n    return this\n  }\n\n  this.setThresholdVisible = function (visible) {\n    thresholdVisible = !!visible\n    this.repaint()\n    return this\n  }\n\n  this.repaint = function () {\n    if (!initialized) {\n      init({\n        frame: true,\n        background: true,\n        led: true,\n        pointer: true,\n        foreground: true,\n        bargraphled: true\n      })\n    }\n\n    // mainCtx.save();\n    mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height)\n\n    // Draw frame\n    if (frameVisible) {\n      mainCtx.drawImage(frameBuffer, 0, 0)\n    }\n\n    // Draw buffered image to visible canvas\n    if (backgroundVisible) {\n      mainCtx.drawImage(backgroundBuffer, 0, 0)\n    }\n\n    // Draw lcd display\n    if (lcdVisible) {\n      drawLcdText(mainCtx, value, vertical)\n    }\n\n    // Draw led\n    if (ledVisible) {\n      mainCtx.drawImage(ledBuffer, ledPosX, ledPosY)\n    }\n    let valuePos\n    let minMaxX\n    let minMaxY\n    // Draw min measured value indicator\n    if (minMeasuredValueVisible) {\n      if (vertical) {\n        valuePos =\n          imageHeight * 0.856796 -\n          (imageHeight * 0.728155 * (minMeasuredValue - minValue)) /\n            (maxValue - minValue)\n        minMaxX = imageWidth * 0.34 - minMeasuredValueBuffer.width\n        minMaxY = valuePos - minMeasuredValueBuffer.height / 2\n      } else {\n        valuePos =\n          ((imageWidth * 0.856796 - imageWidth * 0.12864) *\n            (minMeasuredValue - minValue)) /\n          (maxValue - minValue)\n        minMaxX =\n          imageWidth * 0.142857 - minMeasuredValueBuffer.height / 2 + valuePos\n        minMaxY = imageHeight * 0.65\n      }\n      mainCtx.drawImage(minMeasuredValueBuffer, minMaxX, minMaxY)\n    }\n\n    // Draw max measured value indicator\n    if (maxMeasuredValueVisible) {\n      if (vertical) {\n        valuePos =\n          imageHeight * 0.856796 -\n          (imageHeight * 0.728155 * (maxMeasuredValue - minValue)) /\n            (maxValue - minValue)\n        minMaxX = imageWidth * 0.34 - maxMeasuredValueBuffer.width\n        minMaxY = valuePos - maxMeasuredValueBuffer.height / 2\n      } else {\n        valuePos =\n          ((imageWidth * 0.856796 - imageWidth * 0.12864) *\n            (maxMeasuredValue - minValue)) /\n          (maxValue - minValue)\n        minMaxX =\n          imageWidth * 0.142857 - maxMeasuredValueBuffer.height / 2 + valuePos\n        minMaxY = imageHeight * 0.65\n      }\n      mainCtx.drawImage(maxMeasuredValueBuffer, minMaxX, minMaxY)\n    }\n\n    mainCtx.save()\n    drawValue(mainCtx, imageWidth, imageHeight)\n    mainCtx.restore()\n\n    // Draw foreground\n    if (foregroundVisible) {\n      mainCtx.drawImage(foregroundBuffer, 0, 0)\n    }\n\n    repainting = false\n  }\n\n  // Visualize the component\n  this.repaint()\n\n  return this\n}\n\nexport default LinearBargraph\n","import createLcdBackgroundImage from './createLcdBackgroundImage'\nimport {\n  roundedRectangle,\n  createBuffer,\n  getColorValues,\n  hsbToRgb,\n  rgbToHsb,\n  requestAnimFrame,\n  getCanvasContext,\n  lcdFontName,\n  stdFontName\n} from './tools'\n\nimport { LcdColor } from './definitions'\n\nconst DisplaySingle = function (canvas, parameters) {\n  parameters = parameters || {}\n  let width = undefined === parameters.width ? 0 : parameters.width\n  let height = undefined === parameters.height ? 0 : parameters.height\n  let lcdColor =\n    undefined === parameters.lcdColor ? LcdColor.STANDARD : parameters.lcdColor\n  const lcdDecimals =\n    undefined === parameters.lcdDecimals ? 2 : parameters.lcdDecimals\n  const unitString =\n    undefined === parameters.unitString ? '' : parameters.unitString\n  const unitStringVisible =\n    undefined === parameters.unitStringVisible\n      ? false\n      : parameters.unitStringVisible\n  const headerString =\n    undefined === parameters.headerString ? '' : parameters.headerString\n  const headerStringVisible =\n    undefined === parameters.headerStringVisible\n      ? false\n      : parameters.headerStringVisible\n  const digitalFont =\n    undefined === parameters.digitalFont ? false : parameters.digitalFont\n  const valuesNumeric =\n    undefined === parameters.valuesNumeric ? true : parameters.valuesNumeric\n  let value = undefined === parameters.value ? 0 : parameters.value\n  const alwaysScroll =\n    undefined === parameters.alwaysScroll ? false : parameters.alwaysScroll\n  const autoScroll =\n    undefined === parameters.autoScroll ? false : parameters.autoScroll\n  let section = undefined === parameters.section ? null : parameters.section\n\n  let scrolling = false\n  let scrollX = 0\n  let scrollTimer\n  let repainting = false\n\n  const self = this\n\n  // Get the canvas context and clear it\n  const mainCtx = getCanvasContext(canvas)\n  // Has a size been specified?\n  if (width === 0) {\n    width = mainCtx.canvas.width\n  }\n  if (height === 0) {\n    height = mainCtx.canvas.height\n  }\n\n  // Set the size - also clears the canvas\n  mainCtx.canvas.width = width\n  mainCtx.canvas.height = height\n\n  const imageWidth = width\n  const imageHeight = height\n  let textWidth = 0\n\n  const fontHeight = Math.floor(imageHeight / 1.5)\n  const stdFont = fontHeight + 'px ' + stdFontName\n  const lcdFont = fontHeight + 'px ' + lcdFontName\n\n  let initialized = false\n\n  // **************   Buffer creation  ********************\n  // Buffer for the lcd\n  let lcdBuffer\n  const sectionBuffer = []\n  const sectionForegroundColor = []\n\n  // **************   Image creation  ********************\n  const drawLcdText = function (value, color) {\n    mainCtx.save()\n    mainCtx.textAlign = 'right'\n    // mainCtx.textBaseline = 'top';\n    mainCtx.strokeStyle = color\n    mainCtx.fillStyle = color\n\n    mainCtx.beginPath()\n    mainCtx.rect(2, 0, imageWidth - 4, imageHeight)\n    mainCtx.closePath()\n    mainCtx.clip()\n\n    if (\n      (lcdColor === LcdColor.STANDARD ||\n        lcdColor === LcdColor.STANDARD_GREEN) &&\n      section === null\n    ) {\n      mainCtx.shadowColor = 'gray'\n      mainCtx.shadowOffsetX = imageHeight * 0.035\n      mainCtx.shadowOffsetY = imageHeight * 0.035\n      mainCtx.shadowBlur = imageHeight * 0.055\n    }\n\n    mainCtx.font = digitalFont ? lcdFont : stdFont\n\n    if (valuesNumeric) {\n      // Numeric value\n      let unitWidth = 0\n      textWidth = 0\n      if (unitStringVisible) {\n        mainCtx.font = Math.floor(imageHeight / 2.5) + 'px ' + stdFontName\n        unitWidth = mainCtx.measureText(unitString).width\n      }\n      mainCtx.font = digitalFont ? lcdFont : stdFont\n      const lcdText = value.toFixed(lcdDecimals)\n      textWidth = mainCtx.measureText(lcdText).width\n      let vPos = 0.38\n      if (headerStringVisible) {\n        vPos = 0.52\n      }\n\n      mainCtx.fillText(\n        lcdText,\n        imageWidth - unitWidth - 4 - scrollX,\n        imageHeight * 0.5 + fontHeight * vPos\n      )\n\n      if (unitStringVisible) {\n        mainCtx.font = Math.floor(imageHeight / 2.5) + 'px ' + stdFontName\n        mainCtx.fillText(\n          unitString,\n          imageWidth - 2 - scrollX,\n          imageHeight * 0.5 + fontHeight * vPos\n        )\n      }\n      if (headerStringVisible) {\n        mainCtx.textAlign = 'center'\n        mainCtx.font = Math.floor(imageHeight / 3.5) + 'px ' + stdFontName\n        mainCtx.fillText(headerString, imageWidth / 2, imageHeight * 0.3)\n      }\n    } else {\n      // Text value\n      textWidth = mainCtx.measureText(value).width\n      if (alwaysScroll || (autoScroll && textWidth > imageWidth - 4)) {\n        if (!scrolling) {\n          if (textWidth > imageWidth * 0.8) {\n            // leave 20% blank leading space to give time to read start of message\n            scrollX = imageWidth - textWidth - imageWidth * 0.2\n          } else {\n            scrollX = 0\n          }\n          scrolling = true\n          clearTimeout(scrollTimer) // kill any pending animate\n          scrollTimer = setTimeout(animate, 200)\n        }\n      } else if (autoScroll && textWidth <= imageWidth - 4) {\n        scrollX = 0\n        scrolling = false\n      }\n      mainCtx.fillText(\n        value,\n        imageWidth - 2 - scrollX,\n        imageHeight * 0.5 + fontHeight * 0.38\n      )\n    }\n    mainCtx.restore()\n  }\n\n  const createLcdSectionImage = function (width, height, color, lcdColor) {\n    const lcdSectionBuffer = createBuffer(width, height)\n    const lcdCtx = lcdSectionBuffer.getContext('2d')\n\n    lcdCtx.save()\n    const xB = 0\n    const yB = 0\n    const wB = width\n    const hB = height\n    const rB = Math.min(width, height) * 0.095\n\n    const lcdBackground = lcdCtx.createLinearGradient(0, yB, 0, yB + hB)\n\n    lcdBackground.addColorStop(0, '#4c4c4c')\n    lcdBackground.addColorStop(0.08, '#666666')\n    lcdBackground.addColorStop(0.92, '#666666')\n    lcdBackground.addColorStop(1, '#e6e6e6')\n    lcdCtx.fillStyle = lcdBackground\n\n    roundedRectangle(lcdCtx, xB, yB, wB, hB, rB)\n\n    lcdCtx.fill()\n    lcdCtx.restore()\n\n    lcdCtx.save()\n\n    const rgb = getColorValues(color)\n    const hsb = rgbToHsb(rgb[0], rgb[1], rgb[2])\n\n    const rgbStart = getColorValues(lcdColor.gradientStartColor)\n    const hsbStart = rgbToHsb(rgbStart[0], rgbStart[1], rgbStart[2])\n    const rgbFraction1 = getColorValues(lcdColor.gradientFraction1Color)\n    const hsbFraction1 = rgbToHsb(\n      rgbFraction1[0],\n      rgbFraction1[1],\n      rgbFraction1[2]\n    )\n    const rgbFraction2 = getColorValues(lcdColor.gradientFraction2Color)\n    const hsbFraction2 = rgbToHsb(\n      rgbFraction2[0],\n      rgbFraction2[1],\n      rgbFraction2[2]\n    )\n    const rgbFraction3 = getColorValues(lcdColor.gradientFraction3Color)\n    const hsbFraction3 = rgbToHsb(\n      rgbFraction3[0],\n      rgbFraction3[1],\n      rgbFraction3[2]\n    )\n    const rgbStop = getColorValues(lcdColor.gradientStopColor)\n    const hsbStop = rgbToHsb(rgbStop[0], rgbStop[1], rgbStop[2])\n\n    const startColor = hsbToRgb(hsb[0], hsb[1], hsbStart[2] - 0.31)\n    const fraction1Color = hsbToRgb(hsb[0], hsb[1], hsbFraction1[2] - 0.31)\n    const fraction2Color = hsbToRgb(hsb[0], hsb[1], hsbFraction2[2] - 0.31)\n    const fraction3Color = hsbToRgb(hsb[0], hsb[1], hsbFraction3[2] - 0.31)\n    const stopColor = hsbToRgb(hsb[0], hsb[1], hsbStop[2] - 0.31)\n\n    const xF = 1\n    const yF = 1\n    const wF = width - 2\n    const hF = height - 2\n    const rF = rB - 1\n    const lcdForeground = lcdCtx.createLinearGradient(0, yF, 0, yF + hF)\n    lcdForeground.addColorStop(\n      0,\n      'rgb(' + startColor[0] + ', ' + startColor[1] + ', ' + startColor[2] + ')'\n    )\n    lcdForeground.addColorStop(\n      0.03,\n      'rgb(' +\n        fraction1Color[0] +\n        ',' +\n        fraction1Color[1] +\n        ',' +\n        fraction1Color[2] +\n        ')'\n    )\n    lcdForeground.addColorStop(\n      0.49,\n      'rgb(' +\n        fraction2Color[0] +\n        ',' +\n        fraction2Color[1] +\n        ',' +\n        fraction2Color[2] +\n        ')'\n    )\n    lcdForeground.addColorStop(\n      0.5,\n      'rgb(' +\n        fraction3Color[0] +\n        ',' +\n        fraction3Color[1] +\n        ',' +\n        fraction3Color[2] +\n        ')'\n    )\n    lcdForeground.addColorStop(\n      1,\n      'rgb(' + stopColor[0] + ',' + stopColor[1] + ',' + stopColor[2] + ')'\n    )\n    lcdCtx.fillStyle = lcdForeground\n\n    roundedRectangle(lcdCtx, xF, yF, wF, hF, rF)\n\n    lcdCtx.fill()\n    lcdCtx.restore()\n\n    return lcdSectionBuffer\n  }\n\n  const createSectionForegroundColor = function (sectionColor) {\n    const rgbSection = getColorValues(sectionColor)\n    const hsbSection = rgbToHsb(rgbSection[0], rgbSection[1], rgbSection[2])\n    const sectionForegroundRgb = hsbToRgb(hsbSection[0], 0.57, 0.83)\n    return (\n      'rgb(' +\n      sectionForegroundRgb[0] +\n      ', ' +\n      sectionForegroundRgb[1] +\n      ', ' +\n      sectionForegroundRgb[2] +\n      ')'\n    )\n  }\n\n  const animate = function () {\n    if (scrolling) {\n      if (scrollX > imageWidth) {\n        scrollX = -textWidth\n      }\n      scrollX += 2\n      scrollTimer = setTimeout(animate, 50)\n    } else {\n      scrollX = 0\n    }\n    if (!repainting) {\n      repainting = true\n      requestAnimFrame(self.repaint)\n    }\n  }\n\n  // **************   Initialization  ********************\n  const init = function () {\n    let sectionIndex\n    initialized = true\n\n    // Create lcd background if selected in background buffer (backgroundBuffer)\n    lcdBuffer = createLcdBackgroundImage(width, height, lcdColor)\n\n    if (section !== null && section.length > 0) {\n      for (sectionIndex = 0; sectionIndex < section.length; sectionIndex++) {\n        sectionBuffer[sectionIndex] = createLcdSectionImage(\n          width,\n          height,\n          section[sectionIndex].color,\n          lcdColor\n        )\n        sectionForegroundColor[sectionIndex] = createSectionForegroundColor(\n          section[sectionIndex].color\n        )\n      }\n    }\n  }\n\n  // **************   Public methods  ********************\n  this.setValue = function (newValue) {\n    if (value !== newValue) {\n      value = newValue\n      this.repaint()\n    }\n    return this\n  }\n\n  this.setLcdColor = function (newLcdColor) {\n    lcdColor = newLcdColor\n    init()\n    this.repaint()\n    return this\n  }\n\n  this.setSection = function (newSection) {\n    section = newSection\n    init({\n      background: true,\n      foreground: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setScrolling = function (scroll) {\n    if (scroll) {\n      if (scrolling) {\n        return\n      } else {\n        scrolling = scroll\n        animate()\n      }\n    } else {\n      // disable scrolling\n      scrolling = scroll\n    }\n    return this\n  }\n\n  this.repaint = function () {\n    if (!initialized) {\n      init()\n    }\n\n    // mainCtx.save();\n    mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height)\n\n    let lcdBackgroundBuffer = lcdBuffer\n    let lcdTextColor = lcdColor.textColor\n    let sectionIndex\n    // Draw sections\n    if (section !== null && section.length > 0) {\n      for (sectionIndex = 0; sectionIndex < section.length; sectionIndex++) {\n        if (\n          value >= section[sectionIndex].start &&\n          value <= section[sectionIndex].stop\n        ) {\n          lcdBackgroundBuffer = sectionBuffer[sectionIndex]\n          lcdTextColor = sectionForegroundColor[sectionIndex]\n          break\n        }\n      }\n    }\n\n    // Draw lcd background\n    mainCtx.drawImage(lcdBackgroundBuffer, 0, 0)\n\n    // Draw lcd text\n    drawLcdText(value, lcdTextColor)\n\n    repainting = false\n  }\n\n  // Visualize the component\n  this.repaint()\n\n  return this\n}\n\nexport default DisplaySingle\n","import createLcdBackgroundImage from './createLcdBackgroundImage'\nimport { getCanvasContext, lcdFontName, stdFontName } from './tools'\n\nimport { LcdColor } from './definitions'\n\nconst DisplayMulti = function (canvas, parameters) {\n  parameters = parameters || {}\n  let width = undefined === parameters.width ? 0 : parameters.width\n  let height = undefined === parameters.height ? 0 : parameters.height\n  let lcdColor =\n    undefined === parameters.lcdColor ? LcdColor.STANDARD : parameters.lcdColor\n  const lcdDecimals =\n    undefined === parameters.lcdDecimals ? 2 : parameters.lcdDecimals\n  const headerString =\n    undefined === parameters.headerString ? '' : parameters.headerString\n  const headerStringVisible =\n    undefined === parameters.headerStringVisible\n      ? false\n      : parameters.headerStringVisible\n  const detailString =\n    undefined === parameters.detailString ? '' : parameters.detailString\n  const detailStringVisible =\n    undefined === parameters.detailStringVisible\n      ? false\n      : parameters.detailStringVisible\n  const linkAltValue =\n    undefined === parameters.linkAltValue ? true : parameters.linkAltValue\n  const unitString =\n    undefined === parameters.unitString ? '' : parameters.unitString\n  const unitStringVisible =\n    undefined === parameters.unitStringVisible\n      ? false\n      : parameters.unitStringVisible\n  const digitalFont =\n    undefined === parameters.digitalFont ? false : parameters.digitalFont\n  const valuesNumeric =\n    undefined === parameters.valuesNumeric ? true : parameters.valuesNumeric\n  let value = undefined === parameters.value ? 0 : parameters.value\n  let altValue = undefined === parameters.altValue ? 0 : parameters.altValue\n\n  // Get the canvas context and clear it\n  const mainCtx = getCanvasContext(canvas)\n  // Has a size been specified?\n  if (width === 0) {\n    width = mainCtx.canvas.width\n  }\n  if (height === 0) {\n    height = mainCtx.canvas.height\n  }\n\n  // Set the size - also clears the canvas\n  mainCtx.canvas.width = width\n  mainCtx.canvas.height = height\n\n  const imageWidth = width\n  const imageHeight = height\n\n  const stdFont = Math.floor(imageHeight / 1.875) + 'px ' + stdFontName\n  const lcdFont = Math.floor(imageHeight / 1.875) + 'px ' + lcdFontName\n  const stdAltFont = Math.floor(imageHeight / 3.5) + 'px ' + stdFontName\n  const lcdAltFont = Math.floor(imageHeight / 3.5) + 'px ' + lcdFontName\n\n  let initialized = false\n\n  // **************   Buffer creation  ********************\n  // Buffer for the lcd\n  let lcdBuffer\n\n  // **************   Image creation  ********************\n  const drawLcdText = function (value) {\n    mainCtx.save()\n    mainCtx.textAlign = 'right'\n    mainCtx.textBaseline = 'middle'\n    mainCtx.strokeStyle = lcdColor.textColor\n    mainCtx.fillStyle = lcdColor.textColor\n\n    if (\n      lcdColor === LcdColor.STANDARD ||\n      lcdColor === LcdColor.STANDARD_GREEN\n    ) {\n      mainCtx.shadowColor = 'gray'\n      mainCtx.shadowOffsetX = imageHeight * 0.025\n      mainCtx.shadowOffsetY = imageHeight * 0.025\n      mainCtx.shadowBlur = imageHeight * 0.05\n    }\n\n    if (valuesNumeric) {\n      // Numeric value\n      if (headerStringVisible) {\n        mainCtx.font = Math.floor(imageHeight / 3) + 'px ' + stdFontName\n      } else {\n        mainCtx.font = Math.floor(imageHeight / 2.5) + 'px ' + stdFontName\n      }\n      let unitWidth = 0\n      if (unitStringVisible) {\n        if (headerStringVisible) {\n          mainCtx.font = Math.floor(imageHeight / 3) + 'px ' + stdFontName\n          unitWidth = mainCtx.measureText(unitString).width\n        } else {\n          mainCtx.font = Math.floor(imageHeight / 2.5) + 'px ' + stdFontName\n          unitWidth = mainCtx.measureText(unitString).width\n        }\n      }\n      mainCtx.font = digitalFont ? lcdFont : stdFont\n      const valueText = value.toFixed(lcdDecimals)\n      if (headerStringVisible) {\n        mainCtx.fillText(\n          valueText,\n          imageWidth - unitWidth - 4,\n          imageHeight * 0.5\n        )\n      } else {\n        mainCtx.fillText(\n          valueText,\n          imageWidth - unitWidth - 4,\n          imageHeight * 0.38\n        )\n      }\n\n      if (unitStringVisible) {\n        mainCtx.font = Math.floor(imageHeight / 3) + 'px ' + stdFontName\n        mainCtx.fillText(unitString, imageWidth - 2, imageHeight * 0.55)\n      }\n\n      let altValueText = altValue.toFixed(lcdDecimals)\n      if (detailStringVisible) {\n        altValueText = detailString + altValueText\n      }\n      if (digitalFont) {\n        mainCtx.font = lcdAltFont\n      } else {\n        if (headerStringVisible) {\n          mainCtx.font = Math.floor(imageHeight / 5) + 'px ' + stdFontName\n        } else {\n          mainCtx.font = stdAltFont\n        }\n      }\n      mainCtx.textAlign = 'center'\n      if (headerStringVisible) {\n        mainCtx.fillText(altValueText, imageWidth / 2, imageHeight * 0.83)\n        mainCtx.fillText(headerString, imageWidth / 2, imageHeight * 0.16)\n      } else {\n        mainCtx.fillText(altValueText, imageWidth / 2, imageHeight * 0.8)\n      }\n    } else {\n      if (headerStringVisible) {\n        // Text value\n        mainCtx.font = Math.floor(imageHeight / 3.5) + 'px ' + stdFontName\n        mainCtx.fillText(value, imageWidth - 2, imageHeight * 0.48)\n\n        // mainCtx.font = stdAltFont;\n        mainCtx.font = Math.floor(imageHeight / 5) + 'px ' + stdFontName\n        mainCtx.textAlign = 'center'\n        mainCtx.fillText(altValue, imageWidth / 2, imageHeight * 0.83)\n        mainCtx.fillText(headerString, imageWidth / 2, imageHeight * 0.17)\n      } else {\n        // Text value\n        mainCtx.font = Math.floor(imageHeight / 2.5) + 'px ' + stdFontName\n        mainCtx.fillText(value, imageWidth - 2, imageHeight * 0.38)\n\n        mainCtx.font = stdAltFont\n        mainCtx.textAlign = 'center'\n        mainCtx.fillText(altValue, imageWidth / 2, imageHeight * 0.8)\n      }\n    }\n    mainCtx.restore()\n  }\n\n  // **************   Initialization  ********************\n  const init = function () {\n    initialized = true\n\n    // Create lcd background if selected in background buffer (backgroundBuffer)\n    lcdBuffer = createLcdBackgroundImage(width, height, lcdColor)\n  }\n\n  // **************   Public methods  ********************\n  this.setValue = function (newValue) {\n    if (value !== newValue) {\n      if (linkAltValue) {\n        altValue = value\n      }\n      value = newValue\n      this.repaint()\n    }\n    return this\n  }\n\n  this.setAltValue = function (altValueNew) {\n    if (altValue !== altValueNew) {\n      altValue = altValueNew\n      this.repaint()\n    }\n    return this\n  }\n\n  this.setLcdColor = function (newLcdColor) {\n    lcdColor = newLcdColor\n    init()\n    this.repaint()\n    return this\n  }\n\n  this.repaint = function () {\n    if (!initialized) {\n      init()\n    }\n\n    // mainCtx.save();\n    mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height)\n\n    // Draw lcd background\n    mainCtx.drawImage(lcdBuffer, 0, 0)\n\n    // Draw lcd text\n    drawLcdText(value)\n  }\n\n  // Visualize the component\n  this.repaint()\n\n  return this\n}\n\nexport default DisplayMulti\n","import Tween from './tween.js'\nimport drawFrame from './drawFrame'\nimport drawBackground from './drawBackground'\nimport drawForeground from './drawForeground'\nimport {\n  createBuffer,\n  requestAnimFrame,\n  getCanvasContext,\n  HALF_PI,\n  TWO_PI,\n  PI,\n  RAD_FACTOR,\n  stdFontName\n} from './tools'\n\nimport {\n  BackgroundColor,\n  ColorDef,\n  FrameDesign,\n  ForegroundType\n} from './definitions'\n\nconst Level = function (canvas, parameters) {\n  parameters = parameters || {}\n  let size = undefined === parameters.size ? 0 : parameters.size\n  const decimalsVisible =\n    undefined === parameters.decimalsVisible\n      ? false\n      : parameters.decimalsVisible\n  const textOrientationFixed =\n    undefined === parameters.textOrientationFixed\n      ? false\n      : parameters.textOrientationFixed\n  let frameDesign =\n    undefined === parameters.frameDesign\n      ? FrameDesign.METAL\n      : parameters.frameDesign\n  const frameVisible =\n    undefined === parameters.frameVisible ? true : parameters.frameVisible\n  let backgroundColor =\n    undefined === parameters.backgroundColor\n      ? BackgroundColor.DARK_GRAY\n      : parameters.backgroundColor\n  const backgroundVisible =\n    undefined === parameters.backgroundVisible\n      ? true\n      : parameters.backgroundVisible\n  let pointerColor =\n    undefined === parameters.pointerColor\n      ? ColorDef.RED\n      : parameters.pointerColor\n  let foregroundType =\n    undefined === parameters.foregroundType\n      ? ForegroundType.TYPE1\n      : parameters.foregroundType\n  const foregroundVisible =\n    undefined === parameters.foregroundVisible\n      ? true\n      : parameters.foregroundVisible\n  const rotateFace =\n    undefined === parameters.rotateFace ? false : parameters.rotateFace\n\n  // Get the canvas context and clear it\n  const mainCtx = getCanvasContext(canvas)\n  // Has a size been specified?\n  if (size === 0) {\n    size = Math.min(mainCtx.canvas.width, mainCtx.canvas.height)\n  }\n\n  // Set the size - also clears the canvas\n  mainCtx.canvas.width = size\n  mainCtx.canvas.height = size\n\n  let tween\n  let repainting = false\n\n  let value = 0\n  let stepValue = 0\n  let visibleValue = 0\n  const angleStep = TWO_PI / 360\n  let angle = this.value\n  const decimals = decimalsVisible ? 1 : 0\n\n  const imageWidth = size\n  const imageHeight = size\n\n  const centerX = imageWidth / 2\n  const centerY = imageHeight / 2\n\n  let initialized = false\n\n  // **************   Buffer creation  ********************\n  // Buffer for all static background painting code\n  const backgroundBuffer = createBuffer(size, size)\n  let backgroundContext = backgroundBuffer.getContext('2d')\n\n  // Buffer for pointer image painting code\n  const pointerBuffer = createBuffer(size, size)\n  let pointerContext = pointerBuffer.getContext('2d')\n\n  // Buffer for step pointer image painting code\n  const stepPointerBuffer = createBuffer(size, size)\n  let stepPointerContext = stepPointerBuffer.getContext('2d')\n\n  // Buffer for static foreground painting code\n  const foregroundBuffer = createBuffer(size, size)\n  let foregroundContext = foregroundBuffer.getContext('2d')\n\n  // **************   Image creation  ********************\n  const drawTickmarksImage = function (ctx) {\n    let stdFont\n    let smlFont\n    let i\n\n    ctx.textAlign = 'center'\n    ctx.textBaseline = 'middle'\n    ctx.save()\n    ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor()\n    ctx.fillStyle = backgroundColor.labelColor.getRgbaColor()\n    ctx.translate(centerX, centerY)\n\n    for (i = 0; i < 360; i++) {\n      ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor()\n      ctx.lineWidth = 0.5\n      ctx.beginPath()\n      ctx.moveTo(imageWidth * 0.38, 0)\n      ctx.lineTo(imageWidth * 0.37, 0)\n      ctx.closePath()\n      ctx.stroke()\n\n      if (i % 5 === 0) {\n        ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor()\n        ctx.lineWidth = 1\n        ctx.beginPath()\n        ctx.moveTo(imageWidth * 0.38, 0)\n        ctx.lineTo(imageWidth * 0.36, 0)\n        ctx.closePath()\n        ctx.stroke()\n      }\n\n      if (i % 45 === 0) {\n        ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor()\n        ctx.lineWidth = 1\n        ctx.beginPath()\n        ctx.moveTo(imageWidth * 0.38, 0)\n        ctx.lineTo(imageWidth * 0.34, 0)\n        ctx.closePath()\n        ctx.stroke()\n      }\n\n      // Draw the labels\n      if (imageWidth > 300) {\n        stdFont = '14px ' + stdFont\n        smlFont = '12px ' + stdFont\n      }\n      if (imageWidth <= 300) {\n        stdFont = '12px ' + stdFont\n        smlFont = '10px ' + stdFont\n      }\n      if (imageWidth <= 200) {\n        stdFont = '10px ' + stdFont\n        smlFont = '8px ' + stdFont\n      }\n      if (imageWidth <= 100) {\n        stdFont = '8px ' + stdFont\n        smlFont = '6px ' + stdFont\n      }\n      ctx.save()\n      switch (i) {\n        case 0:\n          ctx.translate(imageWidth * 0.31, 0)\n          ctx.rotate(i * RAD_FACTOR + HALF_PI)\n          ctx.font = stdFont\n          ctx.fillText('0\\u00B0', 0, 0, imageWidth)\n          ctx.rotate(-(i * RAD_FACTOR) + HALF_PI)\n          ctx.translate(-imageWidth * 0.31, 0)\n\n          ctx.translate(imageWidth * 0.41, 0)\n          ctx.rotate(i * RAD_FACTOR - HALF_PI)\n          ctx.font = smlFont\n          ctx.fillText('0%', 0, 0, imageWidth)\n          break\n        case 45:\n          ctx.translate(imageWidth * 0.31, 0)\n          ctx.rotate(i * RAD_FACTOR + 0.25 * PI)\n          ctx.font = stdFont\n          ctx.fillText('45\\u00B0', 0, 0, imageWidth)\n          ctx.rotate(-(i * RAD_FACTOR) + 0.25 * PI)\n          ctx.translate(-imageWidth * 0.31, 0)\n\n          ctx.translate(imageWidth * 0.31, imageWidth * 0.085)\n          ctx.rotate(i * RAD_FACTOR - 0.25 * PI)\n          ctx.font = smlFont\n          ctx.fillText('100%', 0, 0, imageWidth)\n          break\n        case 90:\n          ctx.translate(imageWidth * 0.31, 0)\n          ctx.rotate(i * RAD_FACTOR)\n          ctx.font = stdFont\n          ctx.fillText('90\\u00B0', 0, 0, imageWidth)\n          ctx.rotate(-(i * RAD_FACTOR))\n          ctx.translate(-imageWidth * 0.31, 0)\n\n          ctx.translate(imageWidth * 0.21, 0)\n          ctx.rotate(i * RAD_FACTOR)\n          ctx.font = smlFont\n          ctx.fillText('\\u221E', 0, 0, imageWidth)\n          break\n        case 135:\n          ctx.translate(imageWidth * 0.31, 0)\n          ctx.rotate(i * RAD_FACTOR - 0.25 * PI)\n          ctx.font = stdFont\n          ctx.fillText('45\\u00B0', 0, 0, imageWidth)\n          ctx.rotate(-(i * RAD_FACTOR) - 0.25 * PI)\n          ctx.translate(-imageWidth * 0.31, 0)\n\n          ctx.translate(imageWidth * 0.31, -imageWidth * 0.085)\n          ctx.rotate(i * RAD_FACTOR + 0.25 * PI)\n          ctx.font = smlFont\n          ctx.fillText('100%', 0, 0, imageWidth)\n          break\n        case 180:\n          ctx.translate(imageWidth * 0.31, 0)\n          ctx.rotate(i * RAD_FACTOR - HALF_PI)\n          ctx.font = stdFont\n          ctx.fillText('0\\u00B0', 0, 0, imageWidth)\n          ctx.rotate(-(i * RAD_FACTOR) - HALF_PI)\n          ctx.translate(-imageWidth * 0.31, 0)\n\n          ctx.translate(imageWidth * 0.41, 0)\n          ctx.rotate(i * RAD_FACTOR + HALF_PI)\n          ctx.font = smlFont\n          ctx.fillText('0%', 0, 0, imageWidth)\n          ctx.translate(-imageWidth * 0.41, 0)\n          break\n        case 225:\n          ctx.translate(imageWidth * 0.31, 0)\n          ctx.rotate(i * RAD_FACTOR - 0.75 * PI)\n          ctx.font = stdFont\n          ctx.fillText('45\\u00B0', 0, 0, imageWidth)\n          ctx.rotate(-(i * RAD_FACTOR) - 0.75 * PI)\n          ctx.translate(-imageWidth * 0.31, 0)\n\n          ctx.translate(imageWidth * 0.31, imageWidth * 0.085)\n          ctx.rotate(i * RAD_FACTOR + 0.75 * PI)\n          ctx.font = smlFont\n          ctx.fillText('100%', 0, 0, imageWidth)\n          break\n        case 270:\n          ctx.translate(imageWidth * 0.31, 0)\n          ctx.rotate(i * RAD_FACTOR - PI)\n          ctx.font = stdFont\n          ctx.fillText('90\\u00B0', 0, 0, imageWidth)\n          ctx.rotate(-(i * RAD_FACTOR) - PI)\n          ctx.translate(-imageWidth * 0.31, 0)\n\n          ctx.translate(imageWidth * 0.21, 0)\n          ctx.rotate(i * RAD_FACTOR - PI)\n          ctx.font = smlFont\n          ctx.fillText('\\u221E', 0, 0, imageWidth)\n          break\n        case 315:\n          ctx.translate(imageWidth * 0.31, 0)\n          ctx.rotate(i * RAD_FACTOR - 1.25 * PI)\n          ctx.font = stdFont\n          ctx.fillText('45\\u00B0', 0, 0, imageWidth)\n          ctx.rotate(-(i * RAD_FACTOR) - 1.25 * PI)\n          ctx.translate(-imageWidth * 0.31, 0)\n\n          ctx.translate(imageWidth * 0.31, -imageWidth * 0.085)\n          ctx.rotate(i * RAD_FACTOR + 1.25 * PI)\n          ctx.font = smlFont\n          ctx.fillText('100%', 0, 0, imageWidth)\n          break\n      }\n      ctx.restore()\n\n      ctx.rotate(angleStep)\n    }\n    ctx.translate(-centerX, -centerY)\n    ctx.restore()\n  }\n\n  const drawMarkerImage = function (ctx) {\n    ctx.save()\n\n    ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor()\n    ctx.fillStyle = backgroundColor.labelColor.getRgbaColor()\n\n    // FRAMELEFT\n    ctx.save()\n    ctx.beginPath()\n    ctx.moveTo(imageWidth * 0.200934, imageHeight * 0.434579)\n    ctx.lineTo(imageWidth * 0.163551, imageHeight * 0.434579)\n    ctx.lineTo(imageWidth * 0.163551, imageHeight * 0.560747)\n    ctx.lineTo(imageWidth * 0.200934, imageHeight * 0.560747)\n    ctx.lineWidth = 1\n    ctx.lineCap = 'square'\n    ctx.lineJoin = 'miter'\n    ctx.stroke()\n\n    // TRIANGLELEFT\n    ctx.save()\n    ctx.beginPath()\n    ctx.moveTo(imageWidth * 0.163551, imageHeight * 0.471962)\n    ctx.lineTo(imageWidth * 0.205607, imageHeight * 0.5)\n    ctx.lineTo(imageWidth * 0.163551, imageHeight * 0.523364)\n    ctx.lineTo(imageWidth * 0.163551, imageHeight * 0.471962)\n    ctx.closePath()\n    ctx.fill()\n\n    // FRAMERIGHT\n    ctx.save()\n    ctx.beginPath()\n    ctx.moveTo(imageWidth * 0.799065, imageHeight * 0.434579)\n    ctx.lineTo(imageWidth * 0.836448, imageHeight * 0.434579)\n    ctx.lineTo(imageWidth * 0.836448, imageHeight * 0.560747)\n    ctx.lineTo(imageWidth * 0.799065, imageHeight * 0.560747)\n    ctx.lineWidth = 1\n    ctx.lineCap = 'square'\n    ctx.lineJoin = 'miter'\n    ctx.stroke()\n\n    // TRIANGLERIGHT\n    ctx.save()\n    ctx.beginPath()\n    ctx.moveTo(imageWidth * 0.836448, imageHeight * 0.471962)\n    ctx.lineTo(imageWidth * 0.794392, imageHeight * 0.5)\n    ctx.lineTo(imageWidth * 0.836448, imageHeight * 0.523364)\n    ctx.lineTo(imageWidth * 0.836448, imageHeight * 0.471962)\n    ctx.closePath()\n    ctx.fill()\n\n    ctx.restore()\n  }\n\n  const drawPointerImage = function (ctx) {\n    ctx.save()\n\n    // POINTER_LEVEL\n    ctx.save()\n    ctx.beginPath()\n    ctx.moveTo(imageWidth * 0.523364, imageHeight * 0.350467)\n    ctx.lineTo(imageWidth * 0.5, imageHeight * 0.130841)\n    ctx.lineTo(imageWidth * 0.476635, imageHeight * 0.350467)\n    ctx.bezierCurveTo(\n      imageWidth * 0.476635,\n      imageHeight * 0.350467,\n      imageWidth * 0.490654,\n      imageHeight * 0.345794,\n      imageWidth * 0.5,\n      imageHeight * 0.345794\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.509345,\n      imageHeight * 0.345794,\n      imageWidth * 0.523364,\n      imageHeight * 0.350467,\n      imageWidth * 0.523364,\n      imageHeight * 0.350467\n    )\n    ctx.closePath()\n    const POINTER_LEVEL_GRADIENT = ctx.createLinearGradient(\n      0,\n      0.154205 * imageHeight,\n      0,\n      0.350466 * imageHeight\n    )\n    const tmpDarkColor = pointerColor.dark\n    const tmpLightColor = pointerColor.light\n    tmpDarkColor.setAlpha(0.70588)\n    tmpLightColor.setAlpha(0.70588)\n    POINTER_LEVEL_GRADIENT.addColorStop(0, tmpDarkColor.getRgbaColor())\n    POINTER_LEVEL_GRADIENT.addColorStop(0.3, tmpLightColor.getRgbaColor())\n    POINTER_LEVEL_GRADIENT.addColorStop(0.59, tmpLightColor.getRgbaColor())\n    POINTER_LEVEL_GRADIENT.addColorStop(1, tmpDarkColor.getRgbaColor())\n    ctx.fillStyle = POINTER_LEVEL_GRADIENT\n    const strokeColor_POINTER_LEVEL = pointerColor.light.getRgbaColor()\n    ctx.lineWidth = 1\n    ctx.lineCap = 'square'\n    ctx.lineJoin = 'miter'\n    ctx.strokeStyle = strokeColor_POINTER_LEVEL\n    ctx.fill()\n    ctx.stroke()\n\n    tmpDarkColor.setAlpha(1)\n    tmpLightColor.setAlpha(1)\n\n    ctx.restore()\n  }\n\n  const drawStepPointerImage = function (ctx) {\n    ctx.save()\n\n    const tmpDarkColor = pointerColor.dark\n    const tmpLightColor = pointerColor.light\n    tmpDarkColor.setAlpha(0.70588)\n    tmpLightColor.setAlpha(0.70588)\n\n    // POINTER_LEVEL_LEFT\n    ctx.save()\n    ctx.beginPath()\n    ctx.moveTo(imageWidth * 0.285046, imageHeight * 0.514018)\n    ctx.lineTo(imageWidth * 0.21028, imageHeight * 0.5)\n    ctx.lineTo(imageWidth * 0.285046, imageHeight * 0.481308)\n    ctx.bezierCurveTo(\n      imageWidth * 0.285046,\n      imageHeight * 0.481308,\n      imageWidth * 0.280373,\n      imageHeight * 0.490654,\n      imageWidth * 0.280373,\n      imageHeight * 0.495327\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.280373,\n      imageHeight * 0.504672,\n      imageWidth * 0.285046,\n      imageHeight * 0.514018,\n      imageWidth * 0.285046,\n      imageHeight * 0.514018\n    )\n    ctx.closePath()\n    const POINTER_LEVEL_LEFT_GRADIENT = ctx.createLinearGradient(\n      0.224299 * imageWidth,\n      0,\n      0.289719 * imageWidth,\n      0\n    )\n    POINTER_LEVEL_LEFT_GRADIENT.addColorStop(0, tmpDarkColor.getRgbaColor())\n    POINTER_LEVEL_LEFT_GRADIENT.addColorStop(0.3, tmpLightColor.getRgbaColor())\n    POINTER_LEVEL_LEFT_GRADIENT.addColorStop(\n      0.59,\n      tmpLightColor.getRgbaColor()\n    )\n    POINTER_LEVEL_LEFT_GRADIENT.addColorStop(1, tmpDarkColor.getRgbaColor())\n    ctx.fillStyle = POINTER_LEVEL_LEFT_GRADIENT\n    const strokeColor_POINTER_LEVEL_LEFT = pointerColor.light.getRgbaColor()\n    ctx.lineWidth = 1\n    ctx.lineCap = 'square'\n    ctx.lineJoin = 'miter'\n    ctx.strokeStyle = strokeColor_POINTER_LEVEL_LEFT\n    ctx.fill()\n    ctx.stroke()\n\n    // POINTER_LEVEL_RIGHT\n    ctx.save()\n    ctx.beginPath()\n    ctx.moveTo(imageWidth * 0.714953, imageHeight * 0.514018)\n    ctx.lineTo(imageWidth * 0.789719, imageHeight * 0.5)\n    ctx.lineTo(imageWidth * 0.714953, imageHeight * 0.481308)\n    ctx.bezierCurveTo(\n      imageWidth * 0.714953,\n      imageHeight * 0.481308,\n      imageWidth * 0.719626,\n      imageHeight * 0.490654,\n      imageWidth * 0.719626,\n      imageHeight * 0.495327\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.719626,\n      imageHeight * 0.504672,\n      imageWidth * 0.714953,\n      imageHeight * 0.514018,\n      imageWidth * 0.714953,\n      imageHeight * 0.514018\n    )\n    ctx.closePath()\n    const POINTER_LEVEL_RIGHT_GRADIENT = ctx.createLinearGradient(\n      0.7757 * imageWidth,\n      0,\n      0.71028 * imageWidth,\n      0\n    )\n    POINTER_LEVEL_RIGHT_GRADIENT.addColorStop(0, tmpDarkColor.getRgbaColor())\n    POINTER_LEVEL_RIGHT_GRADIENT.addColorStop(\n      0.3,\n      tmpLightColor.getRgbaColor()\n    )\n    POINTER_LEVEL_RIGHT_GRADIENT.addColorStop(\n      0.59,\n      tmpLightColor.getRgbaColor()\n    )\n    POINTER_LEVEL_RIGHT_GRADIENT.addColorStop(1, tmpDarkColor.getRgbaColor())\n    ctx.fillStyle = POINTER_LEVEL_RIGHT_GRADIENT\n    const strokeColor_POINTER_LEVEL_RIGHT = pointerColor.light.getRgbaColor()\n    ctx.lineWidth = 1\n    ctx.lineCap = 'square'\n    ctx.lineJoin = 'miter'\n    ctx.strokeStyle = strokeColor_POINTER_LEVEL_RIGHT\n    ctx.fill()\n    ctx.stroke()\n\n    tmpDarkColor.setAlpha(1)\n    tmpLightColor.setAlpha(1)\n\n    ctx.restore()\n  }\n\n  // **************   Initialization  ********************\n  // Draw all static painting code to background\n  const init = function () {\n    initialized = true\n\n    if (frameVisible) {\n      drawFrame(\n        backgroundContext,\n        frameDesign,\n        centerX,\n        centerY,\n        imageWidth,\n        imageHeight\n      )\n    }\n\n    if (backgroundVisible) {\n      drawBackground(\n        backgroundContext,\n        backgroundColor,\n        centerX,\n        centerY,\n        imageWidth,\n        imageHeight\n      )\n      drawTickmarksImage(backgroundContext)\n    }\n\n    drawMarkerImage(pointerContext)\n\n    drawPointerImage(pointerContext)\n\n    drawStepPointerImage(stepPointerContext)\n\n    if (foregroundVisible) {\n      drawForeground(\n        foregroundContext,\n        foregroundType,\n        imageWidth,\n        imageHeight,\n        false\n      )\n    }\n  }\n\n  const resetBuffers = function () {\n    backgroundBuffer.width = size\n    backgroundBuffer.height = size\n    backgroundContext = backgroundBuffer.getContext('2d')\n\n    // Buffer for pointer image painting code\n    pointerBuffer.width = size\n    pointerBuffer.height = size\n    pointerContext = pointerBuffer.getContext('2d')\n\n    // Buffer for step pointer image painting code\n    stepPointerBuffer.width = size\n    stepPointerBuffer.height = size\n    stepPointerContext = stepPointerBuffer.getContext('2d')\n\n    // Buffer for static foreground painting code\n    foregroundBuffer.width = size\n    foregroundBuffer.height = size\n    foregroundContext = foregroundBuffer.getContext('2d')\n  }\n\n  //* *********************************** Public methods **************************************\n  this.setValue = function (newValue) {\n    let targetValue\n    newValue = parseFloat(newValue)\n    targetValue = newValue < 0 ? 360 + newValue : newValue\n    targetValue = newValue > 359.9 ? newValue - 360 : newValue\n\n    if (value !== targetValue) {\n      value = targetValue\n      stepValue = 2 * ((Math.abs(value) * 10) % 10)\n      if (stepValue > 10) {\n        stepValue -= 20\n      }\n\n      if (value === 0) {\n        visibleValue = 90\n      }\n\n      if (value > 0 && value <= 90) {\n        visibleValue = 90 - value\n      }\n\n      if (value > 90 && value <= 180) {\n        visibleValue = value - 90\n      }\n\n      if (value > 180 && value <= 270) {\n        visibleValue = 270 - value\n      }\n\n      if (value > 270 && value <= 360) {\n        visibleValue = value - 270\n      }\n\n      if (value < 0 && value >= -90) {\n        visibleValue = 90 - Math.abs(value)\n      }\n\n      if (value < -90 && value >= -180) {\n        visibleValue = Math.abs(value) - 90\n      }\n\n      if (value < -180 && value >= -270) {\n        visibleValue = 270 - Math.abs(value)\n      }\n\n      if (value < -270 && value >= -360) {\n        visibleValue = Math.abs(value) - 270\n      }\n\n      this.repaint()\n    }\n    return this\n  }\n\n  this.getValue = function () {\n    return value\n  }\n\n  this.setValueAnimated = function (newValue, callback) {\n    newValue = parseFloat(newValue)\n    if (360 - newValue + value < newValue - value) {\n      newValue = 360 - newValue\n    }\n    if (value !== newValue) {\n      if (undefined !== tween && tween.isPlaying) {\n        tween.stop()\n      }\n\n      // tween = new Tween(new Object(),'',Tween.elasticEaseOut,this.value,targetValue, 1);\n      tween = new Tween({}, '', Tween.regularEaseInOut, value, newValue, 1)\n      // tween = new Tween(new Object(), '', Tween.strongEaseInOut, this.value, targetValue, 1);\n\n      const gauge = this\n\n      tween.onMotionChanged = function (event) {\n        value = event.target._pos\n        stepValue = 2 * ((Math.abs(value) * 10) % 10)\n        if (stepValue > 10) {\n          stepValue -= 20\n        }\n\n        if (value === 0) {\n          visibleValue = 90\n        }\n\n        if (value > 0 && value <= 90) {\n          visibleValue = 90 - value\n        }\n\n        if (value > 90 && value <= 180) {\n          visibleValue = value - 90\n        }\n\n        if (value > 180 && value <= 270) {\n          visibleValue = 270 - value\n        }\n\n        if (value > 270 && value <= 360) {\n          visibleValue = value - 270\n        }\n\n        if (value < 0 && value >= -90) {\n          visibleValue = 90 - Math.abs(value)\n        }\n\n        if (value < -90 && value >= -180) {\n          visibleValue = Math.abs(value) - 90\n        }\n\n        if (value < -180 && value >= -270) {\n          visibleValue = 270 - Math.abs(value)\n        }\n\n        if (value < -270 && value >= -360) {\n          visibleValue = Math.abs(value) - 270\n        }\n\n        if (!repainting) {\n          repainting = true\n          requestAnimFrame(gauge.repaint)\n        }\n      }\n\n      // do we have a callback function to process?\n      if (callback && typeof callback === 'function') {\n        tween.onMotionFinished = callback\n      }\n\n      tween.start()\n    }\n    return this\n  }\n\n  this.setFrameDesign = function (newFrameDesign) {\n    resetBuffers()\n    frameDesign = newFrameDesign\n    init()\n    this.repaint()\n    return this\n  }\n\n  this.setBackgroundColor = function (newBackgroundColor) {\n    resetBuffers()\n    backgroundColor = newBackgroundColor\n    init()\n    this.repaint()\n    return this\n  }\n\n  this.setForegroundType = function (newForegroundType) {\n    resetBuffers()\n    foregroundType = newForegroundType\n    init()\n    this.repaint()\n    return this\n  }\n\n  this.setPointerColor = function (newPointerColor) {\n    resetBuffers()\n    pointerColor = newPointerColor\n    init()\n    this.repaint()\n    return this\n  }\n\n  this.repaint = function () {\n    if (!initialized) {\n      init()\n    }\n\n    mainCtx.save()\n    mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height)\n\n    angle = HALF_PI + value * angleStep - HALF_PI\n    if (rotateFace) {\n      mainCtx.translate(centerX, centerY)\n      mainCtx.rotate(-angle)\n      mainCtx.translate(-centerX, -centerY)\n    }\n    // Draw buffered image to visible canvas\n    if (frameVisible || backgroundVisible) {\n      mainCtx.drawImage(backgroundBuffer, 0, 0)\n    }\n\n    mainCtx.save()\n    // Define rotation center\n    mainCtx.translate(centerX, centerY)\n    mainCtx.rotate(angle)\n\n    // Draw pointer\n    mainCtx.translate(-centerX, -centerY)\n    mainCtx.drawImage(pointerBuffer, 0, 0)\n\n    mainCtx.fillStyle = backgroundColor.labelColor.getRgbaColor()\n    mainCtx.textAlign = 'center'\n    mainCtx.textBaseline = 'middle'\n\n    if (textOrientationFixed) {\n      mainCtx.restore()\n      if (decimalsVisible) {\n        mainCtx.font = imageWidth * 0.1 + 'px ' + stdFontName\n      } else {\n        mainCtx.font = imageWidth * 0.15 + 'px ' + stdFontName\n      }\n      mainCtx.fillText(\n        visibleValue.toFixed(decimals) + '\\u00B0',\n        centerX,\n        centerY,\n        imageWidth * 0.35\n      )\n    } else {\n      if (decimalsVisible) {\n        mainCtx.font = imageWidth * 0.15 + 'px ' + stdFontName\n      } else {\n        mainCtx.font = imageWidth * 0.2 + 'px ' + stdFontName\n      }\n      mainCtx.fillText(\n        visibleValue.toFixed(decimals) + '\\u00B0',\n        centerX,\n        centerY,\n        imageWidth * 0.35\n      )\n      mainCtx.restore()\n    }\n\n    mainCtx.translate(centerX, centerY)\n    mainCtx.rotate(angle + stepValue * RAD_FACTOR)\n    mainCtx.translate(-centerX, -centerY)\n    mainCtx.drawImage(stepPointerBuffer, 0, 0)\n    mainCtx.restore()\n\n    // Draw foreground\n    if (foregroundVisible) {\n      mainCtx.drawImage(foregroundBuffer, 0, 0)\n    }\n\n    mainCtx.restore()\n\n    repainting = false\n  }\n\n  // Visualize the component\n  this.repaint()\n\n  return this\n}\n\nexport default Level\n","import { TWO_PI, RAD_FACTOR } from './tools'\n\nconst drawRoseImage = function (\n  ctx,\n  centerX,\n  centerY,\n  imageWidth,\n  imageHeight,\n  backgroundColor\n) {\n  let fill = true\n  let i\n  let grad\n  const symbolColor = backgroundColor.symbolColor.getRgbaColor()\n\n  ctx.save()\n  ctx.lineWidth = 1\n  ctx.fillStyle = symbolColor\n  ctx.strokeStyle = symbolColor\n  ctx.translate(centerX, centerY)\n  // broken ring\n  for (i = 0; i < 360; i += 15) {\n    fill = !fill\n\n    ctx.beginPath()\n    ctx.arc(\n      0,\n      0,\n      imageWidth * 0.26,\n      i * RAD_FACTOR,\n      (i + 15) * RAD_FACTOR,\n      false\n    )\n    ctx.arc(\n      0,\n      0,\n      imageWidth * 0.23,\n      (i + 15) * RAD_FACTOR,\n      i * RAD_FACTOR,\n      true\n    )\n    ctx.closePath()\n    if (fill) {\n      ctx.fill()\n    }\n    ctx.stroke()\n  }\n\n  ctx.translate(-centerX, -centerY)\n\n  for (i = 0; i <= 360; i += 90) {\n    // Small pointers\n    ctx.beginPath()\n    ctx.moveTo(imageWidth * 0.560747, imageHeight * 0.584112)\n    ctx.lineTo(imageWidth * 0.640186, imageHeight * 0.644859)\n    ctx.lineTo(imageWidth * 0.584112, imageHeight * 0.560747)\n    ctx.lineTo(imageWidth * 0.560747, imageHeight * 0.584112)\n    ctx.closePath()\n    ctx.fillStyle = symbolColor\n    ctx.fill()\n    ctx.stroke()\n    // Large pointers\n    ctx.beginPath()\n    ctx.moveTo(imageWidth * 0.523364, imageHeight * 0.397196)\n    ctx.lineTo(imageWidth * 0.5, imageHeight * 0.196261)\n    ctx.lineTo(imageWidth * 0.471962, imageHeight * 0.397196)\n    ctx.lineTo(imageWidth * 0.523364, imageHeight * 0.397196)\n    ctx.closePath()\n    grad = ctx.createLinearGradient(\n      0.476635 * imageWidth,\n      0,\n      0.518691 * imageWidth,\n      0\n    )\n    grad.addColorStop(0, 'rgb(222, 223, 218)')\n    grad.addColorStop(0.48, 'rgb(222, 223, 218)')\n    grad.addColorStop(0.49, symbolColor)\n    grad.addColorStop(1, symbolColor)\n    ctx.fillStyle = grad\n    ctx.fill()\n    ctx.stroke()\n    ctx.translate(centerX, centerY)\n    ctx.rotate(i * RAD_FACTOR)\n    ctx.translate(-centerX, -centerY)\n  }\n\n  // Central ring\n  ctx.beginPath()\n  ctx.translate(centerX, centerY)\n  ctx.arc(0, 0, imageWidth * 0.1, 0, TWO_PI, false)\n  ctx.lineWidth = imageWidth * 0.022\n  ctx.stroke()\n  ctx.translate(-centerX, -centerY)\n\n  ctx.restore()\n}\n\nexport default drawRoseImage\n","import Tween from './tween.js'\nimport drawFrame from './drawFrame'\nimport drawBackground from './drawBackground'\nimport drawRadialCustomImage from './drawRadialCustomImage'\nimport drawForeground from './drawForeground'\nimport drawRoseImage from './drawRoseImage'\nimport {\n  createBuffer,\n  getShortestAngle,\n  requestAnimFrame,\n  getCanvasContext,\n  HALF_PI,\n  RAD_FACTOR\n} from './tools'\n\nimport {\n  BackgroundColor,\n  ColorDef,\n  KnobType,\n  KnobStyle,\n  FrameDesign,\n  PointerType,\n  ForegroundType\n} from './definitions'\n\nconst Compass = function (canvas, parameters) {\n  parameters = parameters || {}\n  let size = undefined === parameters.size ? 0 : parameters.size\n  let frameDesign =\n    undefined === parameters.frameDesign\n      ? FrameDesign.METAL\n      : parameters.frameDesign\n  const frameVisible =\n    undefined === parameters.frameVisible ? true : parameters.frameVisible\n  let backgroundColor =\n    undefined === parameters.backgroundColor\n      ? BackgroundColor.DARK_GRAY\n      : parameters.backgroundColor\n  const backgroundVisible =\n    undefined === parameters.backgroundVisible\n      ? true\n      : parameters.backgroundVisible\n  let pointerType =\n    undefined === parameters.pointerType\n      ? PointerType.TYPE2\n      : parameters.pointerType\n  let pointerColor =\n    undefined === parameters.pointerColor\n      ? ColorDef.RED\n      : parameters.pointerColor\n  const knobType =\n    undefined === parameters.knobType\n      ? KnobType.STANDARD_KNOB\n      : parameters.knobType\n  const knobStyle =\n    undefined === parameters.knobStyle\n      ? KnobStyle.SILVER\n      : parameters.knobStyle\n  let foregroundType =\n    undefined === parameters.foregroundType\n      ? ForegroundType.TYPE1\n      : parameters.foregroundType\n  const foregroundVisible =\n    undefined === parameters.foregroundVisible\n      ? true\n      : parameters.foregroundVisible\n  let pointSymbols =\n    undefined === parameters.pointSymbols\n      ? ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW']\n      : parameters.pointSymbols\n  const pointSymbolsVisible =\n    undefined === parameters.pointSymbolsVisible\n      ? true\n      : parameters.pointSymbolsVisible\n  const customLayer =\n    undefined === parameters.customLayer ? null : parameters.customLayer\n  const degreeScale =\n    undefined === parameters.degreeScale ? false : parameters.degreeScale\n  const roseVisible =\n    undefined === parameters.roseVisible ? true : parameters.roseVisible\n  const rotateFace =\n    undefined === parameters.rotateFace ? false : parameters.rotateFace\n\n  let tween\n  let repainting = false\n  let value = 0\n  const angleStep = RAD_FACTOR\n  let angle = this.value\n\n  // Get the canvas context and clear it\n  const mainCtx = getCanvasContext(canvas)\n  // Has a size been specified?\n  if (size === 0) {\n    size = Math.min(mainCtx.canvas.width, mainCtx.canvas.height)\n  }\n\n  // Set the size - also clears the canvas\n  mainCtx.canvas.width = size\n  mainCtx.canvas.height = size\n\n  const imageWidth = size\n  const imageHeight = size\n\n  const centerX = imageWidth / 2\n  const centerY = imageHeight / 2\n\n  const shadowOffset = imageWidth * 0.006\n\n  let initialized = false\n\n  // **************   Buffer creation  ********************\n  // Buffer for all static background painting code\n  const backgroundBuffer = createBuffer(size, size)\n  let backgroundContext = backgroundBuffer.getContext('2d')\n\n  // Buffer for symbol/rose painting code\n  const roseBuffer = createBuffer(size, size)\n  let roseContext = roseBuffer.getContext('2d')\n\n  // Buffer for pointer image painting code\n  const pointerBuffer = createBuffer(size, size)\n  let pointerContext = pointerBuffer.getContext('2d')\n\n  // Buffer for static foreground painting code\n  const foregroundBuffer = createBuffer(size, size)\n  let foregroundContext = foregroundBuffer.getContext('2d')\n\n  // **************   Image creation  ********************\n  const drawTickmarksImage = function (ctx) {\n    let val\n    ctx.textAlign = 'center'\n    ctx.textBaseline = 'middle'\n\n    let stdFont\n    let smlFont\n    let i\n\n    ctx.save()\n    ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor()\n    ctx.fillStyle = backgroundColor.labelColor.getRgbaColor()\n    ctx.translate(centerX, centerY)\n\n    if (!degreeScale) {\n      stdFont = 0.12 * imageWidth + 'px serif'\n      smlFont = 0.06 * imageWidth + 'px serif'\n\n      for (i = 0; i < 360; i += 2.5) {\n        if (i % 5 === 0) {\n          ctx.lineWidth = 1\n          ctx.beginPath()\n          ctx.moveTo(imageWidth * 0.38, 0)\n          ctx.lineTo(imageWidth * 0.36, 0)\n          ctx.closePath()\n          ctx.stroke()\n        }\n\n        // Draw the labels\n        ctx.save()\n        switch (i) {\n          case 0:\n            ctx.translate(imageWidth * 0.35, 0)\n            ctx.rotate(HALF_PI)\n            ctx.font = stdFont\n            ctx.fillText(pointSymbols[2], 0, 0, imageWidth)\n            ctx.translate(-imageWidth * 0.35, 0)\n            break\n          case 45:\n            ctx.translate(imageWidth * 0.29, 0)\n            ctx.rotate(HALF_PI)\n            ctx.font = smlFont\n            ctx.fillText(pointSymbols[3], 0, 0, imageWidth)\n            ctx.translate(-imageWidth * 0.29, 0)\n            break\n          case 90:\n            ctx.translate(imageWidth * 0.35, 0)\n            ctx.rotate(HALF_PI)\n            ctx.font = stdFont\n            ctx.fillText(pointSymbols[4], 0, 0, imageWidth)\n            ctx.translate(-imageWidth * 0.35, 0)\n            break\n          case 135:\n            ctx.translate(imageWidth * 0.29, 0)\n            ctx.rotate(HALF_PI)\n            ctx.font = smlFont\n            ctx.fillText(pointSymbols[5], 0, 0, imageWidth)\n            ctx.translate(-imageWidth * 0.29, 0)\n            break\n          case 180:\n            ctx.translate(imageWidth * 0.35, 0)\n            ctx.rotate(HALF_PI)\n            ctx.font = stdFont\n            ctx.fillText(pointSymbols[6], 0, 0, imageWidth)\n            ctx.translate(-imageWidth * 0.35, 0)\n            break\n          case 225:\n            ctx.translate(imageWidth * 0.29, 0)\n            ctx.rotate(HALF_PI)\n            ctx.font = smlFont\n            ctx.fillText(pointSymbols[7], 0, 0, imageWidth)\n            ctx.translate(-imageWidth * 0.29, 0)\n            break\n          case 270:\n            ctx.translate(imageWidth * 0.35, 0)\n            ctx.rotate(HALF_PI)\n            ctx.font = stdFont\n            ctx.fillText(pointSymbols[0], 0, 0, imageWidth)\n            ctx.translate(-imageWidth * 0.35, 0)\n            break\n          case 315:\n            ctx.translate(imageWidth * 0.29, 0)\n            ctx.rotate(HALF_PI)\n            ctx.font = smlFont\n            ctx.fillText(pointSymbols[1], 0, 0, imageWidth)\n            ctx.translate(-imageWidth * 0.29, 0)\n            break\n        }\n        ctx.restore()\n\n        if (\n          roseVisible &&\n          (i === 0 ||\n            i === 22.5 ||\n            i === 45 ||\n            i === 67.5 ||\n            i === 90 ||\n            i === 112.5 ||\n            i === 135 ||\n            i === 157.5 ||\n            i === 180 ||\n            i === 202.5 ||\n            i === 225 ||\n            i === 247.5 ||\n            i === 270 ||\n            i === 292.5 ||\n            i === 315 ||\n            i === 337.5 ||\n            i === 360)\n        ) {\n          // ROSE_LINE\n          ctx.save()\n          ctx.beginPath()\n          // indent the 16 half quadrant lines a bit for visual effect\n          if (i % 45) {\n            ctx.moveTo(imageWidth * 0.29, 0)\n          } else {\n            ctx.moveTo(imageWidth * 0.38, 0)\n          }\n          ctx.lineTo(imageWidth * 0.1, 0)\n          ctx.closePath()\n          ctx.restore()\n          ctx.lineWidth = 1\n          ctx.strokeStyle = backgroundColor.symbolColor.getRgbaColor()\n          ctx.stroke()\n        }\n        ctx.rotate(angleStep * 2.5)\n      }\n    } else {\n      stdFont = 0.08 * imageWidth + 'px serif'\n      smlFont = imageWidth * 0.033 + 'px serif'\n\n      ctx.rotate(angleStep * 10)\n\n      for (i = 10; i <= 360; i += 10) {\n        // Draw the labels\n        ctx.save()\n        if (pointSymbolsVisible) {\n          switch (i) {\n            case 360:\n              ctx.translate(imageWidth * 0.35, 0)\n              ctx.rotate(HALF_PI)\n              ctx.font = stdFont\n              ctx.fillText(pointSymbols[2], 0, 0, imageWidth)\n              ctx.translate(-imageWidth * 0.35, 0)\n              break\n            case 90:\n              ctx.translate(imageWidth * 0.35, 0)\n              ctx.rotate(HALF_PI)\n              ctx.font = stdFont\n              ctx.fillText(pointSymbols[4], 0, 0, imageWidth)\n              ctx.translate(-imageWidth * 0.35, 0)\n              break\n            case 180:\n              ctx.translate(imageWidth * 0.35, 0)\n              ctx.rotate(HALF_PI)\n              ctx.font = stdFont\n              ctx.fillText(pointSymbols[6], 0, 0, imageWidth)\n              ctx.translate(-imageWidth * 0.35, 0)\n              break\n            case 270:\n              ctx.translate(imageWidth * 0.35, 0)\n              ctx.rotate(HALF_PI)\n              ctx.font = stdFont\n              ctx.fillText(pointSymbols[0], 0, 0, imageWidth)\n              ctx.translate(-imageWidth * 0.35, 0)\n              break\n            default:\n              val = (i + 90) % 360\n              ctx.translate(imageWidth * 0.37, 0)\n              ctx.rotate(HALF_PI)\n              ctx.font = smlFont\n              ctx.fillText('0'.substring(val >= 100) + val, 0, 0, imageWidth)\n              ctx.translate(-imageWidth * 0.37, 0)\n          }\n        } else {\n          val = (i + 90) % 360\n          ctx.translate(imageWidth * 0.37, 0)\n          ctx.rotate(HALF_PI)\n          ctx.font = smlFont\n          ctx.fillText('0'.substring(val >= 100) + val, 0, 0, imageWidth)\n          ctx.translate(-imageWidth * 0.37, 0)\n        }\n        ctx.restore()\n        ctx.rotate(angleStep * 10)\n      }\n    }\n    ctx.translate(-centerX, -centerY)\n    ctx.restore()\n  }\n\n  const drawPointerImage = function (ctx) {\n    ctx.save()\n\n    switch (pointerType.type) {\n      case 'type2': {\n        // NORTHPOINTER\n        ctx.beginPath()\n        ctx.moveTo(imageWidth * 0.53271, imageHeight * 0.453271)\n        ctx.bezierCurveTo(\n          imageWidth * 0.53271,\n          imageHeight * 0.453271,\n          imageWidth * 0.5,\n          imageHeight * 0.149532,\n          imageWidth * 0.5,\n          imageHeight * 0.149532\n        )\n        ctx.bezierCurveTo(\n          imageWidth * 0.5,\n          imageHeight * 0.149532,\n          imageWidth * 0.467289,\n          imageHeight * 0.453271,\n          imageWidth * 0.467289,\n          imageHeight * 0.453271\n        )\n        ctx.bezierCurveTo(\n          imageWidth * 0.453271,\n          imageHeight * 0.462616,\n          imageWidth * 0.443925,\n          imageHeight * 0.481308,\n          imageWidth * 0.443925,\n          imageHeight * 0.5\n        )\n        ctx.bezierCurveTo(\n          imageWidth * 0.443925,\n          imageHeight * 0.5,\n          imageWidth * 0.556074,\n          imageHeight * 0.5,\n          imageWidth * 0.556074,\n          imageHeight * 0.5\n        )\n        ctx.bezierCurveTo(\n          imageWidth * 0.556074,\n          imageHeight * 0.481308,\n          imageWidth * 0.546728,\n          imageHeight * 0.462616,\n          imageWidth * 0.53271,\n          imageHeight * 0.453271\n        )\n        ctx.closePath()\n        const NORTHPOINTER2_GRADIENT = ctx.createLinearGradient(\n          0.471962 * imageWidth,\n          0,\n          0.528036 * imageWidth,\n          0\n        )\n        NORTHPOINTER2_GRADIENT.addColorStop(\n          0,\n          pointerColor.light.getRgbaColor()\n        )\n        NORTHPOINTER2_GRADIENT.addColorStop(\n          0.46,\n          pointerColor.light.getRgbaColor()\n        )\n        NORTHPOINTER2_GRADIENT.addColorStop(\n          0.47,\n          pointerColor.medium.getRgbaColor()\n        )\n        NORTHPOINTER2_GRADIENT.addColorStop(\n          1,\n          pointerColor.medium.getRgbaColor()\n        )\n        ctx.fillStyle = NORTHPOINTER2_GRADIENT\n        ctx.strokeStyle = pointerColor.dark.getRgbaColor()\n        ctx.lineWidth = 1\n        ctx.lineCap = 'square'\n        ctx.lineJoin = 'miter'\n        ctx.fill()\n        ctx.stroke()\n\n        // SOUTHPOINTER\n        ctx.beginPath()\n        ctx.moveTo(imageWidth * 0.467289, imageHeight * 0.546728)\n        ctx.bezierCurveTo(\n          imageWidth * 0.467289,\n          imageHeight * 0.546728,\n          imageWidth * 0.5,\n          imageHeight * 0.850467,\n          imageWidth * 0.5,\n          imageHeight * 0.850467\n        )\n        ctx.bezierCurveTo(\n          imageWidth * 0.5,\n          imageHeight * 0.850467,\n          imageWidth * 0.53271,\n          imageHeight * 0.546728,\n          imageWidth * 0.53271,\n          imageHeight * 0.546728\n        )\n        ctx.bezierCurveTo(\n          imageWidth * 0.546728,\n          imageHeight * 0.537383,\n          imageWidth * 0.556074,\n          imageHeight * 0.518691,\n          imageWidth * 0.556074,\n          imageHeight * 0.5\n        )\n        ctx.bezierCurveTo(\n          imageWidth * 0.556074,\n          imageHeight * 0.5,\n          imageWidth * 0.443925,\n          imageHeight * 0.5,\n          imageWidth * 0.443925,\n          imageHeight * 0.5\n        )\n        ctx.bezierCurveTo(\n          imageWidth * 0.443925,\n          imageHeight * 0.518691,\n          imageWidth * 0.453271,\n          imageHeight * 0.537383,\n          imageWidth * 0.467289,\n          imageHeight * 0.546728\n        )\n        ctx.closePath()\n        const SOUTHPOINTER2_GRADIENT = ctx.createLinearGradient(\n          0.471962 * imageWidth,\n          0,\n          0.528036 * imageWidth,\n          0\n        )\n        SOUTHPOINTER2_GRADIENT.addColorStop(0, '#e3e5e8')\n        SOUTHPOINTER2_GRADIENT.addColorStop(0.48, '#e3e5e8')\n        SOUTHPOINTER2_GRADIENT.addColorStop(0.48, '#abb1b8')\n        SOUTHPOINTER2_GRADIENT.addColorStop(1, '#abb1b8')\n        ctx.fillStyle = SOUTHPOINTER2_GRADIENT\n        const strokeColor_SOUTHPOINTER2 = '#abb1b8'\n        ctx.strokeStyle = strokeColor_SOUTHPOINTER2\n        ctx.lineWidth = 1\n        ctx.lineCap = 'square'\n        ctx.lineJoin = 'miter'\n        ctx.fill()\n        ctx.stroke()\n      }\n        break\n\n      case 'type3': {\n        // NORTHPOINTER\n        ctx.beginPath()\n        ctx.moveTo(imageWidth * 0.5, imageHeight * 0.149532)\n        ctx.bezierCurveTo(\n          imageWidth * 0.5,\n          imageHeight * 0.149532,\n          imageWidth * 0.443925,\n          imageHeight * 0.490654,\n          imageWidth * 0.443925,\n          imageHeight * 0.5\n        )\n        ctx.bezierCurveTo(\n          imageWidth * 0.443925,\n          imageHeight * 0.53271,\n          imageWidth * 0.467289,\n          imageHeight * 0.556074,\n          imageWidth * 0.5,\n          imageHeight * 0.556074\n        )\n        ctx.bezierCurveTo(\n          imageWidth * 0.53271,\n          imageHeight * 0.556074,\n          imageWidth * 0.556074,\n          imageHeight * 0.53271,\n          imageWidth * 0.556074,\n          imageHeight * 0.5\n        )\n        ctx.bezierCurveTo(\n          imageWidth * 0.556074,\n          imageHeight * 0.490654,\n          imageWidth * 0.5,\n          imageHeight * 0.149532,\n          imageWidth * 0.5,\n          imageHeight * 0.149532\n        )\n        ctx.closePath()\n        const NORTHPOINTER3_GRADIENT = ctx.createLinearGradient(\n          0.471962 * imageWidth,\n          0,\n          0.528036 * imageWidth,\n          0\n        )\n        NORTHPOINTER3_GRADIENT.addColorStop(\n          0,\n          pointerColor.light.getRgbaColor()\n        )\n        NORTHPOINTER3_GRADIENT.addColorStop(\n          0.46,\n          pointerColor.light.getRgbaColor()\n        )\n        NORTHPOINTER3_GRADIENT.addColorStop(\n          0.47,\n          pointerColor.medium.getRgbaColor()\n        )\n        NORTHPOINTER3_GRADIENT.addColorStop(\n          1,\n          pointerColor.medium.getRgbaColor()\n        )\n        ctx.fillStyle = NORTHPOINTER3_GRADIENT\n        ctx.strokeStyle = pointerColor.dark.getRgbaColor()\n        ctx.lineWidth = 1\n        ctx.lineCap = 'square'\n        ctx.lineJoin = 'miter'\n        ctx.fill()\n        ctx.stroke()\n      }\n        break\n\n      case 'type1:':\n      /* falls through */\n      default: {\n        // NORTHPOINTER\n        ctx.beginPath()\n        ctx.moveTo(imageWidth * 0.5, imageHeight * 0.495327)\n        ctx.lineTo(imageWidth * 0.528037, imageHeight * 0.495327)\n        ctx.lineTo(imageWidth * 0.5, imageHeight * 0.149532)\n        ctx.lineTo(imageWidth * 0.471962, imageHeight * 0.495327)\n        ctx.lineTo(imageWidth * 0.5, imageHeight * 0.495327)\n        ctx.closePath()\n        const NORTHPOINTER1_GRADIENT = ctx.createLinearGradient(\n          0.471962 * imageWidth,\n          0,\n          0.528036 * imageWidth,\n          0\n        )\n        NORTHPOINTER1_GRADIENT.addColorStop(\n          0,\n          pointerColor.light.getRgbaColor()\n        )\n        NORTHPOINTER1_GRADIENT.addColorStop(\n          0.46,\n          pointerColor.light.getRgbaColor()\n        )\n        NORTHPOINTER1_GRADIENT.addColorStop(\n          0.47,\n          pointerColor.medium.getRgbaColor()\n        )\n        NORTHPOINTER1_GRADIENT.addColorStop(\n          1,\n          pointerColor.medium.getRgbaColor()\n        )\n        ctx.fillStyle = NORTHPOINTER1_GRADIENT\n        ctx.strokeStyle = pointerColor.dark.getRgbaColor()\n        ctx.lineWidth = 1\n        ctx.lineCap = 'square'\n        ctx.lineJoin = 'miter'\n        ctx.fill()\n        ctx.stroke()\n\n        // SOUTHPOINTER\n        ctx.beginPath()\n        ctx.moveTo(imageWidth * 0.5, imageHeight * 0.504672)\n        ctx.lineTo(imageWidth * 0.471962, imageHeight * 0.504672)\n        ctx.lineTo(imageWidth * 0.5, imageHeight * 0.850467)\n        ctx.lineTo(imageWidth * 0.528037, imageHeight * 0.504672)\n        ctx.lineTo(imageWidth * 0.5, imageHeight * 0.504672)\n        ctx.closePath()\n        const SOUTHPOINTER1_GRADIENT = ctx.createLinearGradient(\n          0.471962 * imageWidth,\n          0,\n          0.528036 * imageWidth,\n          0\n        )\n        SOUTHPOINTER1_GRADIENT.addColorStop(0, '#e3e5e8')\n        SOUTHPOINTER1_GRADIENT.addColorStop(0.48, '#e3e5e8')\n        SOUTHPOINTER1_GRADIENT.addColorStop(0.480099, '#abb1b8')\n        SOUTHPOINTER1_GRADIENT.addColorStop(1, '#abb1b8')\n        ctx.fillStyle = SOUTHPOINTER1_GRADIENT\n        const strokeColor_SOUTHPOINTER = '#abb1b8'\n        ctx.strokeStyle = strokeColor_SOUTHPOINTER\n        ctx.lineWidth = 1\n        ctx.lineCap = 'square'\n        ctx.lineJoin = 'miter'\n        ctx.fill()\n        ctx.stroke()\n      }\n        break\n    }\n    ctx.restore()\n  }\n\n  // **************   Initialization  ********************\n  // Draw all static painting code to background\n  const init = function () {\n    initialized = true\n\n    if (frameVisible) {\n      drawFrame(\n        backgroundContext,\n        frameDesign,\n        centerX,\n        centerY,\n        imageWidth,\n        imageHeight\n      )\n    }\n\n    if (backgroundVisible) {\n      drawBackground(\n        backgroundContext,\n        backgroundColor,\n        centerX,\n        centerY,\n        imageWidth,\n        imageHeight\n      )\n      drawRadialCustomImage(\n        backgroundContext,\n        customLayer,\n        centerX,\n        centerY,\n        imageWidth,\n        imageHeight\n      )\n\n      if (roseVisible) {\n        drawRoseImage(\n          roseContext,\n          centerX,\n          centerY,\n          imageWidth,\n          imageHeight,\n          backgroundColor\n        )\n      }\n\n      drawTickmarksImage(roseContext)\n    }\n\n    drawPointerImage(pointerContext, false)\n\n    if (foregroundVisible) {\n      drawForeground(\n        foregroundContext,\n        foregroundType,\n        imageWidth,\n        imageHeight,\n        true,\n        knobType,\n        knobStyle\n      )\n    }\n  }\n\n  const resetBuffers = function () {\n    // Buffer for all static background painting code\n    backgroundBuffer.width = size\n    backgroundBuffer.height = size\n    backgroundContext = backgroundBuffer.getContext('2d')\n\n    // Buffer for symbols/rose painting code\n    roseBuffer.width = size\n    roseBuffer.height = size\n    roseContext = roseBuffer.getContext('2d')\n\n    // Buffer for pointer image painting code\n    pointerBuffer.width = size\n    pointerBuffer.height = size\n    pointerContext = pointerBuffer.getContext('2d')\n\n    // Buffer for static foreground painting code\n    foregroundBuffer.width = size\n    foregroundBuffer.height = size\n    foregroundContext = foregroundBuffer.getContext('2d')\n  }\n\n  //* *********************************** Public methods **************************************\n  this.setValue = function (newValue) {\n    newValue = parseFloat(newValue) % 360\n    if (value !== newValue) {\n      value = newValue\n      this.repaint()\n    }\n    return this\n  }\n\n  this.getValue = function () {\n    return value\n  }\n\n  this.setValueAnimated = function (newValue, callback) {\n    const targetValue = newValue % 360\n    const gauge = this\n    let diff\n    if (value !== targetValue) {\n      if (undefined !== tween && tween.isPlaying) {\n        tween.stop()\n      }\n\n      diff = getShortestAngle(value, targetValue)\n      if (rotateFace) {\n        tween = new Tween(\n          {},\n          '',\n          Tween.regularEaseInOut,\n          value,\n          value + diff,\n          2\n        )\n      } else {\n        tween = new Tween({}, '', Tween.elasticEaseOut, value, value + diff, 2)\n      }\n      tween.onMotionChanged = function (event) {\n        value = event.target._pos % 360\n        if (!repainting) {\n          repainting = true\n          requestAnimFrame(gauge.repaint)\n        }\n      }\n\n      // do we have a callback function to process?\n      if (callback && typeof callback === 'function') {\n        tween.onMotionFinished = callback\n      }\n\n      tween.start()\n    }\n    return this\n  }\n\n  this.setFrameDesign = function (newFrameDesign) {\n    resetBuffers()\n    frameDesign = newFrameDesign\n    init()\n    this.repaint()\n    return this\n  }\n\n  this.setBackgroundColor = function (newBackgroundColor) {\n    resetBuffers()\n    backgroundColor = newBackgroundColor\n    init()\n    this.repaint()\n    return this\n  }\n\n  this.setForegroundType = function (newForegroundType) {\n    resetBuffers()\n    foregroundType = newForegroundType\n    init()\n    this.repaint()\n    return this\n  }\n\n  this.setPointerColor = function (newPointerColor) {\n    resetBuffers()\n    pointerColor = newPointerColor\n    init()\n    this.repaint()\n    return this\n  }\n\n  this.setPointerType = function (newPointerType) {\n    resetBuffers()\n    pointerType = newPointerType\n    init()\n    this.repaint()\n    return this\n  }\n\n  this.setPointSymbols = function (newPointSymbols) {\n    resetBuffers()\n    pointSymbols = newPointSymbols\n    init()\n    this.repaint()\n    return this\n  }\n\n  this.repaint = function () {\n    if (!initialized) {\n      init()\n    }\n\n    mainCtx.save()\n    mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height)\n    // Define rotation center\n    angle = HALF_PI + value * angleStep - HALF_PI\n\n    if (backgroundVisible || frameVisible) {\n      mainCtx.drawImage(backgroundBuffer, 0, 0)\n    }\n\n    if (rotateFace) {\n      mainCtx.save()\n      mainCtx.translate(centerX, centerY)\n      mainCtx.rotate(-angle)\n      mainCtx.translate(-centerX, -centerY)\n      if (backgroundVisible) {\n        mainCtx.drawImage(roseBuffer, 0, 0)\n      }\n      mainCtx.restore()\n    } else {\n      if (backgroundVisible) {\n        mainCtx.drawImage(roseBuffer, 0, 0)\n      }\n      mainCtx.translate(centerX, centerY)\n      mainCtx.rotate(angle)\n      mainCtx.translate(-centerX, -centerY)\n    }\n    // Set the pointer shadow params\n    mainCtx.shadowColor = 'rgba(0, 0, 0, 0.8)'\n    mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset\n    mainCtx.shadowBlur = shadowOffset * 2\n    // Draw the pointer\n    mainCtx.drawImage(pointerBuffer, 0, 0)\n    // Undo the translations & shadow settings\n    mainCtx.restore()\n\n    if (foregroundVisible) {\n      mainCtx.drawImage(foregroundBuffer, 0, 0)\n    }\n\n    repainting = false\n  }\n\n  // Visualize the component\n  this.repaint()\n\n  return this\n}\n\nexport default Compass\n","import Tween from './tween.js'\nimport drawPointerImage from './drawPointerImage'\nimport drawFrame from './drawFrame'\nimport drawBackground from './drawBackground'\nimport drawRadialCustomImage from './drawRadialCustomImage'\nimport drawForeground from './drawForeground'\nimport createLcdBackgroundImage from './createLcdBackgroundImage'\nimport drawRoseImage from './drawRoseImage'\nimport {\n  createBuffer,\n  getShortestAngle,\n  requestAnimFrame,\n  getCanvasContext,\n  HALF_PI,\n  TWO_PI,\n  RAD_FACTOR,\n  lcdFontName,\n  stdFontName\n} from './tools'\n\nimport {\n  BackgroundColor,\n  LcdColor,\n  ColorDef,\n  KnobType,\n  KnobStyle,\n  FrameDesign,\n  PointerType,\n  ForegroundType\n} from './definitions'\n\nconst WindDirection = function (canvas, parameters) {\n  parameters = parameters || {}\n  let size = undefined === parameters.size ? 0 : parameters.size\n  let frameDesign =\n    undefined === parameters.frameDesign\n      ? FrameDesign.METAL\n      : parameters.frameDesign\n  const frameVisible =\n    undefined === parameters.frameVisible ? true : parameters.frameVisible\n  let backgroundColor =\n    undefined === parameters.backgroundColor\n      ? BackgroundColor.DARK_GRAY\n      : parameters.backgroundColor\n  const backgroundVisible =\n    undefined === parameters.backgroundVisible\n      ? true\n      : parameters.backgroundVisible\n  let pointerTypeLatest =\n    undefined === parameters.pointerTypeLatest\n      ? PointerType.TYPE1\n      : parameters.pointerTypeLatest\n  let pointerTypeAverage =\n    undefined === parameters.pointerTypeAverage\n      ? PointerType.TYPE8\n      : parameters.pointerTypeAverage\n  let pointerColor =\n    undefined === parameters.pointerColor\n      ? ColorDef.RED\n      : parameters.pointerColor\n  let pointerColorAverage =\n    undefined === parameters.pointerColorAverage\n      ? ColorDef.BLUE\n      : parameters.pointerColorAverage\n  const knobType =\n    undefined === parameters.knobType\n      ? KnobType.STANDARD_KNOB\n      : parameters.knobType\n  const knobStyle =\n    undefined === parameters.knobStyle\n      ? KnobStyle.SILVER\n      : parameters.knobStyle\n  let foregroundType =\n    undefined === parameters.foregroundType\n      ? ForegroundType.TYPE1\n      : parameters.foregroundType\n  const foregroundVisible =\n    undefined === parameters.foregroundVisible\n      ? true\n      : parameters.foregroundVisible\n  let pointSymbols =\n    undefined === parameters.pointSymbols\n      ? ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW']\n      : parameters.pointSymbols\n  const pointSymbolsVisible =\n    undefined === parameters.pointSymbolsVisible\n      ? true\n      : parameters.pointSymbolsVisible\n  const customLayer =\n    undefined === parameters.customLayer ? null : parameters.customLayer\n  const degreeScale =\n    undefined === parameters.degreeScale ? true : parameters.degreeScale\n  const degreeScaleHalf =\n    undefined === parameters.degreeScaleHalf\n      ? false\n      : parameters.degreeScaleHalf\n  const roseVisible =\n    undefined === parameters.roseVisible ? false : parameters.roseVisible\n  let lcdColor =\n    undefined === parameters.lcdColor ? LcdColor.STANDARD : parameters.lcdColor\n  const lcdVisible =\n    undefined === parameters.lcdVisible ? true : parameters.lcdVisible\n  const digitalFont =\n    undefined === parameters.digitalFont ? false : parameters.digitalFont\n  let section = undefined === parameters.section ? null : parameters.section\n  let area = undefined === parameters.area ? null : parameters.area\n  let lcdTitleStrings =\n    undefined === parameters.lcdTitleStrings\n      ? ['Latest', 'Average']\n      : parameters.lcdTitleStrings\n  const titleString =\n    undefined === parameters.titleString ? '' : parameters.titleString\n  const useColorLabels =\n    undefined === parameters.useColorLabels ? false : parameters.useColorLabels\n  const fullScaleDeflectionTime =\n    undefined === parameters.fullScaleDeflectionTime\n      ? 2.5\n      : parameters.fullScaleDeflectionTime\n\n  let tweenLatest\n  let tweenAverage\n  let valueLatest = 0\n  let valueAverage = 0\n  const angleStep = RAD_FACTOR\n  let angleLatest = this.valueLatest\n  let angleAverage = this.valueAverage\n  const rotationOffset = -HALF_PI\n  const angleRange = TWO_PI\n  const range = 360\n  let repainting = false\n\n  // Get the canvas context and clear it\n  const mainCtx = getCanvasContext(canvas)\n  // Has a size been specified?\n  if (size === 0) {\n    size = Math.min(mainCtx.canvas.width, mainCtx.canvas.height)\n  }\n\n  // Set the size - also clears the canvas\n  mainCtx.canvas.width = size\n  mainCtx.canvas.height = size\n\n  const imageWidth = size\n  const imageHeight = size\n\n  const centerX = imageWidth / 2\n  const centerY = imageHeight / 2\n\n  const lcdFontHeight = Math.floor(imageWidth / 10)\n  const stdFont = lcdFontHeight + 'px ' + stdFontName\n  const lcdFont = lcdFontHeight + 'px ' + lcdFontName\n  const lcdWidth = imageWidth * 0.3\n  const lcdHeight = imageHeight * 0.12\n  const lcdPosX = (imageWidth - lcdWidth) / 2\n  const lcdPosY1 = imageHeight * 0.32\n  const lcdPosY2 = imageHeight * 0.565\n\n  let initialized = false\n\n  // **************   Buffer creation  ********************\n  // Buffer for all static background painting code\n  const backgroundBuffer = createBuffer(size, size)\n  let backgroundContext = backgroundBuffer.getContext('2d')\n\n  // Buffer for LCD displays\n  let lcdBuffer\n\n  // Buffer for latest pointer images painting code\n  const pointerBufferLatest = createBuffer(size, size)\n  let pointerContextLatest = pointerBufferLatest.getContext('2d')\n\n  // Buffer for average pointer image\n  const pointerBufferAverage = createBuffer(size, size)\n  let pointerContextAverage = pointerBufferAverage.getContext('2d')\n\n  // Buffer for static foreground painting code\n  const foregroundBuffer = createBuffer(size, size)\n  let foregroundContext = foregroundBuffer.getContext('2d')\n\n  // **************   Image creation  ********************\n  const drawLcdText = function (value, bLatest) {\n    mainCtx.save()\n    mainCtx.textAlign = 'center'\n    mainCtx.strokeStyle = lcdColor.textColor\n    mainCtx.fillStyle = lcdColor.textColor\n\n    // convert value from -180,180 range into 0-360 range\n    while (value < -180) {\n      value += 360\n    }\n    if (!degreeScaleHalf && value < 0) {\n      value += 360\n    }\n\n    if (degreeScaleHalf && value > 180) {\n      value = -(360 - value)\n    }\n\n    if (value >= 0) {\n      value = '00' + Math.round(value)\n      value = value.substring(value.length, value.length - 3)\n    } else {\n      value = '00' + Math.abs(Math.round(value))\n      value = '-' + value.substring(value.length, value.length - 3)\n    }\n\n    if (\n      lcdColor === LcdColor.STANDARD ||\n      lcdColor === LcdColor.STANDARD_GREEN\n    ) {\n      mainCtx.shadowColor = 'gray'\n      mainCtx.shadowOffsetX = imageWidth * 0.007\n      mainCtx.shadowOffsetY = imageWidth * 0.007\n      mainCtx.shadowBlur = imageWidth * 0.007\n    }\n    mainCtx.font = digitalFont ? lcdFont : stdFont\n    mainCtx.fillText(\n      value + '\\u00B0',\n      imageWidth / 2 + lcdWidth * 0.05,\n      (bLatest ? lcdPosY1 : lcdPosY2) + lcdHeight * 0.5 + lcdFontHeight * 0.38,\n      lcdWidth * 0.9\n    )\n\n    mainCtx.restore()\n  }\n\n  const drawAreaSectionImage = function (ctx, start, stop, color, filled) {\n    ctx.save()\n    ctx.strokeStyle = color\n    ctx.fillStyle = color\n    ctx.lineWidth = imageWidth * 0.035\n    const startAngle = (angleRange / range) * start\n    const stopAngle = startAngle + (stop - start) / (range / angleRange)\n    ctx.translate(centerX, centerY)\n    ctx.rotate(rotationOffset)\n    ctx.beginPath()\n    if (filled) {\n      ctx.moveTo(0, 0)\n      ctx.arc(\n        0,\n        0,\n        imageWidth * 0.365 - ctx.lineWidth / 2,\n        startAngle,\n        stopAngle,\n        false\n      )\n    } else {\n      ctx.arc(0, 0, imageWidth * 0.365, startAngle, stopAngle, false)\n    }\n    if (filled) {\n      ctx.moveTo(0, 0)\n      ctx.fill()\n    } else {\n      ctx.stroke()\n    }\n\n    ctx.translate(-centerX, -centerY)\n    ctx.restore()\n  }\n\n  const drawTickmarksImage = function (ctx) {\n    const OUTER_POINT = imageWidth * 0.38\n    const MAJOR_INNER_POINT = imageWidth * 0.35\n    // MED_INNER_POINT = imageWidth * 0.355,\n    const MINOR_INNER_POINT = imageWidth * 0.36\n    const TEXT_WIDTH = imageWidth * 0.1\n    const TEXT_TRANSLATE_X = imageWidth * 0.31\n    const CARDINAL_TRANSLATE_X = imageWidth * 0.36\n    let stdFont\n    let smlFont\n    let i\n    let val\n    let to\n\n    ctx.textAlign = 'center'\n    ctx.textBaseline = 'middle'\n\n    ctx.save()\n    ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor()\n    ctx.fillStyle = backgroundColor.labelColor.getRgbaColor()\n    ctx.translate(centerX, centerY)\n\n    if (!degreeScale) {\n      stdFont = 0.12 * imageWidth + 'px serif'\n      smlFont = 0.06 * imageWidth + 'px serif'\n\n      // let angleStep = RAD_FACTOR;\n      ctx.lineWidth = 1\n      ctx.strokeStyle = backgroundColor.symbolColor.getRgbaColor()\n\n      for (i = 0; i < 360; i += 2.5) {\n        if (i % 5 === 0) {\n          ctx.beginPath()\n          ctx.moveTo(imageWidth * 0.38, 0)\n          ctx.lineTo(imageWidth * 0.36, 0)\n          ctx.closePath()\n          ctx.stroke()\n        }\n\n        // Draw the labels\n        ctx.save()\n        switch (i) {\n          case 0: // E\n            ctx.translate(imageWidth * 0.35, 0)\n            ctx.rotate(HALF_PI)\n            ctx.font = stdFont\n            ctx.fillText(pointSymbols[2], 0, 0)\n            ctx.translate(-imageWidth * 0.35, 0)\n            break\n          case 45: // SE\n            ctx.translate(imageWidth * 0.29, 0)\n            ctx.rotate(HALF_PI)\n            ctx.font = smlFont\n            ctx.fillText(pointSymbols[3], 0, 0)\n            ctx.translate(-imageWidth * 0.29, 0)\n            break\n          case 90: // S\n            ctx.translate(imageWidth * 0.35, 0)\n            ctx.rotate(HALF_PI)\n            ctx.font = stdFont\n            ctx.fillText(pointSymbols[4], 0, 0)\n            ctx.translate(-imageWidth * 0.35, 0)\n            break\n          case 135: // SW\n            ctx.translate(imageWidth * 0.29, 0)\n            ctx.rotate(HALF_PI)\n            ctx.font = smlFont\n            ctx.fillText(pointSymbols[5], 0, 0)\n            ctx.translate(-imageWidth * 0.29, 0)\n            break\n          case 180: // W\n            ctx.translate(imageWidth * 0.35, 0)\n            ctx.rotate(HALF_PI)\n            ctx.font = stdFont\n            ctx.fillText(pointSymbols[6], 0, 0)\n            ctx.translate(-imageWidth * 0.35, 0)\n            break\n          case 225: // NW\n            ctx.translate(imageWidth * 0.29, 0)\n            ctx.rotate(HALF_PI)\n            ctx.font = smlFont\n            ctx.fillText(pointSymbols[7], 0, 0)\n            ctx.translate(-imageWidth * 0.29, 0)\n            break\n          case 270: // N\n            ctx.translate(imageWidth * 0.35, 0)\n            ctx.rotate(HALF_PI)\n            ctx.font = stdFont\n            ctx.fillText(pointSymbols[0], 0, 0)\n            ctx.translate(-imageWidth * 0.35, 0)\n            break\n          case 315: // NE\n            ctx.translate(imageWidth * 0.29, 0)\n            ctx.rotate(HALF_PI)\n            ctx.font = smlFont\n            ctx.fillText(pointSymbols[1], 0, 0)\n            ctx.translate(-imageWidth * 0.29, 0)\n            break\n        }\n        ctx.restore()\n\n        if (\n          roseVisible &&\n          (i === 0 ||\n            i === 22.5 ||\n            i === 45 ||\n            i === 67.5 ||\n            i === 90 ||\n            i === 112.5 ||\n            i === 135 ||\n            i === 157.5 ||\n            i === 180 ||\n            i === 202.5 ||\n            i === 225 ||\n            i === 247.5 ||\n            i === 270 ||\n            i === 292.5 ||\n            i === 315 ||\n            i === 337.5 ||\n            i === 360)\n        ) {\n          // ROSE_LINE\n          ctx.save()\n          ctx.beginPath()\n          // indent the 16 half quadrant lines a bit for visual effect\n          if (i % 45) {\n            ctx.moveTo(imageWidth * 0.29, 0)\n          } else {\n            ctx.moveTo(imageWidth * 0.38, 0)\n          }\n          ctx.lineTo(imageWidth * 0.1, 0)\n          ctx.closePath()\n          ctx.restore()\n          ctx.stroke()\n        }\n        ctx.rotate(angleStep * 2.5)\n      }\n    } else {\n      stdFont = Math.floor(0.1 * imageWidth) + 'px serif bold'\n      smlFont = Math.floor(imageWidth * 0.04) + 'px ' + stdFontName\n\n      ctx.rotate(angleStep * 5)\n      for (i = 5; i <= 360; i += 5) {\n        // Draw the labels\n        ctx.save()\n        if (pointSymbolsVisible) {\n          switch (i) {\n            case 360:\n              ctx.translate(CARDINAL_TRANSLATE_X, 0)\n              ctx.rotate(HALF_PI)\n              ctx.font = stdFont\n              ctx.fillText(pointSymbols[2], 0, 0, TEXT_WIDTH)\n              ctx.translate(-CARDINAL_TRANSLATE_X, 0)\n              break\n            case 90:\n              ctx.translate(CARDINAL_TRANSLATE_X, 0)\n              ctx.rotate(HALF_PI)\n              ctx.font = stdFont\n              ctx.fillText(pointSymbols[4], 0, 0, TEXT_WIDTH)\n              ctx.translate(-CARDINAL_TRANSLATE_X, 0)\n              break\n            case 180:\n              ctx.translate(CARDINAL_TRANSLATE_X, 0)\n              ctx.rotate(HALF_PI)\n              ctx.font = stdFont\n              ctx.fillText(pointSymbols[6], 0, 0, TEXT_WIDTH)\n              ctx.translate(-CARDINAL_TRANSLATE_X, 0)\n              break\n            case 270:\n              ctx.translate(CARDINAL_TRANSLATE_X, 0)\n              ctx.rotate(HALF_PI)\n              ctx.font = stdFont\n              ctx.fillText(pointSymbols[0], 0, 0, TEXT_WIDTH)\n              ctx.translate(-CARDINAL_TRANSLATE_X, 0)\n              break\n\n            case 5:\n            case 85:\n            case 95:\n            case 175:\n            case 185:\n            case 265:\n            case 275:\n            case 355:\n              // leave room for ordinal labels\n              break\n\n            default:\n              if ((i + 90) % 20) {\n                ctx.lineWidth = (i + 90) % 5 ? 1.5 : 1\n                ctx.beginPath()\n                ctx.moveTo(OUTER_POINT, 0)\n                to = (i + 90) % 10 ? MINOR_INNER_POINT : MAJOR_INNER_POINT\n                ctx.lineTo(to, 0)\n                ctx.closePath()\n                ctx.stroke()\n              } else {\n                ctx.lineWidth = 1.5\n                ctx.beginPath()\n                ctx.moveTo(OUTER_POINT, 0)\n                ctx.lineTo(MAJOR_INNER_POINT, 0)\n                ctx.closePath()\n                ctx.stroke()\n                val = (i + 90) % 360\n                ctx.translate(TEXT_TRANSLATE_X, 0)\n                ctx.rotate(HALF_PI)\n                ctx.font = smlFont\n                ctx.fillText('0'.substring(val >= 100) + val, 0, 0, TEXT_WIDTH)\n                ctx.translate(-TEXT_TRANSLATE_X, 0)\n              }\n          }\n        } else {\n          if ((i + 90) % 20) {\n            ctx.lineWidth = (i + 90) % 5 ? 1.5 : 1\n            ctx.beginPath()\n            ctx.moveTo(OUTER_POINT, 0)\n            to = (i + 90) % 10 ? MINOR_INNER_POINT : MAJOR_INNER_POINT\n            ctx.lineTo(to, 0)\n            ctx.closePath()\n            ctx.stroke()\n          } else {\n            ctx.lineWidth = 1.5\n            ctx.beginPath()\n            ctx.moveTo(OUTER_POINT, 0)\n            ctx.lineTo(MAJOR_INNER_POINT, 0)\n            ctx.closePath()\n            ctx.stroke()\n            val = (i + 90) % 360\n            if (degreeScaleHalf) {\n              // invert 180-360\n              if (val > 180) {\n                val = -(360 - val)\n              }\n            }\n            ctx.translate(TEXT_TRANSLATE_X, 0)\n            ctx.rotate(HALF_PI)\n            ctx.font = smlFont\n            ctx.fillText(val, 0, 0, TEXT_WIDTH)\n            ctx.translate(-TEXT_TRANSLATE_X, 0)\n          }\n        }\n        ctx.restore()\n        ctx.rotate(angleStep * 5)\n      }\n    }\n    ctx.translate(-centerX, -centerY)\n    ctx.restore()\n  }\n\n  const drawLcdTitles = function (ctx) {\n    if (lcdTitleStrings.length > 0) {\n      ctx.save()\n      ctx.textAlign = 'center'\n      ctx.textBaseline = 'middle'\n      ctx.fillStyle = useColorLabels\n        ? pointerColor.medium.getRgbaColor()\n        : backgroundColor.labelColor.getRgbaColor()\n      ctx.font = 0.04 * imageWidth + 'px ' + stdFontName\n      ctx.fillText(\n        lcdTitleStrings[0],\n        imageWidth / 2,\n        imageHeight * 0.29,\n        imageWidth * 0.3\n      )\n      ctx.fillStyle = useColorLabels\n        ? pointerColorAverage.medium.getRgbaColor()\n        : backgroundColor.labelColor.getRgbaColor()\n      ctx.fillText(\n        lcdTitleStrings[1],\n        imageWidth / 2,\n        imageHeight * 0.71,\n        imageWidth * 0.3\n      )\n      if (titleString.length > 0) {\n        ctx.fillStyle = backgroundColor.labelColor.getRgbaColor()\n        ctx.font = 0.0467 * imageWidth + 'px ' + stdFontName\n        ctx.fillText(\n          titleString,\n          imageWidth / 2,\n          imageHeight * 0.5,\n          imageWidth * 0.3\n        )\n      }\n    }\n  }\n\n  // **************   Initialization  ********************\n  // Draw all static painting code to background\n\n  const init = function (parameters) {\n    parameters = parameters || {}\n    const drawBackground2 =\n      undefined === parameters.background ? false : parameters.background\n    const drawPointer =\n      undefined === parameters.pointer ? false : parameters.pointer\n    const drawForeground2 =\n      undefined === parameters.foreground ? false : parameters.foreground\n\n    initialized = true\n\n    if (drawBackground2 && frameVisible) {\n      drawFrame(\n        backgroundContext,\n        frameDesign,\n        centerX,\n        centerY,\n        imageWidth,\n        imageHeight\n      )\n    }\n\n    if (drawBackground2 && backgroundVisible) {\n      // Create background in background buffer (backgroundBuffer)\n      drawBackground(\n        backgroundContext,\n        backgroundColor,\n        centerX,\n        centerY,\n        imageWidth,\n        imageHeight\n      )\n\n      // Create custom layer in background buffer (backgroundBuffer)\n      drawRadialCustomImage(\n        backgroundContext,\n        customLayer,\n        centerX,\n        centerY,\n        imageWidth,\n        imageHeight\n      )\n\n      // Create section in background buffer (backgroundBuffer)\n      if (section !== null && section.length > 0) {\n        let sectionIndex = section.length\n        do {\n          sectionIndex--\n          drawAreaSectionImage(\n            backgroundContext,\n            section[sectionIndex].start,\n            section[sectionIndex].stop,\n            section[sectionIndex].color,\n            false\n          )\n        } while (sectionIndex > 0)\n      }\n\n      // Create area in background buffer (backgroundBuffer)\n      if (area !== null && area.length > 0) {\n        let areaIndex = area.length\n        do {\n          areaIndex--\n          drawAreaSectionImage(\n            backgroundContext,\n            area[areaIndex].start,\n            area[areaIndex].stop,\n            area[areaIndex].color,\n            true\n          )\n        } while (areaIndex > 0)\n      }\n\n      drawTickmarksImage(backgroundContext)\n    }\n\n    if (drawBackground2 && roseVisible) {\n      drawRoseImage(\n        backgroundContext,\n        centerX,\n        centerY,\n        imageWidth,\n        imageHeight,\n        backgroundColor\n      )\n    }\n\n    // Create lcd background if selected in background buffer (backgroundBuffer)\n    if (drawBackground2 && lcdVisible) {\n      lcdBuffer = createLcdBackgroundImage(lcdWidth, lcdHeight, lcdColor)\n      backgroundContext.drawImage(lcdBuffer, lcdPosX, lcdPosY1)\n      backgroundContext.drawImage(lcdBuffer, lcdPosX, lcdPosY2)\n      // Create title in background buffer (backgroundBuffer)\n      drawLcdTitles(backgroundContext)\n    }\n\n    if (drawPointer) {\n      drawPointerImage(\n        pointerContextAverage,\n        imageWidth,\n        pointerTypeAverage,\n        pointerColorAverage,\n        backgroundColor.labelColor\n      )\n      drawPointerImage(\n        pointerContextLatest,\n        imageWidth,\n        pointerTypeLatest,\n        pointerColor,\n        backgroundColor.labelColor\n      )\n    }\n\n    if (drawForeground2 && foregroundVisible) {\n      const knobVisible =\n        !(pointerTypeLatest.type === 'type15' ||\n        pointerTypeLatest.type === 'type16')\n      drawForeground(\n        foregroundContext,\n        foregroundType,\n        imageWidth,\n        imageHeight,\n        knobVisible,\n        knobType,\n        knobStyle\n      )\n    }\n  }\n\n  const resetBuffers = function (buffers) {\n    buffers = buffers || {}\n    const resetBackground =\n      undefined === buffers.background ? false : buffers.background\n    const resetPointer =\n      undefined === buffers.pointer ? false : buffers.pointer\n    const resetForeground =\n      undefined === buffers.foreground ? false : buffers.foreground\n\n    // Buffer for all static background painting code\n    if (resetBackground) {\n      backgroundBuffer.width = size\n      backgroundBuffer.height = size\n      backgroundContext = backgroundBuffer.getContext('2d')\n    }\n    // Buffers for pointer image painting code\n    if (resetPointer) {\n      pointerBufferLatest.width = size\n      pointerBufferLatest.height = size\n      pointerContextLatest = pointerBufferLatest.getContext('2d')\n\n      pointerBufferAverage.width = size\n      pointerBufferAverage.height = size\n      pointerContextAverage = pointerBufferAverage.getContext('2d')\n    }\n    // Buffer for static foreground painting code\n    if (resetForeground) {\n      foregroundBuffer.width = size\n      foregroundBuffer.height = size\n      foregroundContext = foregroundBuffer.getContext('2d')\n    }\n  }\n\n  //* *********************************** Public methods **************************************\n  this.setValueLatest = function (newValue) {\n    // Actually need to handle 0-360 rather than 0-359\n    // 1-360 are used for directions\n    // 0 is used as a special case to indicate 'calm'\n    newValue = parseFloat(newValue)\n    newValue = newValue === 360 ? 360 : newValue % 360\n    if (valueLatest !== newValue) {\n      valueLatest = newValue\n      this.repaint()\n    }\n    return this\n  }\n\n  this.getValueLatest = function () {\n    return valueLatest\n  }\n\n  this.setValueAverage = function (newValue) {\n    // Actually need to handle 0-360 rather than 0-359\n    // 1-360 are used for directions\n    // 0 is used as a special case to indicate 'calm'\n    newValue = parseFloat(newValue)\n    newValue = newValue === 360 ? 360 : newValue % 360\n    if (valueAverage !== newValue) {\n      valueAverage = newValue\n      this.repaint()\n    }\n    return this\n  }\n\n  this.getValueAverage = function () {\n    return valueAverage\n  }\n\n  this.setValueAnimatedLatest = function (newValue, callback) {\n    const gauge = this\n    let diff\n    let time\n    // Actually need to handle 0-360 rather than 0-359\n    // 1-360 are used for directions\n    // 0 is used as a special case to indicate 'calm'\n    newValue = parseFloat(newValue)\n    const targetValue = newValue === 360 ? 360 : newValue % 360\n\n    if (valueLatest !== targetValue) {\n      if (undefined !== tweenLatest && tweenLatest.isPlaying) {\n        tweenLatest.stop()\n      }\n\n      diff = getShortestAngle(valueLatest, targetValue)\n\n      if (diff !== 0) {\n        // 360 - 0 is a diff of zero\n        time = (fullScaleDeflectionTime * Math.abs(diff)) / 180\n        time = Math.max(time, fullScaleDeflectionTime / 5)\n        tweenLatest = new Tween(\n          {},\n          '',\n          Tween.regularEaseInOut,\n          valueLatest,\n          valueLatest + diff,\n          time\n        )\n        tweenLatest.onMotionChanged = function (event) {\n          valueLatest =\n            event.target._pos === 360 ? 360 : event.target._pos % 360\n          if (!repainting) {\n            repainting = true\n            requestAnimFrame(gauge.repaint)\n          }\n        }\n\n        tweenLatest.onMotionFinished = function () {\n          valueLatest = targetValue\n          if (!repainting) {\n            repainting = true\n            requestAnimFrame(gauge.repaint)\n          }\n          // do we have a callback function to process?\n          if (callback && typeof callback === 'function') {\n            callback()\n          }\n        }\n\n        tweenLatest.start()\n      } else {\n        // target different from current, but diff is zero (0 -> 360 for instance), so just repaint\n        valueLatest = targetValue\n        if (!repainting) {\n          repainting = true\n          requestAnimFrame(gauge.repaint)\n        }\n      }\n    }\n    return this\n  }\n\n  this.setValueAnimatedAverage = function (newValue, callback) {\n    const gauge = this\n    let diff\n    let time\n    // Actually need to handle 0-360 rather than 0-359\n    // 1-360 are used for directions\n    // 0 is used as a special case to indicate 'calm'\n    newValue = parseFloat(newValue)\n    const targetValue = newValue === 360 ? 360 : newValue % 360\n    if (valueAverage !== newValue) {\n      if (undefined !== tweenAverage && tweenAverage.isPlaying) {\n        tweenAverage.stop()\n      }\n\n      diff = getShortestAngle(valueAverage, targetValue)\n      if (diff !== 0) {\n        // 360 - 0 is a diff of zero\n        time = (fullScaleDeflectionTime * Math.abs(diff)) / 180\n        time = Math.max(time, fullScaleDeflectionTime / 5)\n        tweenAverage = new Tween(\n          {},\n          '',\n          Tween.regularEaseInOut,\n          valueAverage,\n          valueAverage + diff,\n          time\n        )\n        tweenAverage.onMotionChanged = function (event) {\n          valueAverage =\n            event.target._pos === 360 ? 360 : event.target._pos % 360\n          if (!repainting) {\n            repainting = true\n            requestAnimFrame(gauge.repaint)\n          }\n        }\n\n        tweenAverage.onMotionFinished = function () {\n          valueAverage = targetValue\n          if (!repainting) {\n            repainting = true\n            requestAnimFrame(gauge.repaint)\n          }\n          // do we have a callback function to process?\n          if (callback && typeof callback === 'function') {\n            callback()\n          }\n        }\n\n        tweenAverage.start()\n      } else {\n        // target different from current, but diff is zero (0 -> 360 for instance), so just repaint\n        valueAverage = targetValue\n        if (!repainting) {\n          repainting = true\n          requestAnimFrame(gauge.repaint)\n        }\n      }\n    }\n    return this\n  }\n\n  this.setArea = function (areaVal) {\n    area = areaVal\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setSection = function (areaSec) {\n    section = areaSec\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setFrameDesign = function (newFrameDesign) {\n    frameDesign = newFrameDesign\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setBackgroundColor = function (newBackgroundColor) {\n    backgroundColor = newBackgroundColor\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setForegroundType = function (newForegroundType) {\n    resetBuffers({\n      foreground: true\n    })\n    foregroundType = newForegroundType\n    init({\n      foreground: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setPointerColor = function (newPointerColor) {\n    resetBuffers({\n      pointer: true\n    })\n    pointerColor = newPointerColor\n    init({\n      pointer: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setPointerColorAverage = function (newPointerColor) {\n    resetBuffers({\n      pointer: true\n    })\n    pointerColorAverage = newPointerColor\n    init({\n      pointer: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setPointerType = function (newPointerType) {\n    pointerTypeLatest = newPointerType\n    resetBuffers({\n      pointer: true,\n      foreground: true\n    })\n    init({\n      pointer: true,\n      foreground: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setPointerTypeAverage = function (newPointerType) {\n    pointerTypeAverage = newPointerType\n    resetBuffers({\n      pointer: true,\n      foreground: true\n    })\n    init({\n      pointer: true,\n      foreground: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setPointSymbols = function (newPointSymbols) {\n    pointSymbols = newPointSymbols\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setLcdColor = function (newLcdColor) {\n    lcdColor = newLcdColor\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setLcdTitleStrings = function (titles) {\n    lcdTitleStrings = titles\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.repaint = function () {\n    if (!initialized) {\n      init({\n        frame: true,\n        background: true,\n        led: true,\n        pointer: true,\n        foreground: true\n      })\n    }\n\n    mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height)\n\n    if (frameVisible || backgroundVisible) {\n      mainCtx.drawImage(backgroundBuffer, 0, 0)\n    }\n\n    // Draw lcd display\n    if (lcdVisible) {\n      drawLcdText(valueLatest, true)\n      drawLcdText(valueAverage, false)\n    }\n\n    // Define rotation angle\n    angleAverage = valueAverage * angleStep\n\n    // we have to draw to a rotated temporary image area so we can translate in\n    // absolute x, y values when drawing to main context\n    const shadowOffset = imageWidth * 0.006\n\n    // Define rotation center\n    mainCtx.save()\n    mainCtx.translate(centerX, centerY)\n    mainCtx.rotate(angleAverage)\n    mainCtx.translate(-centerX, -centerY)\n    // Set the pointer shadow params\n    mainCtx.shadowColor = 'rgba(0, 0, 0, 0.8)'\n    mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset\n    mainCtx.shadowBlur = shadowOffset * 2\n    // Draw the pointer\n    mainCtx.drawImage(pointerBufferAverage, 0, 0)\n    // Define rotation angle difference for average pointer\n    angleLatest = valueLatest * angleStep - angleAverage\n    mainCtx.translate(centerX, centerY)\n    mainCtx.rotate(angleLatest)\n    mainCtx.translate(-centerX, -centerY)\n    mainCtx.drawImage(pointerBufferLatest, 0, 0)\n    mainCtx.restore()\n\n    if (foregroundVisible) {\n      mainCtx.drawImage(foregroundBuffer, 0, 0)\n    }\n\n    repainting = false\n  }\n\n  // Visualize the component\n  this.repaint()\n\n  return this\n}\n\nexport default WindDirection\n","import Tween from './tween.js'\nimport drawFrame from './drawFrame'\nimport drawForeground from './drawForeground'\nimport {\n  createBuffer,\n  requestAnimFrame,\n  getCanvasContext,\n  HALF_PI,\n  TWO_PI,\n  PI,\n  RAD_FACTOR,\n  stdFontName\n} from './tools'\n\nimport {\n  ColorDef,\n  GaugeType,\n  KnobType,\n  KnobStyle,\n  FrameDesign,\n  ForegroundType\n} from './definitions'\n\nconst Horizon = function (canvas, parameters) {\n  parameters = parameters || {}\n  let size = undefined === parameters.size ? 0 : parameters.size\n  let frameDesign =\n    undefined === parameters.frameDesign\n      ? FrameDesign.METAL\n      : parameters.frameDesign\n  const frameVisible =\n    undefined === parameters.frameVisible ? true : parameters.frameVisible\n  let foregroundType =\n    undefined === parameters.foregroundType\n      ? ForegroundType.TYPE1\n      : parameters.foregroundType\n  const foregroundVisible =\n    undefined === parameters.foregroundVisible\n      ? true\n      : parameters.foregroundVisible\n  const pointerColor =\n    undefined === parameters.pointerColor\n      ? ColorDef.WHITE\n      : parameters.pointerColor\n\n  let tweenRoll\n  let tweenPitch\n  let repainting = false\n  let roll = 0\n  let pitch = 0\n  const pitchPixel = (PI * size) / 360\n  let pitchOffset = 0\n  let upsidedown = false\n\n  // Get the canvas context and clear it\n  const mainCtx = getCanvasContext(canvas)\n  // Has a size been specified?\n  if (size === 0) {\n    size = Math.min(mainCtx.canvas.width, mainCtx.canvas.height)\n  }\n\n  // Set the size - also clears the canvas\n  mainCtx.canvas.width = size\n  mainCtx.canvas.height = size\n\n  const imageWidth = size\n  const imageHeight = size\n\n  const centerX = imageWidth / 2\n  const centerY = imageHeight / 2\n\n  let initialized = false\n\n  // **************   Buffer creation  ********************\n  // Buffer for all static background painting code\n  const backgroundBuffer = createBuffer(size, size)\n  let backgroundContext = backgroundBuffer.getContext('2d')\n\n  // Buffer for pointer image painting code\n  const valueBuffer = createBuffer(size, size * PI)\n  let valueContext = valueBuffer.getContext('2d')\n\n  // Buffer for indicator painting code\n  const indicatorBuffer = createBuffer(size * 0.037383, size * 0.056074)\n  let indicatorContext = indicatorBuffer.getContext('2d')\n\n  // Buffer for static foreground painting code\n  const foregroundBuffer = createBuffer(size, size)\n  let foregroundContext = foregroundBuffer.getContext('2d')\n\n  // **************   Image creation  ********************\n  const drawHorizonBackgroundImage = function (ctx) {\n    ctx.save()\n\n    const imgWidth = size\n    const imgHeight = size * PI\n    let y\n\n    // HORIZON\n    ctx.beginPath()\n    ctx.rect(0, 0, imgWidth, imgHeight)\n    ctx.closePath()\n    const HORIZON_GRADIENT = ctx.createLinearGradient(0, 0, 0, imgHeight)\n    HORIZON_GRADIENT.addColorStop(0, '#7fd5f0')\n    HORIZON_GRADIENT.addColorStop(0.5, '#7fd5f0')\n    HORIZON_GRADIENT.addColorStop(0.5, '#3c4439')\n    HORIZON_GRADIENT.addColorStop(1, '#3c4439')\n    ctx.fillStyle = HORIZON_GRADIENT\n    ctx.fill()\n\n    ctx.lineWidth = 1\n    const stepSizeY = (imgHeight / 360) * 5\n    let stepTen = false\n    let step = 10\n\n    ctx.textAlign = 'center'\n    ctx.textBaseline = 'middle'\n    const fontSize = imgWidth * 0.04\n    ctx.font = fontSize + 'px ' + stdFontName\n    ctx.fillStyle = '#37596e'\n    for (y = imgHeight / 2 - stepSizeY; y > 0; y -= stepSizeY) {\n      if (step <= 90) {\n        if (stepTen) {\n          ctx.fillText(\n            step,\n            (imgWidth - imgWidth * 0.2) / 2 - 8,\n            y,\n            imgWidth * 0.375\n          )\n          ctx.fillText(\n            step,\n            imgWidth - (imgWidth - imgWidth * 0.2) / 2 + 8,\n            y,\n            imgWidth * 0.375\n          )\n          ctx.beginPath()\n          ctx.moveTo((imgWidth - imgWidth * 0.2) / 2, y)\n          ctx.lineTo(imgWidth - (imgWidth - imgWidth * 0.2) / 2, y)\n          ctx.closePath()\n          step += 10\n        } else {\n          ctx.beginPath()\n          ctx.moveTo((imgWidth - imgWidth * 0.1) / 2, y)\n          ctx.lineTo(imgWidth - (imgWidth - imgWidth * 0.1) / 2, y)\n          ctx.closePath()\n        }\n        ctx.stroke()\n      }\n      stepTen ^= true\n    }\n    stepTen = false\n    step = 10\n    ctx.strokeStyle = '#FFFFFF'\n    ctx.lineWidth = 1.5\n    ctx.beginPath()\n    ctx.moveTo(0, imgHeight / 2)\n    ctx.lineTo(imgWidth, imgHeight / 2)\n    ctx.closePath()\n    ctx.stroke()\n    ctx.fillStyle = '#FFFFFF'\n    ctx.lineWidth = 1\n    for (y = imgHeight / 2 + stepSizeY; y <= imgHeight; y += stepSizeY) {\n      if (step <= 90) {\n        if (stepTen) {\n          ctx.fillText(\n            -step,\n            (imgWidth - imgWidth * 0.2) / 2 - 8,\n            y,\n            imgWidth * 0.375\n          )\n          ctx.fillText(\n            -step,\n            imgWidth - (imgWidth - imgWidth * 0.2) / 2 + 8,\n            y,\n            imgWidth * 0.375\n          )\n          ctx.beginPath()\n          ctx.moveTo((imgWidth - imgWidth * 0.2) / 2, y)\n          ctx.lineTo(imgWidth - (imgWidth - imgWidth * 0.2) / 2, y)\n          ctx.closePath()\n          step += 10\n        } else {\n          ctx.beginPath()\n          ctx.moveTo((imgWidth - imgWidth * 0.1) / 2, y)\n          ctx.lineTo(imgWidth - (imgWidth - imgWidth * 0.1) / 2, y)\n          ctx.closePath()\n        }\n        ctx.stroke()\n      }\n      stepTen ^= true\n    }\n\n    ctx.restore()\n  }\n\n  const drawHorizonForegroundImage = function (ctx) {\n    ctx.save()\n\n    ctx.fillStyle = pointerColor.light.getRgbaColor()\n\n    // CENTERINDICATOR\n    ctx.beginPath()\n    ctx.moveTo(imageWidth * 0.476635, imageHeight * 0.5)\n    ctx.bezierCurveTo(\n      imageWidth * 0.476635,\n      imageHeight * 0.514018,\n      imageWidth * 0.485981,\n      imageHeight * 0.523364,\n      imageWidth * 0.5,\n      imageHeight * 0.523364\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.514018,\n      imageHeight * 0.523364,\n      imageWidth * 0.523364,\n      imageHeight * 0.514018,\n      imageWidth * 0.523364,\n      imageHeight * 0.5\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.523364,\n      imageHeight * 0.485981,\n      imageWidth * 0.514018,\n      imageHeight * 0.476635,\n      imageWidth * 0.5,\n      imageHeight * 0.476635\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.485981,\n      imageHeight * 0.476635,\n      imageWidth * 0.476635,\n      imageHeight * 0.485981,\n      imageWidth * 0.476635,\n      imageHeight * 0.5\n    )\n    ctx.closePath()\n    ctx.moveTo(imageWidth * 0.415887, imageHeight * 0.504672)\n    ctx.lineTo(imageWidth * 0.415887, imageHeight * 0.495327)\n    ctx.bezierCurveTo(\n      imageWidth * 0.415887,\n      imageHeight * 0.495327,\n      imageWidth * 0.467289,\n      imageHeight * 0.495327,\n      imageWidth * 0.467289,\n      imageHeight * 0.495327\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.471962,\n      imageHeight * 0.481308,\n      imageWidth * 0.481308,\n      imageHeight * 0.471962,\n      imageWidth * 0.495327,\n      imageHeight * 0.467289\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.495327,\n      imageHeight * 0.467289,\n      imageWidth * 0.495327,\n      imageHeight * 0.415887,\n      imageWidth * 0.495327,\n      imageHeight * 0.415887\n    )\n    ctx.lineTo(imageWidth * 0.504672, imageHeight * 0.415887)\n    ctx.bezierCurveTo(\n      imageWidth * 0.504672,\n      imageHeight * 0.415887,\n      imageWidth * 0.504672,\n      imageHeight * 0.467289,\n      imageWidth * 0.504672,\n      imageHeight * 0.467289\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.518691,\n      imageHeight * 0.471962,\n      imageWidth * 0.528037,\n      imageHeight * 0.481308,\n      imageWidth * 0.53271,\n      imageHeight * 0.495327\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.53271,\n      imageHeight * 0.495327,\n      imageWidth * 0.584112,\n      imageHeight * 0.495327,\n      imageWidth * 0.584112,\n      imageHeight * 0.495327\n    )\n    ctx.lineTo(imageWidth * 0.584112, imageHeight * 0.504672)\n    ctx.bezierCurveTo(\n      imageWidth * 0.584112,\n      imageHeight * 0.504672,\n      imageWidth * 0.53271,\n      imageHeight * 0.504672,\n      imageWidth * 0.53271,\n      imageHeight * 0.504672\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.528037,\n      imageHeight * 0.518691,\n      imageWidth * 0.518691,\n      imageHeight * 0.53271,\n      imageWidth * 0.5,\n      imageHeight * 0.53271\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.481308,\n      imageHeight * 0.53271,\n      imageWidth * 0.471962,\n      imageHeight * 0.518691,\n      imageWidth * 0.467289,\n      imageHeight * 0.504672\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.467289,\n      imageHeight * 0.504672,\n      imageWidth * 0.415887,\n      imageHeight * 0.504672,\n      imageWidth * 0.415887,\n      imageHeight * 0.504672\n    )\n    ctx.closePath()\n    ctx.fill()\n\n    // Tickmarks\n    const step = 5\n    const stepRad = 5 * RAD_FACTOR\n    ctx.translate(centerX, centerY)\n    ctx.rotate(-HALF_PI)\n    ctx.translate(-centerX, -centerY)\n    let angle\n    for (angle = -90; angle <= 90; angle += step) {\n      if (angle % 45 === 0 || angle === 0) {\n        ctx.strokeStyle = pointerColor.medium.getRgbaColor()\n        ctx.lineWidth = 2\n        ctx.beginPath()\n        ctx.moveTo(imageWidth * 0.5, imageHeight * 0.088785)\n        ctx.lineTo(imageWidth * 0.5, imageHeight * 0.113)\n        ctx.closePath()\n        ctx.stroke()\n      } else if (angle % 15 === 0) {\n        ctx.strokeStyle = '#FFFFFF'\n        ctx.lineWidth = 1\n        ctx.beginPath()\n        ctx.moveTo(imageWidth * 0.5, imageHeight * 0.088785)\n        ctx.lineTo(imageWidth * 0.5, imageHeight * 0.103785)\n        ctx.closePath()\n        ctx.stroke()\n      } else {\n        ctx.strokeStyle = '#FFFFFF'\n        ctx.lineWidth = 0.5\n        ctx.beginPath()\n        ctx.moveTo(imageWidth * 0.5, imageHeight * 0.088785)\n        ctx.lineTo(imageWidth * 0.5, imageHeight * 0.093785)\n        ctx.closePath()\n        ctx.stroke()\n      }\n      ctx.translate(centerX, centerY)\n      ctx.rotate(stepRad, centerX, centerY)\n      ctx.translate(-centerX, -centerY)\n    }\n\n    ctx.restore()\n  }\n\n  const drawIndicatorImage = function (ctx) {\n    ctx.save()\n\n    const imgWidth = imageWidth * 0.037383\n    const imgHeight = imageHeight * 0.056074\n\n    ctx.beginPath()\n    ctx.moveTo(imgWidth * 0.5, 0)\n    ctx.lineTo(0, imgHeight)\n    ctx.lineTo(imgWidth, imgHeight)\n    ctx.closePath()\n\n    ctx.fillStyle = pointerColor.light.getRgbaColor()\n    ctx.fill()\n    ctx.strokeStyle = pointerColor.medium.getRgbaColor()\n    ctx.stroke()\n\n    ctx.restore()\n  }\n\n  // **************   Initialization  ********************\n  // Draw all static painting code to background\n  const init = function () {\n    initialized = true\n\n    if (frameVisible) {\n      drawFrame(\n        backgroundContext,\n        frameDesign,\n        centerX,\n        centerY,\n        imageWidth,\n        imageHeight\n      )\n    }\n\n    drawHorizonBackgroundImage(valueContext)\n\n    drawIndicatorImage(indicatorContext)\n\n    drawHorizonForegroundImage(foregroundContext)\n\n    if (foregroundVisible) {\n      drawForeground(\n        foregroundContext,\n        foregroundType,\n        imageWidth,\n        imageHeight,\n        true,\n        KnobType,\n        KnobStyle,\n        GaugeType\n      )\n    }\n  }\n\n  const resetBuffers = function () {\n    // Buffer for all static background painting code\n    backgroundBuffer.width = size\n    backgroundBuffer.height = size\n    backgroundContext = backgroundBuffer.getContext('2d')\n\n    // Buffer for pointer image painting code\n    valueBuffer.width = size\n    valueBuffer.height = size * PI\n    valueContext = valueBuffer.getContext('2d')\n\n    // Buffer for the indicator\n    indicatorBuffer.width = size * 0.037383\n    indicatorBuffer.height = size * 0.056074\n    indicatorContext = indicatorBuffer.getContext('2d')\n\n    // Buffer for static foreground painting code\n    foregroundBuffer.width = size\n    foregroundBuffer.height = size\n    foregroundContext = foregroundBuffer.getContext('2d')\n  }\n\n  //* *********************************** Public methods **************************************\n  this.setRoll = function (newRoll) {\n    newRoll = parseFloat(newRoll) % 360\n    if (roll !== newRoll) {\n      roll = newRoll\n      this.repaint()\n    }\n    return this\n  }\n\n  this.getRoll = function () {\n    return roll\n  }\n\n  this.setRollAnimated = function (newRoll, callback) {\n    const gauge = this\n    newRoll = parseFloat(newRoll) % 360\n    if (roll !== newRoll) {\n      if (undefined !== tweenRoll && tweenRoll.isPlaying) {\n        tweenRoll.stop()\n      }\n\n      tweenRoll = new Tween({}, '', Tween.regularEaseInOut, roll, newRoll, 1)\n\n      tweenRoll.onMotionChanged = function (event) {\n        roll = event.target._pos\n        if (!repainting) {\n          repainting = true\n          requestAnimFrame(gauge.repaint)\n        }\n      }\n\n      // do we have a callback function to process?\n      if (callback && typeof callback === 'function') {\n        tweenRoll.onMotionFinished = callback\n      }\n\n      tweenRoll.start()\n    }\n    return this\n  }\n\n  this.setPitch = function (newPitch) {\n    // constrain to range -180..180\n    // normal range -90..90 and -180..-90/90..180 indicate inverted\n    newPitch = ((parseFloat(newPitch) + 180 - pitchOffset) % 360) - 180\n    // pitch = -(newPitch + pitchOffset) % 180;\n    if (pitch !== newPitch) {\n      pitch = newPitch\n      if (pitch > 90) {\n        pitch = 90 - (pitch - 90)\n        if (!upsidedown) {\n          this.setRoll(roll - 180)\n        }\n        upsidedown = true\n      } else if (pitch < -90) {\n        pitch = -90 + (-90 - pitch)\n        if (!upsidedown) {\n          this.setRoll(roll + 180)\n        }\n        upsidedown = true\n      } else {\n        upsidedown = false\n      }\n      this.repaint()\n    }\n    return this\n  }\n\n  this.getPitch = function () {\n    return pitch\n  }\n\n  this.setPitchAnimated = function (newPitch, callback) {\n    const gauge = this\n    newPitch = parseFloat(newPitch)\n    // perform all range checking in setPitch()\n    if (pitch !== newPitch) {\n      if (undefined !== tweenPitch && tweenPitch.isPlaying) {\n        tweenPitch.stop()\n      }\n      tweenPitch = new Tween(\n        {},\n        '',\n        Tween.regularEaseInOut,\n        pitch,\n        newPitch,\n        1\n      )\n      tweenPitch.onMotionChanged = function (event) {\n        pitch = event.target._pos\n        if (pitch > 90) {\n          pitch = 90 - (pitch - 90)\n          if (!upsidedown) {\n            this.setRoll(roll - 180)\n          }\n          upsidedown = true\n        } else if (pitch < -90) {\n          pitch = -90 + (-90 - pitch)\n          if (!upsidedown) {\n            this.setRoll(roll + 180)\n          }\n          upsidedown = true\n        } else {\n          upsidedown = false\n        }\n        if (!repainting) {\n          repainting = true\n          requestAnimFrame(gauge.repaint)\n        }\n        gauge.setPitch(event.target._pos)\n      }\n\n      // do we have a callback function to process?\n      if (callback && typeof callback === 'function') {\n        tweenPitch.onMotionFinished = callback\n      }\n\n      tweenPitch.start()\n    }\n    return this\n  }\n\n  this.setPitchOffset = function (newPitchOffset) {\n    pitchOffset = parseFloat(newPitchOffset)\n    this.repaint()\n    return this\n  }\n\n  this.setFrameDesign = function (newFrameDesign) {\n    resetBuffers()\n    frameDesign = newFrameDesign\n    init()\n    this.repaint()\n    return this\n  }\n\n  this.setForegroundType = function (newForegroundType) {\n    resetBuffers()\n    foregroundType = newForegroundType\n    init()\n    this.repaint()\n    return this\n  }\n\n  this.repaint = function () {\n    if (!initialized) {\n      init()\n    }\n\n    mainCtx.save()\n    mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height)\n\n    mainCtx.drawImage(backgroundBuffer, 0, 0)\n\n    mainCtx.save()\n\n    // Set the clipping area\n    mainCtx.beginPath()\n    mainCtx.arc(centerX, centerY, (imageWidth * 0.831775) / 2, 0, TWO_PI, true)\n    mainCtx.closePath()\n    mainCtx.clip()\n\n    // Rotate around roll\n    mainCtx.translate(centerX, centerY)\n    mainCtx.rotate(-(roll * RAD_FACTOR))\n    mainCtx.translate(-centerX, 0)\n    // Translate about dive\n    mainCtx.translate(0, pitch * pitchPixel)\n\n    // Draw horizon\n    mainCtx.drawImage(valueBuffer, 0, -valueBuffer.height / 2)\n\n    // Draw the scale and angle indicator\n    mainCtx.translate(0, -(pitch * pitchPixel) - centerY)\n    mainCtx.drawImage(\n      indicatorBuffer,\n      imageWidth * 0.5 - indicatorBuffer.width / 2,\n      imageWidth * 0.107476\n    )\n    mainCtx.restore()\n\n    mainCtx.drawImage(foregroundBuffer, 0, 0)\n\n    mainCtx.restore()\n  }\n\n  // Visualize the component\n  this.repaint()\n\n  return this\n}\n\nexport default Horizon\n","import createLedImage from './createLedImage'\nimport { getCanvasContext, doc } from './tools'\n\nimport { LedColor } from './definitions'\n\nconst Led = function (canvas, parameters) {\n  parameters = parameters || {}\n  let size = undefined === parameters.size ? 0 : parameters.size\n  let ledColor =\n    undefined === parameters.ledColor ? LedColor.RED_LED : parameters.ledColor\n\n  let ledBlinking = false\n  let ledTimerId = 0\n\n  // Get the canvas context and clear it\n  const mainCtx = getCanvasContext(canvas)\n  // Has a size been specified?\n  if (size === 0) {\n    size = Math.min(mainCtx.canvas.width, mainCtx.canvas.height)\n  }\n\n  // Set the size - also clears the canvas\n  mainCtx.canvas.width = size\n  mainCtx.canvas.height = size\n\n  let initialized = false\n\n  // Buffer for led on painting code\n  const ledBufferOn = doc.createElement('canvas')\n  ledBufferOn.width = size\n  ledBufferOn.height = size\n  const ledContextOn = ledBufferOn.getContext('2d')\n\n  // Buffer for led off painting code\n  const ledBufferOff = doc.createElement('canvas')\n  ledBufferOff.width = size\n  ledBufferOff.height = size\n  const ledContextOff = ledBufferOff.getContext('2d')\n\n  // Buffer for current led painting code\n  let ledBuffer = ledBufferOff\n\n  const init = function () {\n    initialized = true\n\n    // Draw LED ON in ledBuffer_ON\n    ledContextOn.clearRect(\n      0,\n      0,\n      ledContextOn.canvas.width,\n      ledContextOn.canvas.height\n    )\n    ledContextOn.drawImage(createLedImage(size, 1, ledColor), 0, 0)\n\n    // Draw LED ON in ledBuffer_OFF\n    ledContextOff.clearRect(\n      0,\n      0,\n      ledContextOff.canvas.width,\n      ledContextOff.canvas.height\n    )\n    ledContextOff.drawImage(createLedImage(size, 0, ledColor), 0, 0)\n  }\n\n  this.toggleLed = function () {\n    if (ledBuffer === ledBufferOn) {\n      ledBuffer = ledBufferOff\n    } else {\n      ledBuffer = ledBufferOn\n    }\n    repaint()\n    return this\n  }\n\n  this.setLedColor = function (newColor) {\n    ledColor = newColor\n    initialized = false\n    repaint()\n    return this\n  }\n\n  this.setLedOnOff = function (on) {\n    if (on) {\n      ledBuffer = ledBufferOn\n    } else {\n      ledBuffer = ledBufferOff\n    }\n    repaint()\n    return this\n  }\n\n  this.blink = function (blink) {\n    if (blink) {\n      if (!ledBlinking) {\n        ledTimerId = setInterval(this.toggleLed, 1000)\n        ledBlinking = true\n      }\n    } else {\n      if (ledBlinking) {\n        clearInterval(ledTimerId)\n        ledBlinking = false\n        ledBuffer = ledBufferOff\n      }\n    }\n    return this\n  }\n\n  const repaint = function () {\n    if (!initialized) {\n      init()\n    }\n\n    mainCtx.save()\n    mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height)\n\n    mainCtx.drawImage(ledBuffer, 0, 0)\n\n    mainCtx.restore()\n  }\n\n  repaint()\n\n  return this\n}\n\nexport default Led\n","import drawFrame from './drawFrame'\nimport drawBackground from './drawBackground'\nimport drawRadialCustomImage from './drawRadialCustomImage'\nimport drawForeground from './drawForeground'\nimport { createBuffer, getCanvasContext, TWO_PI, RAD_FACTOR } from './tools'\n\nimport {\n  BackgroundColor,\n  ColorDef,\n  FrameDesign,\n  PointerType,\n  ForegroundType\n} from './definitions'\n\nconst Clock = function (canvas, parameters) {\n  parameters = parameters || {}\n  let size = undefined === parameters.size ? 0 : parameters.size\n  let frameDesign =\n    undefined === parameters.frameDesign\n      ? FrameDesign.METAL\n      : parameters.frameDesign\n  const frameVisible =\n    undefined === parameters.frameVisible ? true : parameters.frameVisible\n  let pointerType =\n    undefined === parameters.pointerType\n      ? PointerType.TYPE1\n      : parameters.pointerType\n  let pointerColor =\n    undefined === parameters.pointerColor\n      ? pointerType === PointerType.TYPE1\n        ? ColorDef.GRAY\n        : ColorDef.BLACK\n      : parameters.pointerColor\n  let backgroundColor =\n    undefined === parameters.backgroundColor\n      ? pointerType === PointerType.TYPE1\n        ? BackgroundColor.ANTHRACITE\n        : BackgroundColor.LIGHT_GRAY\n      : parameters.backgroundColor\n  const backgroundVisible =\n    undefined === parameters.backgroundVisible\n      ? true\n      : parameters.backgroundVisible\n  let foregroundType =\n    undefined === parameters.foregroundType\n      ? ForegroundType.TYPE1\n      : parameters.foregroundType\n  const foregroundVisible =\n    undefined === parameters.foregroundVisible\n      ? true\n      : parameters.foregroundVisible\n  const customLayer =\n    undefined === parameters.customLayer ? null : parameters.customLayer\n  let isAutomatic =\n    undefined === parameters.isAutomatic ? true : parameters.isAutomatic\n  let hour = undefined === parameters.hour ? 11 : parameters.hour\n  let minute = undefined === parameters.minute ? 5 : parameters.minute\n  let second = undefined === parameters.second ? 0 : parameters.second\n  let secondMovesContinuous =\n    undefined === parameters.secondMovesContinuous\n      ? false\n      : parameters.secondMovesContinuous\n  let timeZoneOffsetHour =\n    undefined === parameters.timeZoneOffsetHour\n      ? 0\n      : parameters.timeZoneOffsetHour\n  let timeZoneOffsetMinute =\n    undefined === parameters.timeZoneOffsetMinute\n      ? 0\n      : parameters.timeZoneOffsetMinute\n  let secondPointerVisible =\n    undefined === parameters.secondPointerVisible\n      ? true\n      : parameters.secondPointerVisible\n\n  // GaugeType specific private variables\n  let objDate = new Date()\n  let minutePointerAngle\n  let hourPointerAngle\n  let secondPointerAngle\n  let tickTimer\n  let tickInterval = secondMovesContinuous ? 100 : 1000\n  tickInterval = secondPointerVisible ? tickInterval : 100\n\n  const self = this\n\n  // Constants\n  const ANGLE_STEP = 6\n\n  // Get the canvas context and clear it\n  const mainCtx = getCanvasContext(canvas)\n  // Has a size been specified?\n  if (size === 0) {\n    size = Math.min(mainCtx.canvas.width, mainCtx.canvas.height)\n  }\n\n  // Set the size - also clears the canvas\n  mainCtx.canvas.width = size\n  mainCtx.canvas.height = size\n\n  const imageWidth = size\n  const imageHeight = size\n\n  const centerX = imageWidth / 2\n  const centerY = imageHeight / 2\n\n  let initialized = false\n\n  // Buffer for the frame\n  const frameBuffer = createBuffer(size, size)\n  let frameContext = frameBuffer.getContext('2d')\n\n  // Buffer for static background painting code\n  const backgroundBuffer = createBuffer(size, size)\n  let backgroundContext = backgroundBuffer.getContext('2d')\n\n  // Buffer for hour pointer image painting code\n  const hourBuffer = createBuffer(size, size)\n  let hourContext = hourBuffer.getContext('2d')\n\n  // Buffer for minute pointer image painting code\n  const minuteBuffer = createBuffer(size, size)\n  let minuteContext = minuteBuffer.getContext('2d')\n\n  // Buffer for second pointer image painting code\n  const secondBuffer = createBuffer(size, size)\n  let secondContext = secondBuffer.getContext('2d')\n\n  // Buffer for static foreground painting code\n  const foregroundBuffer = createBuffer(size, size)\n  let foregroundContext = foregroundBuffer.getContext('2d')\n\n  const drawTickmarksImage = function (ctx, ptrType) {\n    let tickAngle\n    let SMALL_TICK_HEIGHT\n    let BIG_TICK_HEIGHT\n    let INNER_POINT\n    const OUTER_POINT = imageWidth * 0.405\n    ctx.save()\n    ctx.translate(centerX, centerY)\n\n    switch (ptrType.type) {\n      case 'type1':\n        // Draw minutes tickmarks\n        SMALL_TICK_HEIGHT = imageWidth * 0.074766\n        INNER_POINT = OUTER_POINT - SMALL_TICK_HEIGHT\n        ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor()\n        ctx.lineWidth = imageWidth * 0.014018\n\n        for (tickAngle = 0; tickAngle < 360; tickAngle += 30) {\n          ctx.beginPath()\n          ctx.moveTo(OUTER_POINT, 0)\n          ctx.lineTo(INNER_POINT, 0)\n          ctx.closePath()\n          ctx.stroke()\n          ctx.rotate(30 * RAD_FACTOR)\n        }\n\n        // Draw hours tickmarks\n        BIG_TICK_HEIGHT = imageWidth * 0.126168\n        INNER_POINT = OUTER_POINT - BIG_TICK_HEIGHT\n        ctx.lineWidth = imageWidth * 0.03271\n\n        for (tickAngle = 0; tickAngle < 360; tickAngle += 90) {\n          ctx.beginPath()\n          ctx.moveTo(OUTER_POINT, 0)\n          ctx.lineTo(INNER_POINT, 0)\n          ctx.closePath()\n          ctx.stroke()\n          ctx.rotate(90 * RAD_FACTOR)\n        }\n        break\n\n      case 'type2':\n      /* falls through */\n      default:\n        // Draw minutes tickmarks\n        SMALL_TICK_HEIGHT = imageWidth * 0.037383\n        INNER_POINT = OUTER_POINT - SMALL_TICK_HEIGHT\n        ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor()\n        ctx.lineWidth = imageWidth * 0.009345\n\n        for (tickAngle = 0; tickAngle < 360; tickAngle += 6) {\n          ctx.beginPath()\n          ctx.moveTo(OUTER_POINT, 0)\n          ctx.lineTo(INNER_POINT, 0)\n          ctx.closePath()\n          ctx.stroke()\n          ctx.rotate(6 * RAD_FACTOR)\n        }\n\n        // Draw hours tickmarks\n        BIG_TICK_HEIGHT = imageWidth * 0.084112\n        INNER_POINT = OUTER_POINT - BIG_TICK_HEIGHT\n        ctx.lineWidth = imageWidth * 0.028037\n\n        for (tickAngle = 0; tickAngle < 360; tickAngle += 30) {\n          ctx.beginPath()\n          ctx.moveTo(OUTER_POINT, 0)\n          ctx.lineTo(INNER_POINT, 0)\n          ctx.closePath()\n          ctx.stroke()\n          ctx.rotate(30 * RAD_FACTOR)\n        }\n        break\n    }\n    ctx.translate(-centerX, -centerY)\n    ctx.restore()\n  }\n\n  const drawHourPointer = function (ctx, ptrType) {\n    ctx.save()\n    let grad\n\n    switch (ptrType.type) {\n      case 'type2':\n        ctx.beginPath()\n        ctx.lineWidth = imageWidth * 0.046728\n        ctx.moveTo(centerX, imageWidth * 0.289719)\n        ctx.lineTo(centerX, imageWidth * 0.289719 + imageWidth * 0.224299)\n        ctx.strokeStyle = pointerColor.medium.getRgbaColor()\n        ctx.closePath()\n        ctx.stroke()\n        break\n\n      case 'type1':\n      /* falls through */\n      default:\n        ctx.beginPath()\n        ctx.moveTo(imageWidth * 0.471962, imageHeight * 0.560747)\n        ctx.lineTo(imageWidth * 0.471962, imageHeight * 0.214953)\n        ctx.lineTo(imageWidth * 0.5, imageHeight * 0.182242)\n        ctx.lineTo(imageWidth * 0.528037, imageHeight * 0.214953)\n        ctx.lineTo(imageWidth * 0.528037, imageHeight * 0.560747)\n        ctx.lineTo(imageWidth * 0.471962, imageHeight * 0.560747)\n        ctx.closePath()\n        grad = ctx.createLinearGradient(\n          imageWidth * 0.471962,\n          imageHeight * 0.560747,\n          imageWidth * 0.528037,\n          imageHeight * 0.214953\n        )\n        grad.addColorStop(1, pointerColor.veryLight.getRgbaColor())\n        grad.addColorStop(0, pointerColor.light.getRgbaColor())\n        ctx.fillStyle = grad\n        ctx.strokeStyle = pointerColor.light.getRgbaColor()\n        ctx.fill()\n        ctx.stroke()\n        break\n    }\n    ctx.restore()\n  }\n\n  const drawMinutePointer = function (ctx, ptrType) {\n    ctx.save()\n    let grad\n\n    switch (ptrType.type) {\n      case 'type2':\n        ctx.beginPath()\n        ctx.lineWidth = imageWidth * 0.03271\n        ctx.moveTo(centerX, imageWidth * 0.116822)\n        ctx.lineTo(centerX, imageWidth * 0.116822 + imageWidth * 0.38785)\n        ctx.strokeStyle = pointerColor.medium.getRgbaColor()\n        ctx.closePath()\n        ctx.stroke()\n        break\n\n      case 'type1':\n      /* falls through */\n      default:\n        ctx.beginPath()\n        ctx.moveTo(imageWidth * 0.518691, imageHeight * 0.574766)\n        ctx.lineTo(imageWidth * 0.523364, imageHeight * 0.135514)\n        ctx.lineTo(imageWidth * 0.5, imageHeight * 0.107476)\n        ctx.lineTo(imageWidth * 0.476635, imageHeight * 0.140186)\n        ctx.lineTo(imageWidth * 0.476635, imageHeight * 0.574766)\n        ctx.lineTo(imageWidth * 0.518691, imageHeight * 0.574766)\n        ctx.closePath()\n        grad = ctx.createLinearGradient(\n          imageWidth * 0.518691,\n          imageHeight * 0.574766,\n          imageWidth * 0.476635,\n          imageHeight * 0.140186\n        )\n        grad.addColorStop(1, pointerColor.veryLight.getRgbaColor())\n        grad.addColorStop(0, pointerColor.light.getRgbaColor())\n        ctx.fillStyle = grad\n        ctx.strokeStyle = pointerColor.light.getRgbaColor()\n        ctx.fill()\n        ctx.stroke()\n        break\n    }\n    ctx.restore()\n  }\n\n  const drawSecondPointer = function (ctx, ptrType) {\n    ctx.save()\n    let grad\n\n    switch (ptrType.type) {\n      case 'type2':\n        // top rectangle\n        ctx.lineWidth = imageWidth * 0.009345\n        ctx.beginPath()\n        ctx.moveTo(centerX, imageWidth * 0.09813)\n        ctx.lineTo(centerX, imageWidth * 0.09813 + imageWidth * 0.126168)\n        ctx.closePath()\n        ctx.stroke()\n        // bottom rectangle\n        ctx.lineWidth = imageWidth * 0.018691\n        ctx.beginPath()\n        ctx.moveTo(centerX, imageWidth * 0.308411)\n        ctx.lineTo(centerX, imageWidth * 0.308411 + imageWidth * 0.191588)\n        ctx.closePath()\n        ctx.stroke()\n        // circle\n        ctx.lineWidth = imageWidth * 0.016\n        ctx.beginPath()\n        ctx.arc(\n          centerX,\n          imageWidth * 0.26,\n          (imageWidth * 0.085) / 2,\n          0,\n          TWO_PI\n        )\n        ctx.closePath()\n        ctx.stroke()\n        break\n\n      case 'type1':\n      /* falls through */\n      default:\n        ctx.beginPath()\n        ctx.moveTo(imageWidth * 0.509345, imageHeight * 0.116822)\n        ctx.lineTo(imageWidth * 0.509345, imageHeight * 0.574766)\n        ctx.lineTo(imageWidth * 0.490654, imageHeight * 0.574766)\n        ctx.lineTo(imageWidth * 0.490654, imageHeight * 0.116822)\n        ctx.lineTo(imageWidth * 0.509345, imageHeight * 0.116822)\n        ctx.closePath()\n        grad = ctx.createLinearGradient(\n          imageWidth * 0.509345,\n          imageHeight * 0.116822,\n          imageWidth * 0.490654,\n          imageHeight * 0.574766\n        )\n        grad.addColorStop(0, ColorDef.RED.light.getRgbaColor())\n        grad.addColorStop(0.47, ColorDef.RED.medium.getRgbaColor())\n        grad.addColorStop(1, ColorDef.RED.dark.getRgbaColor())\n        ctx.fillStyle = grad\n        ctx.strokeStyle = ColorDef.RED.dark.getRgbaColor()\n        ctx.fill()\n        ctx.stroke()\n        break\n    }\n    ctx.restore()\n  }\n\n  const drawKnob = function (ctx) {\n    // draw the knob\n    ctx.beginPath()\n    ctx.arc(centerX, centerY, imageWidth * 0.045, 0, TWO_PI)\n    ctx.closePath()\n    const grad = ctx.createLinearGradient(\n      centerX - (imageWidth * 0.045) / 2,\n      centerY - (imageWidth * 0.045) / 2,\n      centerX + (imageWidth * 0.045) / 2,\n      centerY + (imageWidth * 0.045) / 2\n    )\n    grad.addColorStop(0, '#eef0f2')\n    grad.addColorStop(1, '#65696d')\n    ctx.fillStyle = grad\n    ctx.fill()\n  }\n\n  const drawTopKnob = function (ctx, ptrType) {\n    let grad\n\n    ctx.save()\n\n    switch (ptrType.type) {\n      case 'type2':\n        // draw knob\n        ctx.fillStyle = '#000000'\n        ctx.beginPath()\n        ctx.arc(centerX, centerY, (imageWidth * 0.088785) / 2, 0, TWO_PI)\n        ctx.closePath()\n        ctx.fill()\n        break\n\n      case 'type1':\n      /* falls through */\n      default:\n        // draw knob\n        grad = ctx.createLinearGradient(\n          centerX - (imageWidth * 0.027) / 2,\n          centerY - (imageWidth * 0.027) / 2,\n          centerX + (imageWidth * 0.027) / 2,\n          centerY + (imageWidth * 0.027) / 2\n        )\n        grad.addColorStop(0, '#f3f4f7')\n        grad.addColorStop(0.11, '#f3f5f7')\n        grad.addColorStop(0.12, '#f1f3f5')\n        grad.addColorStop(0.2, '#c0c5cb')\n        grad.addColorStop(0.2, '#bec3c9')\n        grad.addColorStop(1, '#bec3c9')\n        ctx.fillStyle = grad\n        ctx.beginPath()\n        ctx.arc(centerX, centerY, imageWidth * 0.027, 0, TWO_PI)\n        ctx.closePath()\n        ctx.fill()\n        break\n    }\n\n    ctx.restore()\n  }\n\n  const calculateAngles = function (hour, minute, second) {\n    secondPointerAngle = second * ANGLE_STEP * RAD_FACTOR\n    minutePointerAngle = minute * ANGLE_STEP * RAD_FACTOR\n    hourPointerAngle = (hour + minute / 60) * ANGLE_STEP * 5 * RAD_FACTOR\n  }\n\n  const tickTock = function () {\n    if (isAutomatic) {\n      objDate = new Date()\n    } else {\n      objDate.setHours(hour)\n      objDate.setMinutes(minute)\n      objDate.setSeconds(second)\n    }\n    // Seconds\n    second =\n      objDate.getSeconds() +\n      (secondMovesContinuous ? objDate.getMilliseconds() / 1000 : 0)\n\n    // Hours\n    if (timeZoneOffsetHour !== 0) {\n      hour = objDate.getUTCHours() + timeZoneOffsetHour\n    } else {\n      hour = objDate.getHours()\n    }\n    hour = hour % 12\n\n    // Minutes\n    if (timeZoneOffsetMinute !== 0) {\n      minute = objDate.getUTCMinutes() + timeZoneOffsetMinute\n    } else {\n      minute = objDate.getMinutes()\n    }\n    if (minute > 60) {\n      minute -= 60\n      hour++\n    }\n    if (minute < 0) {\n      minute += 60\n      hour--\n    }\n    hour = hour % 12\n    // Calculate angles from current hour and minute values\n    calculateAngles(hour, minute, second)\n\n    if (isAutomatic) {\n      tickTimer = setTimeout(tickTock, tickInterval)\n    }\n\n    self.repaint()\n  }\n\n  // **************   Initialization  ********************\n  // Draw all static painting code to background\n  const init = function (parameters) {\n    parameters = parameters || {}\n    const drawFrame2 =\n      undefined === parameters.frame ? false : parameters.frame\n    const drawBackground2 =\n      undefined === parameters.background ? false : parameters.background\n    const drawPointers =\n      undefined === parameters.pointers ? false : parameters.pointers\n    const drawForeground2 =\n      undefined === parameters.foreground ? false : parameters.foreground\n\n    initialized = true\n\n    if (drawFrame2 && frameVisible) {\n      drawFrame(\n        frameContext,\n        frameDesign,\n        centerX,\n        centerY,\n        imageWidth,\n        imageHeight\n      )\n    }\n\n    if (drawBackground2 && backgroundVisible) {\n      // Create background in background buffer (backgroundBuffer)\n      drawBackground(\n        backgroundContext,\n        backgroundColor,\n        centerX,\n        centerY,\n        imageWidth,\n        imageHeight\n      )\n\n      // Create custom layer in background buffer (backgroundBuffer)\n      drawRadialCustomImage(\n        backgroundContext,\n        customLayer,\n        centerX,\n        centerY,\n        imageWidth,\n        imageHeight\n      )\n\n      drawTickmarksImage(backgroundContext, pointerType)\n    }\n\n    if (drawPointers) {\n      drawHourPointer(hourContext, pointerType)\n      drawMinutePointer(minuteContext, pointerType)\n      drawSecondPointer(secondContext, pointerType)\n    }\n\n    if (drawForeground2 && foregroundVisible) {\n      drawTopKnob(foregroundContext, pointerType)\n      drawForeground(\n        foregroundContext,\n        foregroundType,\n        imageWidth,\n        imageHeight,\n        false\n      )\n    }\n  }\n\n  const resetBuffers = function (buffers) {\n    buffers = buffers || {}\n    const resetFrame = undefined === buffers.frame ? false : buffers.frame\n    const resetBackground =\n      undefined === buffers.background ? false : buffers.background\n    const resetPointers =\n      undefined === buffers.pointers ? false : buffers.pointers\n    const resetForeground =\n      undefined === buffers.foreground ? false : buffers.foreground\n\n    if (resetFrame) {\n      frameBuffer.width = size\n      frameBuffer.height = size\n      frameContext = frameBuffer.getContext('2d')\n    }\n\n    if (resetBackground) {\n      backgroundBuffer.width = size\n      backgroundBuffer.height = size\n      backgroundContext = backgroundBuffer.getContext('2d')\n    }\n\n    if (resetPointers) {\n      hourBuffer.width = size\n      hourBuffer.height = size\n      hourContext = hourBuffer.getContext('2d')\n\n      minuteBuffer.width = size\n      minuteBuffer.height = size\n      minuteContext = minuteBuffer.getContext('2d')\n\n      secondBuffer.width = size\n      secondBuffer.height = size\n      secondContext = secondBuffer.getContext('2d')\n    }\n\n    if (resetForeground) {\n      foregroundBuffer.width = size\n      foregroundBuffer.height = size\n      foregroundContext = foregroundBuffer.getContext('2d')\n    }\n  }\n\n  //* *********************************** Public methods **************************************\n  this.getAutomatic = function () {\n    return isAutomatic\n  }\n\n  this.setAutomatic = function (newValue) {\n    newValue = !!newValue\n    if (isAutomatic && !newValue) {\n      // stop the clock!\n      clearTimeout(tickTimer)\n      isAutomatic = newValue\n    } else if (!isAutomatic && newValue) {\n      // start the clock\n      isAutomatic = newValue\n      tickTock()\n    }\n    return this\n  }\n\n  this.getHour = function () {\n    return hour\n  }\n\n  this.setHour = function (newValue) {\n    newValue = parseInt(newValue, 10) % 12\n    if (hour !== newValue) {\n      hour = newValue\n      calculateAngles(hour, minute, second)\n      this.repaint()\n    }\n    return this\n  }\n\n  this.getMinute = function () {\n    return minute\n  }\n\n  this.setMinute = function (newValue) {\n    newValue = parseInt(newValue, 10) % 60\n    if (minute !== newValue) {\n      minute = newValue\n      calculateAngles(hour, minute, second)\n      this.repaint()\n    }\n    return this\n  }\n\n  this.getSecond = function () {\n    return second\n  }\n\n  this.setSecond = function (newValue) {\n    newValue = parseInt(newValue, 10) % 60\n    if (second !== newValue) {\n      second = newValue\n      calculateAngles(hour, minute, second)\n      this.repaint()\n    }\n    return this\n  }\n\n  this.getTimeZoneOffsetHour = function () {\n    return timeZoneOffsetHour\n  }\n\n  this.setTimeZoneOffsetHour = function (newValue) {\n    timeZoneOffsetHour = parseInt(newValue, 10)\n    this.repaint()\n    return this\n  }\n\n  this.getTimeZoneOffsetMinute = function () {\n    return timeZoneOffsetMinute\n  }\n\n  this.setTimeZoneOffsetMinute = function (newValue) {\n    timeZoneOffsetMinute = parseInt(newValue, 10)\n    this.repaint()\n    return this\n  }\n\n  this.getSecondPointerVisible = function () {\n    return secondPointerVisible\n  }\n\n  this.setSecondPointerVisible = function (newValue) {\n    secondPointerVisible = !!newValue\n    this.repaint()\n    return this\n  }\n\n  this.getSecondMovesContinuous = function () {\n    return secondMovesContinuous\n  }\n\n  this.setSecondMovesContinuous = function (newValue) {\n    secondMovesContinuous = !!newValue\n    tickInterval = secondMovesContinuous ? 100 : 1000\n    tickInterval = secondPointerVisible ? tickInterval : 100\n    return this\n  }\n\n  this.setFrameDesign = function (newFrameDesign) {\n    resetBuffers({\n      frame: true\n    })\n    frameDesign = newFrameDesign\n    init({\n      frame: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setBackgroundColor = function (newBackgroundColor) {\n    resetBuffers({\n      frame: true,\n      background: true\n    })\n    backgroundColor = newBackgroundColor\n    init({\n      frame: true,\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setForegroundType = function (newForegroundType) {\n    resetBuffers({\n      foreground: true\n    })\n    foregroundType = newForegroundType\n    init({\n      foreground: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setPointerType = function (newPointerType) {\n    resetBuffers({\n      background: true,\n      foreground: true,\n      pointers: true\n    })\n    pointerType = newPointerType\n    if (pointerType.type === 'type1') {\n      pointerColor = ColorDef.GRAY\n      backgroundColor = BackgroundColor.ANTHRACITE\n    } else {\n      pointerColor = ColorDef.BLACK\n      backgroundColor = BackgroundColor.LIGHT_GRAY\n    }\n    init({\n      background: true,\n      foreground: true,\n      pointers: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setPointerColor = function (newPointerColor) {\n    resetBuffers({\n      pointers: true\n    })\n    pointerColor = newPointerColor\n    init({\n      pointers: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.repaint = function () {\n    if (!initialized) {\n      init({\n        frame: true,\n        background: true,\n        pointers: true,\n        foreground: true\n      })\n    }\n\n    // mainCtx.save();\n    mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height)\n\n    // Draw frame\n    if (frameVisible) {\n      mainCtx.drawImage(frameBuffer, 0, 0)\n    }\n\n    // Draw buffered image to visible canvas\n    if (backgroundVisible) {\n      mainCtx.drawImage(backgroundBuffer, 0, 0)\n    }\n\n    // have to draw to a rotated temporary image area so we can translate in\n    // absolute x, y values when drawing to main context\n    const shadowOffset = imageWidth * 0.006\n\n    // draw hour pointer\n    // Define rotation center\n    mainCtx.save()\n    mainCtx.translate(centerX, centerY)\n    mainCtx.rotate(hourPointerAngle)\n    mainCtx.translate(-centerX, -centerY)\n    // Set the pointer shadow params\n    mainCtx.shadowColor = 'rgba(0, 0, 0, 0.8)'\n    mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset\n    mainCtx.shadowBlur = shadowOffset * 2\n    // Draw the pointer\n    mainCtx.drawImage(hourBuffer, 0, 0)\n\n    // draw minute pointer\n    // Define rotation center\n    mainCtx.translate(centerX, centerY)\n    mainCtx.rotate(minutePointerAngle - hourPointerAngle)\n    mainCtx.translate(-centerX, -centerY)\n    mainCtx.drawImage(minuteBuffer, 0, 0)\n    mainCtx.restore()\n\n    if (pointerType.type === 'type1') {\n      drawKnob(mainCtx)\n    }\n\n    if (secondPointerVisible) {\n      // draw second pointer\n      // Define rotation center\n      mainCtx.save()\n      mainCtx.translate(centerX, centerY)\n      mainCtx.rotate(secondPointerAngle)\n      mainCtx.translate(-centerX, -centerY)\n      // Set the pointer shadow params\n      mainCtx.shadowColor = 'rgba(0, 0, 0, 0.8)'\n      mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset\n      mainCtx.shadowBlur = shadowOffset * 2\n      // Draw the pointer\n      mainCtx.drawImage(secondBuffer, 0, 0)\n      mainCtx.restore()\n    }\n\n    // Draw foreground\n    if (foregroundVisible) {\n      mainCtx.drawImage(foregroundBuffer, 0, 0)\n    }\n  }\n\n  // Visualize the component\n  tickTock()\n\n  return this\n}\n\nexport default Clock\n","import { rgbaColor, gradientWrapper, getCanvasContext } from './tools'\n\nconst Battery = function (canvas, parameters) {\n  parameters = parameters || {}\n  let size = undefined === parameters.size ? 0 : parameters.size\n  let value = undefined === parameters.value ? 50 : parameters.value\n\n  // Get the canvas context and clear it\n  const mainCtx = getCanvasContext(canvas)\n\n  // Has a size been specified?\n  if (size === 0) {\n    size = mainCtx.canvas.width\n  }\n\n  const imageWidth = size\n  const imageHeight = Math.ceil(size * 0.45)\n\n  // Set the size - also clears the canvas\n  mainCtx.canvas.width = imageWidth\n  mainCtx.canvas.height = imageHeight\n\n  const createBatteryImage = function (ctx, imageWidth, imageHeight, value) {\n    let grad\n\n    // Background\n    ctx.beginPath()\n    ctx.moveTo(imageWidth * 0.025, imageHeight * 0.055555)\n    ctx.lineTo(imageWidth * 0.9, imageHeight * 0.055555)\n    ctx.lineTo(imageWidth * 0.9, imageHeight * 0.944444)\n    ctx.lineTo(imageWidth * 0.025, imageHeight * 0.944444)\n    ctx.lineTo(imageWidth * 0.025, imageHeight * 0.055555)\n    ctx.closePath()\n    //\n    ctx.beginPath()\n    ctx.moveTo(imageWidth * 0.925, 0)\n    ctx.lineTo(0, 0)\n    ctx.lineTo(0, imageHeight)\n    ctx.lineTo(imageWidth * 0.925, imageHeight)\n    ctx.lineTo(imageWidth * 0.925, imageHeight * 0.722222)\n    ctx.bezierCurveTo(\n      imageWidth * 0.925,\n      imageHeight * 0.722222,\n      imageWidth * 0.975,\n      imageHeight * 0.722222,\n      imageWidth * 0.975,\n      imageHeight * 0.722222\n    )\n    ctx.bezierCurveTo(\n      imageWidth,\n      imageHeight * 0.722222,\n      imageWidth,\n      imageHeight * 0.666666,\n      imageWidth,\n      imageHeight * 0.666666\n    )\n    ctx.bezierCurveTo(\n      imageWidth,\n      imageHeight * 0.666666,\n      imageWidth,\n      imageHeight * 0.333333,\n      imageWidth,\n      imageHeight * 0.333333\n    )\n    ctx.bezierCurveTo(\n      imageWidth,\n      imageHeight * 0.333333,\n      imageWidth,\n      imageHeight * 0.277777,\n      imageWidth * 0.975,\n      imageHeight * 0.277777\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.975,\n      imageHeight * 0.277777,\n      imageWidth * 0.925,\n      imageHeight * 0.277777,\n      imageWidth * 0.925,\n      imageHeight * 0.277777\n    )\n    ctx.lineTo(imageWidth * 0.925, 0)\n    ctx.closePath()\n    //\n    grad = ctx.createLinearGradient(0, 0, 0, imageHeight)\n    grad.addColorStop(0, '#ffffff')\n    grad.addColorStop(1, '#7e7e7e')\n    ctx.fillStyle = grad\n    ctx.fill()\n\n    // Main\n    ctx.beginPath()\n    let end = Math.max(\n      imageWidth * 0.875 * (value / 100),\n      Math.ceil(imageWidth * 0.01)\n    )\n    ctx.rect(\n      imageWidth * 0.025,\n      imageWidth * 0.025,\n      end,\n      imageHeight * 0.888888\n    )\n    ctx.closePath()\n    const BORDER_FRACTIONS = [0, 0.4, 1]\n    const BORDER_COLORS = [\n      new rgbaColor(177, 25, 2, 1), // 0xB11902\n      new rgbaColor(219, 167, 21, 1), // 0xDBA715\n      new rgbaColor(121, 162, 75, 1) // 0x79A24B\n    ]\n    const border = new gradientWrapper(0, 100, BORDER_FRACTIONS, BORDER_COLORS)\n    ctx.fillStyle = border.getColorAt(value / 100).getRgbColor()\n    ctx.fill()\n    ctx.beginPath()\n    end = Math.max(end - imageWidth * 0.05, 0)\n    ctx.rect(imageWidth * 0.05, imageWidth * 0.05, end, imageHeight * 0.777777)\n    ctx.closePath()\n    const LIQUID_COLORS_DARK = [\n      new rgbaColor(198, 39, 5, 1), // 0xC62705\n      new rgbaColor(228, 189, 32, 1), // 0xE4BD20\n      new rgbaColor(163, 216, 102, 1) // 0xA3D866\n    ]\n\n    const LIQUID_COLORS_LIGHT = [\n      new rgbaColor(246, 121, 48, 1), // 0xF67930\n      new rgbaColor(246, 244, 157, 1), // 0xF6F49D\n      new rgbaColor(223, 233, 86, 1) // 0xDFE956\n    ]\n    const LIQUID_GRADIENT_FRACTIONS = [0, 0.4, 1]\n    const liquidDark = new gradientWrapper(\n      0,\n      100,\n      LIQUID_GRADIENT_FRACTIONS,\n      LIQUID_COLORS_DARK\n    )\n    const liquidLight = new gradientWrapper(\n      0,\n      100,\n      LIQUID_GRADIENT_FRACTIONS,\n      LIQUID_COLORS_LIGHT\n    )\n    grad = ctx.createLinearGradient(\n      imageWidth * 0.05,\n      0,\n      imageWidth * 0.875,\n      0\n    )\n    grad.addColorStop(0, liquidDark.getColorAt(value / 100).getRgbColor())\n    grad.addColorStop(0.5, liquidLight.getColorAt(value / 100).getRgbColor())\n    grad.addColorStop(1, liquidDark.getColorAt(value / 100).getRgbColor())\n    ctx.fillStyle = grad\n    ctx.fill()\n\n    // Foreground\n    ctx.beginPath()\n    ctx.rect(\n      imageWidth * 0.025,\n      imageWidth * 0.025,\n      imageWidth * 0.875,\n      imageHeight * 0.444444\n    )\n    ctx.closePath()\n    grad = ctx.createLinearGradient(\n      imageWidth * 0.025,\n      imageWidth * 0.025,\n      imageWidth * 0.875,\n      imageHeight * 0.444444\n    )\n    grad.addColorStop(0, 'rgba(255, 255, 255, 0)')\n    grad.addColorStop(1, 'rgba(255, 255, 255, 0.8)')\n    ctx.fillStyle = grad\n    ctx.fill()\n  }\n\n  // **************   Public methods  ********************\n  this.setValue = function (newValue) {\n    newValue = newValue < 0 ? 0 : newValue > 100 ? 100 : newValue\n    if (value !== newValue) {\n      value = newValue\n      this.repaint()\n    }\n    return this\n  }\n\n  this.getValue = function () {\n    return value\n  }\n\n  this.repaint = function () {\n    mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height)\n    createBatteryImage(mainCtx, imageWidth, imageHeight, value)\n  }\n\n  // Visualize the component\n  this.repaint()\n\n  return this\n}\n\nexport default Battery\n","import drawFrame from './drawFrame'\nimport drawBackground from './drawBackground'\nimport drawRadialCustomImage from './drawRadialCustomImage'\nimport drawForeground from './drawForeground'\nimport {\n  createBuffer,\n  getCanvasContext,\n  TWO_PI,\n  PI,\n  RAD_FACTOR,\n  stdFontName\n} from './tools'\n\nimport {\n  BackgroundColor,\n  ColorDef,\n  FrameDesign,\n  ForegroundType\n} from './definitions'\n\nconst Stopwatch = function (canvas, parameters) {\n  parameters = parameters || {}\n  let size = undefined === parameters.size ? 0 : parameters.size\n  let frameDesign =\n    undefined === parameters.frameDesign\n      ? FrameDesign.METAL\n      : parameters.frameDesign\n  const frameVisible =\n    undefined === parameters.frameVisible ? true : parameters.frameVisible\n  let pointerColor =\n    undefined === parameters.pointerColor\n      ? ColorDef.BLACK\n      : parameters.pointerColor\n  let backgroundColor =\n    undefined === parameters.backgroundColor\n      ? BackgroundColor.LIGHT_GRAY\n      : parameters.backgroundColor\n  const backgroundVisible =\n    undefined === parameters.backgroundVisible\n      ? true\n      : parameters.backgroundVisible\n  let foregroundType =\n    undefined === parameters.foregroundType\n      ? ForegroundType.TYPE1\n      : parameters.foregroundType\n  const foregroundVisible =\n    undefined === parameters.foregroundVisible\n      ? true\n      : parameters.foregroundVisible\n  const customLayer =\n    undefined === parameters.customLayer ? null : parameters.customLayer\n\n  let minutePointerAngle = 0\n  let secondPointerAngle = 0\n  let tickTimer\n  const ANGLE_STEP = 6\n  const self = this\n\n  let start = 0\n  let currentMilliSeconds = 0\n  let minutes = 0\n  let seconds = 0\n  let milliSeconds = 0\n  let running = false\n  let lap = false\n  // Get the canvas context\n  const mainCtx = getCanvasContext(canvas)\n\n  let initialized = false\n\n  // Buffer for the frame\n  let frameContext\n\n  // Buffer for static background painting code\n  let backgroundContext\n\n  // Buffer for small pointer image painting code\n  let smallPointerContext\n\n  // Buffer for large pointer image painting code\n  let largePointerContext\n\n  // Buffer for static foreground painting code\n  let foregroundContext\n\n  const drawTickmarksImage = function (\n    ctx,\n    width,\n    range,\n    text_scale,\n    text_dist_factor,\n    x_offset,\n    y_offset\n  ) {\n    const STD_FONT_SIZE = text_scale * width\n    const STD_FONT = STD_FONT_SIZE + 'px ' + stdFontName\n    const TEXT_WIDTH = width * 0.15\n    const THIN_STROKE = 0.5\n    const MEDIUM_STROKE = 1\n    const THICK_STROKE = 1.5\n    const TEXT_DISTANCE = text_dist_factor * width\n    const MIN_LENGTH = Math.round(0.025 * width)\n    const MED_LENGTH = Math.round(0.035 * width)\n    const MAX_LENGTH = Math.round(0.045 * width)\n    const TEXT_COLOR = backgroundColor.labelColor.getRgbaColor()\n    const TICK_COLOR = backgroundColor.labelColor.getRgbaColor()\n    const CENTER = width / 2\n    // Create the ticks itself\n    const RADIUS = width * 0.4\n    let innerPoint\n    let outerPoint\n    let textPoint\n    let counter = 0\n    let numberCounter = 0\n    let valueCounter // value for the tickmarks\n    let sinValue = 0\n    let cosValue = 0\n    let alpha // angle for the tickmarks\n    const ALPHA_START = -PI\n    const ANGLE_STEPSIZE = TWO_PI / range\n\n    ctx.width = ctx.height = width\n    ctx.save()\n    ctx.textAlign = 'center'\n    ctx.textBaseline = 'middle'\n    ctx.font = STD_FONT\n\n    for (\n      alpha = ALPHA_START, valueCounter = 0;\n      valueCounter <= range + 1;\n      alpha -= ANGLE_STEPSIZE * 0.1, valueCounter += 0.1\n    ) {\n      ctx.lineWidth = THIN_STROKE\n      sinValue = Math.sin(alpha)\n      cosValue = Math.cos(alpha)\n\n      // tickmark every 2 units\n      if (counter % 2 === 0) {\n        // ctx.lineWidth = THIN_STROKE;\n        innerPoint = [\n          CENTER + (RADIUS - MIN_LENGTH) * sinValue + x_offset,\n          CENTER + (RADIUS - MIN_LENGTH) * cosValue + y_offset\n        ]\n        outerPoint = [\n          CENTER + RADIUS * sinValue + x_offset,\n          CENTER + RADIUS * cosValue + y_offset\n        ]\n        // Draw ticks\n        ctx.strokeStyle = TICK_COLOR\n        ctx.beginPath()\n        ctx.moveTo(innerPoint[0], innerPoint[1])\n        ctx.lineTo(outerPoint[0], outerPoint[1])\n        ctx.closePath()\n        ctx.stroke()\n      }\n\n      // Different tickmark every 10 units\n      if (counter === 10 || counter === 0) {\n        ctx.fillStyle = TEXT_COLOR\n        ctx.lineWidth = MEDIUM_STROKE\n        outerPoint = [\n          CENTER + RADIUS * sinValue + x_offset,\n          CENTER + RADIUS * cosValue + y_offset\n        ]\n        textPoint = [\n          CENTER + (RADIUS - TEXT_DISTANCE) * sinValue + x_offset,\n          CENTER + (RADIUS - TEXT_DISTANCE) * cosValue + y_offset\n        ]\n\n        // Draw text\n        if (numberCounter === 5) {\n          if (valueCounter !== range) {\n            if (Math.round(valueCounter) !== 60) {\n              ctx.fillText(\n                Math.round(valueCounter),\n                textPoint[0],\n                textPoint[1],\n                TEXT_WIDTH\n              )\n            }\n          }\n          ctx.lineWidth = THICK_STROKE\n          innerPoint = [\n            CENTER + (RADIUS - MAX_LENGTH) * sinValue + x_offset,\n            CENTER + (RADIUS - MAX_LENGTH) * cosValue + y_offset\n          ]\n          numberCounter = 0\n        } else {\n          ctx.lineWidth = MEDIUM_STROKE\n          innerPoint = [\n            CENTER + (RADIUS - MED_LENGTH) * sinValue + x_offset,\n            CENTER + (RADIUS - MED_LENGTH) * cosValue + y_offset\n          ]\n        }\n\n        // Draw ticks\n        ctx.strokeStyle = TICK_COLOR\n        ctx.beginPath()\n        ctx.moveTo(innerPoint[0], innerPoint[1])\n        ctx.lineTo(outerPoint[0], outerPoint[1])\n        ctx.closePath()\n        ctx.stroke()\n\n        counter = 0\n        numberCounter++\n      }\n      counter++\n    }\n    ctx.restore()\n  }\n\n  const drawLargePointer = function (ctx) {\n    let grad\n    let radius\n\n    ctx.save()\n    ctx.beginPath()\n    ctx.moveTo(imageWidth * 0.509345, imageWidth * 0.457943)\n    ctx.lineTo(imageWidth * 0.5, imageWidth * 0.102803)\n    ctx.lineTo(imageWidth * 0.490654, imageWidth * 0.457943)\n    ctx.bezierCurveTo(\n      imageWidth * 0.490654,\n      imageWidth * 0.457943,\n      imageWidth * 0.490654,\n      imageWidth * 0.457943,\n      imageWidth * 0.490654,\n      imageWidth * 0.457943\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.471962,\n      imageWidth * 0.462616,\n      imageWidth * 0.457943,\n      imageWidth * 0.481308,\n      imageWidth * 0.457943,\n      imageWidth * 0.5\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.457943,\n      imageWidth * 0.518691,\n      imageWidth * 0.471962,\n      imageWidth * 0.537383,\n      imageWidth * 0.490654,\n      imageWidth * 0.542056\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.490654,\n      imageWidth * 0.542056,\n      imageWidth * 0.490654,\n      imageWidth * 0.542056,\n      imageWidth * 0.490654,\n      imageWidth * 0.542056\n    )\n    ctx.lineTo(imageWidth * 0.490654, imageWidth * 0.621495)\n    ctx.lineTo(imageWidth * 0.509345, imageWidth * 0.621495)\n    ctx.lineTo(imageWidth * 0.509345, imageWidth * 0.542056)\n    ctx.bezierCurveTo(\n      imageWidth * 0.509345,\n      imageWidth * 0.542056,\n      imageWidth * 0.509345,\n      imageWidth * 0.542056,\n      imageWidth * 0.509345,\n      imageWidth * 0.542056\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.528037,\n      imageWidth * 0.537383,\n      imageWidth * 0.542056,\n      imageWidth * 0.518691,\n      imageWidth * 0.542056,\n      imageWidth * 0.5\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.542056,\n      imageWidth * 0.481308,\n      imageWidth * 0.528037,\n      imageWidth * 0.462616,\n      imageWidth * 0.509345,\n      imageWidth * 0.457943\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.509345,\n      imageWidth * 0.457943,\n      imageWidth * 0.509345,\n      imageWidth * 0.457943,\n      imageWidth * 0.509345,\n      imageWidth * 0.457943\n    )\n    ctx.closePath()\n    grad = ctx.createLinearGradient(0, 0, 0, imageWidth * 0.621495)\n    grad.addColorStop(0, pointerColor.medium.getRgbaColor())\n    grad.addColorStop(0.388888, pointerColor.medium.getRgbaColor())\n    grad.addColorStop(0.5, pointerColor.light.getRgbaColor())\n    grad.addColorStop(0.611111, pointerColor.medium.getRgbaColor())\n    grad.addColorStop(1, pointerColor.medium.getRgbaColor())\n    ctx.fillStyle = grad\n    ctx.strokeStyle = pointerColor.dark.getRgbaColor()\n    ctx.fill()\n    ctx.stroke()\n    // Draw the rings\n    ctx.beginPath()\n    radius = (imageWidth * 0.06542) / 2\n    ctx.arc(centerX, centerY, radius, 0, TWO_PI)\n    grad = ctx.createLinearGradient(\n      centerX - radius,\n      centerX + radius,\n      0,\n      centerX + radius\n    )\n    grad.addColorStop(0, '#e6b35c')\n    grad.addColorStop(0.01, '#e6b35c')\n    grad.addColorStop(0.99, '#c48200')\n    grad.addColorStop(1, '#c48200')\n    ctx.fillStyle = grad\n    ctx.closePath()\n    ctx.fill()\n    ctx.beginPath()\n    radius = (imageWidth * 0.046728) / 2\n    ctx.arc(centerX, centerY, radius, 0, TWO_PI)\n    grad = ctx.createRadialGradient(\n      centerX,\n      centerX,\n      0,\n      centerX,\n      centerX,\n      radius\n    )\n    grad.addColorStop(0, '#c5c5c5')\n    grad.addColorStop(0.19, '#c5c5c5')\n    grad.addColorStop(0.22, '#000000')\n    grad.addColorStop(0.8, '#000000')\n    grad.addColorStop(0.99, '#707070')\n    grad.addColorStop(1, '#707070')\n    ctx.fillStyle = grad\n    ctx.closePath()\n    ctx.fill()\n    ctx.restore()\n  }\n\n  const drawSmallPointer = function (ctx) {\n    let radius\n\n    ctx.save()\n    ctx.beginPath()\n    ctx.moveTo(imageWidth * 0.476635, imageWidth * 0.313084)\n    ctx.bezierCurveTo(\n      imageWidth * 0.476635,\n      imageWidth * 0.322429,\n      imageWidth * 0.485981,\n      imageWidth * 0.331775,\n      imageWidth * 0.495327,\n      imageWidth * 0.336448\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.495327,\n      imageWidth * 0.336448,\n      imageWidth * 0.495327,\n      imageWidth * 0.350467,\n      imageWidth * 0.495327,\n      imageWidth * 0.350467\n    )\n    ctx.lineTo(imageWidth * 0.504672, imageWidth * 0.350467)\n    ctx.bezierCurveTo(\n      imageWidth * 0.504672,\n      imageWidth * 0.350467,\n      imageWidth * 0.504672,\n      imageWidth * 0.336448,\n      imageWidth * 0.504672,\n      imageWidth * 0.336448\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.514018,\n      imageWidth * 0.331775,\n      imageWidth * 0.523364,\n      imageWidth * 0.322429,\n      imageWidth * 0.523364,\n      imageWidth * 0.313084\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.523364,\n      imageWidth * 0.303738,\n      imageWidth * 0.514018,\n      imageWidth * 0.294392,\n      imageWidth * 0.504672,\n      imageWidth * 0.289719\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.504672,\n      imageWidth * 0.289719,\n      imageWidth * 0.5,\n      imageWidth * 0.200934,\n      imageWidth * 0.5,\n      imageWidth * 0.200934\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.5,\n      imageWidth * 0.200934,\n      imageWidth * 0.495327,\n      imageWidth * 0.289719,\n      imageWidth * 0.495327,\n      imageWidth * 0.289719\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.485981,\n      imageWidth * 0.294392,\n      imageWidth * 0.476635,\n      imageWidth * 0.303738,\n      imageWidth * 0.476635,\n      imageWidth * 0.313084\n    )\n    ctx.closePath()\n    const grad = ctx.createLinearGradient(0, 0, imageWidth, 0)\n    grad.addColorStop(0, pointerColor.medium.getRgbaColor())\n    grad.addColorStop(0.388888, pointerColor.medium.getRgbaColor())\n    grad.addColorStop(0.5, pointerColor.light.getRgbaColor())\n    grad.addColorStop(0.611111, pointerColor.medium.getRgbaColor())\n    grad.addColorStop(1, pointerColor.medium.getRgbaColor())\n    ctx.fillStyle = grad\n    ctx.strokeStyle = pointerColor.dark.getRgbaColor()\n    ctx.fill()\n    ctx.stroke()\n    // Draw the rings\n    ctx.beginPath()\n    radius = (imageWidth * 0.037383) / 2\n    ctx.arc(\n      centerX,\n      smallPointerY_Offset + smallPointerSize / 2,\n      radius,\n      0,\n      TWO_PI\n    )\n    ctx.fillStyle = '#C48200'\n    ctx.closePath()\n    ctx.fill()\n    ctx.beginPath()\n    radius = (imageWidth * 0.028037) / 2\n    ctx.arc(\n      centerX,\n      smallPointerY_Offset + smallPointerSize / 2,\n      radius,\n      0,\n      TWO_PI\n    )\n    ctx.fillStyle = '#999999'\n    ctx.closePath()\n    ctx.fill()\n    ctx.beginPath()\n    radius = (imageWidth * 0.018691) / 2\n    ctx.arc(\n      centerX,\n      smallPointerY_Offset + smallPointerSize / 2,\n      radius,\n      0,\n      TWO_PI\n    )\n    ctx.fillStyle = '#000000'\n    ctx.closePath()\n    ctx.fill()\n    ctx.restore()\n  }\n\n  const calculateAngles = function () {\n    currentMilliSeconds = new Date().getTime() - start\n    secondPointerAngle = (currentMilliSeconds * ANGLE_STEP) / 1000\n    minutePointerAngle = (secondPointerAngle % 10800) / 30\n\n    minutes = (currentMilliSeconds / 60000) % 30\n    seconds = (currentMilliSeconds / 1000) % 60\n    milliSeconds = currentMilliSeconds % 1000\n  }\n\n  const init = function (parameters) {\n    parameters = parameters || {}\n    const drawFrame2 =\n      undefined === parameters.frame ? false : parameters.frame\n    const drawBackground2 =\n      undefined === parameters.background ? false : parameters.background\n    const drawPointers =\n      undefined === parameters.pointers ? false : parameters.pointers\n    const drawForeground2 =\n      undefined === parameters.foreground ? false : parameters.foreground\n\n    initialized = true\n\n    if (drawFrame2 && frameVisible) {\n      drawFrame(\n        frameContext,\n        frameDesign,\n        centerX,\n        centerY,\n        imageWidth,\n        imageHeight\n      )\n    }\n\n    if (drawBackground2 && backgroundVisible) {\n      // Create background in background buffer (backgroundBuffer)\n      drawBackground(\n        backgroundContext,\n        backgroundColor,\n        centerX,\n        centerY,\n        imageWidth,\n        imageHeight\n      )\n\n      // Create custom layer in background buffer (backgroundBuffer)\n      drawRadialCustomImage(\n        backgroundContext,\n        customLayer,\n        centerX,\n        centerY,\n        imageWidth,\n        imageHeight\n      )\n\n      drawTickmarksImage(backgroundContext, imageWidth, 60, 0.075, 0.1, 0, 0)\n      drawTickmarksImage(\n        backgroundContext,\n        smallPointerSize,\n        30,\n        0.095,\n        0.13,\n        smallPointerX_Offset,\n        smallPointerY_Offset\n      )\n    }\n    if (drawPointers) {\n      drawLargePointer(largePointerContext)\n      drawSmallPointer(smallPointerContext)\n    }\n\n    if (drawForeground2 && foregroundVisible) {\n      drawForeground(\n        foregroundContext,\n        foregroundType,\n        imageWidth,\n        imageHeight,\n        false\n      )\n    }\n  }\n\n  const resetBuffers = function (buffers) {\n    buffers = buffers || {}\n    const resetFrame = undefined === buffers.frame ? false : buffers.frame\n    const resetBackground =\n      undefined === buffers.background ? false : buffers.background\n    const resetPointers =\n      undefined === buffers.pointers ? false : buffers.pointers\n    const resetForeground =\n      undefined === buffers.foreground ? false : buffers.foreground\n\n    if (resetFrame) {\n      frameBuffer.width = size\n      frameBuffer.height = size\n      frameContext = frameBuffer.getContext('2d')\n    }\n\n    if (resetBackground) {\n      backgroundBuffer.width = size\n      backgroundBuffer.height = size\n      backgroundContext = backgroundBuffer.getContext('2d')\n    }\n\n    if (resetPointers) {\n      smallPointerBuffer.width = size\n      smallPointerBuffer.height = size\n      smallPointerContext = smallPointerBuffer.getContext('2d')\n\n      largePointerBuffer.width = size\n      largePointerBuffer.height = size\n      largePointerContext = largePointerBuffer.getContext('2d')\n    }\n\n    if (resetForeground) {\n      foregroundBuffer.width = size\n      foregroundBuffer.height = size\n      foregroundContext = foregroundBuffer.getContext('2d')\n    }\n  }\n\n  const tickTock = function () {\n    if (!lap) {\n      calculateAngles()\n      self.repaint()\n    }\n    if (running) {\n      tickTimer = setTimeout(tickTock, 200)\n    }\n  }\n\n  //* *********************************** Public methods **************************************\n  // Returns true if the stopwatch is running\n  this.isRunning = function () {\n    return running\n  }\n\n  // Starts the stopwatch\n  this.start = function () {\n    if (!running) {\n      running = true\n      start = new Date().getTime() - currentMilliSeconds\n      tickTock()\n    }\n    return this\n  }\n\n  // Stops the stopwatch\n  this.stop = function () {\n    if (running) {\n      running = false\n      clearTimeout(tickTimer)\n      // calculateAngles();\n    }\n    if (lap) {\n      lap = false\n      calculateAngles()\n      this.repaint()\n    }\n    return this\n  }\n\n  // Resets the stopwatch\n  this.reset = function () {\n    if (running) {\n      running = false\n      lap = false\n      clearTimeout(tickTimer)\n    }\n    start = new Date().getTime()\n    calculateAngles()\n    this.repaint()\n    return this\n  }\n\n  // Laptimer, stop/restart stopwatch\n  this.lap = function () {\n    if (running && !lap) {\n      lap = true\n    } else if (lap) {\n      lap = false\n    }\n    return this\n  }\n\n  this.getMeasuredTime = function () {\n    return minutes + ':' + seconds + ':' + milliSeconds\n  }\n\n  this.setFrameDesign = function (newFrameDesign) {\n    resetBuffers({\n      frame: true\n    })\n    frameDesign = newFrameDesign\n    init({\n      frame: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setBackgroundColor = function (newBackgroundColor) {\n    resetBuffers({\n      background: true\n    })\n    backgroundColor = newBackgroundColor\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setForegroundType = function (newForegroundType) {\n    resetBuffers({\n      foreground: true\n    })\n    foregroundType = newForegroundType\n    init({\n      foreground: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setPointerColor = function (newPointerColor) {\n    resetBuffers({\n      pointers: true\n    })\n    pointerColor = newPointerColor\n    init({\n      pointers: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.repaint = function () {\n    if (!initialized) {\n      init({\n        frame: true,\n        background: true,\n        pointers: true,\n        foreground: true\n      })\n    }\n\n    mainCtx.clearRect(0, 0, imageWidth, imageHeight)\n\n    // Draw frame\n    if (frameVisible) {\n      mainCtx.drawImage(frameBuffer, 0, 0)\n    }\n\n    // Draw buffered image to visible canvas\n    if (backgroundVisible) {\n      mainCtx.drawImage(backgroundBuffer, 0, 0)\n    }\n\n    // have to draw to a rotated temporary image area so we can translate in\n    // absolute x, y values when drawing to main context\n    const shadowOffset = imageWidth * 0.006\n\n    const rotationAngle =\n      (minutePointerAngle + 2 * Math.sin(minutePointerAngle * RAD_FACTOR)) *\n      RAD_FACTOR\n    const secRotationAngle =\n      (secondPointerAngle + 2 * Math.sin(secondPointerAngle * RAD_FACTOR)) *\n      RAD_FACTOR\n\n    // Draw the minute pointer\n    // Define rotation center\n    mainCtx.save()\n    mainCtx.translate(centerX, smallPointerY_Offset + smallPointerSize / 2)\n    mainCtx.rotate(rotationAngle)\n    mainCtx.translate(-centerX, -(smallPointerY_Offset + smallPointerSize / 2))\n    // Set the pointer shadow params\n    mainCtx.shadowColor = 'rgba(0, 0, 0, 0.8)'\n    mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset / 2\n    mainCtx.shadowBlur = shadowOffset\n    // Draw the pointer\n    mainCtx.drawImage(smallPointerBuffer, 0, 0)\n    mainCtx.restore()\n\n    // Draw the second pointer\n    // Define rotation center\n    mainCtx.save()\n    mainCtx.translate(centerX, centerY)\n    mainCtx.rotate(secRotationAngle)\n    mainCtx.translate(-centerX, -centerY)\n    // Set the pointer shadow params\n    mainCtx.shadowColor = 'rgba(0, 0, 0, 0.8)'\n    mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset / 2\n    mainCtx.shadowBlur = shadowOffset\n    // Draw the pointer\n    mainCtx.drawImage(largePointerBuffer, 0, 0)\n    // Undo the translations & shadow settings\n    mainCtx.restore()\n\n    // Draw the foreground\n    if (foregroundVisible) {\n      mainCtx.drawImage(foregroundBuffer, 0, 0)\n    }\n  }\n\n  // Has a size been specified?\n  size =\n    size === 0 ? Math.min(mainCtx.canvas.width, mainCtx.canvas.height) : size\n\n  // Set the size - also clears it\n  mainCtx.canvas.width = size\n  mainCtx.canvas.height = size\n\n  const imageWidth = size\n  const imageHeight = size\n\n  const centerX = imageWidth / 2\n  const centerY = imageHeight / 2\n\n  const smallPointerSize = 0.285 * imageWidth\n  const smallPointerX_Offset = centerX - smallPointerSize / 2\n  const smallPointerY_Offset = 0.17 * imageWidth\n\n  // Buffer for the frame\n  const frameBuffer = createBuffer(size, size)\n  frameContext = frameBuffer.getContext('2d')\n\n  // Buffer for static background painting code\n  const backgroundBuffer = createBuffer(size, size)\n  backgroundContext = backgroundBuffer.getContext('2d')\n\n  // Buffer for small pointer image painting code\n  const smallPointerBuffer = createBuffer(size, size)\n  smallPointerContext = smallPointerBuffer.getContext('2d')\n\n  // Buffer for large pointer image painting code\n  const largePointerBuffer = createBuffer(size, size)\n  largePointerContext = largePointerBuffer.getContext('2d')\n\n  // Buffer for static foreground painting code\n  const foregroundBuffer = createBuffer(size, size)\n  foregroundContext = foregroundBuffer.getContext('2d')\n\n  // Visualize the component\n  start = new Date().getTime()\n  tickTock()\n\n  return this\n}\n\nexport default Stopwatch\n","import Tween from './tween.js'\nimport drawFrame from './drawFrame'\nimport drawBackground from './drawBackground'\nimport drawRadialCustomImage from './drawRadialCustomImage'\nimport drawForeground from './drawForeground'\nimport createLcdBackgroundImage from './createLcdBackgroundImage'\nimport drawTitleImage from './drawTitleImage'\nimport {\n  createBuffer,\n  requestAnimFrame,\n  getCanvasContext,\n  TWO_PI,\n  PI,\n  lcdFontName,\n  stdFontName\n} from './tools'\n\nimport {\n  BackgroundColor,\n  LcdColor,\n  KnobType,\n  KnobStyle,\n  FrameDesign,\n  ForegroundType\n} from './definitions'\n\nconst Altimeter = function (canvas, parameters) {\n  parameters = parameters || {}\n  // parameters\n  let size = undefined === parameters.size ? 0 : parameters.size\n  let frameDesign =\n    undefined === parameters.frameDesign\n      ? FrameDesign.METAL\n      : parameters.frameDesign\n  const frameVisible =\n    undefined === parameters.frameVisible ? true : parameters.frameVisible\n  let backgroundColor =\n    undefined === parameters.backgroundColor\n      ? BackgroundColor.DARK_GRAY\n      : parameters.backgroundColor\n  const backgroundVisible =\n    undefined === parameters.backgroundVisible\n      ? true\n      : parameters.backgroundVisible\n  let titleString =\n    undefined === parameters.titleString ? '' : parameters.titleString\n  let unitString =\n    undefined === parameters.unitString ? '' : parameters.unitString\n  const unitAltPos = undefined !== parameters.unitAltPos\n  const knobType =\n    undefined === parameters.knobType\n      ? KnobType.METAL_KNOB\n      : parameters.knobType\n  const knobStyle =\n    undefined === parameters.knobStyle ? KnobStyle.BLACK : parameters.knobStyle\n  let lcdColor =\n    undefined === parameters.lcdColor ? LcdColor.BLACK : parameters.lcdColor\n  const lcdVisible =\n    undefined === parameters.lcdVisible ? true : parameters.lcdVisible\n  const digitalFont =\n    undefined === parameters.digitalFont ? false : parameters.digitalFont\n  let foregroundType =\n    undefined === parameters.foregroundType\n      ? ForegroundType.TYPE1\n      : parameters.foregroundType\n  const foregroundVisible =\n    undefined === parameters.foregroundVisible\n      ? true\n      : parameters.foregroundVisible\n  const customLayer =\n    undefined === parameters.customLayer ? null : parameters.customLayer\n  //\n  const minValue = 0\n  const maxValue = 10\n  let value = minValue\n  let value100 = 0\n  let value1000 = 0\n  let value10000 = 0\n  let angleStep100ft\n  let angleStep1000ft\n  let angleStep10000ft\n  const tickLabelPeriod = 1 // Draw value at every 10th tickmark\n  let tween\n  let repainting = false\n  const mainCtx = getCanvasContext(canvas) // Get the canvas context\n  // Constants\n  const TICKMARK_OFFSET = PI\n  //\n  let initialized = false\n  // **************   Buffer creation  ********************\n  // Buffer for the frame\n  const frameBuffer = createBuffer(size, size)\n  let frameContext = frameBuffer.getContext('2d')\n  // Buffer for the background\n  const backgroundBuffer = createBuffer(size, size)\n  let backgroundContext = backgroundBuffer.getContext('2d')\n\n  let lcdBuffer\n\n  // Buffer for 10000ft pointer image painting code\n  const pointer10000Buffer = createBuffer(size, size)\n  let pointer10000Context = pointer10000Buffer.getContext('2d')\n\n  // Buffer for 1000ft pointer image painting code\n  const pointer1000Buffer = createBuffer(size, size)\n  let pointer1000Context = pointer1000Buffer.getContext('2d')\n\n  // Buffer for 100ft pointer image painting code\n  const pointer100Buffer = createBuffer(size, size)\n  let pointer100Context = pointer100Buffer.getContext('2d')\n\n  // Buffer for static foreground painting code\n  const foregroundBuffer = createBuffer(size, size)\n  let foregroundContext = foregroundBuffer.getContext('2d')\n  // End of variables\n\n  // Get the canvas context and clear it\n  mainCtx.save()\n  // Has a size been specified?\n  size =\n    size === 0 ? Math.min(mainCtx.canvas.width, mainCtx.canvas.height) : size\n\n  // Set the size\n  mainCtx.canvas.width = size\n  mainCtx.canvas.height = size\n\n  const imageWidth = size\n  const imageHeight = size\n\n  const centerX = imageWidth / 2\n  const centerY = imageHeight / 2\n\n  const unitStringPosY = unitAltPos ? imageHeight * 0.68 : false\n\n  const stdFont = Math.floor(imageWidth * 0.09) + 'px ' + stdFontName\n\n  // **************   Image creation  ********************\n  const drawLcdText = function (value) {\n    mainCtx.save()\n    mainCtx.textAlign = 'right'\n    mainCtx.textBaseline = 'middle'\n    mainCtx.strokeStyle = lcdColor.textColor\n    mainCtx.fillStyle = lcdColor.textColor\n\n    if (\n      lcdColor === LcdColor.STANDARD ||\n      lcdColor === LcdColor.STANDARD_GREEN\n    ) {\n      mainCtx.shadowColor = 'gray'\n      mainCtx.shadowOffsetX = imageWidth * 0.007\n      mainCtx.shadowOffsetY = imageWidth * 0.007\n      mainCtx.shadowBlur = imageWidth * 0.009\n    }\n    if (digitalFont) {\n      mainCtx.font = Math.floor(imageWidth * 0.075) + 'px ' + lcdFontName\n    } else {\n      mainCtx.font = Math.floor(imageWidth * 0.075) + 'px bold ' + stdFontName\n    }\n    mainCtx.fillText(\n      Math.round(value),\n      (imageWidth + imageWidth * 0.4) / 2 - 4,\n      imageWidth * 0.607,\n      imageWidth * 0.4\n    )\n    mainCtx.restore()\n  }\n\n  const drawTickmarksImage = function (\n    ctx,\n    freeAreaAngle,\n    offset,\n    minVal,\n    maxVal,\n    angleStep\n  ) {\n    const MEDIUM_STROKE = Math.max(imageWidth * 0.012, 2)\n    const THIN_STROKE = Math.max(imageWidth * 0.007, 1.5)\n    const TEXT_DISTANCE = imageWidth * 0.13\n    const MED_LENGTH = imageWidth * 0.05\n    const MAX_LENGTH = imageWidth * 0.07\n    const RADIUS = imageWidth * 0.4\n    let counter = 0\n    let sinValue = 0\n    let cosValue = 0\n    let alpha // angle for tickmarks\n    let valueCounter // value for tickmarks\n    const ALPHA_START = -offset - freeAreaAngle / 2\n\n    ctx.save()\n    ctx.textAlign = 'center'\n    ctx.textBaseline = 'middle'\n    ctx.font = stdFont\n    ctx.strokeStyle = backgroundColor.labelColor.getRgbaColor()\n    ctx.fillStyle = backgroundColor.labelColor.getRgbaColor()\n\n    for (\n      alpha = ALPHA_START, valueCounter = 0;\n      valueCounter <= 10;\n      alpha -= angleStep * 0.1, valueCounter += 0.1\n    ) {\n      sinValue = Math.sin(alpha)\n      cosValue = Math.cos(alpha)\n\n      // tickmark every 2 units\n      if (counter % 2 === 0) {\n        ctx.lineWidth = THIN_STROKE\n        // Draw ticks\n        ctx.beginPath()\n        ctx.moveTo(\n          centerX + (RADIUS - MED_LENGTH) * sinValue,\n          centerY + (RADIUS - MED_LENGTH) * cosValue\n        )\n        ctx.lineTo(centerX + RADIUS * sinValue, centerY + RADIUS * cosValue)\n        ctx.closePath()\n        ctx.stroke()\n      }\n\n      // Different tickmark every 10 units\n      if (counter === 10 || counter === 0) {\n        ctx.lineWidth = MEDIUM_STROKE\n\n        // if gauge is full circle, avoid painting maxValue over minValue\n        if (freeAreaAngle === 0) {\n          if (Math.round(valueCounter) !== maxValue) {\n            ctx.fillText(\n              Math.round(valueCounter).toString(),\n              centerX + (RADIUS - TEXT_DISTANCE) * sinValue,\n              centerY + (RADIUS - TEXT_DISTANCE) * cosValue\n            )\n          }\n        }\n        counter = 0\n\n        // Draw ticks\n        ctx.beginPath()\n        ctx.moveTo(\n          centerX + (RADIUS - MAX_LENGTH) * sinValue,\n          centerY + (RADIUS - MAX_LENGTH) * cosValue\n        )\n        ctx.lineTo(centerX + RADIUS * sinValue, centerY + RADIUS * cosValue)\n        ctx.closePath()\n        ctx.stroke()\n      }\n      counter++\n    }\n    ctx.restore()\n  }\n\n  const draw100ftPointer = function (ctx, shadow) {\n    let grad\n\n    if (shadow) {\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.5)'\n      ctx.strokeStyle = 'rgba(0, 0, 0, 0.5)'\n    } else {\n      grad = ctx.createLinearGradient(\n        0,\n        imageHeight * 0.168224,\n        0,\n        imageHeight * 0.626168\n      )\n      grad.addColorStop(0, '#ffffff')\n      grad.addColorStop(0.31, '#ffffff')\n      grad.addColorStop(0.3101, '#ffffff')\n      grad.addColorStop(0.32, '#202020')\n      grad.addColorStop(1, '#202020')\n      ctx.fillStyle = grad\n    }\n\n    ctx.save()\n    ctx.beginPath()\n    ctx.moveTo(imageWidth * 0.518691, imageHeight * 0.471962)\n    ctx.bezierCurveTo(\n      imageWidth * 0.514018,\n      imageHeight * 0.471962,\n      imageWidth * 0.509345,\n      imageHeight * 0.467289,\n      imageWidth * 0.509345,\n      imageHeight * 0.467289\n    )\n    ctx.lineTo(imageWidth * 0.509345, imageHeight * 0.200934)\n    ctx.lineTo(imageWidth * 0.5, imageHeight * 0.168224)\n    ctx.lineTo(imageWidth * 0.490654, imageHeight * 0.200934)\n    ctx.lineTo(imageWidth * 0.490654, imageHeight * 0.467289)\n    ctx.bezierCurveTo(\n      imageWidth * 0.490654,\n      imageHeight * 0.467289,\n      imageWidth * 0.481308,\n      imageHeight * 0.471962,\n      imageWidth * 0.481308,\n      imageHeight * 0.471962\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.471962,\n      imageHeight * 0.481308,\n      imageWidth * 0.467289,\n      imageHeight * 0.490654,\n      imageWidth * 0.467289,\n      imageHeight * 0.5\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.467289,\n      imageHeight * 0.514018,\n      imageWidth * 0.476635,\n      imageHeight * 0.528037,\n      imageWidth * 0.490654,\n      imageHeight * 0.53271\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.490654,\n      imageHeight * 0.53271,\n      imageWidth * 0.490654,\n      imageHeight * 0.579439,\n      imageWidth * 0.490654,\n      imageHeight * 0.588785\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.485981,\n      imageHeight * 0.593457,\n      imageWidth * 0.481308,\n      imageHeight * 0.59813,\n      imageWidth * 0.481308,\n      imageHeight * 0.607476\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.481308,\n      imageHeight * 0.616822,\n      imageWidth * 0.490654,\n      imageHeight * 0.626168,\n      imageWidth * 0.5,\n      imageHeight * 0.626168\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.509345,\n      imageHeight * 0.626168,\n      imageWidth * 0.518691,\n      imageHeight * 0.616822,\n      imageWidth * 0.518691,\n      imageHeight * 0.607476\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.518691,\n      imageHeight * 0.59813,\n      imageWidth * 0.514018,\n      imageHeight * 0.593457,\n      imageWidth * 0.504672,\n      imageHeight * 0.588785\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.504672,\n      imageHeight * 0.579439,\n      imageWidth * 0.504672,\n      imageHeight * 0.53271,\n      imageWidth * 0.509345,\n      imageHeight * 0.53271\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.523364,\n      imageHeight * 0.528037,\n      imageWidth * 0.53271,\n      imageHeight * 0.514018,\n      imageWidth * 0.53271,\n      imageHeight * 0.5\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.53271,\n      imageHeight * 0.490654,\n      imageWidth * 0.528037,\n      imageHeight * 0.481308,\n      imageWidth * 0.518691,\n      imageHeight * 0.471962\n    )\n    ctx.closePath()\n    ctx.fill()\n    ctx.restore()\n  }\n\n  const draw1000ftPointer = function (ctx) {\n    const grad = ctx.createLinearGradient(\n      0,\n      imageHeight * 0.401869,\n      0,\n      imageHeight * 0.616822\n    )\n    grad.addColorStop(0, '#ffffff')\n    grad.addColorStop(0.51, '#ffffff')\n    grad.addColorStop(0.52, '#ffffff')\n    grad.addColorStop(0.5201, '#202020')\n    grad.addColorStop(0.53, '#202020')\n    grad.addColorStop(1, '#202020')\n    ctx.fillStyle = grad\n    ctx.beginPath()\n    ctx.moveTo(imageWidth * 0.518691, imageHeight * 0.471962)\n    ctx.bezierCurveTo(\n      imageWidth * 0.514018,\n      imageHeight * 0.462616,\n      imageWidth * 0.528037,\n      imageHeight * 0.401869,\n      imageWidth * 0.528037,\n      imageHeight * 0.401869\n    )\n    ctx.lineTo(imageWidth * 0.5, imageHeight * 0.331775)\n    ctx.lineTo(imageWidth * 0.471962, imageHeight * 0.401869)\n    ctx.bezierCurveTo(\n      imageWidth * 0.471962,\n      imageHeight * 0.401869,\n      imageWidth * 0.485981,\n      imageHeight * 0.462616,\n      imageWidth * 0.481308,\n      imageHeight * 0.471962\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.471962,\n      imageHeight * 0.481308,\n      imageWidth * 0.467289,\n      imageHeight * 0.490654,\n      imageWidth * 0.467289,\n      imageHeight * 0.5\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.467289,\n      imageHeight * 0.514018,\n      imageWidth * 0.476635,\n      imageHeight * 0.528037,\n      imageWidth * 0.490654,\n      imageHeight * 0.53271\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.490654,\n      imageHeight * 0.53271,\n      imageWidth * 0.462616,\n      imageHeight * 0.574766,\n      imageWidth * 0.462616,\n      imageHeight * 0.593457\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.467289,\n      imageHeight * 0.616822,\n      imageWidth * 0.5,\n      imageHeight * 0.612149,\n      imageWidth * 0.5,\n      imageHeight * 0.612149\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.5,\n      imageHeight * 0.612149,\n      imageWidth * 0.53271,\n      imageHeight * 0.616822,\n      imageWidth * 0.537383,\n      imageHeight * 0.593457\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.537383,\n      imageHeight * 0.574766,\n      imageWidth * 0.509345,\n      imageHeight * 0.53271,\n      imageWidth * 0.509345,\n      imageHeight * 0.53271\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.523364,\n      imageHeight * 0.528037,\n      imageWidth * 0.53271,\n      imageHeight * 0.514018,\n      imageWidth * 0.53271,\n      imageHeight * 0.5\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.53271,\n      imageHeight * 0.490654,\n      imageWidth * 0.528037,\n      imageHeight * 0.481308,\n      imageWidth * 0.518691,\n      imageHeight * 0.471962\n    )\n    ctx.closePath()\n    ctx.fill()\n    ctx.restore()\n  }\n\n  const draw10000ftPointer = function (ctx) {\n    ctx.fillStyle = '#ffffff'\n    ctx.beginPath()\n    ctx.moveTo(imageWidth * 0.518691, imageHeight * 0.471962)\n    ctx.bezierCurveTo(\n      imageWidth * 0.514018,\n      imageHeight * 0.471962,\n      imageWidth * 0.514018,\n      imageHeight * 0.467289,\n      imageWidth * 0.514018,\n      imageHeight * 0.467289\n    )\n    ctx.lineTo(imageWidth * 0.514018, imageHeight * 0.317757)\n    ctx.lineTo(imageWidth * 0.504672, imageHeight * 0.303738)\n    ctx.lineTo(imageWidth * 0.504672, imageHeight * 0.182242)\n    ctx.lineTo(imageWidth * 0.53271, imageHeight * 0.116822)\n    ctx.lineTo(imageWidth * 0.462616, imageHeight * 0.116822)\n    ctx.lineTo(imageWidth * 0.495327, imageHeight * 0.182242)\n    ctx.lineTo(imageWidth * 0.495327, imageHeight * 0.299065)\n    ctx.lineTo(imageWidth * 0.485981, imageHeight * 0.317757)\n    ctx.lineTo(imageWidth * 0.485981, imageHeight * 0.467289)\n    ctx.bezierCurveTo(\n      imageWidth * 0.485981,\n      imageHeight * 0.467289,\n      imageWidth * 0.485981,\n      imageHeight * 0.471962,\n      imageWidth * 0.481308,\n      imageHeight * 0.471962\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.471962,\n      imageHeight * 0.481308,\n      imageWidth * 0.467289,\n      imageHeight * 0.490654,\n      imageWidth * 0.467289,\n      imageHeight * 0.5\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.467289,\n      imageHeight * 0.518691,\n      imageWidth * 0.481308,\n      imageHeight * 0.53271,\n      imageWidth * 0.5,\n      imageHeight * 0.53271\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.518691,\n      imageHeight * 0.53271,\n      imageWidth * 0.53271,\n      imageHeight * 0.518691,\n      imageWidth * 0.53271,\n      imageHeight * 0.5\n    )\n    ctx.bezierCurveTo(\n      imageWidth * 0.53271,\n      imageHeight * 0.490654,\n      imageWidth * 0.528037,\n      imageHeight * 0.481308,\n      imageWidth * 0.518691,\n      imageHeight * 0.471962\n    )\n    ctx.closePath()\n    ctx.fill()\n  }\n\n  function calcAngleStep () {\n    angleStep100ft = TWO_PI / (maxValue - minValue)\n    angleStep1000ft = angleStep100ft / 10\n    angleStep10000ft = angleStep1000ft / 10\n  }\n\n  function calcValues () {\n    value100 = (value % 1000) / 100\n    value1000 = (value % 10000) / 100\n    value10000 = (value % 100000) / 100\n  }\n\n  // **************   Initialization  ********************\n  // Draw all static painting code to background\n  const init = function (parameters) {\n    parameters = parameters || {}\n    // Parameters\n    const drawFrame2 =\n      undefined === parameters.frame ? false : parameters.frame\n    const drawBackground2 =\n      undefined === parameters.background ? false : parameters.background\n    const drawPointers =\n      undefined === parameters.pointers ? false : parameters.pointers\n    const drawForeground2 =\n      undefined === parameters.foreground ? false : parameters.foreground\n\n    initialized = true\n\n    calcAngleStep()\n\n    // Create frame in frame buffer (backgroundBuffer)\n    if (drawFrame2 && frameVisible) {\n      drawFrame(\n        frameContext,\n        frameDesign,\n        centerX,\n        centerY,\n        imageWidth,\n        imageHeight\n      )\n    }\n\n    if (drawBackground2 && backgroundVisible) {\n      // Create background in background buffer (backgroundBuffer)\n      drawBackground(\n        backgroundContext,\n        backgroundColor,\n        centerX,\n        centerY,\n        imageWidth,\n        imageHeight\n      )\n\n      // Create custom layer in background buffer (backgroundBuffer)\n      drawRadialCustomImage(\n        backgroundContext,\n        customLayer,\n        centerX,\n        centerY,\n        imageWidth,\n        imageHeight\n      )\n\n      // Create tickmarks in background buffer (backgroundBuffer)\n      drawTickmarksImage(\n        backgroundContext,\n        0,\n        TICKMARK_OFFSET,\n        0,\n        10,\n        angleStep100ft,\n        tickLabelPeriod,\n        0,\n        true,\n        true,\n        null\n      )\n\n      // Create title in background buffer (backgroundBuffer)\n      drawTitleImage(\n        backgroundContext,\n        imageWidth,\n        imageHeight,\n        titleString,\n        unitString,\n        backgroundColor,\n        true,\n        true,\n        unitStringPosY\n      )\n    }\n\n    // Create lcd background if selected in background buffer (backgroundBuffer)\n    if (drawBackground2 && lcdVisible) {\n      lcdBuffer = createLcdBackgroundImage(\n        imageWidth * 0.4,\n        imageHeight * 0.09,\n        lcdColor\n      )\n      backgroundContext.drawImage(\n        lcdBuffer,\n        (imageWidth - imageWidth * 0.4) / 2,\n        imageHeight * 0.56\n      )\n    }\n\n    if (drawPointers) {\n      // Create 100ft pointer in buffer\n      draw100ftPointer(pointer100Context, false)\n      // Create 1000ft pointer in buffer\n      draw1000ftPointer(pointer1000Context, false)\n      // Create 10000ft pointer in buffer\n      draw10000ftPointer(pointer10000Context, false)\n    }\n\n    if (drawForeground2 && foregroundVisible) {\n      drawForeground(\n        foregroundContext,\n        foregroundType,\n        imageWidth,\n        imageHeight,\n        true,\n        knobType,\n        knobStyle\n      )\n    }\n  }\n\n  const resetBuffers = function (buffers) {\n    buffers = buffers || {}\n    const resetFrame = undefined === buffers.frame ? false : buffers.frame\n    const resetBackground =\n      undefined === buffers.background ? false : buffers.background\n    const resetPointers =\n      undefined === buffers.pointers ? false : buffers.pointers\n    const resetForeground =\n      undefined === buffers.foreground ? false : buffers.foreground\n\n    if (resetFrame) {\n      frameBuffer.width = size\n      frameBuffer.height = size\n      frameContext = frameBuffer.getContext('2d')\n    }\n\n    if (resetBackground) {\n      backgroundBuffer.width = size\n      backgroundBuffer.height = size\n      backgroundContext = backgroundBuffer.getContext('2d')\n    }\n\n    if (resetPointers) {\n      pointer100Buffer.width = size\n      pointer100Buffer.height = size\n      pointer100Context = pointer100Buffer.getContext('2d')\n\n      pointer1000Buffer.width = size\n      pointer1000Buffer.height = size\n      pointer1000Context = pointer1000Buffer.getContext('2d')\n\n      pointer10000Buffer.width = size\n      pointer10000Buffer.height = size\n      pointer10000Context = pointer10000Buffer.getContext('2d')\n    }\n\n    if (resetForeground) {\n      foregroundBuffer.width = size\n      foregroundBuffer.height = size\n      foregroundContext = foregroundBuffer.getContext('2d')\n    }\n  }\n\n  //* *********************************** Public methods **************************************\n  this.setValue = function (newValue) {\n    value = parseFloat(newValue)\n    this.repaint()\n  }\n\n  this.getValue = function () {\n    return value\n  }\n\n  this.setValueAnimated = function (newValue, callback) {\n    newValue = parseFloat(newValue)\n    const targetValue = newValue < minValue ? minValue : newValue\n    const gauge = this\n    let time\n\n    if (value !== targetValue) {\n      if (undefined !== tween && tween.isPlaying) {\n        tween.stop()\n      }\n      // Allow 5 secs per 10,000ft\n      time = Math.max((Math.abs(value - targetValue) / 10000) * 5, 1)\n      tween = new Tween(\n        {},\n        '',\n        Tween.regularEaseInOut,\n        value,\n        targetValue,\n        time\n      )\n      // tween = new Tween(new Object(), '', Tween.strongEaseInOut, value, targetValue, 1);\n      tween.onMotionChanged = function (event) {\n        value = event.target._pos\n        if (!repainting) {\n          repainting = true\n          requestAnimFrame(gauge.repaint)\n        }\n      }\n\n      // do we have a callback function to process?\n      if (callback && typeof callback === 'function') {\n        tween.onMotionFinished = callback\n      }\n\n      tween.start()\n    }\n    return this\n  }\n\n  this.setFrameDesign = function (newFrameDesign) {\n    resetBuffers({\n      frame: true\n    })\n    frameDesign = newFrameDesign\n    init({\n      frame: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setBackgroundColor = function (newBackgroundColor) {\n    resetBuffers({\n      background: true,\n      pointer: true // type2 & 13 depend on background\n    })\n    backgroundColor = newBackgroundColor\n    init({\n      background: true, // type2 & 13 depend on background\n      pointer: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setForegroundType = function (newForegroundType) {\n    resetBuffers({\n      foreground: true\n    })\n    foregroundType = newForegroundType\n    init({\n      foreground: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setLcdColor = function (newLcdColor) {\n    lcdColor = newLcdColor\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setTitleString = function (title) {\n    titleString = title\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.setUnitString = function (unit) {\n    unitString = unit\n    resetBuffers({\n      background: true\n    })\n    init({\n      background: true\n    })\n    this.repaint()\n    return this\n  }\n\n  this.repaint = function () {\n    if (!initialized) {\n      init({\n        frame: true,\n        background: true,\n        led: true,\n        pointers: true,\n        foreground: true\n      })\n    }\n\n    // mainCtx.save();\n    mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height)\n\n    // Draw frame\n    if (frameVisible) {\n      mainCtx.drawImage(frameBuffer, 0, 0)\n    }\n\n    // Draw buffered image to visible canvas\n    mainCtx.drawImage(backgroundBuffer, 0, 0)\n\n    // Draw lcd display\n    if (lcdVisible) {\n      drawLcdText(value)\n    }\n\n    // re-calculate the spearate pointer values\n    calcValues()\n\n    let shadowOffset = imageWidth * 0.006 * 0.5\n\n    mainCtx.save()\n    // Draw 10000ft pointer\n    // Define rotation center\n    mainCtx.translate(centerX, centerY)\n    mainCtx.rotate((value10000 - minValue) * angleStep10000ft)\n    mainCtx.translate(-centerX, -centerY)\n    // Set the pointer shadow params\n    mainCtx.shadowColor = 'rgba(0, 0, 0, 0.8)'\n    mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset\n    mainCtx.shadowBlur = shadowOffset * 2\n    // Draw the pointer\n    mainCtx.drawImage(pointer10000Buffer, 0, 0)\n\n    shadowOffset = imageWidth * 0.006 * 0.75\n    mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset\n\n    // Draw 1000ft pointer\n    mainCtx.translate(centerX, centerY)\n    mainCtx.rotate(\n      (value1000 - minValue) * angleStep1000ft -\n        (value10000 - minValue) * angleStep10000ft\n    )\n    mainCtx.translate(-centerX, -centerY)\n    mainCtx.drawImage(pointer1000Buffer, 0, 0)\n\n    shadowOffset = imageWidth * 0.006\n    mainCtx.shadowOffsetX = mainCtx.shadowOffsetY = shadowOffset\n\n    // Draw 100ft pointer\n    mainCtx.translate(centerX, centerY)\n    mainCtx.rotate(\n      (value100 - minValue) * angleStep100ft -\n        (value1000 - minValue) * angleStep1000ft\n    )\n    mainCtx.translate(-centerX, -centerY)\n    mainCtx.drawImage(pointer100Buffer, 0, 0)\n    mainCtx.restore()\n\n    // Draw the foregound\n    if (foregroundVisible) {\n      mainCtx.drawImage(foregroundBuffer, 0, 0)\n    }\n\n    repainting = false\n  }\n\n  // Visualize the component\n  this.repaint()\n\n  return this\n}\n\nexport default Altimeter\n","import { getCanvasContext, TWO_PI, doc } from './tools'\n\nconst Trafficlight = function (canvas, parameters) {\n  parameters = parameters || {}\n  let width = undefined === parameters.width ? 0 : parameters.width\n  let height = undefined === parameters.height ? 0 : parameters.height\n  //\n  const mainCtx = getCanvasContext(canvas)\n  let redOn = false\n  let yellowOn = false\n  let greenOn = false\n  let initialized = false\n  const housingBuffer = doc.createElement('canvas')\n  const housingCtx = housingBuffer.getContext('2d')\n  const lightGreenBuffer = doc.createElement('canvas')\n  const lightGreenCtx = lightGreenBuffer.getContext('2d')\n  const greenOnBuffer = doc.createElement('canvas')\n  const greenOnCtx = greenOnBuffer.getContext('2d')\n  const greenOffBuffer = doc.createElement('canvas')\n  const greenOffCtx = greenOffBuffer.getContext('2d')\n  const lightYellowBuffer = doc.createElement('canvas')\n  const lightYellowCtx = lightYellowBuffer.getContext('2d')\n  const yellowOnBuffer = doc.createElement('canvas')\n  const yellowOnCtx = yellowOnBuffer.getContext('2d')\n  const yellowOffBuffer = doc.createElement('canvas')\n  const yellowOffCtx = yellowOffBuffer.getContext('2d')\n  const lightRedBuffer = doc.createElement('canvas')\n  const lightRedCtx = lightRedBuffer.getContext('2d')\n  const redOnBuffer = doc.createElement('canvas')\n  const redOnCtx = redOnBuffer.getContext('2d')\n  const redOffBuffer = doc.createElement('canvas')\n  const redOffCtx = redOffBuffer.getContext('2d')\n  // End of variables\n\n  // Has a size been specified?\n  if (width === 0) {\n    width = mainCtx.canvas.width\n  }\n  if (height === 0) {\n    height = mainCtx.canvas.height\n  }\n\n  // Set the size - also clears the canvas\n  mainCtx.canvas.width = width\n  mainCtx.canvas.height = height\n\n  const prefHeight = width < height * 0.352517 ? width * 2.836734 : height\n  const imageWidth = prefHeight * 0.352517\n  const imageHeight = prefHeight\n\n  housingBuffer.width = imageWidth\n  housingBuffer.height = imageHeight\n\n  lightGreenBuffer.width = imageWidth\n  lightGreenBuffer.height = imageHeight\n\n  greenOnBuffer.width = imageWidth\n  greenOnBuffer.height = imageHeight\n\n  greenOffBuffer.width = imageWidth\n  greenOffBuffer.height = imageHeight\n\n  lightYellowBuffer.width = imageWidth\n  lightYellowBuffer.height = imageHeight\n\n  yellowOnBuffer.width = imageWidth\n  yellowOnBuffer.height = imageHeight\n\n  yellowOffBuffer.width = imageWidth\n  yellowOffBuffer.height = imageHeight\n\n  lightRedBuffer.width = imageWidth\n  lightRedBuffer.height = imageHeight\n\n  redOnBuffer.width = imageWidth\n  redOnBuffer.height = imageHeight\n\n  redOffBuffer.width = imageWidth\n  redOffBuffer.height = imageHeight\n\n  const drawHousing = function (ctx) {\n    ctx.save()\n\n    ctx.save()\n    ctx.beginPath()\n    ctx.moveTo(0.107142 * imageWidth, 0)\n    ctx.lineTo(imageWidth - 0.107142 * imageWidth, 0)\n    ctx.quadraticCurveTo(imageWidth, 0, imageWidth, 0.107142 * imageWidth)\n    ctx.lineTo(imageWidth, imageHeight - 0.107142 * imageWidth)\n    ctx.quadraticCurveTo(\n      imageWidth,\n      imageHeight,\n      imageWidth - 0.107142 * imageWidth,\n      imageHeight\n    )\n    ctx.lineTo(0.107142 * imageWidth, imageHeight)\n    ctx.quadraticCurveTo(\n      0,\n      imageHeight,\n      0,\n      imageHeight - 0.107142 * imageWidth\n    )\n    ctx.lineTo(0, 0.107142 * imageWidth)\n    ctx.quadraticCurveTo(0, 0, 0.107142 * imageWidth, imageHeight)\n    ctx.closePath()\n    const housingFill = ctx.createLinearGradient(\n      0.040816 * imageWidth,\n      0.007194 * imageHeight,\n      0.952101 * imageWidth,\n      0.995882 * imageHeight\n    )\n    housingFill.addColorStop(0, 'rgb(152, 152, 154)')\n    housingFill.addColorStop(0.01, 'rgb(152, 152, 154)')\n    housingFill.addColorStop(0.09, '#333333')\n    housingFill.addColorStop(0.24, 'rgb(152, 152, 154)')\n    housingFill.addColorStop(0.55, 'rgb(31, 31, 31)')\n    housingFill.addColorStop(0.78, '#363636')\n    housingFill.addColorStop(0.98, '#000000')\n    housingFill.addColorStop(1, '#000000')\n    ctx.fillStyle = housingFill\n    ctx.fill()\n    ctx.restore()\n\n    ctx.save()\n    ctx.beginPath()\n    ctx.moveTo(\n      0.030612 * imageWidth + 0.084183 * imageWidth,\n      0.010791 * imageHeight\n    )\n    ctx.lineTo(\n      0.030612 * imageWidth + 0.938775 * imageWidth - 0.084183 * imageWidth,\n      0.010791 * imageHeight\n    )\n    ctx.quadraticCurveTo(\n      0.030612 * imageWidth + 0.938775 * imageWidth,\n      0.010791 * imageHeight,\n      0.030612 * imageWidth + 0.938775 * imageWidth,\n      0.010791 * imageHeight + 0.084183 * imageWidth\n    )\n    ctx.lineTo(\n      0.030612 * imageWidth + 0.938775 * imageWidth,\n      0.010791 * imageHeight + 0.978417 * imageHeight - 0.084183 * imageWidth\n    )\n    ctx.quadraticCurveTo(\n      0.030612 * imageWidth + 0.938775 * imageWidth,\n      0.010791 * imageHeight + 0.978417 * imageHeight,\n      0.030612 * imageWidth + 0.938775 * imageWidth - 0.084183 * imageWidth,\n      0.010791 * imageHeight + 0.978417 * imageHeight\n    )\n    ctx.lineTo(\n      0.030612 * imageWidth + 0.084183 * imageWidth,\n      0.010791 * imageHeight + 0.978417 * imageHeight\n    )\n    ctx.quadraticCurveTo(\n      0.030612 * imageWidth,\n      0.010791 * imageHeight + 0.978417 * imageHeight,\n      0.030612 * imageWidth,\n      0.010791 * imageHeight + 0.978417 * imageHeight - 0.084183 * imageWidth\n    )\n    ctx.lineTo(\n      0.030612 * imageWidth,\n      0.010791 * imageHeight + 0.084183 * imageWidth\n    )\n    ctx.quadraticCurveTo(\n      0.030612 * imageWidth,\n      0.010791 * imageHeight,\n      0.030612 * imageWidth + 0.084183 * imageWidth,\n      0.010791 * imageHeight\n    )\n    ctx.closePath()\n    const housingFrontFill = ctx.createLinearGradient(\n      -0.132653 * imageWidth,\n      -0.053956 * imageHeight,\n      2.061408 * imageWidth,\n      0.667293 * imageHeight\n    )\n    housingFrontFill.addColorStop(0, '#000000')\n    housingFrontFill.addColorStop(0.01, '#000000')\n    housingFrontFill.addColorStop(0.16, '#373735')\n    housingFrontFill.addColorStop(0.31, '#000000')\n    housingFrontFill.addColorStop(0.44, '#303030')\n    housingFrontFill.addColorStop(0.65, '#000000')\n    housingFrontFill.addColorStop(0.87, '#363636')\n    housingFrontFill.addColorStop(0.98, '#000000')\n    housingFrontFill.addColorStop(1, '#000000')\n    ctx.fillStyle = housingFrontFill\n    ctx.fill()\n    ctx.restore()\n\n    ctx.restore()\n  }\n\n  const drawLightGreen = function (ctx) {\n    ctx.save()\n\n    ctx.save()\n    ctx.scale(1, 1)\n    ctx.beginPath()\n    ctx.arc(\n      0.5 * imageWidth,\n      0.805755 * imageHeight,\n      0.397959 * imageWidth,\n      0,\n      TWO_PI,\n      false\n    )\n    const lightGreenFrameFill = ctx.createLinearGradient(\n      0,\n      0.665467 * imageHeight,\n      0,\n      0.946043 * imageHeight\n    )\n    lightGreenFrameFill.addColorStop(0, '#ffffff')\n    lightGreenFrameFill.addColorStop(0.05, 'rgb(204, 204, 204)')\n    lightGreenFrameFill.addColorStop(0.1, 'rgb(153, 153, 153)')\n    lightGreenFrameFill.addColorStop(0.17, '#666666')\n    lightGreenFrameFill.addColorStop(0.27, '#333333')\n    lightGreenFrameFill.addColorStop(1, '#010101')\n    ctx.fillStyle = lightGreenFrameFill\n    ctx.fill()\n    ctx.restore()\n\n    ctx.save()\n    ctx.scale(1.083333, 1)\n    ctx.beginPath()\n    ctx.arc(\n      0.461538 * imageWidth,\n      0.816546 * imageHeight,\n      0.367346 * imageWidth,\n      0,\n      TWO_PI,\n      false\n    )\n    const lightGreenInnerFill = ctx.createLinearGradient(\n      0,\n      0.68705 * imageHeight,\n      0,\n      0.946043 * imageHeight\n    )\n    lightGreenInnerFill.addColorStop(0, '#000000')\n    lightGreenInnerFill.addColorStop(0.35, '#040404')\n    lightGreenInnerFill.addColorStop(0.66, '#000000')\n    lightGreenInnerFill.addColorStop(1, '#010101')\n    ctx.fillStyle = lightGreenInnerFill\n    ctx.fill()\n    ctx.restore()\n\n    ctx.save()\n    ctx.scale(1, 1)\n    ctx.beginPath()\n    ctx.arc(\n      0.5 * imageWidth,\n      0.809352 * imageHeight,\n      0.357142 * imageWidth,\n      0,\n      TWO_PI,\n      false\n    )\n    const lightGreenEffectFill = ctx.createRadialGradient(\n      0.5 * imageWidth,\n      0.809352 * imageHeight,\n      0,\n      0.5 * imageWidth,\n      0.809352 * imageHeight,\n      0.362244 * imageWidth\n    )\n    lightGreenEffectFill.addColorStop(0, '#000000')\n    lightGreenEffectFill.addColorStop(0.88, '#000000')\n    lightGreenEffectFill.addColorStop(0.95, 'rgb(94, 94, 94)')\n    lightGreenEffectFill.addColorStop(1, '#010101')\n    ctx.fillStyle = lightGreenEffectFill\n    ctx.fill()\n    ctx.restore()\n\n    ctx.save()\n    ctx.scale(1, 1)\n    ctx.beginPath()\n    ctx.arc(\n      0.5 * imageWidth,\n      0.809352 * imageHeight,\n      0.357142 * imageWidth,\n      0,\n      TWO_PI,\n      false\n    )\n    const lightGreenInnerShadowFill = ctx.createLinearGradient(\n      0,\n      0.68705 * imageHeight,\n      0,\n      0.917266 * imageHeight\n    )\n    lightGreenInnerShadowFill.addColorStop(0, '#000000')\n    lightGreenInnerShadowFill.addColorStop(1, 'rgba(1, 1, 1, 0)')\n    ctx.fillStyle = lightGreenInnerShadowFill\n    ctx.fill()\n    ctx.restore()\n    ctx.restore()\n  }\n\n  const drawGreenOn = function (ctx) {\n    ctx.save()\n\n    ctx.save()\n    ctx.scale(1, 1)\n    ctx.beginPath()\n    ctx.arc(\n      0.5 * imageWidth,\n      0.809352 * imageHeight,\n      0.32653 * imageWidth,\n      0,\n      TWO_PI,\n      false\n    )\n    const greenOnFill = ctx.createRadialGradient(\n      0.5 * imageWidth,\n      0.809352 * imageHeight,\n      0,\n      0.5 * imageWidth,\n      0.809352 * imageHeight,\n      0.32653 * imageWidth\n    )\n    greenOnFill.addColorStop(0, 'rgb(85, 185, 123)')\n    greenOnFill.addColorStop(1, 'rgb(0, 31, 0)')\n    ctx.fillStyle = greenOnFill\n    ctx.fill()\n    ctx.restore()\n\n    ctx.save()\n    ctx.beginPath()\n    ctx.moveTo(0, 0.812949 * imageHeight)\n    ctx.bezierCurveTo(\n      0,\n      0.910071 * imageHeight,\n      0.224489 * imageWidth,\n      0.989208 * imageHeight,\n      0.5 * imageWidth,\n      0.989208 * imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.77551 * imageWidth,\n      0.989208 * imageHeight,\n      imageWidth,\n      0.910071 * imageHeight,\n      imageWidth,\n      0.809352 * imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.908163 * imageWidth,\n      0.751798 * imageHeight,\n      0.704081 * imageWidth,\n      0.68705 * imageHeight,\n      0.5 * imageWidth,\n      0.68705 * imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.285714 * imageWidth,\n      0.68705 * imageHeight,\n      0.081632 * imageWidth,\n      0.751798 * imageHeight,\n      0,\n      0.812949 * imageHeight\n    )\n    ctx.closePath()\n    const greenOnGlowFill = ctx.createRadialGradient(\n      0.5 * imageWidth,\n      0.809352 * imageHeight,\n      0,\n      0.5 * imageWidth,\n      0.809352 * imageHeight,\n      0.515306 * imageWidth\n    )\n    greenOnGlowFill.addColorStop(0, 'rgb(65, 187, 126)')\n    greenOnGlowFill.addColorStop(1, 'rgba(4, 37, 8, 0)')\n    ctx.fillStyle = greenOnGlowFill\n    ctx.fill()\n    ctx.restore()\n    ctx.restore()\n  }\n\n  const drawGreenOff = function (ctx) {\n    ctx.save()\n\n    ctx.save()\n    ctx.scale(1, 1)\n    ctx.beginPath()\n    ctx.arc(\n      0.5 * imageWidth,\n      0.809352 * imageHeight,\n      0.32653 * imageWidth,\n      0,\n      TWO_PI,\n      false\n    )\n    const greenOffFill = ctx.createRadialGradient(\n      0.5 * imageWidth,\n      0.809352 * imageHeight,\n      0,\n      0.5 * imageWidth,\n      0.809352 * imageHeight,\n      0.32653 * imageWidth\n    )\n    greenOffFill.addColorStop(0, 'rgba(0, 255, 0, 0.25)')\n    greenOffFill.addColorStop(1, 'rgba(0, 255, 0, 0.05)')\n    ctx.fillStyle = greenOffFill\n    ctx.fill()\n    ctx.restore()\n\n    ctx.save()\n    ctx.scale(1, 1)\n    ctx.beginPath()\n    ctx.arc(\n      0.5 * imageWidth,\n      0.809352 * imageHeight,\n      0.32653 * imageWidth,\n      0,\n      TWO_PI,\n      false\n    )\n    const greenOffInnerShadowFill = ctx.createRadialGradient(\n      0.5 * imageWidth,\n      0.809352 * imageHeight,\n      0,\n      0.5 * imageWidth,\n      0.809352 * imageHeight,\n      0.32653 * imageWidth\n    )\n    greenOffInnerShadowFill.addColorStop(0, 'rgba(1, 1, 1, 0)')\n    greenOffInnerShadowFill.addColorStop(0.55, 'rgba(0, 0, 0, 0)')\n    greenOffInnerShadowFill.addColorStop(0.5501, 'rgba(0, 0, 0, 0)')\n    greenOffInnerShadowFill.addColorStop(0.78, 'rgba(0, 0, 0, 0.12)')\n    greenOffInnerShadowFill.addColorStop(0.79, 'rgba(0, 0, 0, 0.12)')\n    greenOffInnerShadowFill.addColorStop(1, 'rgba(0, 0, 0, 0.5)')\n    ctx.fillStyle = greenOffInnerShadowFill\n    ctx.fill()\n    ctx.restore()\n\n    ctx.fillStyle = ctx.createPattern(hatchBuffer, 'repeat')\n    ctx.fill()\n\n    ctx.restore()\n  }\n\n  const drawLightYellow = function (ctx) {\n    ctx.save()\n\n    ctx.save()\n    ctx.scale(1, 1)\n    ctx.beginPath()\n    ctx.arc(\n      0.5 * imageWidth,\n      0.496402 * imageHeight,\n      0.397959 * imageWidth,\n      0,\n      TWO_PI,\n      false\n    )\n    const lightYellowFrameFill = ctx.createLinearGradient(\n      0,\n      0.356115 * imageHeight,\n      0,\n      0.63669 * imageHeight\n    )\n    lightYellowFrameFill.addColorStop(0, '#ffffff')\n    lightYellowFrameFill.addColorStop(0.05, 'rgb(204, 204, 204)')\n    lightYellowFrameFill.addColorStop(0.1, 'rgb(153, 153, 153)')\n    lightYellowFrameFill.addColorStop(0.17, '#666666')\n    lightYellowFrameFill.addColorStop(0.27, '#333333')\n    lightYellowFrameFill.addColorStop(1, '#010101')\n    ctx.fillStyle = lightYellowFrameFill\n    ctx.fill()\n    ctx.restore()\n\n    ctx.save()\n    ctx.scale(1.083333, 1)\n    ctx.beginPath()\n    ctx.arc(\n      0.461538 * imageWidth,\n      0.507194 * imageHeight,\n      0.367346 * imageWidth,\n      0,\n      TWO_PI,\n      false\n    )\n    const lightYellowInnerFill = ctx.createLinearGradient(\n      0,\n      0.377697 * imageHeight,\n      0,\n      0.63669 * imageHeight\n    )\n    lightYellowInnerFill.addColorStop(0, '#000000')\n    lightYellowInnerFill.addColorStop(0.35, '#040404')\n    lightYellowInnerFill.addColorStop(0.66, '#000000')\n    lightYellowInnerFill.addColorStop(1, '#010101')\n    ctx.fillStyle = lightYellowInnerFill\n    ctx.fill()\n    ctx.restore()\n\n    ctx.save()\n    ctx.scale(1, 1)\n    ctx.beginPath()\n    ctx.arc(\n      0.5 * imageWidth,\n      0.5 * imageHeight,\n      0.357142 * imageWidth,\n      0,\n      TWO_PI,\n      false\n    )\n    const lightYellowEffectFill = ctx.createRadialGradient(\n      0.5 * imageWidth,\n      0.5 * imageHeight,\n      0,\n      0.5 * imageWidth,\n      0.5 * imageHeight,\n      0.362244 * imageWidth\n    )\n    lightYellowEffectFill.addColorStop(0, '#000000')\n    lightYellowEffectFill.addColorStop(0.88, '#000000')\n    lightYellowEffectFill.addColorStop(0.95, '#5e5e5e')\n    lightYellowEffectFill.addColorStop(1, '#010101')\n    ctx.fillStyle = lightYellowEffectFill\n    ctx.fill()\n    ctx.restore()\n\n    // lIGHT_YELLOW_4_E_INNER_SHADOW_3_4\n    ctx.save()\n    ctx.scale(1, 1)\n    ctx.beginPath()\n    ctx.arc(\n      0.5 * imageWidth,\n      0.5 * imageHeight,\n      0.357142 * imageWidth,\n      0,\n      TWO_PI,\n      false\n    )\n    const lightYellowInnerShadowFill = ctx.createLinearGradient(\n      0,\n      0.377697 * imageHeight,\n      0,\n      0.607913 * imageHeight\n    )\n    lightYellowInnerShadowFill.addColorStop(0, '#000000')\n    lightYellowInnerShadowFill.addColorStop(1, 'rgba(1, 1, 1, 0)')\n    ctx.fillStyle = lightYellowInnerShadowFill\n    ctx.fill()\n    ctx.restore()\n    ctx.restore()\n  }\n\n  const drawYellowOn = function (ctx) {\n    ctx.save()\n\n    ctx.save()\n    ctx.scale(1, 1)\n    ctx.beginPath()\n    ctx.arc(\n      0.5 * imageWidth,\n      0.5 * imageHeight,\n      0.32653 * imageWidth,\n      0,\n      TWO_PI,\n      false\n    )\n    const yellowOnFill = ctx.createRadialGradient(\n      0.5 * imageWidth,\n      0.5 * imageHeight,\n      0,\n      0.5 * imageWidth,\n      0.5 * imageHeight,\n      0.32653 * imageWidth\n    )\n    yellowOnFill.addColorStop(0, '#fed434')\n    yellowOnFill.addColorStop(1, '#82330c')\n    ctx.fillStyle = yellowOnFill\n    ctx.fill()\n    ctx.restore()\n\n    ctx.save()\n    ctx.beginPath()\n    ctx.moveTo(0, 0.503597 * imageHeight)\n    ctx.bezierCurveTo(\n      0,\n      0.600719 * imageHeight,\n      0.224489 * imageWidth,\n      0.679856 * imageHeight,\n      0.5 * imageWidth,\n      0.679856 * imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.77551 * imageWidth,\n      0.679856 * imageHeight,\n      imageWidth,\n      0.600719 * imageHeight,\n      imageWidth,\n      0.5 * imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.908163 * imageWidth,\n      0.442446 * imageHeight,\n      0.704081 * imageWidth,\n      0.377697 * imageHeight,\n      0.5 * imageWidth,\n      0.377697 * imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.285714 * imageWidth,\n      0.377697 * imageHeight,\n      0.081632 * imageWidth,\n      0.442446 * imageHeight,\n      0,\n      0.503597 * imageHeight\n    )\n    ctx.closePath()\n    const yellowOnGlowFill = ctx.createRadialGradient(\n      0.5 * imageWidth,\n      0.5 * imageHeight,\n      0,\n      0.5 * imageWidth,\n      0.5 * imageHeight,\n      0.515306 * imageWidth\n    )\n    yellowOnGlowFill.addColorStop(0, '#fed434')\n    yellowOnGlowFill.addColorStop(1, 'rgba(130, 51, 12, 0)')\n    ctx.fillStyle = yellowOnGlowFill\n    ctx.fill()\n    ctx.restore()\n    ctx.restore()\n  }\n\n  const drawYellowOff = function (ctx) {\n    ctx.save()\n\n    ctx.save()\n    ctx.scale(1, 1)\n    ctx.beginPath()\n    ctx.arc(\n      0.5 * imageWidth,\n      0.5 * imageHeight,\n      0.32653 * imageWidth,\n      0,\n      TWO_PI,\n      false\n    )\n    const yellowOffFill = ctx.createRadialGradient(\n      0.5 * imageWidth,\n      0.5 * imageHeight,\n      0,\n      0.5 * imageWidth,\n      0.5 * imageHeight,\n      0.32653 * imageWidth\n    )\n    yellowOffFill.addColorStop(0, 'rgba(255, 255, 0, 0.25)')\n    yellowOffFill.addColorStop(1, 'rgba(255, 255, 0, 0.05)')\n    ctx.fillStyle = yellowOffFill\n    ctx.fill()\n    ctx.restore()\n\n    ctx.save()\n    ctx.scale(1, 1)\n    ctx.beginPath()\n    ctx.arc(\n      0.5 * imageWidth,\n      0.5 * imageHeight,\n      0.32653 * imageWidth,\n      0,\n      TWO_PI,\n      false\n    )\n    const yellowOffInnerShadowFill = ctx.createRadialGradient(\n      0.5 * imageWidth,\n      0.5 * imageHeight,\n      0,\n      0.5 * imageWidth,\n      0.5 * imageHeight,\n      0.32653 * imageWidth\n    )\n    yellowOffInnerShadowFill.addColorStop(0, 'rgba(1, 1, 1, 0)')\n    yellowOffInnerShadowFill.addColorStop(0.55, 'rgba(0, 0, 0, 0)')\n    yellowOffInnerShadowFill.addColorStop(0.5501, 'rgba(0, 0, 0, 0)')\n    yellowOffInnerShadowFill.addColorStop(0.78, 'rgba(0, 0, 0, 0.12)')\n    yellowOffInnerShadowFill.addColorStop(0.79, 'rgba(0, 0, 0, 0.13)')\n    yellowOffInnerShadowFill.addColorStop(1, 'rgba(0, 0, 0, 0.5)')\n    ctx.fillStyle = yellowOffInnerShadowFill\n    ctx.fill()\n    ctx.restore()\n\n    ctx.fillStyle = ctx.createPattern(hatchBuffer, 'repeat')\n    ctx.fill()\n\n    ctx.restore()\n  }\n\n  const drawLightRed = function (ctx) {\n    ctx.save()\n\n    // lIGHT_RED_7_E_FRAME_0_1\n    ctx.save()\n    ctx.scale(1, 1)\n    ctx.beginPath()\n    ctx.arc(\n      0.5 * imageWidth,\n      0.18705 * imageHeight,\n      0.397959 * imageWidth,\n      0,\n      TWO_PI,\n      false\n    )\n    const lightRedFrameFill = ctx.createLinearGradient(\n      0.5 * imageWidth,\n      0.046762 * imageHeight,\n      0.5 * imageWidth,\n      0.327338 * imageHeight\n    )\n    lightRedFrameFill.addColorStop(0, '#ffffff')\n    lightRedFrameFill.addColorStop(0.05, '#cccccc')\n    lightRedFrameFill.addColorStop(0.1, '#999999')\n    lightRedFrameFill.addColorStop(0.17, '#666666')\n    lightRedFrameFill.addColorStop(0.27, '#333333')\n    lightRedFrameFill.addColorStop(1, '#010101')\n    ctx.fillStyle = lightRedFrameFill\n    ctx.fill()\n    ctx.restore()\n\n    // lIGHT_RED_7_E_INNER_CLIP_1_2\n    ctx.save()\n    ctx.scale(1.083333, 1)\n    ctx.beginPath()\n    ctx.arc(\n      0.461538 * imageWidth,\n      0.197841 * imageHeight,\n      0.367346 * imageWidth,\n      0,\n      TWO_PI,\n      false\n    )\n    const lightRedInnerFill = ctx.createLinearGradient(\n      0.5 * imageWidth,\n      0.068345 * imageHeight,\n      0.5 * imageWidth,\n      0.327338 * imageHeight\n    )\n    lightRedInnerFill.addColorStop(0, '#000000')\n    lightRedInnerFill.addColorStop(0.35, '#040404')\n    lightRedInnerFill.addColorStop(0.66, '#000000')\n    lightRedInnerFill.addColorStop(1, '#010101')\n    ctx.fillStyle = lightRedInnerFill\n    ctx.fill()\n    ctx.restore()\n\n    // lIGHT_RED_7_E_LIGHT_EFFECT_2_3\n    ctx.save()\n    ctx.scale(1, 1)\n    ctx.beginPath()\n    ctx.arc(\n      0.5 * imageWidth,\n      0.190647 * imageHeight,\n      0.357142 * imageWidth,\n      0,\n      TWO_PI,\n      false\n    )\n    const lightRedEffectFill = ctx.createRadialGradient(\n      0.5 * imageWidth,\n      0.190647 * imageHeight,\n      0,\n      0.5 * imageWidth,\n      0.190647 * imageHeight,\n      0.362244 * imageWidth\n    )\n    lightRedEffectFill.addColorStop(0, '#000000')\n    lightRedEffectFill.addColorStop(0.88, '#000000')\n    lightRedEffectFill.addColorStop(0.95, '#5e5e5e')\n    lightRedEffectFill.addColorStop(1, '#010101')\n    ctx.fillStyle = lightRedEffectFill\n    ctx.fill()\n    ctx.restore()\n\n    // lIGHT_RED_7_E_INNER_SHADOW_3_4\n    ctx.save()\n    ctx.scale(1, 1)\n    ctx.beginPath()\n    ctx.arc(\n      0.5 * imageWidth,\n      0.190647 * imageHeight,\n      0.357142 * imageWidth,\n      0,\n      TWO_PI,\n      false\n    )\n    const lightRedInnerShadowFill = ctx.createLinearGradient(\n      0.5 * imageWidth,\n      0.068345 * imageHeight,\n      0.5 * imageWidth,\n      0.298561 * imageHeight\n    )\n    lightRedInnerShadowFill.addColorStop(0, '#000000')\n    lightRedInnerShadowFill.addColorStop(1, 'rgba(1, 1, 1, 0)')\n    ctx.fillStyle = lightRedInnerShadowFill\n    ctx.fill()\n    ctx.restore()\n    ctx.restore()\n  }\n\n  const drawRedOn = function (ctx) {\n    ctx.save()\n\n    ctx.save()\n    ctx.scale(1, 1)\n    ctx.beginPath()\n    ctx.arc(\n      0.5 * imageWidth,\n      0.190647 * imageHeight,\n      0.32653 * imageWidth,\n      0,\n      TWO_PI,\n      false\n    )\n    const redOnFill = ctx.createRadialGradient(\n      0.5 * imageWidth,\n      0.190647 * imageHeight,\n      0,\n      0.5 * imageWidth,\n      0.190647 * imageHeight,\n      0.32653 * imageWidth\n    )\n    redOnFill.addColorStop(0, '#ff0000')\n    redOnFill.addColorStop(1, '#410004')\n    ctx.fillStyle = redOnFill\n    ctx.fill()\n    ctx.restore()\n\n    ctx.save()\n    ctx.beginPath()\n    ctx.moveTo(0, 0.194244 * imageHeight)\n    ctx.bezierCurveTo(\n      0,\n      0.291366 * imageHeight,\n      0.224489 * imageWidth,\n      0.370503 * imageHeight,\n      0.5 * imageWidth,\n      0.370503 * imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.77551 * imageWidth,\n      0.370503 * imageHeight,\n      imageWidth,\n      0.291366 * imageHeight,\n      imageWidth,\n      0.190647 * imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.908163 * imageWidth,\n      0.133093 * imageHeight,\n      0.704081 * imageWidth,\n      0.068345 * imageHeight,\n      0.5 * imageWidth,\n      0.068345 * imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.285714 * imageWidth,\n      0.068345 * imageHeight,\n      0.081632 * imageWidth,\n      0.133093 * imageHeight,\n      0,\n      0.194244 * imageHeight\n    )\n    ctx.closePath()\n    const redOnGlowFill = ctx.createRadialGradient(\n      0.5 * imageWidth,\n      0.190647 * imageHeight,\n      0,\n      0.5 * imageWidth,\n      0.190647 * imageHeight,\n      0.515306 * imageWidth\n    )\n    redOnGlowFill.addColorStop(0, '#ff0000')\n    redOnGlowFill.addColorStop(1, 'rgba(118, 5, 1, 0)')\n    ctx.fillStyle = redOnGlowFill\n    ctx.fill()\n    ctx.restore()\n\n    ctx.restore()\n  }\n\n  const drawRedOff = function (ctx) {\n    ctx.save()\n\n    ctx.save()\n    ctx.scale(1, 1)\n    ctx.beginPath()\n    ctx.arc(\n      0.5 * imageWidth,\n      0.190647 * imageHeight,\n      0.32653 * imageWidth,\n      0,\n      TWO_PI,\n      false\n    )\n    const redOffFill = ctx.createRadialGradient(\n      0.5 * imageWidth,\n      0.190647 * imageHeight,\n      0,\n      0.5 * imageWidth,\n      0.190647 * imageHeight,\n      0.32653 * imageWidth\n    )\n    redOffFill.addColorStop(0, 'rgba(255, 0, 0, 0.25)')\n    redOffFill.addColorStop(1, 'rgba(255, 0, 0, 0.05)')\n    ctx.fillStyle = redOffFill\n    ctx.fill()\n    ctx.restore()\n\n    ctx.save()\n    ctx.scale(1, 1)\n    ctx.beginPath()\n    ctx.arc(\n      0.5 * imageWidth,\n      0.190647 * imageHeight,\n      0.32653 * imageWidth,\n      0,\n      TWO_PI,\n      false\n    )\n    const redOffInnerShadowFill = ctx.createRadialGradient(\n      0.5 * imageWidth,\n      0.190647 * imageHeight,\n      0,\n      0.5 * imageWidth,\n      0.190647 * imageHeight,\n      0.32653 * imageWidth\n    )\n    redOffInnerShadowFill.addColorStop(0, 'rgba(1, 1, 1, 0)')\n    redOffInnerShadowFill.addColorStop(0.55, 'rgba(0, 0, 0, 0)')\n    redOffInnerShadowFill.addColorStop(0.5501, 'rgba(0, 0, 0, 0)')\n    redOffInnerShadowFill.addColorStop(0.78, 'rgba(0, 0, 0, 0.12)')\n    redOffInnerShadowFill.addColorStop(0.79, 'rgba(0, 0, 0, 0.13)')\n    redOffInnerShadowFill.addColorStop(1, 'rgba(0, 0, 0, 0.5)')\n    ctx.fillStyle = redOffInnerShadowFill\n    ctx.fill()\n    ctx.restore()\n\n    ctx.fillStyle = ctx.createPattern(hatchBuffer, 'repeat')\n    ctx.fill()\n\n    ctx.restore()\n  }\n\n  function drawToBuffer (width, height, drawFunction) {\n    const buffer = doc.createElement('canvas')\n    buffer.width = width\n    buffer.height = height\n    drawFunction(buffer.getContext('2d'))\n    return buffer\n  }\n\n  const hatchBuffer = drawToBuffer(2, 2, function (ctx) {\n    ctx.save()\n    ctx.strokeStyle = 'rgba(0, 0, 0, 0.1)'\n    ctx.beginPath()\n    ctx.lineTo(0, 0, 1, 0)\n    ctx.lineTo(0, 1, 0, 1)\n    ctx.stroke()\n    ctx.restore()\n  })\n\n  const init = function () {\n    initialized = true\n\n    drawHousing(housingCtx)\n    drawLightGreen(lightGreenCtx)\n    drawGreenOn(greenOnCtx)\n    drawGreenOff(greenOffCtx)\n    drawLightYellow(lightYellowCtx)\n    drawYellowOn(yellowOnCtx)\n    drawYellowOff(yellowOffCtx)\n    drawLightRed(lightRedCtx)\n    drawRedOn(redOnCtx)\n    drawRedOff(redOffCtx)\n  }\n\n  // **************   P U B L I C   M E T H O D S   ********************************\n  this.setRedOn = function (on) {\n    redOn = !!on\n    this.repaint()\n  }\n\n  this.isRedOn = function () {\n    return redOn\n  }\n\n  this.setYellowOn = function (on) {\n    yellowOn = !!on\n    this.repaint()\n  }\n\n  this.isYellowOn = function () {\n    return yellowOn\n  }\n\n  this.setGreenOn = function (on) {\n    greenOn = !!on\n    this.repaint()\n  }\n\n  this.isGreenOn = function () {\n    return greenOn\n  }\n\n  this.repaint = function () {\n    if (!initialized) {\n      init()\n    }\n\n    mainCtx.save()\n    mainCtx.clearRect(0, 0, mainCtx.canvas.width, mainCtx.canvas.height)\n\n    // housing\n    mainCtx.drawImage(housingBuffer, 0, 0)\n\n    // Green light\n    mainCtx.drawImage(lightGreenBuffer, 0, 0)\n\n    if (greenOn) {\n      mainCtx.drawImage(greenOnBuffer, 0, 0)\n    }\n\n    mainCtx.drawImage(greenOffBuffer, 0, 0)\n\n    // Yellow light\n    mainCtx.drawImage(lightYellowBuffer, 0, 0)\n\n    if (yellowOn) {\n      mainCtx.drawImage(yellowOnBuffer, 0, 0)\n    }\n\n    mainCtx.drawImage(yellowOffBuffer, 0, 0)\n\n    // Red light\n    mainCtx.drawImage(lightRedBuffer, 0, 0)\n\n    if (redOn) {\n      mainCtx.drawImage(redOnBuffer, 0, 0)\n    }\n\n    mainCtx.drawImage(redOffBuffer, 0, 0)\n    mainCtx.restore()\n  }\n\n  // Visualize the component\n  this.repaint()\n\n  return this\n}\n\nexport default Trafficlight\n","import { rgbToHsl, doc } from './tools'\n\nconst Lightbulb = function (canvas, parameters) {\n  parameters = parameters || {}\n  // parameters\n  let width = undefined === parameters.width ? 0 : parameters.width\n  let height = undefined === parameters.height ? 0 : parameters.height\n  let glowColor =\n    undefined === parameters.glowColor ? '#ffff00' : parameters.glowColor\n  //\n  let initialized = false\n  let lightOn = false\n  let alpha = 1\n  const offBuffer = doc.createElement('canvas')\n  const offCtx = offBuffer.getContext('2d')\n  const onBuffer = doc.createElement('canvas')\n  const onCtx = onBuffer.getContext('2d')\n  const bulbBuffer = doc.createElement('canvas')\n  const bulbCtx = bulbBuffer.getContext('2d')\n  // End of variables\n\n  // Get the canvas context and clear it\n  const mainCtx = document.getElementById(canvas).getContext('2d')\n\n  // Has a size been specified?\n  if (width === 0) {\n    width = mainCtx.canvas.width\n  }\n  if (height === 0) {\n    height = mainCtx.canvas.height\n  }\n\n  // Get the size\n  mainCtx.canvas.width = width\n  mainCtx.canvas.height = height\n  const size = width < height ? width : height\n  const imageWidth = size\n  const imageHeight = size\n\n  function drawToBuffer (width, height, drawFunction) {\n    const buffer = doc.createElement('canvas')\n    buffer.width = width\n    buffer.height = height\n    drawFunction(buffer.getContext('2d'))\n    return buffer\n  }\n\n  const getColorValues = function (color) {\n    const lookupBuffer = drawToBuffer(1, 1, function (ctx) {\n      ctx.fillStyle = color\n      ctx.beginPath()\n      ctx.rect(0, 0, 1, 1)\n      ctx.fill()\n    })\n\n    const colorData = lookupBuffer.getContext('2d').getImageData(0, 0, 2, 2).data\n    return [colorData[0], colorData[1], colorData[2]]\n  }\n\n  offBuffer.width = imageWidth\n  offBuffer.height = imageHeight\n\n  onBuffer.width = imageWidth\n  onBuffer.height = imageHeight\n\n  bulbBuffer.width = imageWidth\n  bulbBuffer.height = imageHeight\n\n  const drawOff = function (ctx) {\n    ctx.save()\n\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n\n    ctx.save()\n    ctx.beginPath()\n    ctx.moveTo(0.289473 * imageWidth, 0.438596 * imageHeight)\n    ctx.bezierCurveTo(\n      0.289473 * imageWidth,\n      0.561403 * imageHeight,\n      0.385964 * imageWidth,\n      0.605263 * imageHeight,\n      0.385964 * imageWidth,\n      0.745614 * imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.385964 * imageWidth,\n      0.745614 * imageHeight,\n      0.587719 * imageWidth,\n      0.745614 * imageHeight,\n      0.587719 * imageWidth,\n      0.745614 * imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.587719 * imageWidth,\n      0.605263 * imageHeight,\n      0.692982 * imageWidth,\n      0.561403 * imageHeight,\n      0.692982 * imageWidth,\n      0.438596 * imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.692982 * imageWidth,\n      0.324561 * imageHeight,\n      0.605263 * imageWidth,\n      0.22807 * imageHeight,\n      0.5 * imageWidth,\n      0.22807 * imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.385964 * imageWidth,\n      0.22807 * imageHeight,\n      0.289473 * imageWidth,\n      0.324561 * imageHeight,\n      0.289473 * imageWidth,\n      0.438596 * imageHeight\n    )\n    ctx.closePath()\n    const glassOffFill = ctx.createLinearGradient(\n      0,\n      0.289473 * imageHeight,\n      0,\n      0.701754 * imageHeight\n    )\n    glassOffFill.addColorStop(0, '#eeeeee')\n    glassOffFill.addColorStop(0.99, '#999999')\n    glassOffFill.addColorStop(1, '#999999')\n    ctx.fillStyle = glassOffFill\n    ctx.fill()\n    ctx.lineCap = 'butt'\n    ctx.lineJoin = 'round'\n    ctx.lineWidth = 0.008771 * imageWidth\n    ctx.strokeStyle = '#cccccc'\n    ctx.stroke()\n    ctx.restore()\n    ctx.restore()\n  }\n\n  const drawOn = function (ctx) {\n    const data = getColorValues(glowColor)\n    const red = data[0]\n    const green = data[1]\n    const blue = data[2]\n    const hsl = rgbToHsl(red, green, blue)\n\n    ctx.save()\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n    ctx.save()\n    ctx.beginPath()\n    ctx.moveTo(0.289473 * imageWidth, 0.438596 * imageHeight)\n    ctx.bezierCurveTo(\n      0.289473 * imageWidth,\n      0.561403 * imageHeight,\n      0.385964 * imageWidth,\n      0.605263 * imageHeight,\n      0.385964 * imageWidth,\n      0.745614 * imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.385964 * imageWidth,\n      0.745614 * imageHeight,\n      0.587719 * imageWidth,\n      0.745614 * imageHeight,\n      0.587719 * imageWidth,\n      0.745614 * imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.587719 * imageWidth,\n      0.605263 * imageHeight,\n      0.692982 * imageWidth,\n      0.561403 * imageHeight,\n      0.692982 * imageWidth,\n      0.438596 * imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.692982 * imageWidth,\n      0.324561 * imageHeight,\n      0.605263 * imageWidth,\n      0.22807 * imageHeight,\n      0.5 * imageWidth,\n      0.22807 * imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.385964 * imageWidth,\n      0.22807 * imageHeight,\n      0.289473 * imageWidth,\n      0.324561 * imageHeight,\n      0.289473 * imageWidth,\n      0.438596 * imageHeight\n    )\n    ctx.closePath()\n\n    const glassOnFill = ctx.createLinearGradient(\n      0,\n      0.289473 * imageHeight,\n      0,\n      0.701754 * imageHeight\n    )\n\n    if (red === green && green === blue) {\n      glassOnFill.addColorStop(0, 'hsl(0, 60%, 0%)')\n      glassOnFill.addColorStop(1, 'hsl(0, 40%, 0%)')\n    } else {\n      glassOnFill.addColorStop(\n        0,\n        'hsl(' + hsl[0] * 255 + ', ' + hsl[1] * 100 + '%, 70%)'\n      )\n      glassOnFill.addColorStop(\n        1,\n        'hsl(' + hsl[0] * 255 + ', ' + hsl[1] * 100 + '%, 80%)'\n      )\n    }\n    ctx.fillStyle = glassOnFill\n\n    // sets shadow properties\n    ctx.shadowOffsetX = 0\n    ctx.shadowOffsetY = 0\n    ctx.shadowBlur = 30\n    ctx.shadowColor = glowColor\n\n    ctx.fill()\n\n    ctx.lineCap = 'butt'\n    ctx.lineJoin = 'round'\n    ctx.lineWidth = 0.008771 * imageWidth\n    ctx.strokeStyle = 'rgba(' + red + ', ' + green + ', ' + blue + ', 0.4)'\n    ctx.stroke()\n\n    ctx.restore()\n\n    ctx.restore()\n  }\n\n  const drawBulb = function (ctx) {\n    ctx.save()\n\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n\n    ctx.save()\n    ctx.beginPath()\n    ctx.moveTo(0.350877 * imageWidth, 0.333333 * imageHeight)\n    ctx.bezierCurveTo(\n      0.350877 * imageWidth,\n      0.280701 * imageHeight,\n      0.41228 * imageWidth,\n      0.236842 * imageHeight,\n      0.5 * imageWidth,\n      0.236842 * imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.578947 * imageWidth,\n      0.236842 * imageHeight,\n      0.64035 * imageWidth,\n      0.280701 * imageHeight,\n      0.64035 * imageWidth,\n      0.333333 * imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.64035 * imageWidth,\n      0.385964 * imageHeight,\n      0.578947 * imageWidth,\n      0.429824 * imageHeight,\n      0.5 * imageWidth,\n      0.429824 * imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.41228 * imageWidth,\n      0.429824 * imageHeight,\n      0.350877 * imageWidth,\n      0.385964 * imageHeight,\n      0.350877 * imageWidth,\n      0.333333 * imageHeight\n    )\n    ctx.closePath()\n    const highlight = ctx.createLinearGradient(\n      0,\n      0.245614 * imageHeight,\n      0,\n      0.429824 * imageHeight\n    )\n    highlight.addColorStop(0, '#ffffff')\n    highlight.addColorStop(0.99, 'rgba(255, 255, 255, 0)')\n    highlight.addColorStop(1, 'rgba(255, 255, 255, 0)')\n    ctx.fillStyle = highlight\n    ctx.fill()\n    ctx.restore()\n\n    // winding\n    ctx.save()\n    ctx.beginPath()\n    ctx.moveTo(0.377192 * imageWidth, 0.745614 * imageHeight)\n    ctx.bezierCurveTo(\n      0.377192 * imageWidth,\n      0.745614 * imageHeight,\n      0.429824 * imageWidth,\n      0.72807 * imageHeight,\n      0.491228 * imageWidth,\n      0.72807 * imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.561403 * imageWidth,\n      0.72807 * imageHeight,\n      0.605263 * imageWidth,\n      0.736842 * imageHeight,\n      0.605263 * imageWidth,\n      0.736842 * imageHeight\n    )\n    ctx.lineTo(0.605263 * imageWidth, 0.763157 * imageHeight)\n    ctx.lineTo(0.596491 * imageWidth, 0.780701 * imageHeight)\n    ctx.lineTo(0.605263 * imageWidth, 0.798245 * imageHeight)\n    ctx.lineTo(0.596491 * imageWidth, 0.815789 * imageHeight)\n    ctx.lineTo(0.605263 * imageWidth, 0.833333 * imageHeight)\n    ctx.lineTo(0.596491 * imageWidth, 0.850877 * imageHeight)\n    ctx.lineTo(0.605263 * imageWidth, 0.868421 * imageHeight)\n    ctx.lineTo(0.596491 * imageWidth, 0.885964 * imageHeight)\n    ctx.lineTo(0.605263 * imageWidth, 0.894736 * imageHeight)\n    ctx.bezierCurveTo(\n      0.605263 * imageWidth,\n      0.894736 * imageHeight,\n      0.570175 * imageWidth,\n      0.95614 * imageHeight,\n      0.535087 * imageWidth,\n      0.991228 * imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.526315 * imageWidth,\n      0.991228 * imageHeight,\n      0.517543 * imageWidth,\n      imageHeight,\n      0.5 * imageWidth,\n      imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.482456 * imageWidth,\n      imageHeight,\n      0.473684 * imageWidth,\n      imageHeight,\n      0.464912 * imageWidth,\n      0.991228 * imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.421052 * imageWidth,\n      0.947368 * imageHeight,\n      0.394736 * imageWidth,\n      0.903508 * imageHeight,\n      0.394736 * imageWidth,\n      0.903508 * imageHeight\n    )\n    ctx.lineTo(0.394736 * imageWidth, 0.894736 * imageHeight)\n    ctx.lineTo(0.385964 * imageWidth, 0.885964 * imageHeight)\n    ctx.lineTo(0.394736 * imageWidth, 0.868421 * imageHeight)\n    ctx.lineTo(0.385964 * imageWidth, 0.850877 * imageHeight)\n    ctx.lineTo(0.394736 * imageWidth, 0.833333 * imageHeight)\n    ctx.lineTo(0.385964 * imageWidth, 0.815789 * imageHeight)\n    ctx.lineTo(0.394736 * imageWidth, 0.798245 * imageHeight)\n    ctx.lineTo(0.377192 * imageWidth, 0.789473 * imageHeight)\n    ctx.lineTo(0.394736 * imageWidth, 0.771929 * imageHeight)\n    ctx.lineTo(0.377192 * imageWidth, 0.763157 * imageHeight)\n    ctx.lineTo(0.377192 * imageWidth, 0.745614 * imageHeight)\n    ctx.closePath()\n    const winding = ctx.createLinearGradient(\n      0.473684 * imageWidth,\n      0.72807 * imageHeight,\n      0.484702 * imageWidth,\n      0.938307 * imageHeight\n    )\n    winding.addColorStop(0, '#333333')\n    winding.addColorStop(0.04, '#d9dad6')\n    winding.addColorStop(0.19, '#e4e5e0')\n    winding.addColorStop(0.24, '#979996')\n    winding.addColorStop(0.31, '#fbffff')\n    winding.addColorStop(0.4, '#818584')\n    winding.addColorStop(0.48, '#f5f7f4')\n    winding.addColorStop(0.56, '#959794')\n    winding.addColorStop(0.64, '#f2f2f0')\n    winding.addColorStop(0.7, '#828783')\n    winding.addColorStop(0.78, '#fcfcfc')\n    winding.addColorStop(1, '#666666')\n    ctx.fillStyle = winding\n    ctx.fill()\n    ctx.restore()\n\n    // winding\n    ctx.save()\n    ctx.beginPath()\n    ctx.moveTo(0.377192 * imageWidth, 0.745614 * imageHeight)\n    ctx.bezierCurveTo(\n      0.377192 * imageWidth,\n      0.745614 * imageHeight,\n      0.429824 * imageWidth,\n      0.72807 * imageHeight,\n      0.491228 * imageWidth,\n      0.72807 * imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.561403 * imageWidth,\n      0.72807 * imageHeight,\n      0.605263 * imageWidth,\n      0.736842 * imageHeight,\n      0.605263 * imageWidth,\n      0.736842 * imageHeight\n    )\n    ctx.lineTo(0.605263 * imageWidth, 0.763157 * imageHeight)\n    ctx.lineTo(0.596491 * imageWidth, 0.780701 * imageHeight)\n    ctx.lineTo(0.605263 * imageWidth, 0.798245 * imageHeight)\n    ctx.lineTo(0.596491 * imageWidth, 0.815789 * imageHeight)\n    ctx.lineTo(0.605263 * imageWidth, 0.833333 * imageHeight)\n    ctx.lineTo(0.596491 * imageWidth, 0.850877 * imageHeight)\n    ctx.lineTo(0.605263 * imageWidth, 0.868421 * imageHeight)\n    ctx.lineTo(0.596491 * imageWidth, 0.885964 * imageHeight)\n    ctx.lineTo(0.605263 * imageWidth, 0.894736 * imageHeight)\n    ctx.bezierCurveTo(\n      0.605263 * imageWidth,\n      0.894736 * imageHeight,\n      0.570175 * imageWidth,\n      0.95614 * imageHeight,\n      0.535087 * imageWidth,\n      0.991228 * imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.526315 * imageWidth,\n      0.991228 * imageHeight,\n      0.517543 * imageWidth,\n      imageHeight,\n      0.5 * imageWidth,\n      imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.482456 * imageWidth,\n      imageHeight,\n      0.473684 * imageWidth,\n      imageHeight,\n      0.464912 * imageWidth,\n      0.991228 * imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.421052 * imageWidth,\n      0.947368 * imageHeight,\n      0.394736 * imageWidth,\n      0.903508 * imageHeight,\n      0.394736 * imageWidth,\n      0.903508 * imageHeight\n    )\n    ctx.lineTo(0.394736 * imageWidth, 0.894736 * imageHeight)\n    ctx.lineTo(0.385964 * imageWidth, 0.885964 * imageHeight)\n    ctx.lineTo(0.394736 * imageWidth, 0.868421 * imageHeight)\n    ctx.lineTo(0.385964 * imageWidth, 0.850877 * imageHeight)\n    ctx.lineTo(0.394736 * imageWidth, 0.833333 * imageHeight)\n    ctx.lineTo(0.385964 * imageWidth, 0.815789 * imageHeight)\n    ctx.lineTo(0.394736 * imageWidth, 0.798245 * imageHeight)\n    ctx.lineTo(0.377192 * imageWidth, 0.789473 * imageHeight)\n    ctx.lineTo(0.394736 * imageWidth, 0.771929 * imageHeight)\n    ctx.lineTo(0.377192 * imageWidth, 0.763157 * imageHeight)\n    ctx.lineTo(0.377192 * imageWidth, 0.745614 * imageHeight)\n    ctx.closePath()\n    const winding1 = ctx.createLinearGradient(\n      0.377192 * imageWidth,\n      0.789473 * imageHeight,\n      0.605263 * imageWidth,\n      0.789473 * imageHeight\n    )\n    winding1.addColorStop(0, 'rgba(0, 0, 0, 0.4)')\n    winding1.addColorStop(0.15, 'rgba(0, 0, 0, 0.32)')\n    winding1.addColorStop(0.85, 'rgba(0, 0, 0, 0.33)')\n    winding1.addColorStop(1, 'rgba(0, 0, 0, 0.4)')\n    ctx.fillStyle = winding1\n    ctx.fill()\n    ctx.restore()\n\n    // contact plate\n    ctx.save()\n    ctx.beginPath()\n    ctx.moveTo(0.421052 * imageWidth, 0.947368 * imageHeight)\n    ctx.bezierCurveTo(\n      0.438596 * imageWidth,\n      0.95614 * imageHeight,\n      0.447368 * imageWidth,\n      0.973684 * imageHeight,\n      0.464912 * imageWidth,\n      0.991228 * imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.473684 * imageWidth,\n      imageHeight,\n      0.482456 * imageWidth,\n      imageHeight,\n      0.5 * imageWidth,\n      imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.517543 * imageWidth,\n      imageHeight,\n      0.526315 * imageWidth,\n      0.991228 * imageHeight,\n      0.535087 * imageWidth,\n      0.991228 * imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.543859 * imageWidth,\n      0.982456 * imageHeight,\n      0.561403 * imageWidth,\n      0.95614 * imageHeight,\n      0.578947 * imageWidth,\n      0.947368 * imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.552631 * imageWidth,\n      0.938596 * imageHeight,\n      0.526315 * imageWidth,\n      0.938596 * imageHeight,\n      0.5 * imageWidth,\n      0.938596 * imageHeight\n    )\n    ctx.bezierCurveTo(\n      0.473684 * imageWidth,\n      0.938596 * imageHeight,\n      0.447368 * imageWidth,\n      0.938596 * imageHeight,\n      0.421052 * imageWidth,\n      0.947368 * imageHeight\n    )\n    ctx.closePath()\n    const contactPlate = ctx.createLinearGradient(\n      0,\n      0.938596 * imageHeight,\n      0,\n      imageHeight\n    )\n    contactPlate.addColorStop(0, '#050a06')\n    contactPlate.addColorStop(0.61, '#070602')\n    contactPlate.addColorStop(0.71, '#999288')\n    contactPlate.addColorStop(0.83, '#010101')\n    contactPlate.addColorStop(1, '#000000')\n    ctx.fillStyle = contactPlate\n    ctx.fill()\n    ctx.restore()\n    ctx.restore()\n  }\n\n  const clearCanvas = function (ctx) {\n    // Store the current transformation matrix\n    ctx.save()\n\n    // Use the identity matrix while clearing the canvas\n    ctx.setTransform(1, 0, 0, 1, 0, 0)\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n\n    // Restore the transform\n    ctx.restore()\n  }\n\n  const init = function () {\n    initialized = true\n    drawOff(offCtx)\n    drawOn(onCtx)\n    drawBulb(bulbCtx)\n  }\n\n  // **************   P U B L I C   M E T H O D S   ********************************\n  this.setOn = function (on) {\n    lightOn = !!on\n    this.repaint()\n    return this\n  }\n\n  this.isOn = function () {\n    return lightOn\n  }\n\n  this.setAlpha = function (a) {\n    alpha = a\n    this.repaint()\n    return this\n  }\n\n  this.getAlpha = function () {\n    return alpha\n  }\n\n  this.setGlowColor = function (color) {\n    glowColor = color\n    init()\n    this.repaint()\n    return this\n  }\n\n  this.getGlowColor = function () {\n    return glowColor\n  }\n\n  // Component visualization\n  this.repaint = function () {\n    if (!initialized) {\n      init()\n    }\n\n    clearCanvas(mainCtx)\n\n    mainCtx.save()\n\n    mainCtx.drawImage(offBuffer, 0, 0)\n\n    mainCtx.globalAlpha = alpha\n    if (lightOn) {\n      mainCtx.drawImage(onBuffer, 0, 0)\n    }\n    mainCtx.globalAlpha = 1\n    mainCtx.drawImage(bulbBuffer, 0, 0)\n    mainCtx.restore()\n  }\n\n  this.repaint()\n\n  return this\n}\n\nexport default Lightbulb\n","import Radial from './Radial'\nimport RadialBargraph from './RadialBargraph'\nimport RadialVertical from './RadialVertical'\nimport Linear from './Linear'\nimport LinearBargraph from './LinearBargraph'\nimport DisplaySingle from './DisplaySingle'\nimport DisplayMulti from './DisplayMulti'\nimport Level from './Level'\nimport Compass from './Compass'\nimport WindDirection from './WindDirection'\nimport Horizon from './Horizon'\nimport Led from './Led'\nimport Clock from './Clock'\nimport Battery from './Battery'\nimport StopWatch from './StopWatch'\nimport Altimeter from './Altimeter'\nimport TrafficLight from './TrafficLight'\nimport LightBulb from './LightBulb'\nimport Odometer from './Odometer'\nimport drawFrame from './drawFrame'\nimport drawBackground from './drawBackground'\nimport drawForeground from './drawForeground'\nimport {\n  rgbaColor,\n  ConicalGradient,\n  gradientWrapper,\n  setAlpha,\n  getColorFromFraction,\n  Section\n} from './tools'\n\nimport {\n  BackgroundColor,\n  LcdColor,\n  ColorDef,\n  LedColor,\n  GaugeType,\n  Orientation,\n  KnobType,\n  KnobStyle,\n  FrameDesign,\n  PointerType,\n  ForegroundType,\n  LabelNumberFormat,\n  TickLabelOrientation,\n  TrendState\n} from './definitions'\n\nexport { Radial }\nexport { RadialBargraph }\nexport { RadialVertical }\nexport { Linear }\nexport { LinearBargraph }\nexport { DisplaySingle }\nexport { DisplayMulti }\nexport { Level }\nexport { Compass }\nexport { WindDirection }\nexport { Horizon }\nexport { Led }\nexport { Clock }\nexport { Battery }\nexport { StopWatch }\nexport { Altimeter }\nexport { TrafficLight }\nexport { LightBulb }\nexport { Odometer }\n\n// Images\nexport { drawFrame }\nexport { drawBackground }\nexport { drawForeground }\n\n// Tools\nexport { rgbaColor }\nexport { ConicalGradient }\nexport { setAlpha }\nexport { getColorFromFraction }\nexport { gradientWrapper }\n\n// Constants\nexport { BackgroundColor }\nexport { LcdColor }\nexport { ColorDef }\nexport { LedColor }\nexport { GaugeType }\nexport { Orientation }\nexport { FrameDesign }\nexport { PointerType }\nexport { ForegroundType }\nexport { KnobType }\nexport { KnobStyle }\nexport { LabelNumberFormat }\nexport { TickLabelOrientation }\nexport { TrendState }\n\n// Other\nexport { Section }\n","\nimport * as steelseries from '../src/steelseries'\n\nwindow.steelseries = steelseries\n"]}